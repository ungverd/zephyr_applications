
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 49 00 20 f9 3d 00 00 a1 9b 01 00 cd 3d 00 00     .I. .=.......=..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	cd 3d 00 00 cd 3d 00 00 cd 3d 00 00 00 00 00 00     .=...=...=......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	35 3a 00 00 cd 3d 00 00 00 00 00 00 e1 39 00 00     5:...=.......9..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	cd 3d 00 00                                         .=..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	e5 3a 00 00 dd 1e 01 00 e5 3a 00 00 e5 3a 00 00     .:.......:...:..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
			switch (*fmt) {
  c0:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00 e5 3a 00 00     .:...:...:...:..
  d0:	e5 3a 00 00 e5 3a 00 00 e5 3a 00 00                 .:...:...:..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
				align = VA_STACK_ALIGN(void *);
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
			switch (*fmt) {
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
		buf = (void *) ROUND_UP(buf, align);
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
		if (is_str_arg) {
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
			int v = va_arg(ap, int);
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				arg_idx--;
     170:	ea94 0f05 	teq	r4, r5
				parsing = false;
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
				continue;
     178:	f1a4 0401 	sub.w	r4, r4, #1
				if (fmt[-1] == 'l') {
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
					if (fmt[-2] == 'l') {
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
				parsing = false;
     18a:	1880      	adds	r0, r0, r2
					if (fmt[-2] == 'l') {
     18c:	f141 0100 	adc.w	r1, r1, #0
						align = VA_STACK_ALIGN(long long);
     190:	fa03 f20e 	lsl.w	r2, r3, lr
				size = sizeof(void *);
     194:	1880      	adds	r0, r0, r2
					v.ld = va_arg(ap, long double);
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
				buf = (void *) ROUND_UP(buf, align);
     19e:	f1a5 0520 	sub.w	r5, r5, #32
					v.ld = va_arg(ap, long double);
     1a2:	f10e 0e20 	add.w	lr, lr, #32
				buf = (void *) ROUND_UP(buf, align);
     1a6:	2a01      	cmp	r2, #1
				if (buf0 != NULL) {
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
					if (BUF_OFFSET + size > len) {
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
						*(long double *)buf = v.ld;
     1b6:	18c0      	adds	r0, r0, r3
				buf += size;
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
				parsing = false;
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
			switch (*fmt) {
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
			if (*++fmt == '\0') {
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
			if (!parsing) {
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
				if (*fmt == '%') {
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
					arg_idx++;
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4>
					parsing = true;
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
				align = VA_STACK_ALIGN(size_t);
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
			switch (*fmt) {
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
				parsing = false;
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
					return -EINVAL;
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
			long long v = va_arg(ap, long long);
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20a:	ea41 0105 	orr.w	r1, r1, r5
				}
			}
			buf += sizeof(long long);
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
		} else if (size == sizeof(int)) {
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
			int v = va_arg(ap, int);
     21a:	3c01      	subs	r4, #1
			if (buf0 != NULL) {
     21c:	bf28      	it	cs
		} else if (size == sizeof(long long)) {
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
			long long v = va_arg(ap, long long);
     222:	d2e9      	bcs.n	1f8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
			if (buf0 != NULL) {
     22e:	fab1 f381 	clz	r3, r1
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
			s = va_arg(ap, char *);
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
			if (is_ro && !do_ro) {
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     256:	f102 0214 	add.w	r2, r2, #20
				if (buf0 != NULL) {
     25a:	bfd8      	it	le
					str_ptr_pos[s_idx] = s_ptr_idx;
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
					str_ptr_arg[s_idx] = arg_idx;
     26e:	4090      	lslle	r0, r2
					if (is_ro) {
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
						s_ro_cnt++;
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
				s_idx++;
     284:	340c      	adds	r4, #12
					if (BUF_OFFSET + size > len) {
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
			switch (*fmt) {
     290:	fa20 f004 	lsr.w	r0, r0, r4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
				} else if (is_ro) {
     29c:	fa21 f304 	lsr.w	r3, r1, r4
					len += 1;
     2a0:	ea45 0103 	orr.w	r1, r5, r3
				} else if (rws_pos_en) {
     2a4:	bd30      	pop	{r4, r5, pc}
					len += 2;
     2a6:	f1c4 040c 	rsb	r4, r4, #12
				} else if (rws_pos_en) {
     2aa:	f1c4 0220 	rsb	r2, r4, #32
					len += strlen(s) + 1 + 1;
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2c6:	f094 0f00 	teq	r4, #0
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
	*(char **)buf0 = NULL;
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	bf18      	it	ne
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
	if (rws_pos_en) {
     2e4:	d029      	beq.n	33a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e6:	ea94 0f05 	teq	r4, r5
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ea:	bf08      	it	eq
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
		for (i = 0; i < s_idx; i++) {
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
			*buf++ = str_ptr_arg[i];
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
		if (BUF_OFFSET + 1 + size > len) {
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
			*buf++ = str_ptr_arg[i];
     30e:	d105      	bne.n	31c <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c>
	for (i = 0; i < s_idx; i++) {
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
		pkg_hdr->desc.rw_str_cnt = 0;
     31a:	bd30      	pop	{r4, r5, pc}
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
			if (BUF_OFFSET + 1 > len) {
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
			if (BUF_OFFSET + 1 > len) {
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
			*buf++ = pos;
     334:	f04f 0000 	mov.w	r0, #0
		for (i = 0; i < s_idx; i++) {
     338:	bd30      	pop	{r4, r5, pc}
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
		if (rws_pos_en) {
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
			*buf++ = str_ptr_arg[i];
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
			size = 0;
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
		if (BUF_OFFSET + 1 + size > len) {
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
		*buf++ = str_ptr_pos[i];
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
		memcpy(buf, s, size);
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
		buf += size;
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
	for (i = 0; i < s_idx; i++) {
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
			size = strlen(s) + 1;
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
		return -EFAULT;
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_MAIN_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_COMPANY_ID+0x43>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_BT_RX_STACK_SIZE+0x5c>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_RX_STACK_SIZE+0x28>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_COMPANY_ID+0x9f>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xa8>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_COMPANY_ID+0x29>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_COMPANY_ID+0x6d>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_COMPANY_ID+0x89>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_COMPANY_ID+0x9b>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <__z_interrupt_stack_SIZEOF+0x8>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <__z_interrupt_stack_SIZEOF+0x1c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     87a:	e712      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>

0000087c <__aeabi_d2f>:
     87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     884:	bf24      	itt	cs
     886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     88a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     88e:	d90d      	bls.n	8ac <__aeabi_d2f+0x30>
     890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     89c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8a4:	bf08      	it	eq
     8a6:	f020 0001 	biceq.w	r0, r0, #1
     8aa:	4770      	bx	lr
     8ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8b0:	d121      	bne.n	8f6 <__aeabi_d2f+0x7a>
     8b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8b6:	bfbc      	itt	lt
     8b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8bc:	4770      	bxlt	lr
     8be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8c6:	f1c2 0218 	rsb	r2, r2, #24
     8ca:	f1c2 0c20 	rsb	ip, r2, #32
     8ce:	fa10 f30c 	lsls.w	r3, r0, ip
     8d2:	fa20 f002 	lsr.w	r0, r0, r2
     8d6:	bf18      	it	ne
     8d8:	f040 0001 	orrne.w	r0, r0, #1
     8dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     8e4:	fa03 fc0c 	lsl.w	ip, r3, ip
     8e8:	ea40 000c 	orr.w	r0, r0, ip
     8ec:	fa23 f302 	lsr.w	r3, r3, r2
     8f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     8f4:	e7cc      	b.n	890 <__aeabi_d2f+0x14>
     8f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     8fa:	d107      	bne.n	90c <__aeabi_d2f+0x90>
     8fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     900:	bf1e      	ittt	ne
     902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     90a:	4770      	bxne	lr
     90c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <__aeabi_ldivmod>:
     91c:	b97b      	cbnz	r3, 93e <__aeabi_ldivmod+0x22>
     91e:	b972      	cbnz	r2, 93e <__aeabi_ldivmod+0x22>
     920:	2900      	cmp	r1, #0
     922:	bfbe      	ittt	lt
     924:	2000      	movlt	r0, #0
     926:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     92a:	e006      	blt.n	93a <__aeabi_ldivmod+0x1e>
     92c:	bf08      	it	eq
     92e:	2800      	cmpeq	r0, #0
     930:	bf1c      	itt	ne
     932:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     936:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     93a:	f000 b857 	b.w	9ec <__aeabi_idiv0>
     93e:	f1ad 0c08 	sub.w	ip, sp, #8
     942:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     946:	2900      	cmp	r1, #0
     948:	db09      	blt.n	95e <__aeabi_ldivmod+0x42>
     94a:	2b00      	cmp	r3, #0
     94c:	db1a      	blt.n	984 <__aeabi_ldivmod+0x68>
     94e:	f000 f84f 	bl	9f0 <__udivmoddi4>
     952:	f8dd e004 	ldr.w	lr, [sp, #4]
     956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     95a:	b004      	add	sp, #16
     95c:	4770      	bx	lr
     95e:	4240      	negs	r0, r0
     960:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     964:	2b00      	cmp	r3, #0
     966:	db1b      	blt.n	9a0 <__aeabi_ldivmod+0x84>
     968:	f000 f842 	bl	9f0 <__udivmoddi4>
     96c:	f8dd e004 	ldr.w	lr, [sp, #4]
     970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     974:	b004      	add	sp, #16
     976:	4240      	negs	r0, r0
     978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     97c:	4252      	negs	r2, r2
     97e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     982:	4770      	bx	lr
     984:	4252      	negs	r2, r2
     986:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     98a:	f000 f831 	bl	9f0 <__udivmoddi4>
     98e:	f8dd e004 	ldr.w	lr, [sp, #4]
     992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     996:	b004      	add	sp, #16
     998:	4240      	negs	r0, r0
     99a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     99e:	4770      	bx	lr
     9a0:	4252      	negs	r2, r2
     9a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9a6:	f000 f823 	bl	9f0 <__udivmoddi4>
     9aa:	f8dd e004 	ldr.w	lr, [sp, #4]
     9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9b2:	b004      	add	sp, #16
     9b4:	4252      	negs	r2, r2
     9b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     9ba:	4770      	bx	lr

000009bc <__aeabi_uldivmod>:
     9bc:	b953      	cbnz	r3, 9d4 <__aeabi_uldivmod+0x18>
     9be:	b94a      	cbnz	r2, 9d4 <__aeabi_uldivmod+0x18>
     9c0:	2900      	cmp	r1, #0
     9c2:	bf08      	it	eq
     9c4:	2800      	cmpeq	r0, #0
     9c6:	bf1c      	itt	ne
     9c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9d0:	f000 b80c 	b.w	9ec <__aeabi_idiv0>
     9d4:	f1ad 0c08 	sub.w	ip, sp, #8
     9d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9dc:	f000 f808 	bl	9f0 <__udivmoddi4>
     9e0:	f8dd e004 	ldr.w	lr, [sp, #4]
     9e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9e8:	b004      	add	sp, #16
     9ea:	4770      	bx	lr

000009ec <__aeabi_idiv0>:
     9ec:	4770      	bx	lr
     9ee:	bf00      	nop

000009f0 <__udivmoddi4>:
     9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9f4:	4686      	mov	lr, r0
     9f6:	468c      	mov	ip, r1
     9f8:	4608      	mov	r0, r1
     9fa:	9e08      	ldr	r6, [sp, #32]
     9fc:	4615      	mov	r5, r2
     9fe:	4674      	mov	r4, lr
     a00:	4619      	mov	r1, r3
     a02:	2b00      	cmp	r3, #0
     a04:	f040 80c2 	bne.w	b8c <__udivmoddi4+0x19c>
     a08:	4285      	cmp	r5, r0
     a0a:	fab2 f282 	clz	r2, r2
     a0e:	d945      	bls.n	a9c <__udivmoddi4+0xac>
     a10:	b14a      	cbz	r2, a26 <__udivmoddi4+0x36>
     a12:	f1c2 0320 	rsb	r3, r2, #32
     a16:	fa00 fc02 	lsl.w	ip, r0, r2
     a1a:	fa2e f303 	lsr.w	r3, lr, r3
     a1e:	4095      	lsls	r5, r2
     a20:	ea43 0c0c 	orr.w	ip, r3, ip
     a24:	4094      	lsls	r4, r2
     a26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a2a:	b2a8      	uxth	r0, r5
     a2c:	fbbc f8fe 	udiv	r8, ip, lr
     a30:	0c23      	lsrs	r3, r4, #16
     a32:	fb0e cc18 	mls	ip, lr, r8, ip
     a36:	fb08 f900 	mul.w	r9, r8, r0
     a3a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     a3e:	4599      	cmp	r9, r3
     a40:	d928      	bls.n	a94 <__udivmoddi4+0xa4>
     a42:	18eb      	adds	r3, r5, r3
     a44:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     a48:	d204      	bcs.n	a54 <__udivmoddi4+0x64>
     a4a:	4599      	cmp	r9, r3
     a4c:	d902      	bls.n	a54 <__udivmoddi4+0x64>
     a4e:	f1a8 0702 	sub.w	r7, r8, #2
     a52:	442b      	add	r3, r5
     a54:	eba3 0309 	sub.w	r3, r3, r9
     a58:	b2a4      	uxth	r4, r4
     a5a:	fbb3 fcfe 	udiv	ip, r3, lr
     a5e:	fb0e 331c 	mls	r3, lr, ip, r3
     a62:	fb0c f000 	mul.w	r0, ip, r0
     a66:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a6a:	42a0      	cmp	r0, r4
     a6c:	d914      	bls.n	a98 <__udivmoddi4+0xa8>
     a6e:	192c      	adds	r4, r5, r4
     a70:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     a74:	d204      	bcs.n	a80 <__udivmoddi4+0x90>
     a76:	42a0      	cmp	r0, r4
     a78:	d902      	bls.n	a80 <__udivmoddi4+0x90>
     a7a:	f1ac 0302 	sub.w	r3, ip, #2
     a7e:	442c      	add	r4, r5
     a80:	1a24      	subs	r4, r4, r0
     a82:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     a86:	b11e      	cbz	r6, a90 <__udivmoddi4+0xa0>
     a88:	40d4      	lsrs	r4, r2
     a8a:	2300      	movs	r3, #0
     a8c:	6034      	str	r4, [r6, #0]
     a8e:	6073      	str	r3, [r6, #4]
     a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a94:	4647      	mov	r7, r8
     a96:	e7dd      	b.n	a54 <__udivmoddi4+0x64>
     a98:	4663      	mov	r3, ip
     a9a:	e7f1      	b.n	a80 <__udivmoddi4+0x90>
     a9c:	bb92      	cbnz	r2, b04 <__udivmoddi4+0x114>
     a9e:	1b43      	subs	r3, r0, r5
     aa0:	2101      	movs	r1, #1
     aa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     aa6:	b2af      	uxth	r7, r5
     aa8:	fbb3 fcfe 	udiv	ip, r3, lr
     aac:	0c20      	lsrs	r0, r4, #16
     aae:	fb0e 331c 	mls	r3, lr, ip, r3
     ab2:	fb0c f807 	mul.w	r8, ip, r7
     ab6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     aba:	4598      	cmp	r8, r3
     abc:	d962      	bls.n	b84 <__udivmoddi4+0x194>
     abe:	18eb      	adds	r3, r5, r3
     ac0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     ac4:	d204      	bcs.n	ad0 <__udivmoddi4+0xe0>
     ac6:	4598      	cmp	r8, r3
     ac8:	d902      	bls.n	ad0 <__udivmoddi4+0xe0>
     aca:	f1ac 0002 	sub.w	r0, ip, #2
     ace:	442b      	add	r3, r5
     ad0:	eba3 0308 	sub.w	r3, r3, r8
     ad4:	b2a4      	uxth	r4, r4
     ad6:	fbb3 fcfe 	udiv	ip, r3, lr
     ada:	fb0e 331c 	mls	r3, lr, ip, r3
     ade:	fb0c f707 	mul.w	r7, ip, r7
     ae2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ae6:	42a7      	cmp	r7, r4
     ae8:	d94e      	bls.n	b88 <__udivmoddi4+0x198>
     aea:	192c      	adds	r4, r5, r4
     aec:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     af0:	d204      	bcs.n	afc <__udivmoddi4+0x10c>
     af2:	42a7      	cmp	r7, r4
     af4:	d902      	bls.n	afc <__udivmoddi4+0x10c>
     af6:	f1ac 0302 	sub.w	r3, ip, #2
     afa:	442c      	add	r4, r5
     afc:	1be4      	subs	r4, r4, r7
     afe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b02:	e7c0      	b.n	a86 <__udivmoddi4+0x96>
     b04:	f1c2 0320 	rsb	r3, r2, #32
     b08:	fa20 f103 	lsr.w	r1, r0, r3
     b0c:	4095      	lsls	r5, r2
     b0e:	4090      	lsls	r0, r2
     b10:	fa2e f303 	lsr.w	r3, lr, r3
     b14:	4303      	orrs	r3, r0
     b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b1a:	b2af      	uxth	r7, r5
     b1c:	fbb1 fcfe 	udiv	ip, r1, lr
     b20:	fb0e 101c 	mls	r0, lr, ip, r1
     b24:	0c19      	lsrs	r1, r3, #16
     b26:	fb0c f807 	mul.w	r8, ip, r7
     b2a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     b2e:	4588      	cmp	r8, r1
     b30:	fa04 f402 	lsl.w	r4, r4, r2
     b34:	d922      	bls.n	b7c <__udivmoddi4+0x18c>
     b36:	1869      	adds	r1, r5, r1
     b38:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b3c:	d204      	bcs.n	b48 <__udivmoddi4+0x158>
     b3e:	4588      	cmp	r8, r1
     b40:	d902      	bls.n	b48 <__udivmoddi4+0x158>
     b42:	f1ac 0002 	sub.w	r0, ip, #2
     b46:	4429      	add	r1, r5
     b48:	eba1 0108 	sub.w	r1, r1, r8
     b4c:	b29b      	uxth	r3, r3
     b4e:	fbb1 fcfe 	udiv	ip, r1, lr
     b52:	fb0e 111c 	mls	r1, lr, ip, r1
     b56:	fb0c f707 	mul.w	r7, ip, r7
     b5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     b5e:	429f      	cmp	r7, r3
     b60:	d90e      	bls.n	b80 <__udivmoddi4+0x190>
     b62:	18eb      	adds	r3, r5, r3
     b64:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     b68:	d204      	bcs.n	b74 <__udivmoddi4+0x184>
     b6a:	429f      	cmp	r7, r3
     b6c:	d902      	bls.n	b74 <__udivmoddi4+0x184>
     b6e:	f1ac 0102 	sub.w	r1, ip, #2
     b72:	442b      	add	r3, r5
     b74:	1bdb      	subs	r3, r3, r7
     b76:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     b7a:	e792      	b.n	aa2 <__udivmoddi4+0xb2>
     b7c:	4660      	mov	r0, ip
     b7e:	e7e3      	b.n	b48 <__udivmoddi4+0x158>
     b80:	4661      	mov	r1, ip
     b82:	e7f7      	b.n	b74 <__udivmoddi4+0x184>
     b84:	4660      	mov	r0, ip
     b86:	e7a3      	b.n	ad0 <__udivmoddi4+0xe0>
     b88:	4663      	mov	r3, ip
     b8a:	e7b7      	b.n	afc <__udivmoddi4+0x10c>
     b8c:	4283      	cmp	r3, r0
     b8e:	d906      	bls.n	b9e <__udivmoddi4+0x1ae>
     b90:	b916      	cbnz	r6, b98 <__udivmoddi4+0x1a8>
     b92:	2100      	movs	r1, #0
     b94:	4608      	mov	r0, r1
     b96:	e77b      	b.n	a90 <__udivmoddi4+0xa0>
     b98:	e9c6 e000 	strd	lr, r0, [r6]
     b9c:	e7f9      	b.n	b92 <__udivmoddi4+0x1a2>
     b9e:	fab3 f783 	clz	r7, r3
     ba2:	b98f      	cbnz	r7, bc8 <__udivmoddi4+0x1d8>
     ba4:	4283      	cmp	r3, r0
     ba6:	d301      	bcc.n	bac <__udivmoddi4+0x1bc>
     ba8:	4572      	cmp	r2, lr
     baa:	d808      	bhi.n	bbe <__udivmoddi4+0x1ce>
     bac:	ebbe 0402 	subs.w	r4, lr, r2
     bb0:	eb60 0303 	sbc.w	r3, r0, r3
     bb4:	2001      	movs	r0, #1
     bb6:	469c      	mov	ip, r3
     bb8:	b91e      	cbnz	r6, bc2 <__udivmoddi4+0x1d2>
     bba:	2100      	movs	r1, #0
     bbc:	e768      	b.n	a90 <__udivmoddi4+0xa0>
     bbe:	4638      	mov	r0, r7
     bc0:	e7fa      	b.n	bb8 <__udivmoddi4+0x1c8>
     bc2:	e9c6 4c00 	strd	r4, ip, [r6]
     bc6:	e7f8      	b.n	bba <__udivmoddi4+0x1ca>
     bc8:	f1c7 0c20 	rsb	ip, r7, #32
     bcc:	40bb      	lsls	r3, r7
     bce:	fa22 f40c 	lsr.w	r4, r2, ip
     bd2:	431c      	orrs	r4, r3
     bd4:	fa2e f10c 	lsr.w	r1, lr, ip
     bd8:	fa20 f30c 	lsr.w	r3, r0, ip
     bdc:	40b8      	lsls	r0, r7
     bde:	4301      	orrs	r1, r0
     be0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     be4:	fa0e f507 	lsl.w	r5, lr, r7
     be8:	fbb3 f8f9 	udiv	r8, r3, r9
     bec:	fa1f fe84 	uxth.w	lr, r4
     bf0:	fb09 3018 	mls	r0, r9, r8, r3
     bf4:	0c0b      	lsrs	r3, r1, #16
     bf6:	fb08 fa0e 	mul.w	sl, r8, lr
     bfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     bfe:	459a      	cmp	sl, r3
     c00:	fa02 f207 	lsl.w	r2, r2, r7
     c04:	d940      	bls.n	c88 <__udivmoddi4+0x298>
     c06:	18e3      	adds	r3, r4, r3
     c08:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     c0c:	d204      	bcs.n	c18 <__udivmoddi4+0x228>
     c0e:	459a      	cmp	sl, r3
     c10:	d902      	bls.n	c18 <__udivmoddi4+0x228>
     c12:	f1a8 0002 	sub.w	r0, r8, #2
     c16:	4423      	add	r3, r4
     c18:	eba3 030a 	sub.w	r3, r3, sl
     c1c:	b289      	uxth	r1, r1
     c1e:	fbb3 f8f9 	udiv	r8, r3, r9
     c22:	fb09 3318 	mls	r3, r9, r8, r3
     c26:	fb08 fe0e 	mul.w	lr, r8, lr
     c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     c2e:	458e      	cmp	lr, r1
     c30:	d92c      	bls.n	c8c <__udivmoddi4+0x29c>
     c32:	1861      	adds	r1, r4, r1
     c34:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     c38:	d204      	bcs.n	c44 <__udivmoddi4+0x254>
     c3a:	458e      	cmp	lr, r1
     c3c:	d902      	bls.n	c44 <__udivmoddi4+0x254>
     c3e:	f1a8 0302 	sub.w	r3, r8, #2
     c42:	4421      	add	r1, r4
     c44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c48:	fba0 9802 	umull	r9, r8, r0, r2
     c4c:	eba1 010e 	sub.w	r1, r1, lr
     c50:	4541      	cmp	r1, r8
     c52:	46ce      	mov	lr, r9
     c54:	4643      	mov	r3, r8
     c56:	d302      	bcc.n	c5e <__udivmoddi4+0x26e>
     c58:	d106      	bne.n	c68 <__udivmoddi4+0x278>
     c5a:	454d      	cmp	r5, r9
     c5c:	d204      	bcs.n	c68 <__udivmoddi4+0x278>
     c5e:	ebb9 0e02 	subs.w	lr, r9, r2
     c62:	eb68 0304 	sbc.w	r3, r8, r4
     c66:	3801      	subs	r0, #1
     c68:	2e00      	cmp	r6, #0
     c6a:	d0a6      	beq.n	bba <__udivmoddi4+0x1ca>
     c6c:	ebb5 020e 	subs.w	r2, r5, lr
     c70:	eb61 0103 	sbc.w	r1, r1, r3
     c74:	fa01 fc0c 	lsl.w	ip, r1, ip
     c78:	fa22 f307 	lsr.w	r3, r2, r7
     c7c:	ea4c 0303 	orr.w	r3, ip, r3
     c80:	40f9      	lsrs	r1, r7
     c82:	e9c6 3100 	strd	r3, r1, [r6]
     c86:	e798      	b.n	bba <__udivmoddi4+0x1ca>
     c88:	4640      	mov	r0, r8
     c8a:	e7c5      	b.n	c18 <__udivmoddi4+0x228>
     c8c:	4643      	mov	r3, r8
     c8e:	e7d9      	b.n	c44 <__udivmoddi4+0x254>

00000c90 <my_work_handler>:
	stat[0] = FILE_SWITCH;
	waiting = 30;
}

void my_work_handler(struct k_work *work)
{
     c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (wait2) {
     c94:	4c98      	ldr	r4, [pc, #608]	; (ef8 <my_work_handler+0x268>)
     c96:	7823      	ldrb	r3, [r4, #0]
{
     c98:	b091      	sub	sp, #68	; 0x44
    if (wait2) {
     c9a:	b18b      	cbz	r3, cc0 <my_work_handler+0x30>
        ret = bt_gatt_notify(default_conn, attr2, &stat, sizeof(stat));
     c9c:	4997      	ldr	r1, [pc, #604]	; (efc <my_work_handler+0x26c>)
     c9e:	4898      	ldr	r0, [pc, #608]	; (f00 <my_work_handler+0x270>)
     ca0:	6809      	ldr	r1, [r1, #0]
     ca2:	4a98      	ldr	r2, [pc, #608]	; (f04 <my_work_handler+0x274>)
     ca4:	6800      	ldr	r0, [r0, #0]
     ca6:	2301      	movs	r3, #1
     ca8:	f018 f92c 	bl	18f04 <bt_gatt_notify>
     cac:	4b96      	ldr	r3, [pc, #600]	; (f08 <my_work_handler+0x278>)
        if (ret < 0) {
     cae:	2800      	cmp	r0, #0
        ret = bt_gatt_notify(default_conn, attr2, &stat, sizeof(stat));
     cb0:	4601      	mov	r1, r0
     cb2:	6018      	str	r0, [r3, #0]
        if (ret < 0) {
     cb4:	da02      	bge.n	cbc <my_work_handler+0x2c>
            printk("bt_gatt_notify failed: %d\n", ret);
     cb6:	4895      	ldr	r0, [pc, #596]	; (f0c <my_work_handler+0x27c>)
     cb8:	f018 f94b 	bl	18f52 <printk>
        }
        wait2 = false;
     cbc:	2300      	movs	r3, #0
     cbe:	7023      	strb	r3, [r4, #0]
    } 
    if (waiting == 0) {
     cc0:	4d93      	ldr	r5, [pc, #588]	; (f10 <my_work_handler+0x280>)
     cc2:	682e      	ldr	r6, [r5, #0]
     cc4:	2e00      	cmp	r6, #0
     cc6:	f040 80dd 	bne.w	e84 <my_work_handler+0x1f4>
        if (radio_on) {
     cca:	4b92      	ldr	r3, [pc, #584]	; (f14 <my_work_handler+0x284>)
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	2b00      	cmp	r3, #0
     cd0:	f040 80d2 	bne.w	e78 <my_work_handler+0x1e8>
                gpio_pin_set_dt(&led, 0);
                wait2 = true;
            }
        }
    }
}
     cd4:	b011      	add	sp, #68	; 0x44
     cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cda:	f8df 823c 	ldr.w	r8, [pc, #572]	; f18 <my_work_handler+0x288>
     cde:	aa0a      	add	r2, sp, #40	; 0x28
		ret = sensor_channel_get(dev, channels[i], &accel[i]);
     ce0:	f838 1b02 	ldrh.w	r1, [r8], #2
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     ce4:	693b      	ldr	r3, [r7, #16]
     ce6:	9205      	str	r2, [sp, #20]
     ce8:	4620      	mov	r0, r4
     cea:	4798      	blx	r3
		if (ret < 0) {
     cec:	f1b0 0900 	subs.w	r9, r0, #0
     cf0:	9a05      	ldr	r2, [sp, #20]
     cf2:	da07      	bge.n	d04 <my_work_handler+0x74>
			printk("%s: sensor_channel_get(%c) failed: %d\n", dev->name, 'X' + i, ret);
     cf4:	6821      	ldr	r1, [r4, #0]
     cf6:	4889      	ldr	r0, [pc, #548]	; (f1c <my_work_handler+0x28c>)
     cf8:	464b      	mov	r3, r9
     cfa:	f106 0258 	add.w	r2, r6, #88	; 0x58
     cfe:	f018 f928 	bl	18f52 <printk>
                if (ret < 0) {
     d02:	e0ad      	b.n	e60 <my_work_handler+0x1d0>
	for (size_t i = 0; i < ARRAY_SIZE(channels); i++) {
     d04:	3601      	adds	r6, #1
     d06:	2e03      	cmp	r6, #3
     d08:	f102 0208 	add.w	r2, r2, #8
     d0c:	d1e8      	bne.n	ce0 <my_work_handler+0x50>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     d0e:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d10:	f7ff fb38 	bl	384 <__aeabi_i2d>
     d14:	4652      	mov	r2, sl
     d16:	465b      	mov	r3, fp
     d18:	f7ff fcc8 	bl	6ac <__aeabi_ddiv>
     d1c:	4606      	mov	r6, r0
     d1e:	980a      	ldr	r0, [sp, #40]	; 0x28
     d20:	460f      	mov	r7, r1
     d22:	f7ff fb2f 	bl	384 <__aeabi_i2d>
     d26:	4602      	mov	r2, r0
     d28:	460b      	mov	r3, r1
     d2a:	4630      	mov	r0, r6
     d2c:	4639      	mov	r1, r7
     d2e:	f7ff f9dd 	bl	ec <__adddf3>
     d32:	4606      	mov	r6, r0
     d34:	980f      	ldr	r0, [sp, #60]	; 0x3c
     d36:	460f      	mov	r7, r1
     d38:	f7ff fb24 	bl	384 <__aeabi_i2d>
     d3c:	4652      	mov	r2, sl
     d3e:	465b      	mov	r3, fp
     d40:	f7ff fcb4 	bl	6ac <__aeabi_ddiv>
     d44:	4680      	mov	r8, r0
     d46:	980e      	ldr	r0, [sp, #56]	; 0x38
     d48:	4689      	mov	r9, r1
     d4a:	f7ff fb1b 	bl	384 <__aeabi_i2d>
     d4e:	4602      	mov	r2, r0
     d50:	460b      	mov	r3, r1
     d52:	4640      	mov	r0, r8
     d54:	4649      	mov	r1, r9
     d56:	f7ff f9c9 	bl	ec <__adddf3>
	printk("%16s [m/s^2]:    (%12.6f, %12.6f, %12.6f)\n", dev->name,
     d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
     d5e:	980d      	ldr	r0, [sp, #52]	; 0x34
     d60:	f7ff fb10 	bl	384 <__aeabi_i2d>
     d64:	4652      	mov	r2, sl
     d66:	465b      	mov	r3, fp
     d68:	f7ff fca0 	bl	6ac <__aeabi_ddiv>
     d6c:	4680      	mov	r8, r0
     d6e:	980c      	ldr	r0, [sp, #48]	; 0x30
     d70:	4689      	mov	r9, r1
     d72:	f7ff fb07 	bl	384 <__aeabi_i2d>
     d76:	4602      	mov	r2, r0
     d78:	460b      	mov	r3, r1
     d7a:	4640      	mov	r0, r8
     d7c:	4649      	mov	r1, r9
     d7e:	f7ff f9b5 	bl	ec <__adddf3>
     d82:	4632      	mov	r2, r6
     d84:	463b      	mov	r3, r7
     d86:	e9cd 0100 	strd	r0, r1, [sp]
     d8a:	6821      	ldr	r1, [r4, #0]
     d8c:	4864      	ldr	r0, [pc, #400]	; (f20 <my_work_handler+0x290>)
     d8e:	4c5e      	ldr	r4, [pc, #376]	; (f08 <my_work_handler+0x278>)
     d90:	f018 f8df 	bl	18f52 <printk>
     d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
     d96:	f7ff faf5 	bl	384 <__aeabi_i2d>
     d9a:	4652      	mov	r2, sl
     d9c:	465b      	mov	r3, fp
     d9e:	f7ff fc85 	bl	6ac <__aeabi_ddiv>
     da2:	4606      	mov	r6, r0
     da4:	980a      	ldr	r0, [sp, #40]	; 0x28
     da6:	460f      	mov	r7, r1
     da8:	f7ff faec 	bl	384 <__aeabi_i2d>
     dac:	4602      	mov	r2, r0
     dae:	460b      	mov	r3, r1
     db0:	4630      	mov	r0, r6
     db2:	4639      	mov	r1, r7
     db4:	f7ff f99a 	bl	ec <__adddf3>
	float floats[] = {sensor_value_to_double(&accel[0]), sensor_value_to_double(&accel[1]),
     db8:	f7ff fd60 	bl	87c <__aeabi_d2f>
     dbc:	9007      	str	r0, [sp, #28]
     dbe:	980d      	ldr	r0, [sp, #52]	; 0x34
     dc0:	f7ff fae0 	bl	384 <__aeabi_i2d>
     dc4:	4652      	mov	r2, sl
     dc6:	465b      	mov	r3, fp
     dc8:	f7ff fc70 	bl	6ac <__aeabi_ddiv>
     dcc:	4606      	mov	r6, r0
     dce:	980c      	ldr	r0, [sp, #48]	; 0x30
     dd0:	460f      	mov	r7, r1
     dd2:	f7ff fad7 	bl	384 <__aeabi_i2d>
     dd6:	4602      	mov	r2, r0
     dd8:	460b      	mov	r3, r1
     dda:	4630      	mov	r0, r6
     ddc:	4639      	mov	r1, r7
     dde:	f7ff f985 	bl	ec <__adddf3>
     de2:	f7ff fd4b 	bl	87c <__aeabi_d2f>
     de6:	9008      	str	r0, [sp, #32]
     de8:	980f      	ldr	r0, [sp, #60]	; 0x3c
     dea:	f7ff facb 	bl	384 <__aeabi_i2d>
     dee:	4652      	mov	r2, sl
     df0:	465b      	mov	r3, fp
     df2:	f7ff fc5b 	bl	6ac <__aeabi_ddiv>
     df6:	4606      	mov	r6, r0
     df8:	980e      	ldr	r0, [sp, #56]	; 0x38
     dfa:	460f      	mov	r7, r1
     dfc:	f7ff fac2 	bl	384 <__aeabi_i2d>
     e00:	4602      	mov	r2, r0
     e02:	460b      	mov	r3, r1
     e04:	4630      	mov	r0, r6
     e06:	4639      	mov	r1, r7
     e08:	f7ff f970 	bl	ec <__adddf3>
	       sensor_value_to_double(&accel[2])};
     e0c:	f7ff fd36 	bl	87c <__aeabi_d2f>
	floats2Bytes(floats, data_to_send);
     e10:	4944      	ldr	r1, [pc, #272]	; (f24 <my_work_handler+0x294>)
	       sensor_value_to_double(&accel[2])};
     e12:	9009      	str	r0, [sp, #36]	; 0x24
	floats2Bytes(floats, data_to_send);
     e14:	a807      	add	r0, sp, #28
     e16:	f018 f88a 	bl	18f2e <floats2Bytes>
	ret = bt_gatt_notify(default_conn, attr, &data_to_send, sizeof(data_to_send));
     e1a:	4839      	ldr	r0, [pc, #228]	; (f00 <my_work_handler+0x270>)
     e1c:	9904      	ldr	r1, [sp, #16]
     e1e:	4a41      	ldr	r2, [pc, #260]	; (f24 <my_work_handler+0x294>)
     e20:	6800      	ldr	r0, [r0, #0]
     e22:	230c      	movs	r3, #12
     e24:	f018 f86e 	bl	18f04 <bt_gatt_notify>
	if (ret < 0) {
     e28:	1e01      	subs	r1, r0, #0
     e2a:	db21      	blt.n	e70 <my_work_handler+0x1e0>
                ret = print_accels(sensors[i], attr);
     e2c:	2300      	movs	r3, #0
     e2e:	6023      	str	r3, [r4, #0]
            for (i = 0; i < ARRAY_SIZE(sensors); i++) {
     e30:	682e      	ldr	r6, [r5, #0]
     e32:	3601      	adds	r6, #1
     e34:	602e      	str	r6, [r5, #0]
     e36:	2e00      	cmp	r6, #0
     e38:	f47f af4c 	bne.w	cd4 <my_work_handler+0x44>
                ret = print_accels(sensors[i], attr);
     e3c:	4b3a      	ldr	r3, [pc, #232]	; (f28 <my_work_handler+0x298>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	9304      	str	r3, [sp, #16]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     e42:	4c3a      	ldr	r4, [pc, #232]	; (f2c <my_work_handler+0x29c>)
     e44:	68a7      	ldr	r7, [r4, #8]
     e46:	2139      	movs	r1, #57	; 0x39
     e48:	68fb      	ldr	r3, [r7, #12]
     e4a:	4620      	mov	r0, r4
     e4c:	4798      	blx	r3
	if (ret < 0) {
     e4e:	f1b0 0900 	subs.w	r9, r0, #0
     e52:	f6bf af42 	bge.w	cda <my_work_handler+0x4a>
		printk("%s: sensor_sample_fetch() failed: %d\n", dev->name, ret);
     e56:	6821      	ldr	r1, [r4, #0]
     e58:	4835      	ldr	r0, [pc, #212]	; (f30 <my_work_handler+0x2a0>)
     e5a:	464a      	mov	r2, r9
     e5c:	f018 f879 	bl	18f52 <printk>
                ret = print_accels(sensors[i], attr);
     e60:	4b29      	ldr	r3, [pc, #164]	; (f08 <my_work_handler+0x278>)
                    printk("print_accels failed: %d\n", ret);
     e62:	4834      	ldr	r0, [pc, #208]	; (f34 <my_work_handler+0x2a4>)
                ret = print_accels(sensors[i], attr);
     e64:	f8c3 9000 	str.w	r9, [r3]
                    printk("print_accels failed: %d\n", ret);
     e68:	4649      	mov	r1, r9
     e6a:	f018 f872 	bl	18f52 <printk>
     e6e:	e7df      	b.n	e30 <my_work_handler+0x1a0>
		printk("bt_gatt_notify failed: %d\n", ret);
     e70:	4826      	ldr	r0, [pc, #152]	; (f0c <my_work_handler+0x27c>)
     e72:	f018 f86e 	bl	18f52 <printk>
     e76:	e7d9      	b.n	e2c <my_work_handler+0x19c>
	return (double)val->val1 + (double)val->val2 / 1000000;
     e78:	f20f 0b74 	addw	fp, pc, #116	; 0x74
     e7c:	e9db ab00 	ldrd	sl, fp, [fp]
            for (i = 0; i < ARRAY_SIZE(sensors); i++) {
     e80:	4d2d      	ldr	r5, [pc, #180]	; (f38 <my_work_handler+0x2a8>)
     e82:	e7d7      	b.n	e34 <my_work_handler+0x1a4>
        if (waiting == 29) {
     e84:	2e1d      	cmp	r6, #29
     e86:	d111      	bne.n	eac <my_work_handler+0x21c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     e88:	2100      	movs	r1, #0
     e8a:	f44f 70a4 	mov.w	r0, #328	; 0x148
     e8e:	f017 fcc5 	bl	1881c <z_impl_k_sleep>
            int ret = bt_gatt_notify(default_conn, attr2, &stat, sizeof(stat));
     e92:	491a      	ldr	r1, [pc, #104]	; (efc <my_work_handler+0x26c>)
     e94:	481a      	ldr	r0, [pc, #104]	; (f00 <my_work_handler+0x270>)
     e96:	6809      	ldr	r1, [r1, #0]
     e98:	4a1a      	ldr	r2, [pc, #104]	; (f04 <my_work_handler+0x274>)
     e9a:	6800      	ldr	r0, [r0, #0]
     e9c:	2301      	movs	r3, #1
     e9e:	f018 f831 	bl	18f04 <bt_gatt_notify>
            if (ret < 0) {
     ea2:	1e01      	subs	r1, r0, #0
     ea4:	da02      	bge.n	eac <my_work_handler+0x21c>
                printk("bt_gatt_notify failed: %d\n", ret);
     ea6:	4819      	ldr	r0, [pc, #100]	; (f0c <my_work_handler+0x27c>)
     ea8:	f018 f853 	bl	18f52 <printk>
        waiting--;
     eac:	682b      	ldr	r3, [r5, #0]
     eae:	3b01      	subs	r3, #1
        if (waiting == 2) {
     eb0:	2b02      	cmp	r3, #2
        waiting--;
     eb2:	602b      	str	r3, [r5, #0]
        if (waiting == 2) {
     eb4:	f47f af0e 	bne.w	cd4 <my_work_handler+0x44>
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
     eb8:	4820      	ldr	r0, [pc, #128]	; (f3c <my_work_handler+0x2ac>)
     eba:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
     ebc:	6883      	ldr	r3, [r0, #8]
     ebe:	a90a      	add	r1, sp, #40	; 0x28
     ec0:	685b      	ldr	r3, [r3, #4]
     ec2:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     ec4:	b920      	cbnz	r0, ed0 <my_work_handler+0x240>
		*value ^= data->invert;
     ec6:	682b      	ldr	r3, [r5, #0]
     ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
     eca:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     ecc:	f3c0 20c0 	ubfx	r0, r0, #11, #1
            if (val > 0) {
     ed0:	2800      	cmp	r0, #0
     ed2:	f77f aeff 	ble.w	cd4 <my_work_handler+0x44>
                radio_on = false;
     ed6:	4b0f      	ldr	r3, [pc, #60]	; (f14 <my_work_handler+0x284>)
     ed8:	2000      	movs	r0, #0
     eda:	7018      	strb	r0, [r3, #0]
                stat[0] = RADIO_OFF;
     edc:	4b09      	ldr	r3, [pc, #36]	; (f04 <my_work_handler+0x274>)
     ede:	226e      	movs	r2, #110	; 0x6e
     ee0:	701a      	strb	r2, [r3, #0]
                gpio_pin_set_dt(&led, 0);
     ee2:	f001 fa63 	bl	23ac <gpio_pin_set_dt.constprop.0.isra.0>
                wait2 = true;
     ee6:	2301      	movs	r3, #1
     ee8:	7023      	strb	r3, [r4, #0]
}
     eea:	e6f3      	b.n	cd4 <my_work_handler+0x44>
     eec:	f3af 8000 	nop.w
     ef0:	00000000 	.word	0x00000000
     ef4:	412e8480 	.word	0x412e8480
     ef8:	20002706 	.word	0x20002706
     efc:	20001194 	.word	0x20001194
     f00:	200011d4 	.word	0x200011d4
     f04:	20000874 	.word	0x20000874
     f08:	2000118c 	.word	0x2000118c
     f0c:	0001f4c7 	.word	0x0001f4c7
     f10:	20001190 	.word	0x20001190
     f14:	20000870 	.word	0x20000870
     f18:	0001f44c 	.word	0x0001f44c
     f1c:	0001f508 	.word	0x0001f508
     f20:	0001f52f 	.word	0x0001f52f
     f24:	20002707 	.word	0x20002707
     f28:	20001198 	.word	0x20001198
     f2c:	0001da24 	.word	0x0001da24
     f30:	0001f4e2 	.word	0x0001f4e2
     f34:	0001f55a 	.word	0x0001f55a
     f38:	20001188 	.word	0x20001188
     f3c:	0001d948 	.word	0x0001d948

00000f40 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     f44:	e9d0 350c 	ldrd	r3, r5, [r0, #48]	; 0x30
	start_to_address_actual_us =
     f48:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     f4c:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     f4e:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     f50:	45a0      	cmp	r8, r4
{
     f52:	460f      	mov	r7, r1
     f54:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     f56:	d819      	bhi.n	f8c <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     f58:	4d1d      	ldr	r5, [pc, #116]	; (fd0 <ull_drift_ticks_get+0x90>)
     f5a:	fba3 0105 	umull	r0, r1, r3, r5
     f5e:	a31a      	add	r3, pc, #104	; (adr r3, fc8 <ull_drift_ticks_get+0x88>)
     f60:	e9d3 2300 	ldrd	r2, r3, [r3]
     f64:	f7ff fd2a 	bl	9bc <__aeabi_uldivmod>
     f68:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     f6a:	eba4 0008 	sub.w	r0, r4, r8
     f6e:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     f72:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     f76:	a314      	add	r3, pc, #80	; (adr r3, fc8 <ull_drift_ticks_get+0x88>)
     f78:	e9d3 2300 	ldrd	r2, r3, [r3]
     f7c:	f7ff fd1e 	bl	9bc <__aeabi_uldivmod>
     f80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     f84:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
     f86:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     f8c:	f8df 9040 	ldr.w	r9, [pc, #64]	; fd0 <ull_drift_ticks_get+0x90>
     f90:	a30d      	add	r3, pc, #52	; (adr r3, fc8 <ull_drift_ticks_get+0x88>)
     f92:	e9d3 2300 	ldrd	r2, r3, [r3]
     f96:	fba8 0109 	umull	r0, r1, r8, r9
     f9a:	f7ff fd0f 	bl	9bc <__aeabi_uldivmod>
     f9e:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     fa0:	f105 0030 	add.w	r0, r5, #48	; 0x30
     fa4:	a308      	add	r3, pc, #32	; (adr r3, fc8 <ull_drift_ticks_get+0x88>)
     fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
     faa:	fba0 0109 	umull	r0, r1, r0, r9
     fae:	f7ff fd05 	bl	9bc <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     fb2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     fb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     fba:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
     fbc:	6030      	str	r0, [r6, #0]
}
     fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fc2:	bf00      	nop
     fc4:	f3af 8000 	nop.w
     fc8:	1afd498d 	.word	0x1afd498d
     fcc:	00000007 	.word	0x00000007
     fd0:	3b9aca00 	.word	0x3b9aca00
     fd4:	00000000 	.word	0x00000000

00000fd8 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
     fd8:	2800      	cmp	r0, #0
     fda:	f000 8136 	beq.w	124a <ll_adv_enable+0x272>
{
     fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     fe2:	4cc5      	ldr	r4, [pc, #788]	; (12f8 <ll_adv_enable+0x320>)
     fe4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     fe8:	07da      	lsls	r2, r3, #31
{
     fea:	b08d      	sub	sp, #52	; 0x34
	if (!adv || adv->is_enabled) {
     fec:	f100 8167 	bmi.w	12be <ll_adv_enable+0x2e6>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     ff0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(const struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     ff4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     ff8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     ffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1000:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1002:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    1006:	b30e      	cbz	r6, 104c <ll_adv_enable+0x74>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
    1008:	4635      	mov	r5, r6
    100a:	f815 0b02 	ldrb.w	r0, [r5], #2
    100e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    1012:	f008 fa17 	bl	9444 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    1016:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
    1018:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    101a:	4628      	mov	r0, r5
    101c:	f018 fdea 	bl	19bf4 <memcpy>
		if (pdu_adv_to_update->tx_addr &&
    1020:	7833      	ldrb	r3, [r6, #0]
    1022:	065b      	lsls	r3, r3, #25
    1024:	d506      	bpl.n	1034 <ll_adv_enable+0x5c>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1026:	2106      	movs	r1, #6
    1028:	4628      	mov	r0, r5
    102a:	f006 fe49 	bl	7cc0 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    102e:	2800      	cmp	r0, #0
    1030:	f000 8147 	beq.w	12c2 <ll_adv_enable+0x2ea>
			own_id_addr = ll_addr_get(pdu->tx_addr);
    1034:	4645      	mov	r5, r8
    1036:	f815 0b02 	ldrb.w	r0, [r5], #2
    103a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    103e:	f008 fa01 	bl	9444 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    1042:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
    1044:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    1046:	4628      	mov	r0, r5
    1048:	f018 fdd4 	bl	19bf4 <memcpy>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    104c:	7833      	ldrb	r3, [r6, #0]
    104e:	f013 0f0e 	tst.w	r3, #14
    1052:	f040 808f 	bne.w	1174 <ll_adv_enable+0x19c>
		if (lll->conn) {
    1056:	6a23      	ldr	r3, [r4, #32]
    1058:	b11b      	cbz	r3, 1062 <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    105a:	200c      	movs	r0, #12
}
    105c:	b00d      	add	sp, #52	; 0x34
    105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1062:	f008 fecf 	bl	9e04 <ll_rx_link_alloc>
		if (!link) {
    1066:	4681      	mov	r9, r0
    1068:	2800      	cmp	r0, #0
    106a:	f000 8138 	beq.w	12de <ll_adv_enable+0x306>
		node_rx = ll_rx_alloc();
    106e:	f008 fed5 	bl	9e1c <ll_rx_alloc>
		if (!node_rx) {
    1072:	4682      	mov	sl, r0
    1074:	2800      	cmp	r0, #0
    1076:	f000 812f 	beq.w	12d8 <ll_adv_enable+0x300>
		conn = ll_conn_acquire();
    107a:	f00b fcbd 	bl	c9f8 <ll_conn_acquire>
		if (!conn) {
    107e:	4605      	mov	r5, r0
    1080:	2800      	cmp	r0, #0
    1082:	f000 812e 	beq.w	12e2 <ll_adv_enable+0x30a>
		if (!conn_lll->link_tx_free) {
    1086:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
		conn_lll->handle = 0xFFFF;
    108a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    108e:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    1090:	f105 0b1c 	add.w	fp, r5, #28
		if (!conn_lll->link_tx_free) {
    1094:	2800      	cmp	r0, #0
    1096:	f000 811a 	beq.w	12ce <ll_adv_enable+0x2f6>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    109a:	f105 027c 	add.w	r2, r5, #124	; 0x7c
    109e:	f105 0178 	add.w	r1, r5, #120	; 0x78
    10a2:	f006 fe19 	bl	7cd8 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    10a6:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
    10aa:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
    10ae:	f023 0307 	bic.w	r3, r3, #7
    10b2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    10b6:	f043 0301 	orr.w	r3, r3, #1
    10ba:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
		conn_lll->data_chan_sel = 0;
    10be:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    10c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    10c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    10ca:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    10ce:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    10d2:	f023 0307 	bic.w	r3, r3, #7
    10d6:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
		conn_lll->periph.initiated = 0;
    10da:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    10de:	f023 0307 	bic.w	r3, r3, #7
		conn_lll->link_tx_free = NULL;
    10e2:	2700      	movs	r7, #0
		conn_lll->periph.initiated = 0;
    10e4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		conn->apto_expire = 0U;
    10e8:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    10ec:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
		ull_llcp_init(conn);
    10f0:	4628      	mov	r0, r5
		conn_lll->periph.window_widening_event_us = 0;
    10f2:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    10f6:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		conn_lll->packet_tx_head_len = 0;
    10fa:	f8a5 708c 	strh.w	r7, [r5, #140]	; 0x8c
		conn_lll->event_counter = 0;
    10fe:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_prepare = 0;
    1100:	f8c5 702e 	str.w	r7, [r5, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
    1104:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    1108:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    110a:	f8a5 718e 	strh.w	r7, [r5, #398]	; 0x18e
		conn->appto_expire = 0U;
    110e:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		ull_llcp_init(conn);
    1112:	f00d fdb9 	bl	ec88 <ull_llcp_init>
		conn->llcp_terminate.reason_final = 0;
    1116:	f885 7150 	strb.w	r7, [r5, #336]	; 0x150
		conn->llcp_terminate.node_rx.hdr.link = link;
    111a:	f8c5 9154 	str.w	r9, [r5, #340]	; 0x154
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    111e:	f00b fef7 	bl	cf10 <ull_conn_default_phy_tx_get>
    1122:	f895 3194 	ldrb.w	r3, [r5, #404]	; 0x194
    1126:	f360 0302 	bfi	r3, r0, #0, #3
    112a:	f885 3194 	strb.w	r3, [r5, #404]	; 0x194
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    112e:	f00b fef5 	bl	cf1c <ull_conn_default_phy_rx_get>
    1132:	f895 3194 	ldrb.w	r3, [r5, #404]	; 0x194
    1136:	f360 03c5 	bfi	r3, r0, #3, #3
    113a:	f885 3194 	strb.w	r3, [r5, #404]	; 0x194
		conn->pause_rx_data = 0U;
    113e:	f895 3180 	ldrb.w	r3, [r5, #384]	; 0x180
    1142:	f367 0341 	bfi	r3, r7, #1, #1
    1146:	f885 3180 	strb.w	r3, [r5, #384]	; 0x180
		ull_dle_init(conn, phy_in_use);
    114a:	2101      	movs	r1, #1
    114c:	4628      	mov	r0, r5
    114e:	f00c faf9 	bl	d744 <ull_dle_init>
		ull_tx_q_init(&conn->tx_q);
    1152:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    1156:	f00d fb53 	bl	e800 <ull_tx_q_init>
		adv->node_rx_cc_free = node_rx;
    115a:	e9c4 9a18 	strd	r9, sl, [r4, #96]	; 0x60
		lll->conn = conn_lll;
    115e:	f8c4 b020 	str.w	fp, [r4, #32]
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1162:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
    1166:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1168:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
    116a:	f011 fc23 	bl	129b4 <lll_clock_wait>
		if (err) {
    116e:	2800      	cmp	r0, #0
    1170:	f040 80a9 	bne.w	12c6 <ll_adv_enable+0x2ee>
	uint8_t ch_map = lll->chan_map;
    1174:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1178:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    117a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    117e:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
    1182:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1186:	f006 ff31 	bl	7fec <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    118a:	4602      	mov	r2, r0
    118c:	2800      	cmp	r0, #0
    118e:	d05e      	beq.n	124e <ll_adv_enable+0x276>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    1190:	f898 1001 	ldrb.w	r1, [r8, #1]
    1194:	4630      	mov	r0, r6
    1196:	f00a ff63 	bl	c060 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    119a:	4958      	ldr	r1, [pc, #352]	; (12fc <ll_adv_enable+0x324>)
	uint16_t interval = adv->interval;
    119c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    11a0:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
    11a2:	2331      	movs	r3, #49	; 0x31
    11a4:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    11a6:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    11aa:	a351      	add	r3, pc, #324	; (adr r3, 12f0 <ll_adv_enable+0x318>)
    11ac:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    11b0:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    11b2:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    11b4:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    11b6:	fba0 0101 	umull	r0, r1, r0, r1
    11ba:	f7ff fbff 	bl	9bc <__aeabi_uldivmod>
    11be:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    11c0:	f008 f8fc 	bl	93bc <ticker_ticks_now_get>
	ticks_anchor += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);
    11c4:	f100 0809 	add.w	r8, r0, #9
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    11c8:	b93f      	cbnz	r7, 11da <ll_adv_enable+0x202>
    11ca:	7835      	ldrb	r5, [r6, #0]
    11cc:	f005 050f 	and.w	r5, r5, #15
    11d0:	f1a5 0501 	sub.w	r5, r5, #1
    11d4:	fab5 f585 	clz	r5, r5
    11d8:	096d      	lsrs	r5, r5, #5
    11da:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    11de:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    11e0:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    11e4:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    11e8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    11ec:	d036      	beq.n	125c <ll_adv_enable+0x284>
		ll_adv_ticker_ext[handle].ticks_slot_window = 0;
    11ee:	4a44      	ldr	r2, [pc, #272]	; (1300 <ll_adv_enable+0x328>)
		ret = ticker_start_ext(
    11f0:	9209      	str	r2, [sp, #36]	; 0x24
		ll_adv_ticker_ext[handle].ticks_slot_window = 0;
    11f2:	2000      	movs	r0, #0
    11f4:	6010      	str	r0, [r2, #0]
		ret_cb = TICKER_STATUS_BUSY;
    11f6:	2502      	movs	r5, #2
		ret = ticker_start_ext(
    11f8:	4a42      	ldr	r2, [pc, #264]	; (1304 <ll_adv_enable+0x32c>)
    11fa:	4f43      	ldr	r7, [pc, #268]	; (1308 <ll_adv_enable+0x330>)
    11fc:	9304      	str	r3, [sp, #16]
    11fe:	ae0b      	add	r6, sp, #44	; 0x2c
    1200:	9301      	str	r3, [sp, #4]
    1202:	9205      	str	r2, [sp, #20]
    1204:	2103      	movs	r1, #3
    1206:	e9cd 0002 	strd	r0, r0, [sp, #8]
    120a:	9406      	str	r4, [sp, #24]
    120c:	4643      	mov	r3, r8
    120e:	9000      	str	r0, [sp, #0]
    1210:	9608      	str	r6, [sp, #32]
    1212:	9707      	str	r7, [sp, #28]
    1214:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1216:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
    1218:	f007 ffd4 	bl	91c4 <ticker_start_ext>
		ret = ull_ticker_status_take(ret, &ret_cb);
    121c:	4631      	mov	r1, r6
    121e:	f008 fe91 	bl	9f44 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1222:	b9a0      	cbnz	r0, 124e <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1224:	4939      	ldr	r1, [pc, #228]	; (130c <ll_adv_enable+0x334>)
    1226:	9105      	str	r1, [sp, #20]
    1228:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    122c:	9300      	str	r3, [sp, #0]
    122e:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1232:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1236:	9707      	str	r7, [sp, #28]
    1238:	9608      	str	r6, [sp, #32]
    123a:	9406      	str	r4, [sp, #24]
    123c:	4643      	mov	r3, r8
    123e:	2201      	movs	r2, #1
    1240:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1242:	950b      	str	r5, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1244:	f007 ffa2 	bl	918c <ticker_start>
    1248:	e02e      	b.n	12a8 <ll_adv_enable+0x2d0>
		return disable(handle);
    124a:	f00a be5b 	b.w	bf04 <disable.constprop.0>
	if (adv->lll.conn) {
    124e:	6a23      	ldr	r3, [r4, #32]
    1250:	2b00      	cmp	r3, #0
    1252:	f43f af02 	beq.w	105a <ll_adv_enable+0x82>
		conn_release(adv);
    1256:	f00a fe13 	bl	be80 <conn_release.constprop.0>
    125a:	e6fe      	b.n	105a <ll_adv_enable+0x82>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    125c:	4a28      	ldr	r2, [pc, #160]	; (1300 <ll_adv_enable+0x328>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    125e:	482c      	ldr	r0, [pc, #176]	; (1310 <ll_adv_enable+0x338>)
		ret = ticker_start_ext(
    1260:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1262:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
    1266:	9406      	str	r4, [sp, #24]
    1268:	9502      	str	r5, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    126a:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
    126c:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    126e:	fba7 0300 	umull	r0, r3, r7, r0
    1272:	fb01 3107 	mla	r1, r1, r7, r3
		ret = ticker_start_ext(
    1276:	4b24      	ldr	r3, [pc, #144]	; (1308 <ll_adv_enable+0x330>)
    1278:	9307      	str	r3, [sp, #28]
    127a:	4b22      	ldr	r3, [pc, #136]	; (1304 <ll_adv_enable+0x32c>)
    127c:	9305      	str	r3, [sp, #20]
    127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1282:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1284:	2702      	movs	r7, #2
		ret = ticker_start_ext(
    1286:	9303      	str	r3, [sp, #12]
    1288:	ae0b      	add	r6, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    128a:	a319      	add	r3, pc, #100	; (adr r3, 12f0 <ll_adv_enable+0x318>)
    128c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1290:	970b      	str	r7, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
    1292:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1294:	f7ff fb92 	bl	9bc <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1298:	4643      	mov	r3, r8
    129a:	e9cd 5000 	strd	r5, r0, [sp]
    129e:	463a      	mov	r2, r7
    12a0:	4628      	mov	r0, r5
    12a2:	2103      	movs	r1, #3
    12a4:	f007 ff8e 	bl	91c4 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    12a8:	4631      	mov	r1, r6
    12aa:	f008 fe4b 	bl	9f44 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    12ae:	2800      	cmp	r0, #0
    12b0:	d1cd      	bne.n	124e <ll_adv_enable+0x276>
	adv->is_enabled = 1;
    12b2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    12b6:	f043 0301 	orr.w	r3, r3, #1
    12ba:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
    12be:	2000      	movs	r0, #0
    12c0:	e6cc      	b.n	105c <ll_adv_enable+0x84>
			return BT_HCI_ERR_INVALID_PARAM;
    12c2:	2012      	movs	r0, #18
    12c4:	e6ca      	b.n	105c <ll_adv_enable+0x84>
			conn_release(adv);
    12c6:	f00a fddb 	bl	be80 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    12ca:	2003      	movs	r0, #3
    12cc:	e6c6      	b.n	105c <ll_adv_enable+0x84>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    12ce:	f105 0080 	add.w	r0, r5, #128	; 0x80
    12d2:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    12d6:	e6e0      	b.n	109a <ll_adv_enable+0xc2>
			ll_rx_link_release(link);
    12d8:	4648      	mov	r0, r9
    12da:	f008 fd99 	bl	9e10 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    12de:	2007      	movs	r0, #7
    12e0:	e6bc      	b.n	105c <ll_adv_enable+0x84>
			ll_rx_release(node_rx);
    12e2:	4650      	mov	r0, sl
    12e4:	f008 fda0 	bl	9e28 <ll_rx_release>
			ll_rx_link_release(link);
    12e8:	4648      	mov	r0, r9
    12ea:	f008 fd91 	bl	9e10 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    12ee:	e7f6      	b.n	12de <ll_adv_enable+0x306>
    12f0:	1afd498d 	.word	0x1afd498d
    12f4:	00000007 	.word	0x00000007
    12f8:	20001b5c 	.word	0x20001b5c
    12fc:	3b9aca00 	.word	0x3b9aca00
    1300:	20001b50 	.word	0x20001b50
    1304:	0000c0dd 	.word	0x0000c0dd
    1308:	00009529 	.word	0x00009529
    130c:	0000bc29 	.word	0x0000bc29
    1310:	84e72a00 	.word	0x84e72a00
    1314:	00000000 	.word	0x00000000

00001318 <ull_adv_time_update>:
{
    1318:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    131a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    131e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1320:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    1324:	460d      	mov	r5, r1
    1326:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1328:	2101      	movs	r1, #1
    132a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    132e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1330:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1334:	f006 fe5a 	bl	7fec <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1338:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    133a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    133c:	4628      	mov	r0, r5
    133e:	f00a fe8f 	bl	c060 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1342:	491d      	ldr	r1, [pc, #116]	; (13b8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x30>)
    1344:	a31a      	add	r3, pc, #104	; (adr r3, 13b0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x28>)
    1346:	e9d3 2300 	ldrd	r2, r3, [r3]
    134a:	fba0 0101 	umull	r0, r1, r0, r1
    134e:	f7ff fb35 	bl	9bc <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    1352:	6923      	ldr	r3, [r4, #16]
    1354:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1356:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1358:	d222      	bcs.n	13a0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x18>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    135a:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    135c:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    135e:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1360:	4a16      	ldr	r2, [pc, #88]	; (13bc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x34>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1362:	9302      	str	r3, [sp, #8]
	ret_cb = TICKER_STATUS_BUSY;
    1364:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1366:	4b16      	ldr	r3, [pc, #88]	; (13c0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x38>)
	ret_cb = TICKER_STATUS_BUSY;
    1368:	9109      	str	r1, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    136a:	1aa2      	subs	r2, r4, r2
    136c:	40ca      	lsrs	r2, r1
    136e:	fba3 3202 	umull	r3, r2, r3, r2
    1372:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1374:	2300      	movs	r3, #0
    1376:	440a      	add	r2, r1
    1378:	ae09      	add	r6, sp, #36	; 0x24
    137a:	4912      	ldr	r1, [pc, #72]	; (13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>)
    137c:	9105      	str	r1, [sp, #20]
    137e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1382:	2103      	movs	r1, #3
    1384:	b2d2      	uxtb	r2, r2
    1386:	9606      	str	r6, [sp, #24]
    1388:	9300      	str	r3, [sp, #0]
    138a:	4618      	mov	r0, r3
    138c:	f007 ff78 	bl	9280 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1390:	4631      	mov	r1, r6
    1392:	f008 fdd7 	bl	9f44 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1396:	b938      	cbnz	r0, 13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
	adv->ull.ticks_slot = time_ticks;
    1398:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
    139a:	2000      	movs	r0, #0
}
    139c:	b00a      	add	sp, #40	; 0x28
    139e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    13a0:	d9fb      	bls.n	139a <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x12>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    13a2:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    13a4:	2300      	movs	r3, #0
    13a6:	e7da      	b.n	135e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
    13a8:	200c      	movs	r0, #12
}
    13aa:	b00a      	add	sp, #40	; 0x28
    13ac:	bd70      	pop	{r4, r5, r6, pc}
    13ae:	bf00      	nop
    13b0:	1afd498d 	.word	0x1afd498d
    13b4:	00000007 	.word	0x00000007
    13b8:	3b9aca00 	.word	0x3b9aca00
    13bc:	20001b5c 	.word	0x20001b5c
    13c0:	4bda12f7 	.word	0x4bda12f7
    13c4:	00009529 	.word	0x00009529

000013c8 <ull_conn_update_ticker.constprop.0>:
				conn->llcp.prep.lazy;
	}

	return event_counter;
}
static void ull_conn_update_ticker(struct ll_conn *conn,
    13c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13cc:	4605      	mov	r5, r0
    13ce:	b08b      	sub	sp, #44	; 0x2c
    13d0:	468b      	mov	fp, r1
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start
	 * to avoid RTC being stopped if no tickers active.
	 */
	uint32_t mayfly_was_enabled =
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
    13d2:	2001      	movs	r0, #1
    13d4:	2102      	movs	r1, #2
static void ull_conn_update_ticker(struct ll_conn *conn,
    13d6:	469a      	mov	sl, r3
    13d8:	4614      	mov	r4, r2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
    13da:	f013 f8a3 	bl	14524 <mayfly_is_enabled>

	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
    13de:	2200      	movs	r2, #0
    13e0:	2102      	movs	r1, #2
		mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW);
    13e2:	4681      	mov	r9, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0U);
    13e4:	2001      	movs	r0, #1
    13e6:	f006 fcc7 	bl	7d78 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    13ea:	4939      	ldr	r1, [pc, #228]	; (14d0 <ull_conn_update_ticker.constprop.0+0x108>)
    13ec:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    13f0:	4628      	mov	r0, r5
    13f2:	f006 fc51 	bl	7c98 <mem_index_get>
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */

	/* start periph/central with new timings */
	uint8_t ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    13f6:	1cc6      	adds	r6, r0, #3
    13f8:	b2f6      	uxtb	r6, r6
	uint32_t ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    13fa:	4b36      	ldr	r3, [pc, #216]	; (14d4 <ull_conn_update_ticker.constprop.0+0x10c>)
    13fc:	9500      	str	r5, [sp, #0]
    13fe:	4632      	mov	r2, r6
    1400:	2101      	movs	r1, #1
    1402:	2000      	movs	r0, #0
    1404:	f007 ff54 	bl	92b0 <ticker_stop>
				    ticker_id_conn, ticker_stop_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1408:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    140c:	d00c      	beq.n	1428 <ull_conn_update_ticker.constprop.0+0x60>
    140e:	4a32      	ldr	r2, [pc, #200]	; (14d8 <ull_conn_update_ticker.constprop.0+0x110>)
    1410:	4932      	ldr	r1, [pc, #200]	; (14dc <ull_conn_update_ticker.constprop.0+0x114>)
    1412:	4833      	ldr	r0, [pc, #204]	; (14e0 <ull_conn_update_ticker.constprop.0+0x118>)
    1414:	f640 0306 	movw	r3, #2054	; 0x806
    1418:	f018 f911 	bl	1963e <assert_print>
    141c:	4040      	eors	r0, r0
    141e:	f380 8811 	msr	BASEPRI, r0
    1422:	f04f 0003 	mov.w	r0, #3
    1426:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));
	ticker_status = ticker_start(
		TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH, ticker_id_conn, ticks_at_expire,
		ticks_win_offset, HAL_TICKER_US_TO_TICKS(periodic_us),
    1428:	4b2e      	ldr	r3, [pc, #184]	; (14e4 <ull_conn_update_ticker.constprop.0+0x11c>)
    142a:	fba4 4803 	umull	r4, r8, r4, r3
    142e:	4620      	mov	r0, r4
    1430:	a325      	add	r3, pc, #148	; (adr r3, 14c8 <ull_conn_update_ticker.constprop.0+0x100>)
    1432:	e9d3 2300 	ldrd	r2, r3, [r3]
    1436:	4641      	mov	r1, r8
    1438:	f7ff fac0 	bl	9bc <__aeabi_uldivmod>
	ticker_status = ticker_start(
    143c:	9508      	str	r5, [sp, #32]
    143e:	9506      	str	r5, [sp, #24]
    1440:	692b      	ldr	r3, [r5, #16]
    1442:	9304      	str	r3, [sp, #16]
		HAL_TICKER_REMAINDER(periodic_us),
    1444:	4b28      	ldr	r3, [pc, #160]	; (14e8 <ull_conn_update_ticker.constprop.0+0x120>)
    1446:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    144a:	fba7 3103 	umull	r3, r1, r7, r3
    144e:	1ae0      	subs	r0, r4, r3
	ticker_status = ticker_start(
    1450:	4b26      	ldr	r3, [pc, #152]	; (14ec <ull_conn_update_ticker.constprop.0+0x124>)
    1452:	9307      	str	r3, [sp, #28]
		HAL_TICKER_REMAINDER(periodic_us),
    1454:	f04f 0207 	mov.w	r2, #7
	ticker_status = ticker_start(
    1458:	4b25      	ldr	r3, [pc, #148]	; (14f0 <ull_conn_update_ticker.constprop.0+0x128>)
    145a:	9305      	str	r3, [sp, #20]
		HAL_TICKER_REMAINDER(periodic_us),
    145c:	fb02 1107 	mla	r1, r2, r7, r1
	ticker_status = ticker_start(
    1460:	f64f 73fe 	movw	r3, #65534	; 0xfffe
		HAL_TICKER_REMAINDER(periodic_us),
    1464:	eb68 0101 	sbc.w	r1, r8, r1
	ticker_status = ticker_start(
    1468:	9303      	str	r3, [sp, #12]
		HAL_TICKER_REMAINDER(periodic_us),
    146a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    146e:	2300      	movs	r3, #0
    1470:	f7ff faa4 	bl	9bc <__aeabi_uldivmod>
	ticker_status = ticker_start(
    1474:	f8cd b000 	str.w	fp, [sp]
    1478:	e9cd 7001 	strd	r7, r0, [sp, #4]
    147c:	4653      	mov	r3, sl
    147e:	4632      	mov	r2, r6
    1480:	2101      	movs	r1, #1
    1482:	2000      	movs	r0, #0
    1484:	f007 fe82 	bl	918c <ticker_start>
		ull_periph_ticker_cb,
#else
		ull_central_ticker_cb,
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CENTRAL */
		conn, ticker_start_conn_op_cb, (void *)conn);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1488:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    148c:	d00c      	beq.n	14a8 <ull_conn_update_ticker.constprop.0+0xe0>
    148e:	4a12      	ldr	r2, [pc, #72]	; (14d8 <ull_conn_update_ticker.constprop.0+0x110>)
    1490:	4912      	ldr	r1, [pc, #72]	; (14dc <ull_conn_update_ticker.constprop.0+0x114>)
    1492:	4813      	ldr	r0, [pc, #76]	; (14e0 <ull_conn_update_ticker.constprop.0+0x118>)
    1494:	f640 031b 	movw	r3, #2075	; 0x81b
    1498:	f018 f8d1 	bl	1963e <assert_print>
    149c:	4040      	eors	r0, r0
    149e:	f380 8811 	msr	BASEPRI, r0
    14a2:	f04f 0003 	mov.w	r0, #3
    14a6:	df02      	svc	2
		  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, if disabled in this function */
	if (mayfly_was_enabled) {
    14a8:	f1b9 0f00 	cmp.w	r9, #0
    14ac:	d102      	bne.n	14b4 <ull_conn_update_ticker.constprop.0+0xec>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
	}
#endif /* CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO */
}
    14ae:	b00b      	add	sp, #44	; 0x2c
    14b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
    14b4:	2201      	movs	r2, #1
    14b6:	2102      	movs	r1, #2
    14b8:	4610      	mov	r0, r2
}
    14ba:	b00b      	add	sp, #44	; 0x2c
    14bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1U);
    14c0:	f006 bc5a 	b.w	7d78 <mayfly_enable>
    14c4:	f3af 8000 	nop.w
    14c8:	1afd498d 	.word	0x1afd498d
    14cc:	00000007 	.word	0x00000007
    14d0:	20000e08 	.word	0x20000e08
    14d4:	0000c9a1 	.word	0x0000c9a1
    14d8:	0001e678 	.word	0x0001e678
    14dc:	0001e73c 	.word	0x0001e73c
    14e0:	0001e1a4 	.word	0x0001e1a4
    14e4:	3b9aca00 	.word	0x3b9aca00
    14e8:	1afd498d 	.word	0x1afd498d
    14ec:	0000c949 	.word	0x0000c949
    14f0:	00011bed 	.word	0x00011bed
    14f4:	00000000 	.word	0x00000000

000014f8 <ull_conn_done>:
{
    14f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
    14fc:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    14fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1500:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1504:	429a      	cmp	r2, r3
{
    1506:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    1508:	f000 8088 	beq.w	161c <ull_conn_done+0x124>
    150c:	4605      	mov	r5, r0
	ull_cp_tx_ntf(conn);
    150e:	4620      	mov	r0, r4
    1510:	f00d fe36 	bl	f180 <ull_cp_tx_ntf>
	switch (done->extra.mic_state) {
    1514:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    1518:	2b01      	cmp	r3, #1
    151a:	f000 810a 	beq.w	1732 <ull_conn_done+0x23a>
    151e:	2b02      	cmp	r3, #2
    1520:	f000 80fd 	beq.w	171e <ull_conn_done+0x226>
    1524:	2b00      	cmp	r3, #0
    1526:	f000 80dc 	beq.w	16e2 <ull_conn_done+0x1ea>
	reason_final = conn->llcp_terminate.reason_final;
    152a:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
	if (reason_final) {
    152e:	2f00      	cmp	r7, #0
    1530:	f040 80f8 	bne.w	1724 <ull_conn_done+0x22c>
	if (lll->latency_prepare) {
    1534:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
	latency_event = lll->latency_event;
    1536:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (lll->latency_prepare) {
    153a:	2e00      	cmp	r6, #0
    153c:	d171      	bne.n	1622 <ull_conn_done+0x12a>
	if (done->extra.trx_cnt) {
    153e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + 1U;
    1540:	f108 0601 	add.w	r6, r8, #1
	ticks_drift_plus = 0U;
    1544:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
    1546:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + 1U;
    154a:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
    154c:	2a00      	cmp	r2, #0
    154e:	d070      	beq.n	1632 <ull_conn_done+0x13a>
		} else if (lll->role) {
    1550:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    1554:	2b00      	cmp	r3, #0
    1556:	f2c0 8143 	blt.w	17e0 <ull_conn_done+0x2e8>
		conn->connect_expire = 0U;
    155a:	2300      	movs	r3, #0
    155c:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
	if (done->extra.crc_valid) {
    1560:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    1564:	07d9      	lsls	r1, r3, #31
    1566:	f140 80ea 	bpl.w	173e <ull_conn_done+0x246>
		conn->supervision_expire = 0U;
    156a:	2300      	movs	r3, #0
    156c:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
	if (-ETIMEDOUT == ull_cp_prt_elapse(conn, elapsed_event, &error_code)) {
    1570:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1574:	4631      	mov	r1, r6
    1576:	4620      	mov	r0, r4
    1578:	f00d fbc2 	bl	ed00 <ull_cp_prt_elapse>
    157c:	3074      	adds	r0, #116	; 0x74
    157e:	f000 8141 	beq.w	1804 <ull_conn_done+0x30c>
	if (conn->apto_expire != 0U) {
    1582:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    1586:	b12b      	cbz	r3, 1594 <ull_conn_done+0x9c>
		if (conn->apto_expire > elapsed_event) {
    1588:	42b3      	cmp	r3, r6
    158a:	f240 8108 	bls.w	179e <ull_conn_done+0x2a6>
			conn->apto_expire -= elapsed_event;
    158e:	1b9b      	subs	r3, r3, r6
    1590:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	if (conn->appto_expire != 0U) {
    1594:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
    1598:	b12b      	cbz	r3, 15a6 <ull_conn_done+0xae>
		if (conn->appto_expire > elapsed_event) {
    159a:	42b3      	cmp	r3, r6
    159c:	f240 80f6 	bls.w	178c <ull_conn_done+0x294>
			conn->appto_expire -= elapsed_event;
    15a0:	1b9b      	subs	r3, r3, r6
    15a2:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
	if ((force) || (latency_event != lll->latency_event)) {
    15a6:	8e25      	ldrh	r5, [r4, #48]	; 0x30
    15a8:	b917      	cbnz	r7, 15b0 <ull_conn_done+0xb8>
    15aa:	45a8      	cmp	r8, r5
    15ac:	f000 80e5 	beq.w	177a <ull_conn_done+0x282>
		lazy = lll->latency_event + 1U;
    15b0:	3501      	adds	r5, #1
    15b2:	b2ad      	uxth	r5, r5
	if (lll->evt_len_upd) {
    15b4:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    15b8:	f013 0601 	ands.w	r6, r3, #1
    15bc:	d159      	bne.n	1672 <ull_conn_done+0x17a>
	if (ticks_drift_plus || ticks_drift_minus ||
    15be:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
    15c2:	460a      	mov	r2, r1
    15c4:	2b00      	cmp	r3, #0
    15c6:	f040 80e8 	bne.w	179a <ull_conn_done+0x2a2>
    15ca:	2900      	cmp	r1, #0
    15cc:	f000 80d7 	beq.w	177e <ull_conn_done+0x286>
	ticks_slot_plus = 0U;
    15d0:	461e      	mov	r6, r3
	ticks_slot_minus = 0U;
    15d2:	4618      	mov	r0, r3
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    15d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
    15d6:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    15d8:	9406      	str	r4, [sp, #24]
    15da:	e9cd 5703 	strd	r5, r7, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    15de:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    15e0:	4da5      	ldr	r5, [pc, #660]	; (1878 <ull_conn_done+0x380>)
    15e2:	9002      	str	r0, [sp, #8]
    15e4:	e9cd 1600 	strd	r1, r6, [sp]
    15e8:	b2d2      	uxtb	r2, r2
    15ea:	2101      	movs	r1, #1
    15ec:	2000      	movs	r0, #0
    15ee:	9505      	str	r5, [sp, #20]
    15f0:	f007 fe46 	bl	9280 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    15f4:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    15f8:	d010      	beq.n	161c <ull_conn_done+0x124>
    15fa:	f008 fce3 	bl	9fc4 <ull_disable_mark_get>
    15fe:	4284      	cmp	r4, r0
    1600:	d00c      	beq.n	161c <ull_conn_done+0x124>
    1602:	4a9e      	ldr	r2, [pc, #632]	; (187c <ull_conn_done+0x384>)
    1604:	499e      	ldr	r1, [pc, #632]	; (1880 <ull_conn_done+0x388>)
    1606:	489f      	ldr	r0, [pc, #636]	; (1884 <ull_conn_done+0x38c>)
    1608:	f240 43ec 	movw	r3, #1260	; 0x4ec
    160c:	f018 f817 	bl	1963e <assert_print>
    1610:	4040      	eors	r0, r0
    1612:	f380 8811 	msr	BASEPRI, r0
    1616:	f04f 0003 	mov.w	r0, #3
    161a:	df02      	svc	2
}
    161c:	b00d      	add	sp, #52	; 0x34
    161e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.trx_cnt) {
    1622:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + lll->latency_prepare;
    1624:	4446      	add	r6, r8
	ticks_drift_plus = 0U;
    1626:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
    1628:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		elapsed_event = latency_event + lll->latency_prepare;
    162c:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
    162e:	2a00      	cmp	r2, #0
    1630:	d18e      	bne.n	1550 <ull_conn_done+0x58>
	if (done->extra.crc_valid) {
    1632:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    1636:	07da      	lsls	r2, r3, #31
    1638:	d497      	bmi.n	156a <ull_conn_done+0x72>
	else if (conn->connect_expire) {
    163a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    163e:	2b00      	cmp	r3, #0
    1640:	d07d      	beq.n	173e <ull_conn_done+0x246>
		if (conn->connect_expire > elapsed_event) {
    1642:	42b3      	cmp	r3, r6
    1644:	f240 80f6 	bls.w	1834 <ull_conn_done+0x33c>
			conn->connect_expire -= elapsed_event;
    1648:	1b9b      	subs	r3, r3, r6
    164a:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
	if (conn->supervision_expire) {
    164e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
    1652:	2b00      	cmp	r3, #0
    1654:	d08c      	beq.n	1570 <ull_conn_done+0x78>
		if (conn->supervision_expire > elapsed_event) {
    1656:	429e      	cmp	r6, r3
    1658:	f080 80da 	bcs.w	1810 <ull_conn_done+0x318>
			conn->supervision_expire -= elapsed_event;
    165c:	1b9b      	subs	r3, r3, r6
    165e:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
    1660:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
    1662:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
    1664:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
			lll->latency_event = 0U;
    1668:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
    166a:	f200 80a8 	bhi.w	17be <ull_conn_done+0x2c6>
				force = 1U;
    166e:	2701      	movs	r7, #1
    1670:	e77e      	b.n	1570 <ull_conn_done+0x78>
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    1672:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		lll->evt_len_upd = 0;
    1676:	f36f 0300 	bfc	r3, #0, #1
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    167a:	2a00      	cmp	r2, #0
		lll->evt_len_upd = 0;
    167c:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    1680:	db73      	blt.n	176a <ull_conn_done+0x272>
			lll_radio_tx_ready_delay_get(lll->phy_tx, lll->phy_flags);
    1682:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    1686:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    168a:	f000 0007 	and.w	r0, r0, #7
    168e:	f010 fff3 	bl	12678 <lll_radio_tx_ready_delay_get>
		rx_time = lll->dle.eff.max_rx_time;
    1692:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
		tx_time = lll->dle.eff.max_tx_time;
    1696:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
		ticks_slot = HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    169a:	4419      	add	r1, r3
    169c:	f201 11ad 	addw	r1, r1, #429	; 0x1ad
    16a0:	4408      	add	r0, r1
    16a2:	4979      	ldr	r1, [pc, #484]	; (1888 <ull_conn_done+0x390>)
    16a4:	a372      	add	r3, pc, #456	; (adr r3, 1870 <ull_conn_done+0x378>)
    16a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    16aa:	fba0 0101 	umull	r0, r1, r0, r1
    16ae:	f7ff f985 	bl	9bc <__aeabi_uldivmod>
	if (ticks_drift_plus || ticks_drift_minus ||
    16b2:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
		ticks_slot = HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    16b6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		if (ticks_slot > conn->ull.ticks_slot) {
    16ba:	6920      	ldr	r0, [r4, #16]
		conn->ull.ticks_slot = ticks_slot;
    16bc:	6122      	str	r2, [r4, #16]
		if (ticks_slot > conn->ull.ticks_slot) {
    16be:	4290      	cmp	r0, r2
			ticks_slot_plus = ticks_slot - conn->ull.ticks_slot;
    16c0:	bf35      	itete	cc
    16c2:	1a16      	subcc	r6, r2, r0
			ticks_slot_minus = conn->ull.ticks_slot - ticks_slot;
    16c4:	1a80      	subcs	r0, r0, r2
	ticks_slot_minus = 0U;
    16c6:	2000      	movcc	r0, #0
	ticks_slot_plus = 0U;
    16c8:	2600      	movcs	r6, #0
	if (ticks_drift_plus || ticks_drift_minus ||
    16ca:	460a      	mov	r2, r1
    16cc:	2b00      	cmp	r3, #0
    16ce:	d181      	bne.n	15d4 <ull_conn_done+0xdc>
    16d0:	ea56 0c01 	orrs.w	ip, r6, r1
    16d4:	f47f af7e 	bne.w	15d4 <ull_conn_done+0xdc>
	    ticks_slot_plus || ticks_slot_minus ||
    16d8:	2800      	cmp	r0, #0
    16da:	d050      	beq.n	177e <ull_conn_done+0x286>
    16dc:	4619      	mov	r1, r3
    16de:	461e      	mov	r6, r3
    16e0:	e778      	b.n	15d4 <ull_conn_done+0xdc>
		if (lll->enc_rx && lll->enc_tx) {
    16e2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    16e6:	f003 0318 	and.w	r3, r3, #24
    16ea:	2b18      	cmp	r3, #24
    16ec:	f47f af1d 	bne.w	152a <ull_conn_done+0x32>
					    (lll->latency + 6)) ?
    16f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
    16f2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
					    (lll->latency + 6)) ?
    16f6:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
    16f8:	429a      	cmp	r2, r3
    16fa:	bfc4      	itt	gt
    16fc:	1f93      	subgt	r3, r2, #6
    16fe:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
    1700:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
			appto_reload_new = (conn->apto_reload >
    1704:	bfcc      	ite	gt
    1706:	b29b      	uxthgt	r3, r3
    1708:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
    170a:	4299      	cmp	r1, r3
    170c:	f000 808c 	beq.w	1828 <ull_conn_done+0x330>
				conn->appto_reload = appto_reload_new;
    1710:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				conn->appto_expire = conn->appto_reload;
    1714:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				conn->apto_expire = conn->apto_reload;
    1718:	f8a4 2188 	strh.w	r2, [r4, #392]	; 0x188
    171c:	e705      	b.n	152a <ull_conn_done+0x32>
		conn->llcp_terminate.reason_final =
    171e:	273d      	movs	r7, #61	; 0x3d
    1720:	f884 7150 	strb.w	r7, [r4, #336]	; 0x150
		conn_cleanup(conn, reason_final);
    1724:	4639      	mov	r1, r7
    1726:	4620      	mov	r0, r4
}
    1728:	b00d      	add	sp, #52	; 0x34
    172a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_final);
    172e:	f00b bcd3 	b.w	d0d8 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
    1732:	2300      	movs	r3, #0
    1734:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
    1738:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
		break;
    173c:	e6f5      	b.n	152a <ull_conn_done+0x32>
		if (!conn->supervision_expire) {
    173e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
    1742:	2b00      	cmp	r3, #0
    1744:	d187      	bne.n	1656 <ull_conn_done+0x15e>
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    1746:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			conn->supervision_expire = RADIO_CONN_EVENTS(
    1748:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
			const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    174c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1750:	fb01 f202 	mul.w	r2, r1, r2
			conn->supervision_expire = RADIO_CONN_EVENTS(
    1754:	f242 7110 	movw	r1, #10000	; 0x2710
    1758:	fb01 2303 	mla	r3, r1, r3, r2
    175c:	3b01      	subs	r3, #1
    175e:	fbb3 f3f2 	udiv	r3, r3, r2
    1762:	b29b      	uxth	r3, r3
    1764:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
    1768:	e773      	b.n	1652 <ull_conn_done+0x15a>
			lll_radio_rx_ready_delay_get(lll->phy_rx, PHY_FLAGS_S8) :
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	2101      	movs	r1, #1
    1770:	f000 0007 	and.w	r0, r0, #7
    1774:	f010 ff82 	bl	1267c <lll_radio_rx_ready_delay_get>
    1778:	e78b      	b.n	1692 <ull_conn_done+0x19a>
	lazy = 0U;
    177a:	463d      	mov	r5, r7
    177c:	e71a      	b.n	15b4 <ull_conn_done+0xbc>
	    ticks_slot_plus || ticks_slot_minus ||
    177e:	2d00      	cmp	r5, #0
    1780:	d04b      	beq.n	181a <ull_conn_done+0x322>
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1782:	2600      	movs	r6, #0
    1784:	4611      	mov	r1, r2
    1786:	4630      	mov	r0, r6
    1788:	4633      	mov	r3, r6
    178a:	e723      	b.n	15d4 <ull_conn_done+0xdc>
			conn->appto_expire = 0U;
    178c:	2300      	movs	r3, #0
    178e:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
			ull_cp_le_ping(conn);
    1792:	4620      	mov	r0, r4
    1794:	f00d fb54 	bl	ee40 <ull_cp_le_ping>
    1798:	e705      	b.n	15a6 <ull_conn_done+0xae>
	ticks_slot_minus = 0U;
    179a:	4630      	mov	r0, r6
    179c:	e71a      	b.n	15d4 <ull_conn_done+0xdc>
			rx = ll_pdu_rx_alloc();
    179e:	f008 fb89 	bl	9eb4 <ll_pdu_rx_alloc>
			if (rx) {
    17a2:	4601      	mov	r1, r0
    17a4:	2800      	cmp	r0, #0
    17a6:	d03b      	beq.n	1820 <ull_conn_done+0x328>
				conn->apto_expire = 0U;
    17a8:	2300      	movs	r3, #0
    17aa:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				rx->handle = lll->handle;
    17ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    17b0:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    17b2:	231b      	movs	r3, #27
    17b4:	7103      	strb	r3, [r0, #4]
				ll_rx_put_sched(rx->link, rx);
    17b6:	6800      	ldr	r0, [r0, #0]
    17b8:	f008 fb46 	bl	9e48 <ll_rx_put_sched>
    17bc:	e6ea      	b.n	1594 <ull_conn_done+0x9c>
			else if (lll->role) {
    17be:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    17c2:	4293      	cmp	r3, r2
    17c4:	f6bf aed4 	bge.w	1570 <ull_conn_done+0x78>
				if (latency_event) {
    17c8:	f1b8 0f00 	cmp.w	r8, #0
    17cc:	f47f af4f 	bne.w	166e <ull_conn_done+0x176>
					force = conn->periph.force & 0x01;
    17d0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
					conn->periph.force >>= 1U;
    17d4:	085a      	lsrs	r2, r3, #1
					if (force) {
    17d6:	07db      	lsls	r3, r3, #31
    17d8:	d443      	bmi.n	1862 <ull_conn_done+0x36a>
					conn->periph.force >>= 1U;
    17da:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
    17de:	e6c7      	b.n	1570 <ull_conn_done+0x78>
			ull_drift_ticks_get(done, &ticks_drift_plus,
    17e0:	4628      	mov	r0, r5
    17e2:	aa0a      	add	r2, sp, #40	; 0x28
    17e4:	a90b      	add	r1, sp, #44	; 0x2c
			if (!ull_tx_q_peek(&conn->tx_q)) {
    17e6:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
			ull_drift_ticks_get(done, &ticks_drift_plus,
    17ea:	f7ff fba9 	bl	f40 <ull_drift_ticks_get>
			if (!ull_tx_q_peek(&conn->tx_q)) {
    17ee:	4648      	mov	r0, r9
    17f0:	f00d f848 	bl	e884 <ull_tx_q_peek>
    17f4:	b318      	cbz	r0, 183e <ull_conn_done+0x346>
			if (ull_tx_q_peek(&conn->tx_q) ||
    17f6:	4648      	mov	r0, r9
    17f8:	f00d f844 	bl	e884 <ull_tx_q_peek>
    17fc:	b318      	cbz	r0, 1846 <ull_conn_done+0x34e>
				lll->latency_event = 0U;
    17fe:	2300      	movs	r3, #0
    1800:	8623      	strh	r3, [r4, #48]	; 0x30
    1802:	e6aa      	b.n	155a <ull_conn_done+0x62>
		conn_cleanup(conn, error_code);
    1804:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    1808:	4620      	mov	r0, r4
    180a:	f00b fc65 	bl	d0d8 <conn_cleanup>
		return;
    180e:	e705      	b.n	161c <ull_conn_done+0x124>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
    1810:	2108      	movs	r1, #8
    1812:	4620      	mov	r0, r4
    1814:	f00b fc60 	bl	d0d8 <conn_cleanup>
			return;
    1818:	e700      	b.n	161c <ull_conn_done+0x124>
	    lazy || force) {
    181a:	2f00      	cmp	r7, #0
    181c:	d1b1      	bne.n	1782 <ull_conn_done+0x28a>
    181e:	e6fd      	b.n	161c <ull_conn_done+0x124>
				conn->apto_expire = 1U;
    1820:	2301      	movs	r3, #1
    1822:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
    1826:	e6b5      	b.n	1594 <ull_conn_done+0x9c>
			if (conn->apto_expire == 0U) {
    1828:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
    182c:	2900      	cmp	r1, #0
    182e:	f47f ae7c 	bne.w	152a <ull_conn_done+0x32>
    1832:	e76f      	b.n	1714 <ull_conn_done+0x21c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
    1834:	213e      	movs	r1, #62	; 0x3e
    1836:	4620      	mov	r0, r4
    1838:	f00b fc4e 	bl	d0d8 <conn_cleanup>
			return;
    183c:	e6ee      	b.n	161c <ull_conn_done+0x124>
				ull_conn_tx_demux(UINT8_MAX);
    183e:	20ff      	movs	r0, #255	; 0xff
    1840:	f00b fc0a 	bl	d058 <ull_conn_tx_demux>
    1844:	e7d7      	b.n	17f6 <ull_conn_done+0x2fe>
			    memq_peek(lll->memq_tx.head,
    1846:	4602      	mov	r2, r0
    1848:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    184c:	f006 fa5c 	bl	7d08 <memq_peek>
			if (ull_tx_q_peek(&conn->tx_q) ||
    1850:	2800      	cmp	r0, #0
    1852:	d1d4      	bne.n	17fe <ull_conn_done+0x306>
			} else if (lll->periph.latency_enabled) {
    1854:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    1858:	0758      	lsls	r0, r3, #29
				lll->latency_event = lll->latency;
    185a:	bf44      	itt	mi
    185c:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
    185e:	8623      	strhmi	r3, [r4, #48]	; 0x30
    1860:	e67b      	b.n	155a <ull_conn_done+0x62>
						conn->periph.force |= BIT(31);
    1862:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1866:	f8c4 2178 	str.w	r2, [r4, #376]	; 0x178
    186a:	e700      	b.n	166e <ull_conn_done+0x176>
    186c:	f3af 8000 	nop.w
    1870:	1afd498d 	.word	0x1afd498d
    1874:	00000007 	.word	0x00000007
    1878:	0000c909 	.word	0x0000c909
    187c:	0001e678 	.word	0x0001e678
    1880:	0001e7a0 	.word	0x0001e7a0
    1884:	0001e1a4 	.word	0x0001e1a4
    1888:	3b9aca00 	.word	0x3b9aca00
    188c:	00000000 	.word	0x00000000

00001890 <ull_conn_update_parameters>:

void ull_conn_update_parameters(struct ll_conn *conn, uint8_t is_cu_proc, uint8_t win_size,
				uint32_t win_offset_us, uint16_t interval, uint16_t latency,
				uint16_t timeout, uint16_t instant)
{
    1890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1894:	b087      	sub	sp, #28
    1896:	e9cd 2304 	strd	r2, r3, [sp, #16]
    189a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
	return hdr->ref;
    189e:	7803      	ldrb	r3, [r0, #0]
    18a0:	9202      	str	r2, [sp, #8]
    18a2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    18a6:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
    18aa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
		event_counter = lll->event_counter - 1;
    18ae:	8e46      	ldrh	r6, [r0, #50]	; 0x32
		event_counter = lll->event_counter + lll->latency_prepare +
    18b0:	f8b0 902e 	ldrh.w	r9, [r0, #46]	; 0x2e
				conn->llcp.prep.lazy;
    18b4:	f8b0 b114 	ldrh.w	fp, [r0, #276]	; 0x114
{
    18b8:	9101      	str	r1, [sp, #4]
    18ba:	4604      	mov	r4, r0
    18bc:	9203      	str	r2, [sp, #12]
	if (ull_ref_get(&conn->ull)) {
    18be:	2b00      	cmp	r3, #0
    18c0:	f000 808e 	beq.w	19e0 <ull_conn_update_parameters+0x150>
		event_counter = lll->event_counter - 1;
    18c4:	3e01      	subs	r6, #1
    18c6:	b2b6      	uxth	r6, r6

	ticks_at_expire = conn->llcp.prep.ticks_at_expire;

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
	/* restore to normal prepare */
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    18c8:	68a3      	ldr	r3, [r4, #8]
	ticks_at_expire = conn->llcp.prep.ticks_at_expire;
    18ca:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
	instant_latency = (event_counter - instant) & 0xFFFF;
    18ce:	1b72      	subs	r2, r6, r5
    18d0:	b292      	uxth	r2, r2
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    18d2:	2b00      	cmp	r3, #0
	instant_latency = (event_counter - instant) & 0xFFFF;
    18d4:	9200      	str	r2, [sp, #0]
	if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    18d6:	da09      	bge.n	18ec <ull_conn_update_parameters+0x5c>
		uint32_t ticks_prepare_to_start =
    18d8:	68e1      	ldr	r1, [r4, #12]
    18da:	6862      	ldr	r2, [r4, #4]
			MAX(conn->ull.ticks_active_to_start, conn->ull.ticks_preempt_to_start);

		conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    18dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    18e0:	4291      	cmp	r1, r2
    18e2:	bf2c      	ite	cs
    18e4:	187f      	addcs	r7, r7, r1
    18e6:	18bf      	addcc	r7, r7, r2
    18e8:	60a3      	str	r3, [r4, #8]

		ticks_at_expire -= (conn->ull.ticks_prepare_to_start - ticks_prepare_to_start);
    18ea:	1aff      	subs	r7, r7, r3
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

	/* compensate for instant_latency due to laziness */
	conn_interval_old = instant_latency * lll->interval;
    18ec:	9a00      	ldr	r2, [sp, #0]
    18ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    18f0:	fb13 f302 	smulbb	r3, r3, r2
    18f4:	b29b      	uxth	r3, r3
	latency_upd = conn_interval_old / interval;
    18f6:	fbb3 f2f8 	udiv	r2, r3, r8
	conn_interval_new = latency_upd * interval;
    18fa:	fb18 f002 	smulbb	r0, r8, r2
    18fe:	b280      	uxth	r0, r0
	if (conn_interval_new > conn_interval_old) {
    1900:	4283      	cmp	r3, r0
	latency_upd = conn_interval_old / interval;
    1902:	fa1f fa82 	uxth.w	sl, r2
	if (conn_interval_new > conn_interval_old) {
    1906:	d25a      	bcs.n	19be <ull_conn_update_parameters+0x12e>
		ticks_at_expire += HAL_TICKER_US_TO_TICKS((conn_interval_new - conn_interval_old) *
    1908:	1ac0      	subs	r0, r0, r3
    190a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    190e:	495e      	ldr	r1, [pc, #376]	; (1a88 <ull_conn_update_parameters+0x1f8>)
    1910:	fb02 f000 	mul.w	r0, r2, r0
    1914:	fba0 0101 	umull	r0, r1, r0, r1
    1918:	a359      	add	r3, pc, #356	; (adr r3, 1a80 <ull_conn_update_parameters+0x1f0>)
    191a:	e9d3 2300 	ldrd	r2, r3, [r3]
    191e:	f7ff f84d 	bl	9bc <__aeabi_uldivmod>
    1922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1926:	4407      	add	r7, r0
	} else {
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
							  CONN_INT_UNIT_US);
	}

	lll->latency_prepare += conn->llcp.prep.lazy;
    1928:	44d9      	add	r9, fp

	/* calculate the window widening and interval */
	conn_interval_us = interval * CONN_INT_UNIT_US;
	periodic_us = conn_interval_us;

	switch (lll->role) {
    192a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	lll->latency_prepare -= (instant_latency - latency_upd);
    192e:	444d      	add	r5, r9
    1930:	1bad      	subs	r5, r5, r6
    1932:	4455      	add	r5, sl
	conn_interval_us = interval * CONN_INT_UNIT_US;
    1934:	f240 46e2 	movw	r6, #1250	; 0x4e2
	switch (lll->role) {
    1938:	09db      	lsrs	r3, r3, #7
	lll->latency_prepare -= (instant_latency - latency_upd);
    193a:	85e5      	strh	r5, [r4, #46]	; 0x2e
	conn_interval_us = interval * CONN_INT_UNIT_US;
    193c:	fb06 f508 	mul.w	r5, r6, r8
	switch (lll->role) {
    1940:	d152      	bne.n	19e8 <ull_conn_update_parameters+0x158>
		 */
		ticks_win_offset += 1U;
		break;
#endif /*CONFIG_BT_CENTRAL */
	default:
		LL_ASSERT(0);
    1942:	4a52      	ldr	r2, [pc, #328]	; (1a8c <ull_conn_update_parameters+0x1fc>)
    1944:	4952      	ldr	r1, [pc, #328]	; (1a90 <ull_conn_update_parameters+0x200>)
    1946:	4853      	ldr	r0, [pc, #332]	; (1a94 <ull_conn_update_parameters+0x204>)
    1948:	f640 0391 	movw	r3, #2193	; 0x891
    194c:	f017 fe77 	bl	1963e <assert_print>
    1950:	4040      	eors	r0, r0
    1952:	f380 8811 	msr	BASEPRI, r0
    1956:	f04f 0003 	mov.w	r0, #3
    195a:	df02      	svc	2
	uint32_t ticks_win_offset = 0U;
    195c:	2600      	movs	r6, #0
	periodic_us = conn_interval_us;
    195e:	46a9      	mov	r9, r5
		break;
	}

	lll->interval = interval;
	lll->latency = latency;
    1960:	9b02      	ldr	r3, [sp, #8]
    1962:	85a3      	strh	r3, [r4, #44]	; 0x2c

	conn->supervision_timeout = timeout;
    1964:	9b03      	ldr	r3, [sp, #12]
    1966:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
	ull_cp_prt_reload_set(conn, conn_interval_us);
    196a:	4629      	mov	r1, r5
    196c:	4620      	mov	r0, r4
	lll->interval = interval;
    196e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
	ull_cp_prt_reload_set(conn, conn_interval_us);
    1972:	f00d fa01 	bl	ed78 <ull_cp_prt_reload_set>

#if defined(CONFIG_BT_CTLR_LE_PING)
	/* APTO in no. of connection events */
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    1976:	4b48      	ldr	r3, [pc, #288]	; (1a98 <ull_conn_update_parameters+0x208>)
	/* Dispatch LE Ping PDU 6 connection events (that peer would
	 * listen to) before 30s timeout
	 * TODO: "peer listens to" is greater than 30s due to latency
	 */
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1978:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    197a:	442b      	add	r3, r5
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    197c:	1d88      	adds	r0, r1, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    197e:	fbb3 f3f5 	udiv	r3, r3, r5
    1982:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1984:	4290      	cmp	r0, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30U * 1000U * 1000U), conn_interval_us);
    1986:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    198a:	d202      	bcs.n	1992 <ull_conn_update_parameters+0x102>
					   (conn->apto_reload - (lll->latency + 6U)) :
    198c:	1a52      	subs	r2, r2, r1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    198e:	3a06      	subs	r2, #6
    1990:	b292      	uxth	r2, r2
					   conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	if (is_cu_proc) {
    1992:	9b01      	ldr	r3, [sp, #4]
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6U)) ?
    1994:	f8a4 2182 	strh.w	r2, [r4, #386]	; 0x182
	if (is_cu_proc) {
    1998:	b113      	cbz	r3, 19a0 <ull_conn_update_parameters+0x110>
		conn->supervision_expire = 0U;
    199a:	2300      	movs	r3, #0
    199c:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
	}

	/* Update ACL ticker */
	ull_conn_update_ticker(conn, ticks_win_offset, ticks_slot_overhead, periodic_us,
    19a0:	463b      	mov	r3, r7
    19a2:	464a      	mov	r2, r9
    19a4:	4631      	mov	r1, r6
    19a6:	4620      	mov	r0, r4
    19a8:	f7ff fd0e 	bl	13c8 <ull_conn_update_ticker.constprop.0>
			       ticks_at_expire);
	/* Signal that the prepare needs to be canceled */
	conn->cancel_prepare = 1U;
    19ac:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    19b0:	f043 0301 	orr.w	r3, r3, #1
    19b4:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
}
    19b8:	b007      	add	sp, #28
    19ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS((conn_interval_old - conn_interval_new) *
    19be:	fb08 3112 	mls	r1, r8, r2, r3
    19c2:	4831      	ldr	r0, [pc, #196]	; (1a88 <ull_conn_update_parameters+0x1f8>)
    19c4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    19c8:	b289      	uxth	r1, r1
    19ca:	fb03 f101 	mul.w	r1, r3, r1
    19ce:	fba1 0100 	umull	r0, r1, r1, r0
    19d2:	a32b      	add	r3, pc, #172	; (adr r3, 1a80 <ull_conn_update_parameters+0x1f0>)
    19d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    19d8:	f7fe fff0 	bl	9bc <__aeabi_uldivmod>
    19dc:	1a3f      	subs	r7, r7, r0
    19de:	e7a3      	b.n	1928 <ull_conn_update_parameters+0x98>
		event_counter = lll->event_counter + lll->latency_prepare +
    19e0:	444e      	add	r6, r9
    19e2:	445e      	add	r6, fp
    19e4:	b2b6      	uxth	r6, r6
	return event_counter;
    19e6:	e76f      	b.n	18c8 <ull_conn_update_parameters+0x38>
			lll->periph.window_widening_periodic_us * instant_latency;
    19e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
		lll->periph.window_widening_prepare_us -=
    19ea:	9900      	ldr	r1, [sp, #0]
    19ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
    19ee:	f8df b098 	ldr.w	fp, [pc, #152]	; 1a88 <ull_conn_update_parameters+0x1f8>
		lll->periph.window_widening_prepare_us -=
    19f2:	fb02 3311 	mls	r3, r2, r1, r3
    19f6:	64a3      	str	r3, [r4, #72]	; 0x48
			DIV_ROUND_UP(((lll_clock_ppm_local_get() +
    19f8:	f011 f82c 	bl	12a54 <lll_clock_ppm_local_get>
    19fc:	4681      	mov	r9, r0
    19fe:	f894 0174 	ldrb.w	r0, [r4, #372]	; 0x174
    1a02:	f3c0 0042 	ubfx	r0, r0, #1, #3
    1a06:	f011 f827 	bl	12a58 <lll_clock_ppm_get>
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
    1a0a:	9b04      	ldr	r3, [sp, #16]
			DIV_ROUND_UP(((lll_clock_ppm_local_get() +
    1a0c:	4481      	add	r9, r0
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
    1a0e:	fb06 f303 	mul.w	r3, r6, r3
			DIV_ROUND_UP(((lll_clock_ppm_local_get() +
    1a12:	fb05 f909 	mul.w	r9, r5, r9
		lll->periph.window_size_prepare_us = win_size * CONN_INT_UNIT_US;
    1a16:	6523      	str	r3, [r4, #80]	; 0x50
			DIV_ROUND_UP(((lll_clock_ppm_local_get() +
    1a18:	f509 2974 	add.w	r9, r9, #999424	; 0xf4000
    1a1c:	4b1f      	ldr	r3, [pc, #124]	; (1a9c <ull_conn_update_parameters+0x20c>)
    1a1e:	f209 293f 	addw	r9, r9, #575	; 0x23f
    1a22:	fba3 3909 	umull	r3, r9, r3, r9
    1a26:	ea4f 4399 	mov.w	r3, r9, lsr #18
			lll->periph.window_widening_periodic_us * latency_upd;
    1a2a:	fb03 f00a 	mul.w	r0, r3, sl
		lll->periph.window_widening_periodic_us =
    1a2e:	6423      	str	r3, [r4, #64]	; 0x40
		periodic_us -= lll->periph.window_widening_periodic_us;
    1a30:	eba5 0903 	sub.w	r9, r5, r3
		lll->periph.window_widening_prepare_us +=
    1a34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
    1a36:	086a      	lsrs	r2, r5, #1
		lll->periph.window_widening_prepare_us +=
    1a38:	4403      	add	r3, r0
		lll->periph.window_widening_max_us = (conn_interval_us >> 1U) - EVENT_IFS_US;
    1a3a:	3a96      	subs	r2, #150	; 0x96
    1a3c:	4293      	cmp	r3, r2
    1a3e:	bf28      	it	cs
    1a40:	4613      	movcs	r3, r2
    1a42:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
		conn->periph.ticks_to_offset = 0U;
    1a46:	2300      	movs	r3, #0
    1a48:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
    1a4c:	fba0 010b 	umull	r0, r1, r0, fp
    1a50:	a30b      	add	r3, pc, #44	; (adr r3, 1a80 <ull_conn_update_parameters+0x1f0>)
    1a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a56:	f7fe ffb1 	bl	9bc <__aeabi_uldivmod>
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
    1a5a:	4b11      	ldr	r3, [pc, #68]	; (1aa0 <ull_conn_update_parameters+0x210>)
    1a5c:	9a05      	ldr	r2, [sp, #20]
		ticks_at_expire -= HAL_TICKER_US_TO_TICKS(lll->periph.window_widening_periodic_us *
    1a5e:	1a3f      	subs	r7, r7, r0
		ticks_win_offset = HAL_TICKER_US_TO_TICKS((win_offset_us / CONN_INT_UNIT_US) *
    1a60:	fba3 3002 	umull	r3, r0, r3, r2
    1a64:	0a80      	lsrs	r0, r0, #10
    1a66:	fb06 f000 	mul.w	r0, r6, r0
    1a6a:	a305      	add	r3, pc, #20	; (adr r3, 1a80 <ull_conn_update_parameters+0x1f0>)
    1a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a70:	fba0 010b 	umull	r0, r1, r0, fp
    1a74:	f7fe ffa2 	bl	9bc <__aeabi_uldivmod>
    1a78:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
		break;
    1a7c:	e770      	b.n	1960 <ull_conn_update_parameters+0xd0>
    1a7e:	bf00      	nop
    1a80:	1afd498d 	.word	0x1afd498d
    1a84:	00000007 	.word	0x00000007
    1a88:	3b9aca00 	.word	0x3b9aca00
    1a8c:	0001e678 	.word	0x0001e678
    1a90:	0001e220 	.word	0x0001e220
    1a94:	0001e1a4 	.word	0x0001e1a4
    1a98:	01c9c37f 	.word	0x01c9c37f
    1a9c:	431bde83 	.word	0x431bde83
    1aa0:	d1b71759 	.word	0xd1b71759
    1aa4:	00000000 	.word	0x00000000

00001aa8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1aac:	680b      	ldr	r3, [r1, #0]
    1aae:	f8d3 9000 	ldr.w	r9, [r3]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    1ab2:	7f03      	ldrb	r3, [r0, #28]
{
    1ab4:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
    1ab6:	4690      	mov	r8, r2
	peer_addr_type = pdu_adv->tx_addr;
    1ab8:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    1abc:	4615      	mov	r5, r2
    1abe:	4604      	mov	r4, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1ac0:	2206      	movs	r2, #6
{
    1ac2:	460e      	mov	r6, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1ac4:	f100 011e 	add.w	r1, r0, #30
    1ac8:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    1aca:	930b      	str	r3, [sp, #44]	; 0x2c
	conn = lll->hdr.parent;
    1acc:	f858 7b08 	ldr.w	r7, [r8], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1ad0:	f018 f890 	bl	19bf4 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1ad4:	a910      	add	r1, sp, #64	; 0x40
    1ad6:	2206      	movs	r2, #6
    1ad8:	a80e      	add	r0, sp, #56	; 0x38
    1ada:	f018 f88b 	bl	19bf4 <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    1ade:	4621      	mov	r1, r4
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1ae0:	4640      	mov	r0, r8
	link = rx->link;
    1ae2:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1ae6:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1ae8:	f105 0a04 	add.w	sl, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1aec:	f018 f882 	bl	19bf4 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1af0:	f105 0818 	add.w	r8, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1af4:	2204      	movs	r2, #4
    1af6:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    1afa:	4650      	mov	r0, sl
    1afc:	f018 f87a 	bl	19bf4 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1b00:	2205      	movs	r2, #5
    1b02:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    1b06:	4640      	mov	r0, r8
    1b08:	f018 f874 	bl	19bf4 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1b0c:	4640      	mov	r0, r8
    1b0e:	2105      	movs	r1, #5
    1b10:	f006 fa6c 	bl	7fec <util_ones_count_get>
    1b14:	7f6b      	ldrb	r3, [r5, #29]
    1b16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    1b1a:	f360 0305 	bfi	r3, r0, #0, #6
    1b1e:	776b      	strb	r3, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1b20:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    1b24:	f3c3 0204 	ubfx	r2, r3, #0, #5
    1b28:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1b2a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    1b2c:	81ea      	strh	r2, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    1b2e:	2801      	cmp	r0, #1
    1b30:	d908      	bls.n	1b44 <ull_periph_setup+0x9c>
    1b32:	f003 031f 	and.w	r3, r3, #31
    1b36:	331b      	adds	r3, #27
    1b38:	f003 031f 	and.w	r3, r3, #31
    1b3c:	2b0b      	cmp	r3, #11
    1b3e:	d801      	bhi.n	1b44 <ull_periph_setup+0x9c>
    1b40:	b292      	uxth	r2, r2
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    1b42:	b9ba      	cbnz	r2, 1b74 <ull_periph_setup+0xcc>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    1b44:	2200      	movs	r2, #0
    1b46:	f8c9 2014 	str.w	r2, [r9, #20]

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
    1b4a:	f895 3020 	ldrb.w	r3, [r5, #32]
    1b4e:	f362 0300 	bfi	r3, r2, #0, #1
    1b52:	f885 3020 	strb.w	r3, [r5, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    1b56:	68e5      	ldr	r5, [r4, #12]
	rx->type = NODE_RX_TYPE_RELEASE;
    1b58:	2601      	movs	r6, #1

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    1b5a:	4658      	mov	r0, fp
    1b5c:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
    1b5e:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
    1b60:	f008 f968 	bl	9e34 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put_sched(link, rx);
    1b64:	6828      	ldr	r0, [r5, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    1b66:	712e      	strb	r6, [r5, #4]
	ll_rx_put_sched(link, rx);
    1b68:	4629      	mov	r1, r5
    1b6a:	f008 f96d 	bl	9e48 <ll_rx_put_sched>
}
    1b6e:	b013      	add	sp, #76	; 0x4c
    1b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    1b74:	6833      	ldr	r3, [r6, #0]
    1b76:	2100      	movs	r1, #0
    1b78:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1b7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1b7c:	89ea      	ldrh	r2, [r5, #14]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1b7e:	822b      	strh	r3, [r5, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1b80:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1b84:	fb03 f802 	mul.w	r8, r3, r2
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
    1b88:	4638      	mov	r0, r7
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1b8a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1b8c:	930d      	str	r3, [sp, #52]	; 0x34
	ull_cp_state_set(conn, ULL_CP_CONNECTED);
    1b8e:	f00d f907 	bl	eda0 <ull_cp_state_set>
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1b92:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
    1b96:	f897 1174 	ldrb.w	r1, [r7, #372]	; 0x174
    1b9a:	0952      	lsrs	r2, r2, #5
    1b9c:	f362 0143 	bfi	r1, r2, #1, #3
    1ba0:	f887 1174 	strb.w	r1, [r7, #372]	; 0x174
		DIV_ROUND_UP(((lll_clock_ppm_local_get() +
    1ba4:	f010 ff56 	bl	12a54 <lll_clock_ppm_local_get>
    1ba8:	900c      	str	r0, [sp, #48]	; 0x30
    1baa:	f897 0174 	ldrb.w	r0, [r7, #372]	; 0x174
    1bae:	f3c0 0042 	ubfx	r0, r0, #1, #3
    1bb2:	f010 ff51 	bl	12a58 <lll_clock_ppm_get>
    1bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bb8:	4410      	add	r0, r2
    1bba:	fb08 f000 	mul.w	r0, r8, r0
    1bbe:	4aa8      	ldr	r2, [pc, #672]	; (1e60 <ull_periph_setup+0x3b8>)
    1bc0:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1bc4:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1bc8:	fba2 2000 	umull	r2, r0, r2, r0
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1bcc:	ea4f 0258 	mov.w	r2, r8, lsr #1
		DIV_ROUND_UP(((lll_clock_ppm_local_get() +
    1bd0:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1bd2:	3a96      	subs	r2, #150	; 0x96
	lll->periph.window_widening_periodic_us =
    1bd4:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1bd6:	62aa      	str	r2, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1bd8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    1bdc:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1be0:	fb02 f303 	mul.w	r3, r2, r3
    1be4:	63ab      	str	r3, [r5, #56]	; 0x38
	conn->supervision_timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1be6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    1be8:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
	ull_cp_prt_reload_set(conn, conn_interval_us);
    1bec:	4641      	mov	r1, r8
    1bee:	4638      	mov	r0, r7
    1bf0:	f00d f8c2 	bl	ed78 <ull_cp_prt_reload_set>
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1bf4:	4b9b      	ldr	r3, [pc, #620]	; (1e64 <ull_periph_setup+0x3bc>)
	conn->connect_accept_to = DEFAULT_CONNECTION_ACCEPT_TIMEOUT_US;
    1bf6:	4a9c      	ldr	r2, [pc, #624]	; (1e68 <ull_periph_setup+0x3c0>)
    1bf8:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1bfc:	4443      	add	r3, r8
    1bfe:	fbb3 f3f8 	udiv	r3, r3, r8
    1c02:	b29a      	uxth	r2, r3
    1c04:	f8a7 2186 	strh.w	r2, [r7, #390]	; 0x186
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1c08:	8a29      	ldrh	r1, [r5, #16]
    1c0a:	1d88      	adds	r0, r1, #6
    1c0c:	4282      	cmp	r2, r0
    1c0e:	dd04      	ble.n	1c1a <ull_periph_setup+0x172>
    1c10:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    1c14:	31fa      	adds	r1, #250	; 0xfa
    1c16:	440a      	add	r2, r1
    1c18:	b292      	uxth	r2, r2
    1c1a:	f8a7 2182 	strh.w	r2, [r7, #386]	; 0x182
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1c1e:	4651      	mov	r1, sl
    1c20:	2204      	movs	r2, #4
    1c22:	f507 70bc 	add.w	r0, r7, #376	; 0x178
    1c26:	f017 ffe5 	bl	19bf4 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    1c2a:	4623      	mov	r3, r4
    1c2c:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    1c30:	f3c2 1240 	ubfx	r2, r2, #5, #1
    1c34:	920c      	str	r2, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1c36:	07da      	lsls	r2, r3, #31
    1c38:	f100 80ed 	bmi.w	1e16 <ull_periph_setup+0x36e>
	cc->peer_addr_type = peer_addr_type;
    1c3c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    1c40:	77a3      	strb	r3, [r4, #30]
	cc->status = 0U;
    1c42:	f44f 7380 	mov.w	r3, #256	; 0x100
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1c46:	a90e      	add	r1, sp, #56	; 0x38
	cc->status = 0U;
    1c48:	83a3      	strh	r3, [r4, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1c4a:	2206      	movs	r2, #6
    1c4c:	f104 001f 	add.w	r0, r4, #31
    1c50:	f017 ffd0 	bl	19bf4 <memcpy>
	cc->interval = lll->interval;
    1c54:	89eb      	ldrh	r3, [r5, #14]
    1c56:	84e3      	strh	r3, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    1c58:	8a2b      	ldrh	r3, [r5, #16]
    1c5a:	8523      	strh	r3, [r4, #40]	; 0x28
	cc->timeout = conn->supervision_timeout;
    1c5c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
    1c60:	8563      	strh	r3, [r4, #42]	; 0x2a
	cc->sca = conn->periph.sca;
    1c62:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
    1c66:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1c6a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
    1c6e:	4638      	mov	r0, r7
    1c70:	f00a fece 	bl	ca10 <ll_conn_handle_get>
    1c74:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
    1c76:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    1c78:	4621      	mov	r1, r4
    1c7a:	4658      	mov	r0, fp
		rx_csa = (void *)ftr->extra;
    1c7c:	6874      	ldr	r4, [r6, #4]
		ll_rx_put(link, rx);
    1c7e:	f008 f8d9 	bl	9e34 <ll_rx_put>
		rx->handle = lll->handle;
    1c82:	89ab      	ldrh	r3, [r5, #12]
    1c84:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1c86:	231c      	movs	r3, #28
    1c88:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    1c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    1c8c:	f8d4 b000 	ldr.w	fp, [r4]
		if (chan_sel) {
    1c90:	2b00      	cmp	r3, #0
    1c92:	f040 80b6 	bne.w	1e02 <ull_periph_setup+0x35a>
    1c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			cs->csa = 0x00;
    1c98:	7723      	strb	r3, [r4, #28]
	ll_rx_put_sched(link, rx);
    1c9a:	4621      	mov	r1, r4
    1c9c:	4658      	mov	r0, fp
    1c9e:	f008 f8d3 	bl	9e48 <ll_rx_put_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1ca2:	f895 005b 	ldrb.w	r0, [r5, #91]	; 0x5b
	max_tx_time = lll->dle.eff.max_tx_time;
    1ca6:	f8b5 a050 	ldrh.w	sl, [r5, #80]	; 0x50
	max_rx_time = lll->dle.eff.max_rx_time;
    1caa:	f8b5 4052 	ldrh.w	r4, [r5, #82]	; 0x52
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1cae:	2101      	movs	r1, #1
    1cb0:	f000 0007 	and.w	r0, r0, #7
    1cb4:	f010 fce2 	bl	1267c <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1cb8:	4454      	add	r4, sl
    1cba:	f204 240d 	addw	r4, r4, #525	; 0x20d
    1cbe:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 1e6c <ull_periph_setup+0x3c4>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1cc2:	4683      	mov	fp, r0
	conn->ull.ticks_prepare_to_start =
    1cc4:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1cc6:	1820      	adds	r0, r4, r0
	conn->ull.ticks_active_to_start = 0U;
    1cc8:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1cca:	fba0 010a 	umull	r0, r1, r0, sl
	conn->ull.ticks_prepare_to_start =
    1cce:	60bb      	str	r3, [r7, #8]
	conn->ull.ticks_active_to_start = 0U;
    1cd0:	607c      	str	r4, [r7, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1cd2:	a361      	add	r3, pc, #388	; (adr r3, 1e58 <ull_periph_setup+0x3b0>)
    1cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_preempt_to_start =
    1cd8:	60fc      	str	r4, [r7, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1cda:	f7fe fe6f 	bl	9bc <__aeabi_uldivmod>
    1cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    1ce2:	6138      	str	r0, [r7, #16]
	conn_offset_us = ftr->radio_end_us;
    1ce4:	68f3      	ldr	r3, [r6, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1ce6:	990d      	ldr	r1, [sp, #52]	; 0x34
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1ce8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1cea:	f240 42e2 	movw	r2, #1250	; 0x4e2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1cee:	2001      	movs	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1cf0:	eba8 0505 	sub.w	r5, r8, r5
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1cf4:	fb02 3801 	mla	r8, r2, r1, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1cf8:	4622      	mov	r2, r4
    1cfa:	2102      	movs	r1, #2
    1cfc:	f006 f83c 	bl	7d78 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1d00:	4648      	mov	r0, r9
    1d02:	f00a fb9b 	bl	c43c <ull_adv_handle_get>
	conn_offset_us -= EVENT_JITTER_US;
    1d06:	f208 48b2 	addw	r8, r8, #1202	; 0x4b2
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1d0a:	4602      	mov	r2, r0
	conn_offset_us -= ready_delay_us;
    1d0c:	eba8 080b 	sub.w	r8, r8, fp
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    1d10:	fba8 010a 	umull	r0, r1, r8, sl
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1d14:	4692      	mov	sl, r2
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    1d16:	a350      	add	r3, pc, #320	; (adr r3, 1e58 <ull_periph_setup+0x3b0>)
    1d18:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d1c:	f7fe fe4e 	bl	9bc <__aeabi_uldivmod>
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    1d20:	f8cd 9004 	str.w	r9, [sp, #4]
	ticks_at_stop = ftr->ticks_anchor +
    1d24:	68b3      	ldr	r3, [r6, #8]
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    1d26:	4952      	ldr	r1, [pc, #328]	; (1e70 <ull_periph_setup+0x3c8>)
    1d28:	9100      	str	r1, [sp, #0]
			HAL_TICKER_US_TO_TICKS(conn_offset_us) -
    1d2a:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1d2e:	f10a 0202 	add.w	r2, sl, #2
	ticks_at_stop = ftr->ticks_anchor +
    1d32:	3b3a      	subs	r3, #58	; 0x3a
	ticker_status = ticker_stop_abs(TICKER_INSTANCE_ID_CTLR,
    1d34:	b2d2      	uxtb	r2, r2
    1d36:	4620      	mov	r0, r4
    1d38:	4443      	add	r3, r8
    1d3a:	2101      	movs	r1, #1
    1d3c:	f007 fafa 	bl	9334 <ticker_stop_abs>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1d40:	2801      	cmp	r0, #1
    1d42:	d075      	beq.n	1e30 <ull_periph_setup+0x388>
	if (adv->lll.is_hdcd) {
    1d44:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
    1d48:	07db      	lsls	r3, r3, #31
    1d4a:	d452      	bmi.n	1df2 <ull_periph_setup+0x34a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1d4c:	4638      	mov	r0, r7
    1d4e:	f00a fe5f 	bl	ca10 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d52:	4b46      	ldr	r3, [pc, #280]	; (1e6c <ull_periph_setup+0x3c4>)
    1d54:	fba5 a903 	umull	sl, r9, r5, r3
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1d58:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1d5a:	a33f      	add	r3, pc, #252	; (adr r3, 1e58 <ull_periph_setup+0x3b0>)
    1d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d60:	4650      	mov	r0, sl
    1d62:	4649      	mov	r1, r9
    1d64:	f7fe fe2a 	bl	9bc <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d68:	4b42      	ldr	r3, [pc, #264]	; (1e74 <ull_periph_setup+0x3cc>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d6a:	68b6      	ldr	r6, [r6, #8]
    1d6c:	4a42      	ldr	r2, [pc, #264]	; (1e78 <ull_periph_setup+0x3d0>)
    1d6e:	9207      	str	r2, [sp, #28]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d70:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    1d74:	fba5 3103 	umull	r3, r1, r5, r3
    1d78:	ebba 0003 	subs.w	r0, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d7c:	4b3f      	ldr	r3, [pc, #252]	; (1e7c <ull_periph_setup+0x3d4>)
    1d7e:	9305      	str	r3, [sp, #20]
    1d80:	f240 13cd 	movw	r3, #461	; 0x1cd
    1d84:	9706      	str	r7, [sp, #24]
    1d86:	9308      	str	r3, [sp, #32]
    1d88:	693b      	ldr	r3, [r7, #16]
    1d8a:	f04f 0b00 	mov.w	fp, #0
    1d8e:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1d92:	f04f 0307 	mov.w	r3, #7
    1d96:	fb03 1105 	mla	r1, r3, r5, r1
    1d9a:	eb69 0101 	sbc.w	r1, r9, r1
    1d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1da2:	2300      	movs	r3, #0
    1da4:	f7fe fe0a 	bl	9bc <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1da8:	3403      	adds	r4, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1daa:	3e3a      	subs	r6, #58	; 0x3a
    1dac:	b2e4      	uxtb	r4, r4
    1dae:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1db2:	f8cd 8000 	str.w	r8, [sp]
    1db6:	4633      	mov	r3, r6
    1db8:	4622      	mov	r2, r4
    1dba:	2101      	movs	r1, #1
    1dbc:	4658      	mov	r0, fp
    1dbe:	f007 f9e5 	bl	918c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1dc2:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    1dc6:	d00c      	beq.n	1de2 <ull_periph_setup+0x33a>
    1dc8:	4a2d      	ldr	r2, [pc, #180]	; (1e80 <ull_periph_setup+0x3d8>)
    1dca:	492e      	ldr	r1, [pc, #184]	; (1e84 <ull_periph_setup+0x3dc>)
    1dcc:	482e      	ldr	r0, [pc, #184]	; (1e88 <ull_periph_setup+0x3e0>)
    1dce:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
    1dd2:	f017 fc34 	bl	1963e <assert_print>
    1dd6:	4040      	eors	r0, r0
    1dd8:	f380 8811 	msr	BASEPRI, r0
    1ddc:	f04f 0003 	mov.w	r0, #3
    1de0:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1de2:	2201      	movs	r2, #1
    1de4:	2102      	movs	r1, #2
    1de6:	4610      	mov	r0, r2
    1de8:	f005 ffc6 	bl	7d78 <mayfly_enable>
}
    1dec:	b013      	add	sp, #76	; 0x4c
    1dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1df2:	2300      	movs	r3, #0
    1df4:	2201      	movs	r2, #1
    1df6:	9300      	str	r3, [sp, #0]
    1df8:	4618      	mov	r0, r3
    1dfa:	4611      	mov	r1, r2
    1dfc:	f007 fa58 	bl	92b0 <ticker_stop>
    1e00:	e7a4      	b.n	1d4c <ull_periph_setup+0x2a4>
			lll->data_chan_sel = 1;
    1e02:	7f6b      	ldrb	r3, [r5, #29]
    1e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e08:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1e0a:	4650      	mov	r0, sl
    1e0c:	f00f fff0 	bl	11df0 <lll_chan_id>
    1e10:	2301      	movs	r3, #1
    1e12:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    1e14:	e740      	b.n	1c98 <ull_periph_setup+0x1f0>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1e16:	4a1a      	ldr	r2, [pc, #104]	; (1e80 <ull_periph_setup+0x3d8>)
    1e18:	491c      	ldr	r1, [pc, #112]	; (1e8c <ull_periph_setup+0x3e4>)
    1e1a:	481b      	ldr	r0, [pc, #108]	; (1e88 <ull_periph_setup+0x3e0>)
    1e1c:	23f7      	movs	r3, #247	; 0xf7
    1e1e:	f017 fc0e 	bl	1963e <assert_print>
    1e22:	4040      	eors	r0, r0
    1e24:	f380 8811 	msr	BASEPRI, r0
    1e28:	f04f 0003 	mov.w	r0, #3
    1e2c:	df02      	svc	2
    1e2e:	e705      	b.n	1c3c <ull_periph_setup+0x194>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1e30:	f008 f8c8 	bl	9fc4 <ull_disable_mark_get>
    1e34:	4581      	cmp	r9, r0
    1e36:	d085      	beq.n	1d44 <ull_periph_setup+0x29c>
    1e38:	4a11      	ldr	r2, [pc, #68]	; (1e80 <ull_periph_setup+0x3d8>)
    1e3a:	4915      	ldr	r1, [pc, #84]	; (1e90 <ull_periph_setup+0x3e8>)
    1e3c:	4812      	ldr	r0, [pc, #72]	; (1e88 <ull_periph_setup+0x3e0>)
    1e3e:	f240 2375 	movw	r3, #629	; 0x275
    1e42:	f017 fbfc 	bl	1963e <assert_print>
    1e46:	4040      	eors	r0, r0
    1e48:	f380 8811 	msr	BASEPRI, r0
    1e4c:	f04f 0003 	mov.w	r0, #3
    1e50:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    1e52:	e777      	b.n	1d44 <ull_periph_setup+0x29c>
    1e54:	f3af 8000 	nop.w
    1e58:	1afd498d 	.word	0x1afd498d
    1e5c:	00000007 	.word	0x00000007
    1e60:	431bde83 	.word	0x431bde83
    1e64:	01c9c37f 	.word	0x01c9c37f
    1e68:	004c4b40 	.word	0x004c4b40
    1e6c:	3b9aca00 	.word	0x3b9aca00
    1e70:	00011bb1 	.word	0x00011bb1
    1e74:	1afd498d 	.word	0x1afd498d
    1e78:	00011b81 	.word	0x00011b81
    1e7c:	00011bed 	.word	0x00011bed
    1e80:	0001ec3c 	.word	0x0001ec3c
    1e84:	0001e73c 	.word	0x0001e73c
    1e88:	0001e1a4 	.word	0x0001e1a4
    1e8c:	0001e468 	.word	0x0001e468
    1e90:	0001ec98 	.word	0x0001ec98
    1e94:	00000000 	.word	0x00000000

00001e98 <prepare_cb>:
}
#endif /* !CONFIG_BT_CTLR_ZLI */
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static int prepare_cb(struct lll_prepare_param *p)
{
    1e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ret;
	uint32_t aa;

	DEBUG_RADIO_START_A(1);

	lll = p->param;
    1e9a:	68c4      	ldr	r4, [r0, #12]
	 * between LLL and ULL.
	 * When connectable advertising is disabled in thread context, cancelled
	 * flag is set, and initiated flag is checked. Here, we avoid
	 * transmitting connectable advertising event if cancelled flag is set.
	 */
	if (unlikely(lll->conn &&
    1e9c:	6863      	ldr	r3, [r4, #4]
{
    1e9e:	b083      	sub	sp, #12
    1ea0:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d14e      	bne.n	1f44 <prepare_cb+0xac>

		return 0;
	}
#endif /* CONFIG_BT_PERIPHERAL */

	radio_reset();
    1ea6:	f011 ff73 	bl	13d90 <radio_reset>

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    1eaa:	2000      	movs	r0, #0
    1eac:	f011 ffc6 	bl	13e3c <radio_tx_power_set>
	/* TODO: if coded we use S8? */
	radio_phy_set(lll->phy_p, lll->phy_flags);
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
			    RADIO_PKT_CONF_PHY(lll->phy_p));
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	radio_phy_set(0, 0);
    1eb0:	2100      	movs	r1, #0
    1eb2:	4608      	mov	r0, r1
    1eb4:	f011 ffb4 	bl	13e20 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
    1eb8:	2200      	movs	r2, #0
    1eba:	2125      	movs	r1, #37	; 0x25
    1ebc:	2008      	movs	r0, #8
    1ebe:	f011 fff3 	bl	13ea8 <radio_pkt_configure>
			    RADIO_PKT_CONF_PHY(RADIO_PKT_CONF_PHY_LEGACY));
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    1ec2:	4b3b      	ldr	r3, [pc, #236]	; (1fb0 <prepare_cb+0x118>)
    1ec4:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
    1ec6:	a801      	add	r0, sp, #4
    1ec8:	f011 ffd6 	bl	13e78 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
    1ecc:	4939      	ldr	r1, [pc, #228]	; (1fb4 <prepare_cb+0x11c>)
    1ece:	f240 605b 	movw	r0, #1627	; 0x65b
    1ed2:	f012 f86f 	bl	13fb4 <radio_crc_configure>
					PDU_AC_CRC_IV);

	lll->chan_map_curr = lll->chan_map;
    1ed6:	7a23      	ldrb	r3, [r4, #8]
    1ed8:	f3c3 0242 	ubfx	r2, r3, #1, #3
    1edc:	f362 1306 	bfi	r3, r2, #4, #3
    1ee0:	7223      	strb	r3, [r4, #8]

	pdu = chan_prepare(lll);
    1ee2:	4620      	mov	r0, r4
    1ee4:	f010 ffbe 	bl	12e64 <chan_prepare.isra.0>
				       fal->addr_type_bitmask,
				       (uint8_t *)fal->bdaddr);
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
    1ee8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
    1eea:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
    1eec:	4638      	mov	r0, r7
    1eee:	f010 fb61 	bl	125b4 <lll_event_offset_get>
    1ef2:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
    1ef4:	686a      	ldr	r2, [r5, #4]
    1ef6:	f106 0109 	add.w	r1, r6, #9
    1efa:	2001      	movs	r0, #1
    1efc:	f012 f982 	bl	14204 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
    1f00:	f012 fa40 	bl	14384 <radio_tmr_end_capture>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	uint32_t overhead;

	overhead = lll_preempt_calc(ull, (TICKER_ID_ADV_BASE + ull_adv_lll_handle_get(lll)),
    1f04:	4620      	mov	r0, r4
    1f06:	f00a faa7 	bl	c458 <ull_adv_lll_handle_get>
    1f0a:	1c81      	adds	r1, r0, #2
    1f0c:	4632      	mov	r2, r6
    1f0e:	b2c9      	uxtb	r1, r1
    1f10:	4638      	mov	r0, r7
    1f12:	f010 fb5d 	bl	125d0 <lll_preempt_calc>
				    ticks_at_event);
	/* check if preempt to start has changed */
	if (overhead) {
    1f16:	4605      	mov	r5, r0
    1f18:	b9f8      	cbnz	r0, 1f5a <prepare_cb+0xc2>
		 */
		lll->aux->ticks_pri_pdu_offset += 1U;
	}
#endif

	ret = lll_prepare_done(lll);
    1f1a:	4620      	mov	r0, r4
    1f1c:	f010 faf2 	bl	12504 <lll_prepare_done>
	LL_ASSERT(!ret);
    1f20:	b910      	cbnz	r0, 1f28 <prepare_cb+0x90>
		return 0;
    1f22:	2000      	movs	r0, #0

	DEBUG_RADIO_START_A(1);

	return 0;
}
    1f24:	b003      	add	sp, #12
    1f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(!ret);
    1f28:	4a23      	ldr	r2, [pc, #140]	; (1fb8 <prepare_cb+0x120>)
    1f2a:	4924      	ldr	r1, [pc, #144]	; (1fbc <prepare_cb+0x124>)
    1f2c:	4824      	ldr	r0, [pc, #144]	; (1fc0 <prepare_cb+0x128>)
    1f2e:	f240 432c 	movw	r3, #1068	; 0x42c
    1f32:	f017 fb84 	bl	1963e <assert_print>
    1f36:	4040      	eors	r0, r0
    1f38:	f380 8811 	msr	BASEPRI, r0
    1f3c:	f04f 0003 	mov.w	r0, #3
    1f40:	df02      	svc	2
    1f42:	e7ee      	b.n	1f22 <prepare_cb+0x8a>
	if (unlikely(lll->conn &&
    1f44:	f893 3020 	ldrb.w	r3, [r3, #32]
    1f48:	079b      	lsls	r3, r3, #30
    1f4a:	d0ac      	beq.n	1ea6 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
    1f4c:	481d      	ldr	r0, [pc, #116]	; (1fc4 <prepare_cb+0x12c>)
    1f4e:	4621      	mov	r1, r4
    1f50:	f011 fedc 	bl	13d0c <radio_isr_set>
		radio_disable();
    1f54:	f011 fff0 	bl	13f38 <radio_disable>
		return 0;
    1f58:	e7e3      	b.n	1f22 <prepare_cb+0x8a>
		LL_ASSERT_OVERHEAD(overhead);
    1f5a:	4a17      	ldr	r2, [pc, #92]	; (1fb8 <prepare_cb+0x120>)
    1f5c:	491a      	ldr	r1, [pc, #104]	; (1fc8 <prepare_cb+0x130>)
    1f5e:	4818      	ldr	r0, [pc, #96]	; (1fc0 <prepare_cb+0x128>)
    1f60:	f240 4314 	movw	r3, #1044	; 0x414
    1f64:	f017 fb6b 	bl	1963e <assert_print>
    1f68:	4b18      	ldr	r3, [pc, #96]	; (1fcc <prepare_cb+0x134>)
    1f6a:	2107      	movs	r1, #7
    1f6c:	fba5 0303 	umull	r0, r3, r5, r3
    1f70:	fb01 3105 	mla	r1, r1, r5, r3
    1f74:	a30c      	add	r3, pc, #48	; (adr r3, 1fa8 <prepare_cb+0x110>)
    1f76:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f7a:	f7fe fd1f 	bl	9bc <__aeabi_uldivmod>
    1f7e:	4914      	ldr	r1, [pc, #80]	; (1fd0 <prepare_cb+0x138>)
    1f80:	4602      	mov	r2, r0
    1f82:	4814      	ldr	r0, [pc, #80]	; (1fd4 <prepare_cb+0x13c>)
    1f84:	f017 fb5b 	bl	1963e <assert_print>
    1f88:	4040      	eors	r0, r0
    1f8a:	f380 8811 	msr	BASEPRI, r0
    1f8e:	f04f 0003 	mov.w	r0, #3
    1f92:	df02      	svc	2
		radio_isr_set(isr_abort, lll);
    1f94:	4810      	ldr	r0, [pc, #64]	; (1fd8 <prepare_cb+0x140>)
    1f96:	4621      	mov	r1, r4
    1f98:	f011 feb8 	bl	13d0c <radio_isr_set>
		radio_disable();
    1f9c:	f011 ffcc 	bl	13f38 <radio_disable>
		return -ECANCELED;
    1fa0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1fa4:	e7be      	b.n	1f24 <prepare_cb+0x8c>
    1fa6:	bf00      	nop
    1fa8:	3b9aca00 	.word	0x3b9aca00
    1fac:	00000000 	.word	0x00000000
    1fb0:	8e89bed6 	.word	0x8e89bed6
    1fb4:	00555555 	.word	0x00555555
    1fb8:	0001ee40 	.word	0x0001ee40
    1fbc:	0001e304 	.word	0x0001e304
    1fc0:	0001e1a4 	.word	0x0001e1a4
    1fc4:	00012751 	.word	0x00012751
    1fc8:	0001e220 	.word	0x0001e220
    1fcc:	1afd498d 	.word	0x1afd498d
    1fd0:	0001eef0 	.word	0x0001eef0
    1fd4:	0001eec4 	.word	0x0001eec4
    1fd8:	00012a65 	.word	0x00012a65
    1fdc:	00000000 	.word	0x00000000

00001fe0 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
    1fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t hcto;
	uint32_t ret;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
    1fe4:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
    1fe6:	89a2      	ldrh	r2, [r4, #12]
    1fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1fec:	429a      	cmp	r2, r3
{
    1fee:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
    1ff0:	f000 80c7 	beq.w	2182 <prepare_cb+0x1a2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
    1ff4:	4605      	mov	r5, r0
    1ff6:	f011 f9d7 	bl	133a8 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
    1ffa:	892b      	ldrh	r3, [r5, #8]
    1ffc:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
    1ffe:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
    2000:	441a      	add	r2, r3
    2002:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
    2004:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
    2006:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
    2008:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
    200a:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
    200c:	1c41      	adds	r1, r0, #1
    200e:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
    2010:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
    2012:	f04f 0100 	mov.w	r1, #0
    2016:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
    2018:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
    201c:	f100 808c 	bmi.w	2138 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
    2020:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    2024:	460b      	mov	r3, r1
    2026:	7fa1      	ldrb	r1, [r4, #30]
    2028:	9000      	str	r0, [sp, #0]
    202a:	f104 001f 	add.w	r0, r4, #31
    202e:	f00f fe97 	bl	11d60 <lll_chan_sel_1>
    2032:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
    2034:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
    2038:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
    203a:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
    203e:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
    2040:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
    2042:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
    2044:	6361      	str	r1, [r4, #52]	; 0x34
    2046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
    2048:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
    204a:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
    204e:	428b      	cmp	r3, r1
    2050:	bf28      	it	cs
    2052:	460b      	movcs	r3, r1
    2054:	f012 0204 	ands.w	r2, r2, #4
    2058:	6323      	str	r3, [r4, #48]	; 0x30
    205a:	d077      	beq.n	214c <prepare_cb+0x16c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
    205c:	f011 fe98 	bl	13d90 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    2060:	2000      	movs	r0, #0
    2062:	f011 feeb 	bl	13e3c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	radio_aa_set(lll->access_addr);
    2066:	1d20      	adds	r0, r4, #4
    2068:	f011 ff06 	bl	13e78 <radio_aa_set>
 *
 *  @return 24-bit integer in host endianness.
 */
static inline uint32_t sys_get_le24(const uint8_t src[3])
{
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    206c:	8923      	ldrh	r3, [r4, #8]
    206e:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
    2070:	f240 605b 	movw	r0, #1627	; 0x65b
    2074:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    2078:	f011 ff9c 	bl	13fb4 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
    207c:	4630      	mov	r0, r6
    207e:	f010 fab9 	bl	125f4 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
    2082:	4621      	mov	r1, r4
    2084:	4858      	ldr	r0, [pc, #352]	; (21e8 <prepare_cb+0x208>)
    2086:	f011 fe41 	bl	13d0c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
    208a:	2096      	movs	r0, #150	; 0x96
    208c:	f012 f8ae 	bl	141ec <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
    2090:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
    2094:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
    2098:	f3c2 03c0 	ubfx	r3, r2, #3, #1
    209c:	2100      	movs	r1, #0
    209e:	f002 0207 	and.w	r2, r2, #7
    20a2:	f000 0007 	and.w	r0, r0, #7
    20a6:	f011 ffef 	bl	14088 <radio_switch_complete_and_tx>
	}

	/* The call can use Radio interface that alternates NRF_RADIO->SHORTS. The register is
	 * set by radio_switch_complete_XXX functions, hence any changes done before are cleared.
	 */
	lll_conn_rx_pkt_set(lll);
    20aa:	4620      	mov	r0, r4
    20ac:	f011 f9dc 	bl	13468 <lll_conn_rx_pkt_set>

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
    20b0:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
    20b2:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
    20b4:	4638      	mov	r0, r7
    20b6:	f010 fa7d 	bl	125b4 <lll_event_offset_get>
    20ba:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
    20bc:	686a      	ldr	r2, [r5, #4]
    20be:	f106 0109 	add.w	r1, r6, #9
    20c2:	2000      	movs	r0, #0
    20c4:	f012 f89e 	bl	14204 <radio_tmr_start>
    20c8:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
    20ca:	f012 f92f 	bl	1432c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    20ce:	2000      	movs	r0, #0
    20d0:	f012 f946 	bl	14360 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
    20d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
    20d6:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
    20da:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
    20de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
    20e0:	f000 0007 	and.w	r0, r0, #7
    20e4:	2101      	movs	r1, #1
	hcto = remainder_us +
    20e6:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
    20ea:	f011 ff17 	bl	13f1c <radio_rx_ready_delay_get>
	hcto = remainder_us +
    20ee:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
    20f0:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
    20f2:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
    20f6:	f000 0007 	and.w	r0, r0, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
    20fa:	2802      	cmp	r0, #2
    20fc:	d024      	beq.n	2148 <prepare_cb+0x168>
	default:
	case BIT(0):
		return 40;
    20fe:	2804      	cmp	r0, #4
    2100:	bf0c      	ite	eq
    2102:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    2106:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
    2108:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
    210a:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
    210c:	f011 ff08 	bl	13f20 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
    2110:	4428      	add	r0, r5
    2112:	f012 f8fd 	bl	14310 <radio_tmr_hcto_configure>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	uint32_t overhead;

	overhead = lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle), ticks_at_event);
    2116:	89a1      	ldrh	r1, [r4, #12]
    2118:	3103      	adds	r1, #3
    211a:	4632      	mov	r2, r6
    211c:	b2c9      	uxtb	r1, r1
    211e:	4638      	mov	r0, r7
    2120:	f010 fa56 	bl	125d0 <lll_preempt_calc>
	/* check if preempt to start has changed */
	if (overhead) {
    2124:	4605      	mov	r5, r0
    2126:	bb98      	cbnz	r0, 2190 <prepare_cb+0x1b0>

		return -ECANCELED;
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

	ret = lll_prepare_done(lll);
    2128:	4620      	mov	r0, r4
    212a:	f010 f9eb 	bl	12504 <lll_prepare_done>
	LL_ASSERT(!ret);
    212e:	b9d0      	cbnz	r0, 2166 <prepare_cb+0x186>
		return 0;
    2130:	2000      	movs	r0, #0

	DEBUG_RADIO_START_S(1);

	return 0;
}
    2132:	b002      	add	sp, #8
    2134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
    2138:	460a      	mov	r2, r1
    213a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    213e:	8be1      	ldrh	r1, [r4, #30]
    2140:	f00f fe5a 	bl	11df8 <lll_chan_sel_2>
    2144:	4606      	mov	r6, r0
    2146:	e775      	b.n	2034 <prepare_cb+0x54>
	switch (phy) {
    2148:	2318      	movs	r3, #24
    214a:	e7dd      	b.n	2108 <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
    214c:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
    2150:	f005 fdda 	bl	7d08 <memq_peek>
		if (!link) {
    2154:	2800      	cmp	r0, #0
    2156:	d181      	bne.n	205c <prepare_cb+0x7c>
			lll->empty = 1U;
    2158:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
    215c:	f043 0304 	orr.w	r3, r3, #4
    2160:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    2164:	e77a      	b.n	205c <prepare_cb+0x7c>
	LL_ASSERT(!ret);
    2166:	4a21      	ldr	r2, [pc, #132]	; (21ec <prepare_cb+0x20c>)
    2168:	4921      	ldr	r1, [pc, #132]	; (21f0 <prepare_cb+0x210>)
    216a:	4822      	ldr	r0, [pc, #136]	; (21f4 <prepare_cb+0x214>)
    216c:	f240 1355 	movw	r3, #341	; 0x155
    2170:	f017 fa65 	bl	1963e <assert_print>
    2174:	4040      	eors	r0, r0
    2176:	f380 8811 	msr	BASEPRI, r0
    217a:	f04f 0003 	mov.w	r0, #3
    217e:	df02      	svc	2
    2180:	e7d6      	b.n	2130 <prepare_cb+0x150>
		radio_isr_set(lll_isr_early_abort, lll);
    2182:	481d      	ldr	r0, [pc, #116]	; (21f8 <prepare_cb+0x218>)
    2184:	4621      	mov	r1, r4
    2186:	f011 fdc1 	bl	13d0c <radio_isr_set>
		radio_disable();
    218a:	f011 fed5 	bl	13f38 <radio_disable>
		return 0;
    218e:	e7cf      	b.n	2130 <prepare_cb+0x150>
		LL_ASSERT_OVERHEAD(overhead);
    2190:	4a16      	ldr	r2, [pc, #88]	; (21ec <prepare_cb+0x20c>)
    2192:	491a      	ldr	r1, [pc, #104]	; (21fc <prepare_cb+0x21c>)
    2194:	4817      	ldr	r0, [pc, #92]	; (21f4 <prepare_cb+0x214>)
    2196:	f240 134b 	movw	r3, #331	; 0x14b
    219a:	f017 fa50 	bl	1963e <assert_print>
    219e:	4b18      	ldr	r3, [pc, #96]	; (2200 <prepare_cb+0x220>)
    21a0:	2107      	movs	r1, #7
    21a2:	fba5 0303 	umull	r0, r3, r5, r3
    21a6:	fb01 3105 	mla	r1, r1, r5, r3
    21aa:	a30d      	add	r3, pc, #52	; (adr r3, 21e0 <prepare_cb+0x200>)
    21ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    21b0:	f7fe fc04 	bl	9bc <__aeabi_uldivmod>
    21b4:	4913      	ldr	r1, [pc, #76]	; (2204 <prepare_cb+0x224>)
    21b6:	4602      	mov	r2, r0
    21b8:	4813      	ldr	r0, [pc, #76]	; (2208 <prepare_cb+0x228>)
    21ba:	f017 fa40 	bl	1963e <assert_print>
    21be:	4040      	eors	r0, r0
    21c0:	f380 8811 	msr	BASEPRI, r0
    21c4:	f04f 0003 	mov.w	r0, #3
    21c8:	df02      	svc	2
		radio_isr_set(lll_isr_abort, lll);
    21ca:	4810      	ldr	r0, [pc, #64]	; (220c <prepare_cb+0x22c>)
    21cc:	4621      	mov	r1, r4
    21ce:	f011 fd9d 	bl	13d0c <radio_isr_set>
		radio_disable();
    21d2:	f011 feb1 	bl	13f38 <radio_disable>
		return -ECANCELED;
    21d6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    21da:	e7aa      	b.n	2132 <prepare_cb+0x152>
    21dc:	f3af 8000 	nop.w
    21e0:	3b9aca00 	.word	0x3b9aca00
    21e4:	00000000 	.word	0x00000000
    21e8:	000136c5 	.word	0x000136c5
    21ec:	0001ef68 	.word	0x0001ef68
    21f0:	0001e304 	.word	0x0001e304
    21f4:	0001e1a4 	.word	0x0001e1a4
    21f8:	00012751 	.word	0x00012751
    21fc:	0001e220 	.word	0x0001e220
    2200:	1afd498d 	.word	0x1afd498d
    2204:	0001efbc 	.word	0x0001efbc
    2208:	0001eec4 	.word	0x0001eec4
    220c:	00012731 	.word	0x00012731

00002210 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
    2210:	2903      	cmp	r1, #3
{
    2212:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2214:	4605      	mov	r5, r0
    2216:	4614      	mov	r4, r2
	switch (chan) {
    2218:	d860      	bhi.n	22dc <lis2dh_attr_set+0xcc>
	switch (attr) {
    221a:	2a00      	cmp	r2, #0
    221c:	d040      	beq.n	22a0 <lis2dh_attr_set+0x90>
    221e:	2a07      	cmp	r2, #7
    2220:	d15c      	bne.n	22dc <lis2dh_attr_set+0xcc>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    2222:	685a      	ldr	r2, [r3, #4]
    2224:	681c      	ldr	r4, [r3, #0]
    2226:	4838      	ldr	r0, [pc, #224]	; (2308 <lis2dh_attr_set+0xf8>)
    2228:	17d1      	asrs	r1, r2, #31
    222a:	4613      	mov	r3, r2
    222c:	fbc4 3100 	smlal	r3, r1, r4, r0
	if (micro_ms2 > 0) {
    2230:	2b01      	cmp	r3, #1
    2232:	f171 0200 	sbcs.w	r2, r1, #0
    2236:	db25      	blt.n	2284 <lis2dh_attr_set+0x74>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    2238:	f500 106e 	add.w	r0, r0, #3899392	; 0x3b8000
    223c:	f600 705d 	addw	r0, r0, #3933	; 0xf5d
    2240:	1818      	adds	r0, r3, r0
    2242:	a32f      	add	r3, pc, #188	; (adr r3, 2300 <lis2dh_attr_set+0xf0>)
    2244:	e9d3 2300 	ldrd	r2, r3, [r3]
    2248:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
    224c:	f7fe fb66 	bl	91c <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    2250:	b280      	uxth	r0, r0
    2252:	2802      	cmp	r0, #2
    2254:	d01e      	beq.n	2294 <lis2dh_attr_set+0x84>
    2256:	2804      	cmp	r0, #4
    2258:	d01e      	beq.n	2298 <lis2dh_attr_set+0x88>
    225a:	2808      	cmp	r0, #8
    225c:	d01e      	beq.n	229c <lis2dh_attr_set+0x8c>
    225e:	2810      	cmp	r0, #16
    2260:	d133      	bne.n	22ca <lis2dh_attr_set+0xba>
    2262:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    2264:	4929      	ldr	r1, [pc, #164]	; (230c <lis2dh_attr_set+0xfc>)
	struct lis2dh_data *lis2dh = dev->data;
    2266:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    2268:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    226c:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    226e:	6852      	ldr	r2, [r2, #4]
    2270:	6914      	ldr	r4, [r2, #16]
    2272:	011b      	lsls	r3, r3, #4
    2274:	2230      	movs	r2, #48	; 0x30
    2276:	2123      	movs	r1, #35	; 0x23
    2278:	4628      	mov	r0, r5
    227a:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
    227c:	b002      	add	sp, #8
    227e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    2282:	4760      	bx	ip
    2284:	4822      	ldr	r0, [pc, #136]	; (2310 <lis2dh_attr_set+0x100>)
    2286:	1818      	adds	r0, r3, r0
    2288:	f161 0100 	sbc.w	r1, r1, #0
    228c:	a31c      	add	r3, pc, #112	; (adr r3, 2300 <lis2dh_attr_set+0xf0>)
    228e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2292:	e7db      	b.n	224c <lis2dh_attr_set+0x3c>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
    2294:	2300      	movs	r3, #0
    2296:	e7e5      	b.n	2264 <lis2dh_attr_set+0x54>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    2298:	2301      	movs	r3, #1
    229a:	e7e3      	b.n	2264 <lis2dh_attr_set+0x54>
    229c:	2302      	movs	r3, #2
    229e:	e7e1      	b.n	2264 <lis2dh_attr_set+0x54>
		return lis2dh_acc_odr_set(dev, val->val1);
    22a0:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    22a2:	4b1c      	ldr	r3, [pc, #112]	; (2314 <lis2dh_attr_set+0x104>)
		if (freq == lis2dh_odr_map[i]) {
    22a4:	f833 1b02 	ldrh.w	r1, [r3], #2
    22a8:	428a      	cmp	r2, r1
    22aa:	d10b      	bne.n	22c4 <lis2dh_attr_set+0xb4>
	struct lis2dh_data *data = dev->data;
    22ac:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
    22ae:	6873      	ldr	r3, [r6, #4]
    22b0:	f10d 0207 	add.w	r2, sp, #7
    22b4:	689b      	ldr	r3, [r3, #8]
    22b6:	2120      	movs	r1, #32
    22b8:	4628      	mov	r0, r5
    22ba:	4798      	blx	r3
	if (status < 0) {
    22bc:	2800      	cmp	r0, #0
    22be:	da07      	bge.n	22d0 <lis2dh_attr_set+0xc0>
}
    22c0:	b002      	add	sp, #8
    22c2:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    22c4:	3401      	adds	r4, #1
    22c6:	2c0b      	cmp	r4, #11
    22c8:	d1ec      	bne.n	22a4 <lis2dh_attr_set+0x94>
	return -EINVAL;
    22ca:	f06f 0015 	mvn.w	r0, #21
    22ce:	e7f7      	b.n	22c0 <lis2dh_attr_set+0xb0>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    22d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    22d4:	0713      	lsls	r3, r2, #28
    22d6:	d404      	bmi.n	22e2 <lis2dh_attr_set+0xd2>
    22d8:	2c08      	cmp	r4, #8
    22da:	d105      	bne.n	22e8 <lis2dh_attr_set+0xd8>
	switch (attr) {
    22dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    22e0:	e7ee      	b.n	22c0 <lis2dh_attr_set+0xb0>
	if (((value & LIS2DH_LP_EN_BIT_MASK) == LIS2DH_LP_EN_BIT_MASK) &&
    22e2:	2c0a      	cmp	r4, #10
		odr--;
    22e4:	bf08      	it	eq
    22e6:	2409      	moveq	r4, #9
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    22e8:	6873      	ldr	r3, [r6, #4]
				      (value & ~LIS2DH_ODR_MASK) |
    22ea:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    22ee:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    22f2:	68db      	ldr	r3, [r3, #12]
    22f4:	b2d2      	uxtb	r2, r2
    22f6:	2120      	movs	r1, #32
    22f8:	4628      	mov	r0, r5
    22fa:	4798      	blx	r3
    22fc:	e7e0      	b.n	22c0 <lis2dh_attr_set+0xb0>
    22fe:	bf00      	nop
    2300:	0095a33a 	.word	0x0095a33a
    2304:	00000000 	.word	0x00000000
    2308:	000f4240 	.word	0x000f4240
    230c:	20000758 	.word	0x20000758
    2310:	ffb52e63 	.word	0xffb52e63
    2314:	0001f452 	.word	0x0001f452

00002318 <disconnected>:
{
    2318:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
    231a:	4803      	ldr	r0, [pc, #12]	; (2328 <disconnected+0x10>)
    231c:	f016 fe19 	bl	18f52 <printk>
	default_conn = NULL;
    2320:	4b02      	ldr	r3, [pc, #8]	; (232c <disconnected+0x14>)
    2322:	2200      	movs	r2, #0
    2324:	601a      	str	r2, [r3, #0]
}
    2326:	bd08      	pop	{r3, pc}
    2328:	0001f468 	.word	0x0001f468
    232c:	200011d4 	.word	0x200011d4

00002330 <button_pressed>:
{
    2330:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    2332:	f01a fbd2 	bl	1cada <sys_clock_cycle_get_32>
    2336:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    2338:	4804      	ldr	r0, [pc, #16]	; (234c <button_pressed+0x1c>)
    233a:	f016 fe0a 	bl	18f52 <printk>
	stat[0] = FILE_SWITCH;
    233e:	4b04      	ldr	r3, [pc, #16]	; (2350 <button_pressed+0x20>)
    2340:	2273      	movs	r2, #115	; 0x73
    2342:	701a      	strb	r2, [r3, #0]
	waiting = 30;
    2344:	4b03      	ldr	r3, [pc, #12]	; (2354 <button_pressed+0x24>)
    2346:	221e      	movs	r2, #30
    2348:	601a      	str	r2, [r3, #0]
}
    234a:	bd08      	pop	{r3, pc}
    234c:	0001f486 	.word	0x0001f486
    2350:	20000874 	.word	0x20000874
    2354:	20001190 	.word	0x20001190

00002358 <my_timer_handler>:

void my_timer_handler(struct k_timer *dummy)
{


    k_work_submit(&my_work);
    2358:	4801      	ldr	r0, [pc, #4]	; (2360 <my_timer_handler+0x8>)
    235a:	f015 befb 	b.w	18154 <k_work_submit>
    235e:	bf00      	nop
    2360:	20000170 	.word	0x20000170

00002364 <connected>:
{
    2364:	b510      	push	{r4, lr}
    2366:	4604      	mov	r4, r0
	if (err) {
    2368:	b121      	cbz	r1, 2374 <connected+0x10>
}
    236a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err 0x%02x)\n", err);
    236e:	4804      	ldr	r0, [pc, #16]	; (2380 <connected+0x1c>)
    2370:	f016 bdef 	b.w	18f52 <printk>
		printk("Connected\n");
    2374:	4803      	ldr	r0, [pc, #12]	; (2384 <connected+0x20>)
    2376:	f016 fdec 	bl	18f52 <printk>
		default_conn = conn;
    237a:	4b03      	ldr	r3, [pc, #12]	; (2388 <connected+0x24>)
    237c:	601c      	str	r4, [r3, #0]
}
    237e:	bd10      	pop	{r4, pc}
    2380:	0001f49c 	.word	0x0001f49c
    2384:	0001f4bc 	.word	0x0001f4bc
    2388:	200011d4 	.word	0x200011d4

0000238c <sensor_attr_set.constprop.0.isra.0>:
#endif

extern int z_impl_sensor_attr_set(const struct device * dev, enum sensor_channel chan, enum sensor_attribute attr, const struct sensor_value * val);

__pinned_func
static inline int sensor_attr_set(const struct device * dev, enum sensor_channel chan, enum sensor_attribute attr, const struct sensor_value * val)
    238c:	b430      	push	{r4, r5}
    238e:	460b      	mov	r3, r1
    2390:	4604      	mov	r4, r0
	const struct sensor_driver_api *api =
    2392:	4805      	ldr	r0, [pc, #20]	; (23a8 <sensor_attr_set.constprop.0.isra.0+0x1c>)
	if (api->attr_set == NULL) {
    2394:	6882      	ldr	r2, [r0, #8]
    2396:	6815      	ldr	r5, [r2, #0]
    2398:	b125      	cbz	r5, 23a4 <sensor_attr_set.constprop.0.isra.0+0x18>
	return api->attr_set(dev, chan, attr, val);
    239a:	4621      	mov	r1, r4
    239c:	46ac      	mov	ip, r5
    239e:	2207      	movs	r2, #7
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_SENSOR_ATTR_SET);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_attr_set(dev, chan, attr, val);
}
    23a0:	bc30      	pop	{r4, r5}
    23a2:	4760      	bx	ip
    23a4:	bc30      	pop	{r4, r5}
    23a6:	4770      	bx	lr
    23a8:	0001da24 	.word	0x0001da24

000023ac <gpio_pin_set_dt.constprop.0.isra.0>:
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    23ac:	4a09      	ldr	r2, [pc, #36]	; (23d4 <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    23ae:	4603      	mov	r3, r0
	return gpio_pin_set(spec->port, spec->pin, value);
    23b0:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    23b2:	7912      	ldrb	r2, [r2, #4]
    23b4:	2101      	movs	r1, #1
    23b6:	4091      	lsls	r1, r2
    23b8:	6902      	ldr	r2, [r0, #16]
    23ba:	6812      	ldr	r2, [r2, #0]
    23bc:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
    23be:	bf18      	it	ne
    23c0:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
    23c4:	b113      	cbz	r3, 23cc <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
    23c6:	6883      	ldr	r3, [r0, #8]
    23c8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    23ca:	4718      	bx	r3
    23cc:	6883      	ldr	r3, [r0, #8]
    23ce:	691b      	ldr	r3, [r3, #16]
    23d0:	e7fb      	b.n	23ca <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
    23d2:	bf00      	nop
    23d4:	20000190 	.word	0x20000190

000023d8 <main>:
}

K_TIMER_DEFINE(my_timer, my_timer_handler, NULL);

int main(void)
{
    23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	ms2->val2 = ((int64_t)g * SENSOR_G) % 1000000LL;
    23da:	4b63      	ldr	r3, [pc, #396]	; (2568 <main+0x190>)
    23dc:	b08b      	sub	sp, #44	; 0x2c
    23de:	2227      	movs	r2, #39	; 0x27
	struct sensor_value val;
	sensor_g_to_ms2(4, &val);
	sensor_attr_set	(sensors[0],
    23e0:	a903      	add	r1, sp, #12
    23e2:	2000      	movs	r0, #0
    23e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    23e8:	f7ff ffd0 	bl	238c <sensor_attr_set.constprop.0.isra.0>
                     SENSOR_CHAN_ACCEL_X,
                     SENSOR_ATTR_FULL_SCALE,
                     &val);

    sensor_attr_set	(sensors[0],
    23ec:	a903      	add	r1, sp, #12
    23ee:	2001      	movs	r0, #1
    23f0:	f7ff ffcc 	bl	238c <sensor_attr_set.constprop.0.isra.0>
                     SENSOR_CHAN_ACCEL_Y,
                     SENSOR_ATTR_FULL_SCALE,
                     &val);

    sensor_attr_set	(sensors[0],
    23f4:	a903      	add	r1, sp, #12
    23f6:	2002      	movs	r0, #2
    23f8:	f7ff ffc8 	bl	238c <sensor_attr_set.constprop.0.isra.0>
                     SENSOR_CHAN_ACCEL_Z,
                     SENSOR_ATTR_FULL_SCALE,
                     &val);
	int err;

	err = bt_enable(NULL);
    23fc:	2000      	movs	r0, #0
    23fe:	f002 fd6b 	bl	4ed8 <bt_enable>
	if (err) {
    2402:	4606      	mov	r6, r0
    2404:	b130      	cbz	r0, 2414 <main+0x3c>
		printk("Bluetooth init failed (err %d)\n", err);
    2406:	4601      	mov	r1, r0
    2408:	4858      	ldr	r0, [pc, #352]	; (256c <main+0x194>)

	attr = bt_gatt_find_by_uuid(NULL, 0, &char_uuid.uuid);
	attr2 = bt_gatt_find_by_uuid(NULL, 0, &char2_uuid.uuid);

	if (!gpio_is_ready_dt(&button)) {
		printk("Error: button device %s is not ready\n",
    240a:	f016 fda2 	bl	18f52 <printk>

	gpio_pin_set_dt(&led, 1);

	k_timer_start(&my_timer, K_MSEC(20), K_MSEC(20));
	return 0;
}
    240e:	2000      	movs	r0, #0
    2410:	b00b      	add	sp, #44	; 0x2c
    2412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2414:	4d56      	ldr	r5, [pc, #344]	; (2570 <main+0x198>)
	printk("Bluetooth initialized\n");
    2416:	4857      	ldr	r0, [pc, #348]	; (2574 <main+0x19c>)
    2418:	f016 fd9b 	bl	18f52 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    241c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    241e:	ac05      	add	r4, sp, #20
    2420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2422:	682b      	ldr	r3, [r5, #0]
    2424:	6023      	str	r3, [r4, #0]
    2426:	4954      	ldr	r1, [pc, #336]	; (2578 <main+0x1a0>)
    2428:	9600      	str	r6, [sp, #0]
    242a:	4633      	mov	r3, r6
    242c:	2202      	movs	r2, #2
    242e:	a805      	add	r0, sp, #20
    2430:	f003 f93c 	bl	56ac <bt_le_adv_start>
	if (err) {
    2434:	4601      	mov	r1, r0
    2436:	b1c0      	cbz	r0, 246a <main+0x92>
		printk("Advertising failed to start (err %d)\n", err);
    2438:	4850      	ldr	r0, [pc, #320]	; (257c <main+0x1a4>)
    243a:	f016 fd8a 	bl	18f52 <printk>
	attr = bt_gatt_find_by_uuid(NULL, 0, &char_uuid.uuid);
    243e:	2100      	movs	r1, #0
    2440:	4a4f      	ldr	r2, [pc, #316]	; (2580 <main+0x1a8>)
    2442:	4608      	mov	r0, r1
    2444:	f005 f8fe 	bl	7644 <bt_gatt_find_by_uuid>
    2448:	4b4e      	ldr	r3, [pc, #312]	; (2584 <main+0x1ac>)
	attr2 = bt_gatt_find_by_uuid(NULL, 0, &char2_uuid.uuid);
    244a:	4a4f      	ldr	r2, [pc, #316]	; (2588 <main+0x1b0>)
	attr = bt_gatt_find_by_uuid(NULL, 0, &char_uuid.uuid);
    244c:	6018      	str	r0, [r3, #0]
	attr2 = bt_gatt_find_by_uuid(NULL, 0, &char2_uuid.uuid);
    244e:	2100      	movs	r1, #0
    2450:	4608      	mov	r0, r1
    2452:	f005 f8f7 	bl	7644 <bt_gatt_find_by_uuid>
    2456:	4b4d      	ldr	r3, [pc, #308]	; (258c <main+0x1b4>)
    2458:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    245a:	4c4d      	ldr	r4, [pc, #308]	; (2590 <main+0x1b8>)
    245c:	4620      	mov	r0, r4
    245e:	f01a fc5b 	bl	1cd18 <z_device_is_ready>
	if (!gpio_is_ready_dt(&button)) {
    2462:	b930      	cbnz	r0, 2472 <main+0x9a>
		printk("Error: button device %s is not ready\n",
    2464:	6821      	ldr	r1, [r4, #0]
    2466:	484b      	ldr	r0, [pc, #300]	; (2594 <main+0x1bc>)
    2468:	e7cf      	b.n	240a <main+0x32>
	printk("Advertising successfully started\n");
    246a:	484b      	ldr	r0, [pc, #300]	; (2598 <main+0x1c0>)
    246c:	f016 fd71 	bl	18f52 <printk>
    2470:	e7e5      	b.n	243e <main+0x66>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
    2472:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2476:	4849      	ldr	r0, [pc, #292]	; (259c <main+0x1c4>)
    2478:	4d49      	ldr	r5, [pc, #292]	; (25a0 <main+0x1c8>)
    247a:	f016 fd08 	bl	18e8e <gpio_pin_configure_dt>
    247e:	4601      	mov	r1, r0
    2480:	6028      	str	r0, [r5, #0]
	if (ret != 0) {
    2482:	b128      	cbz	r0, 2490 <main+0xb8>
		printk("Error %d: failed to configure %s pin %d\n",
    2484:	6822      	ldr	r2, [r4, #0]
    2486:	4847      	ldr	r0, [pc, #284]	; (25a4 <main+0x1cc>)
    2488:	230b      	movs	r3, #11
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    248a:	f016 fd62 	bl	18f52 <printk>
		return 0;
    248e:	e7be      	b.n	240e <main+0x36>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    2490:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
    2492:	68a7      	ldr	r7, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    2494:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    2496:	69be      	ldr	r6, [r7, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    2498:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
    249c:	f04f 010b 	mov.w	r1, #11
    24a0:	bf14      	ite	ne
    24a2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    24a6:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    24aa:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    24ae:	4620      	mov	r0, r4
    24b0:	47b0      	blx	r6
			ret, button.port->name, button.pin);
    24b2:	6826      	ldr	r6, [r4, #0]
	ret = gpio_pin_interrupt_configure_dt(&button,
    24b4:	6028      	str	r0, [r5, #0]
    24b6:	4601      	mov	r1, r0
	if (ret != 0) {
    24b8:	b118      	cbz	r0, 24c2 <main+0xea>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    24ba:	483b      	ldr	r0, [pc, #236]	; (25a8 <main+0x1d0>)
    24bc:	230b      	movs	r3, #11
    24be:	4632      	mov	r2, r6
    24c0:	e7e3      	b.n	248a <main+0xb2>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    24c2:	493a      	ldr	r1, [pc, #232]	; (25ac <main+0x1d4>)
    24c4:	4b3a      	ldr	r3, [pc, #232]	; (25b0 <main+0x1d8>)
    24c6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    24c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    24cc:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    24ce:	69fb      	ldr	r3, [r7, #28]
    24d0:	b113      	cbz	r3, 24d8 <main+0x100>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    24d2:	2201      	movs	r2, #1
    24d4:	4620      	mov	r0, r4
    24d6:	4798      	blx	r3
	if (led.port && !device_is_ready(led.port)) {
    24d8:	4c36      	ldr	r4, [pc, #216]	; (25b4 <main+0x1dc>)
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
    24da:	4837      	ldr	r0, [pc, #220]	; (25b8 <main+0x1e0>)
    24dc:	220b      	movs	r2, #11
    24de:	4631      	mov	r1, r6
    24e0:	f016 fd37 	bl	18f52 <printk>
	if (led.port && !device_is_ready(led.port)) {
    24e4:	6820      	ldr	r0, [r4, #0]
    24e6:	b150      	cbz	r0, 24fe <main+0x126>
    24e8:	f01a fc16 	bl	1cd18 <z_device_is_ready>
		       ret, led.port->name);
    24ec:	6823      	ldr	r3, [r4, #0]
	if (led.port && !device_is_ready(led.port)) {
    24ee:	4606      	mov	r6, r0
    24f0:	b9a8      	cbnz	r0, 251e <main+0x146>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
    24f2:	681a      	ldr	r2, [r3, #0]
    24f4:	6829      	ldr	r1, [r5, #0]
    24f6:	4831      	ldr	r0, [pc, #196]	; (25bc <main+0x1e4>)
    24f8:	f016 fd2b 	bl	18f52 <printk>
		led.port = NULL;
    24fc:	6026      	str	r6, [r4, #0]
	for (i = 0; i < ARRAY_SIZE(sensors); i++) {
    24fe:	4c30      	ldr	r4, [pc, #192]	; (25c0 <main+0x1e8>)
    2500:	2300      	movs	r3, #0
    2502:	6023      	str	r3, [r4, #0]
    2504:	b32b      	cbz	r3, 2552 <main+0x17a>
	gpio_pin_set_dt(&led, 1);
    2506:	2001      	movs	r0, #1
    2508:	f7ff ff50 	bl	23ac <gpio_pin_set_dt.constprop.0.isra.0>
	k_timer_start(&my_timer, K_MSEC(20), K_MSEC(20));
    250c:	f44f 7224 	mov.w	r2, #656	; 0x290
    2510:	2300      	movs	r3, #0
		(void) arch_syscall_invoke5(parm0.x, parm1.split.lo, parm1.split.hi, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    2512:	482c      	ldr	r0, [pc, #176]	; (25c4 <main+0x1ec>)
    2514:	e9cd 2300 	strd	r2, r3, [sp]
    2518:	f016 fbde 	bl	18cd8 <z_impl_k_timer_start>
	return 0;
    251c:	e777      	b.n	240e <main+0x36>
	if (led.port) {
    251e:	2b00      	cmp	r3, #0
    2520:	d0ed      	beq.n	24fe <main+0x126>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
    2522:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    2526:	4620      	mov	r0, r4
    2528:	f016 fcb1 	bl	18e8e <gpio_pin_configure_dt>
    252c:	7923      	ldrb	r3, [r4, #4]
    252e:	6028      	str	r0, [r5, #0]
    2530:	4601      	mov	r1, r0
		if (ret != 0) {
    2532:	b138      	cbz	r0, 2544 <main+0x16c>
			       ret, led.port->name, led.pin);
    2534:	6822      	ldr	r2, [r4, #0]
			printk("Error %d: failed to configure LED device %s pin %d\n",
    2536:	4824      	ldr	r0, [pc, #144]	; (25c8 <main+0x1f0>)
    2538:	6812      	ldr	r2, [r2, #0]
    253a:	f016 fd0a 	bl	18f52 <printk>
			led.port = NULL;
    253e:	2300      	movs	r3, #0
    2540:	6023      	str	r3, [r4, #0]
    2542:	e7dc      	b.n	24fe <main+0x126>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
    2544:	6821      	ldr	r1, [r4, #0]
    2546:	4821      	ldr	r0, [pc, #132]	; (25cc <main+0x1f4>)
    2548:	6809      	ldr	r1, [r1, #0]
    254a:	461a      	mov	r2, r3
    254c:	f016 fd01 	bl	18f52 <printk>
    2550:	e7d5      	b.n	24fe <main+0x126>
    2552:	481f      	ldr	r0, [pc, #124]	; (25d0 <main+0x1f8>)
    2554:	f01a fbe0 	bl	1cd18 <z_device_is_ready>
		if (!device_is_ready(sensors[i])) {
    2558:	b918      	cbnz	r0, 2562 <main+0x18a>
			printk("sensor: device %s not ready.\n", sensors[i]->name);
    255a:	4b1d      	ldr	r3, [pc, #116]	; (25d0 <main+0x1f8>)
    255c:	481d      	ldr	r0, [pc, #116]	; (25d4 <main+0x1fc>)
    255e:	6819      	ldr	r1, [r3, #0]
    2560:	e753      	b.n	240a <main+0x32>
	for (i = 0; i < ARRAY_SIZE(sensors); i++) {
    2562:	6823      	ldr	r3, [r4, #0]
    2564:	3301      	adds	r3, #1
    2566:	e7cc      	b.n	2502 <main+0x12a>
    2568:	00037528 	.word	0x00037528
    256c:	0001f573 	.word	0x0001f573
    2570:	0001dd00 	.word	0x0001dd00
    2574:	0001f593 	.word	0x0001f593
    2578:	0001dd68 	.word	0x0001dd68
    257c:	0001f5aa 	.word	0x0001f5aa
    2580:	2000080c 	.word	0x2000080c
    2584:	20001198 	.word	0x20001198
    2588:	20000808 	.word	0x20000808
    258c:	20001194 	.word	0x20001194
    2590:	0001d948 	.word	0x0001d948
    2594:	0001f5f2 	.word	0x0001f5f2
    2598:	0001f5d0 	.word	0x0001f5d0
    259c:	0001de04 	.word	0x0001de04
    25a0:	2000118c 	.word	0x2000118c
    25a4:	0001f618 	.word	0x0001f618
    25a8:	0001f641 	.word	0x0001f641
    25ac:	200011d8 	.word	0x200011d8
    25b0:	00002331 	.word	0x00002331
    25b4:	20000190 	.word	0x20000190
    25b8:	0001f677 	.word	0x0001f677
    25bc:	0001f693 	.word	0x0001f693
    25c0:	20001188 	.word	0x20001188
    25c4:	20000898 	.word	0x20000898
    25c8:	0001f6c6 	.word	0x0001f6c6
    25cc:	0001f6fa 	.word	0x0001f6fa
    25d0:	0001da24 	.word	0x0001da24
    25d4:	0001f713 	.word	0x0001f713

000025d8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    25d8:	4b01      	ldr	r3, [pc, #4]	; (25e0 <char_out+0x8>)
    25da:	681b      	ldr	r3, [r3, #0]
    25dc:	4718      	bx	r3
    25de:	bf00      	nop
    25e0:	20000198 	.word	0x20000198

000025e4 <__printk_hook_install>:
	_char_out = fn;
    25e4:	4b01      	ldr	r3, [pc, #4]	; (25ec <__printk_hook_install+0x8>)
    25e6:	6018      	str	r0, [r3, #0]
}
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	20000198 	.word	0x20000198

000025f0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    25f0:	b507      	push	{r0, r1, r2, lr}
    25f2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    25f4:	2100      	movs	r1, #0
    25f6:	4602      	mov	r2, r0
    25f8:	9100      	str	r1, [sp, #0]
    25fa:	4803      	ldr	r0, [pc, #12]	; (2608 <vprintk+0x18>)
    25fc:	f000 f914 	bl	2828 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    2600:	b003      	add	sp, #12
    2602:	f85d fb04 	ldr.w	pc, [sp], #4
    2606:	bf00      	nop
    2608:	000025d9 	.word	0x000025d9

0000260c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2610:	8b05      	ldrh	r5, [r0, #24]
{
    2612:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2614:	0728      	lsls	r0, r5, #28
{
    2616:	4690      	mov	r8, r2
	if (processing) {
    2618:	d411      	bmi.n	263e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    261a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    261c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2620:	f040 80cd 	bne.w	27be <process_event+0x1b2>
			evt = process_recheck(mgr);
    2624:	4620      	mov	r0, r4
    2626:	f016 fe71 	bl	1930c <process_recheck>
		}

		if (evt == EVT_NOP) {
    262a:	b178      	cbz	r0, 264c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    262c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    262e:	8b21      	ldrh	r1, [r4, #24]
    2630:	2804      	cmp	r0, #4
    2632:	d811      	bhi.n	2658 <process_event+0x4c>
    2634:	e8df f000 	tbb	[pc, r0]
    2638:	856d10c3 	.word	0x856d10c3
    263c:	95          	.byte	0x95
    263d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    263e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2640:	bf0c      	ite	eq
    2642:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2646:	f045 0520 	orrne.w	r5, r5, #32
    264a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    264c:	f388 8811 	msr	BASEPRI, r8
    2650:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2658:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    265c:	45aa      	cmp	sl, r5
    265e:	f000 80a6 	beq.w	27ae <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    2662:	2700      	movs	r7, #0
    2664:	46b9      	mov	r9, r7
    2666:	463e      	mov	r6, r7
    2668:	68a3      	ldr	r3, [r4, #8]
    266a:	2b00      	cmp	r3, #0
    266c:	f000 80bd 	beq.w	27ea <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2670:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2674:	8321      	strh	r1, [r4, #24]
    2676:	f388 8811 	msr	BASEPRI, r8
    267a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    267e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2680:	2900      	cmp	r1, #0
    2682:	f000 80bb 	beq.w	27fc <process_event+0x1f0>
	return node->next;
    2686:	680d      	ldr	r5, [r1, #0]
    2688:	2900      	cmp	r1, #0
    268a:	f000 80b7 	beq.w	27fc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    268e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    2692:	4633      	mov	r3, r6
    2694:	4652      	mov	r2, sl
    2696:	4620      	mov	r0, r4
    2698:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    269a:	2d00      	cmp	r5, #0
    269c:	d076      	beq.n	278c <process_event+0x180>
    269e:	682b      	ldr	r3, [r5, #0]
    26a0:	4629      	mov	r1, r5
    26a2:	461d      	mov	r5, r3
    26a4:	e7f0      	b.n	2688 <process_event+0x7c>
    26a6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    26aa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    26ac:	2a01      	cmp	r2, #1
    26ae:	d81b      	bhi.n	26e8 <process_event+0xdc>
	list->head = NULL;
    26b0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    26b2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    26b6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    26b8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    26ba:	b289      	uxth	r1, r1
	list->tail = NULL;
    26bc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    26c0:	d109      	bne.n	26d6 <process_event+0xca>
    26c2:	463b      	mov	r3, r7
    26c4:	e003      	b.n	26ce <process_event+0xc2>
				mgr->refs += 1U;
    26c6:	8b62      	ldrh	r2, [r4, #26]
    26c8:	3201      	adds	r2, #1
    26ca:	8362      	strh	r2, [r4, #26]
	return node->next;
    26cc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    26ce:	2b00      	cmp	r3, #0
    26d0:	d1f9      	bne.n	26c6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    26d2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    26d6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    26d8:	4620      	mov	r0, r4
    26da:	f016 fe17 	bl	1930c <process_recheck>
    26de:	2800      	cmp	r0, #0
    26e0:	d07b      	beq.n	27da <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    26e2:	f041 0120 	orr.w	r1, r1, #32
    26e6:	e077      	b.n	27d8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    26e8:	2b04      	cmp	r3, #4
    26ea:	d10a      	bne.n	2702 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    26ec:	f021 0107 	bic.w	r1, r1, #7
    26f0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    26f2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    26f4:	4620      	mov	r0, r4
    26f6:	f016 fe09 	bl	1930c <process_recheck>
    26fa:	b110      	cbz	r0, 2702 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    26fc:	f041 0120 	orr.w	r1, r1, #32
    2700:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2702:	8b21      	ldrh	r1, [r4, #24]
    2704:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2708:	45aa      	cmp	sl, r5
    270a:	d050      	beq.n	27ae <process_event+0x1a2>
    270c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    270e:	46b9      	mov	r9, r7
    2710:	e7aa      	b.n	2668 <process_event+0x5c>
			transit = mgr->transitions->start;
    2712:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2714:	f021 0107 	bic.w	r1, r1, #7
    2718:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    271c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    271e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2722:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2724:	d12d      	bne.n	2782 <process_event+0x176>
		    || (transit != NULL)) {
    2726:	f1b9 0f00 	cmp.w	r9, #0
    272a:	d040      	beq.n	27ae <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    272c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2730:	8321      	strh	r1, [r4, #24]
    2732:	f388 8811 	msr	BASEPRI, r8
    2736:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    273a:	493a      	ldr	r1, [pc, #232]	; (2824 <process_event+0x218>)
    273c:	4620      	mov	r0, r4
    273e:	47c8      	blx	r9
    2740:	e029      	b.n	2796 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2742:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    2746:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2748:	f041 0104 	orr.w	r1, r1, #4
    274c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    274e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    2750:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2754:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2756:	d0e6      	beq.n	2726 <process_event+0x11a>
    2758:	2700      	movs	r7, #0
		res = 0;
    275a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    275c:	f04f 0a04 	mov.w	sl, #4
    2760:	e782      	b.n	2668 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2762:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    2766:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2768:	f041 0105 	orr.w	r1, r1, #5
    276c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    276e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    2770:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2774:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    2776:	d0d6      	beq.n	2726 <process_event+0x11a>
    2778:	2700      	movs	r7, #0
		res = 0;
    277a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    277c:	f04f 0a05 	mov.w	sl, #5
    2780:	e772      	b.n	2668 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    2782:	2700      	movs	r7, #0
		res = 0;
    2784:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2786:	f04f 0a06 	mov.w	sl, #6
    278a:	e76d      	b.n	2668 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    278c:	462b      	mov	r3, r5
    278e:	e787      	b.n	26a0 <process_event+0x94>
			if (transit != NULL) {
    2790:	f1b9 0f00 	cmp.w	r9, #0
    2794:	d1d1      	bne.n	273a <process_event+0x12e>
	__asm__ volatile(
    2796:	f04f 0320 	mov.w	r3, #32
    279a:	f3ef 8811 	mrs	r8, BASEPRI
    279e:	f383 8812 	msr	BASEPRI_MAX, r3
    27a2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    27a6:	8b23      	ldrh	r3, [r4, #24]
    27a8:	f023 0308 	bic.w	r3, r3, #8
    27ac:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    27ae:	8b25      	ldrh	r5, [r4, #24]
    27b0:	06ea      	lsls	r2, r5, #27
    27b2:	d52e      	bpl.n	2812 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    27b4:	f025 0310 	bic.w	r3, r5, #16
    27b8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    27ba:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    27be:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    27c0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    27c2:	2e00      	cmp	r6, #0
    27c4:	f6bf af6f 	bge.w	26a6 <process_event+0x9a>
	list->head = NULL;
    27c8:	2300      	movs	r3, #0
		*clients = mgr->clients;
    27ca:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    27cc:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    27d0:	f021 0107 	bic.w	r1, r1, #7
    27d4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    27d8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    27da:	8b21      	ldrh	r1, [r4, #24]
    27dc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    27e0:	45aa      	cmp	sl, r5
    27e2:	f04f 0900 	mov.w	r9, #0
    27e6:	f47f af3f 	bne.w	2668 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    27ea:	2f00      	cmp	r7, #0
    27ec:	d09b      	beq.n	2726 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    27ee:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    27f2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    27f4:	f388 8811 	msr	BASEPRI, r8
    27f8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    27fc:	2f00      	cmp	r7, #0
    27fe:	d0c7      	beq.n	2790 <process_event+0x184>
	return node->next;
    2800:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    2802:	4639      	mov	r1, r7
    2804:	4633      	mov	r3, r6
    2806:	4652      	mov	r2, sl
    2808:	4620      	mov	r0, r4
    280a:	f016 fdab 	bl	19364 <notify_one>
	list->head = node;
    280e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    2810:	e7f4      	b.n	27fc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2812:	06ab      	lsls	r3, r5, #26
    2814:	f57f af1a 	bpl.w	264c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2818:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    281c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    281e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    2822:	e6ff      	b.n	2624 <process_event+0x18>
    2824:	00019391 	.word	0x00019391

00002828 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    2828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    282c:	b09f      	sub	sp, #124	; 0x7c
    282e:	4682      	mov	sl, r0
    2830:	9103      	str	r1, [sp, #12]
    2832:	4616      	mov	r6, r2
    2834:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2836:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2838:	7830      	ldrb	r0, [r6, #0]
    283a:	b910      	cbnz	r0, 2842 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    283c:	4628      	mov	r0, r5
    283e:	f000 bd8b 	b.w	3358 <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
    2842:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    2844:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2846:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    2848:	d006      	beq.n	2858 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    284a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    284c:	47d0      	blx	sl
    284e:	2800      	cmp	r0, #0
    2850:	f2c0 8582 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    2854:	3501      	adds	r5, #1
		if (bps == NULL) {
    2856:	e22b      	b.n	2cb0 <z_cbvprintf_impl+0x488>
		} state = {
    2858:	2218      	movs	r2, #24
    285a:	2100      	movs	r1, #0
    285c:	a810      	add	r0, sp, #64	; 0x40
    285e:	f017 f9d4 	bl	19c0a <memset>
	if (*sp == '%') {
    2862:	7873      	ldrb	r3, [r6, #1]
    2864:	2b25      	cmp	r3, #37	; 0x25
    2866:	d07d      	beq.n	2964 <z_cbvprintf_impl+0x13c>
    2868:	2300      	movs	r3, #0
    286a:	1c70      	adds	r0, r6, #1
    286c:	4698      	mov	r8, r3
    286e:	469e      	mov	lr, r3
    2870:	469c      	mov	ip, r3
    2872:	461f      	mov	r7, r3
    2874:	4601      	mov	r1, r0
		switch (*sp) {
    2876:	f810 2b01 	ldrb.w	r2, [r0], #1
    287a:	2a2b      	cmp	r2, #43	; 0x2b
    287c:	f000 80a1 	beq.w	29c2 <z_cbvprintf_impl+0x19a>
    2880:	f200 8098 	bhi.w	29b4 <z_cbvprintf_impl+0x18c>
    2884:	2a20      	cmp	r2, #32
    2886:	f000 809f 	beq.w	29c8 <z_cbvprintf_impl+0x1a0>
    288a:	2a23      	cmp	r2, #35	; 0x23
    288c:	f000 809f 	beq.w	29ce <z_cbvprintf_impl+0x1a6>
    2890:	b12b      	cbz	r3, 289e <z_cbvprintf_impl+0x76>
    2892:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    289a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    289e:	f1b8 0f00 	cmp.w	r8, #0
    28a2:	d005      	beq.n	28b0 <z_cbvprintf_impl+0x88>
    28a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28a8:	f043 0320 	orr.w	r3, r3, #32
    28ac:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    28b0:	f1be 0f00 	cmp.w	lr, #0
    28b4:	d005      	beq.n	28c2 <z_cbvprintf_impl+0x9a>
    28b6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28ba:	f043 0310 	orr.w	r3, r3, #16
    28be:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    28c2:	f1bc 0f00 	cmp.w	ip, #0
    28c6:	d005      	beq.n	28d4 <z_cbvprintf_impl+0xac>
    28c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28cc:	f043 0308 	orr.w	r3, r3, #8
    28d0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    28d4:	b12f      	cbz	r7, 28e2 <z_cbvprintf_impl+0xba>
    28d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28da:	f043 0304 	orr.w	r3, r3, #4
    28de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    28e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28e6:	f003 0044 	and.w	r0, r3, #68	; 0x44
    28ea:	2844      	cmp	r0, #68	; 0x44
    28ec:	d103      	bne.n	28f6 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    28ee:	f36f 1386 	bfc	r3, #6, #1
    28f2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    28f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    28fa:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    28fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2900:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    2904:	d17f      	bne.n	2a06 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    2906:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    290a:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    290e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    2910:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    2914:	781a      	ldrb	r2, [r3, #0]
    2916:	2a2e      	cmp	r2, #46	; 0x2e
    2918:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    291c:	bf0c      	ite	eq
    291e:	2101      	moveq	r1, #1
    2920:	2100      	movne	r1, #0
    2922:	f361 0241 	bfi	r2, r1, #1, #1
    2926:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    292a:	d178      	bne.n	2a1e <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    292c:	785a      	ldrb	r2, [r3, #1]
    292e:	2a2a      	cmp	r2, #42	; 0x2a
    2930:	d06e      	beq.n	2a10 <z_cbvprintf_impl+0x1e8>
	++sp;
    2932:	3301      	adds	r3, #1
	size_t val = 0;
    2934:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2936:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    293a:	4619      	mov	r1, r3
    293c:	f811 0b01 	ldrb.w	r0, [r1], #1
    2940:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    2944:	2f09      	cmp	r7, #9
    2946:	f240 80af 	bls.w	2aa8 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    294a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    294e:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    2950:	f3c1 0040 	ubfx	r0, r1, #1, #1
    2954:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    2958:	460a      	mov	r2, r1
    295a:	f360 0241 	bfi	r2, r0, #1, #1
    295e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2962:	e05c      	b.n	2a1e <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    2964:	1cb2      	adds	r2, r6, #2
    2966:	9206      	str	r2, [sp, #24]
    2968:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    296c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2970:	07df      	lsls	r7, r3, #31
    2972:	f140 8154 	bpl.w	2c1e <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    2976:	f854 2b04 	ldr.w	r2, [r4], #4
    297a:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    297c:	2a00      	cmp	r2, #0
    297e:	da08      	bge.n	2992 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    2980:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2984:	f042 0204 	orr.w	r2, r2, #4
    2988:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    298c:	9a04      	ldr	r2, [sp, #16]
    298e:	4252      	negs	r2, r2
		int width = -1;
    2990:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    2992:	0758      	lsls	r0, r3, #29
    2994:	f140 814b 	bpl.w	2c2e <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    2998:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    299c:	2f00      	cmp	r7, #0
    299e:	f280 814a 	bge.w	2c36 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    29a2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    29a6:	f36f 0341 	bfc	r3, #1, #1
    29aa:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    29ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    29b2:	e140      	b.n	2c36 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    29b4:	2a2d      	cmp	r2, #45	; 0x2d
    29b6:	d00d      	beq.n	29d4 <z_cbvprintf_impl+0x1ac>
    29b8:	2a30      	cmp	r2, #48	; 0x30
    29ba:	f47f af69 	bne.w	2890 <z_cbvprintf_impl+0x68>
    29be:	2301      	movs	r3, #1
	} while (loop);
    29c0:	e758      	b.n	2874 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    29c2:	f04f 0c01 	mov.w	ip, #1
    29c6:	e755      	b.n	2874 <z_cbvprintf_impl+0x4c>
    29c8:	f04f 0e01 	mov.w	lr, #1
    29cc:	e752      	b.n	2874 <z_cbvprintf_impl+0x4c>
    29ce:	f04f 0801 	mov.w	r8, #1
    29d2:	e74f      	b.n	2874 <z_cbvprintf_impl+0x4c>
    29d4:	2701      	movs	r7, #1
    29d6:	e74d      	b.n	2874 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    29d8:	fb0e 7202 	mla	r2, lr, r2, r7
    29dc:	3a30      	subs	r2, #48	; 0x30
    29de:	4603      	mov	r3, r0
    29e0:	4618      	mov	r0, r3
    29e2:	f810 7b01 	ldrb.w	r7, [r0], #1
    29e6:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    29ea:	f1bc 0f09 	cmp.w	ip, #9
    29ee:	d9f3      	bls.n	29d8 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    29f0:	4299      	cmp	r1, r3
    29f2:	d08f      	beq.n	2914 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    29f4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    29f8:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    29fa:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    29fc:	f362 0141 	bfi	r1, r2, #1, #1
    2a00:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    2a04:	e786      	b.n	2914 <z_cbvprintf_impl+0xec>
    2a06:	460b      	mov	r3, r1
	size_t val = 0;
    2a08:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2a0a:	f04f 0e0a 	mov.w	lr, #10
    2a0e:	e7e7      	b.n	29e0 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    2a10:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2a14:	f042 0204 	orr.w	r2, r2, #4
    2a18:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    2a1c:	3302      	adds	r3, #2
	switch (*sp) {
    2a1e:	781a      	ldrb	r2, [r3, #0]
    2a20:	2a6c      	cmp	r2, #108	; 0x6c
    2a22:	d061      	beq.n	2ae8 <z_cbvprintf_impl+0x2c0>
    2a24:	d845      	bhi.n	2ab2 <z_cbvprintf_impl+0x28a>
    2a26:	2a68      	cmp	r2, #104	; 0x68
    2a28:	d04b      	beq.n	2ac2 <z_cbvprintf_impl+0x29a>
    2a2a:	2a6a      	cmp	r2, #106	; 0x6a
    2a2c:	d065      	beq.n	2afa <z_cbvprintf_impl+0x2d2>
    2a2e:	2a4c      	cmp	r2, #76	; 0x4c
    2a30:	d06b      	beq.n	2b0a <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    2a32:	f813 2b01 	ldrb.w	r2, [r3], #1
    2a36:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    2a38:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    2a3a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    2a3e:	f200 80ad 	bhi.w	2b9c <z_cbvprintf_impl+0x374>
    2a42:	2a6d      	cmp	r2, #109	; 0x6d
    2a44:	d86e      	bhi.n	2b24 <z_cbvprintf_impl+0x2fc>
    2a46:	2a69      	cmp	r2, #105	; 0x69
    2a48:	f200 80a8 	bhi.w	2b9c <z_cbvprintf_impl+0x374>
    2a4c:	2a57      	cmp	r2, #87	; 0x57
    2a4e:	f200 8088 	bhi.w	2b62 <z_cbvprintf_impl+0x33a>
    2a52:	2a41      	cmp	r2, #65	; 0x41
    2a54:	d004      	beq.n	2a60 <z_cbvprintf_impl+0x238>
    2a56:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    2a5a:	2b02      	cmp	r3, #2
    2a5c:	f200 809e 	bhi.w	2b9c <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    2a60:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    2a64:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    2a68:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    2a6a:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    2a6e:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    2a72:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    2a76:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    2a7a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    2a7e:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    2a82:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    2a86:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    2a88:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    2a8c:	b2cb      	uxtb	r3, r1
    2a8e:	f100 80c4 	bmi.w	2c1a <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    2a92:	f003 0278 	and.w	r2, r3, #120	; 0x78
    2a96:	2a18      	cmp	r2, #24
    2a98:	f040 80ae 	bne.w	2bf8 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    2a9c:	f36f 03c6 	bfc	r3, #3, #4
    2aa0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    2aa4:	2300      	movs	r3, #0
    2aa6:	e09d      	b.n	2be4 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    2aa8:	fb0c 0202 	mla	r2, ip, r2, r0
    2aac:	3a30      	subs	r2, #48	; 0x30
    2aae:	460b      	mov	r3, r1
    2ab0:	e743      	b.n	293a <z_cbvprintf_impl+0x112>
	switch (*sp) {
    2ab2:	2a74      	cmp	r2, #116	; 0x74
    2ab4:	d025      	beq.n	2b02 <z_cbvprintf_impl+0x2da>
    2ab6:	2a7a      	cmp	r2, #122	; 0x7a
    2ab8:	d1bb      	bne.n	2a32 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    2aba:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2abe:	2106      	movs	r1, #6
    2ac0:	e00c      	b.n	2adc <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    2ac2:	785a      	ldrb	r2, [r3, #1]
    2ac4:	2a68      	cmp	r2, #104	; 0x68
    2ac6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2aca:	d106      	bne.n	2ada <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    2acc:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2ace:	f361 02c6 	bfi	r2, r1, #3, #4
    2ad2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    2ad6:	3302      	adds	r3, #2
    2ad8:	e7ab      	b.n	2a32 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    2ada:	2102      	movs	r1, #2
    2adc:	f361 02c6 	bfi	r2, r1, #3, #4
    2ae0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    2ae4:	3301      	adds	r3, #1
    2ae6:	e7a4      	b.n	2a32 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    2ae8:	785a      	ldrb	r2, [r3, #1]
    2aea:	2a6c      	cmp	r2, #108	; 0x6c
    2aec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2af0:	d101      	bne.n	2af6 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    2af2:	2104      	movs	r1, #4
    2af4:	e7eb      	b.n	2ace <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    2af6:	2103      	movs	r1, #3
    2af8:	e7f0      	b.n	2adc <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    2afa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2afe:	2105      	movs	r1, #5
    2b00:	e7ec      	b.n	2adc <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    2b02:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2b06:	2107      	movs	r1, #7
    2b08:	e7e8      	b.n	2adc <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    2b0a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2b0e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2b12:	f022 0202 	bic.w	r2, r2, #2
    2b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2b1a:	f042 0202 	orr.w	r2, r2, #2
    2b1e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2b22:	e7df      	b.n	2ae4 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    2b24:	3a6e      	subs	r2, #110	; 0x6e
    2b26:	b2d3      	uxtb	r3, r2
    2b28:	2201      	movs	r2, #1
    2b2a:	409a      	lsls	r2, r3
    2b2c:	f240 4382 	movw	r3, #1154	; 0x482
    2b30:	421a      	tst	r2, r3
    2b32:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2b36:	d138      	bne.n	2baa <z_cbvprintf_impl+0x382>
    2b38:	f012 0f24 	tst.w	r2, #36	; 0x24
    2b3c:	d160      	bne.n	2c00 <z_cbvprintf_impl+0x3d8>
    2b3e:	07d1      	lsls	r1, r2, #31
    2b40:	d52c      	bpl.n	2b9c <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    2b42:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b46:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2b4a:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2b4e:	2103      	movs	r1, #3
    2b50:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b54:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    2b58:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b5c:	eb43 030c 	adc.w	r3, r3, ip
    2b60:	e040      	b.n	2be4 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
    2b62:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2b66:	b2c9      	uxtb	r1, r1
    2b68:	2001      	movs	r0, #1
    2b6a:	fa00 f101 	lsl.w	r1, r0, r1
    2b6e:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    2b72:	f47f af75 	bne.w	2a60 <z_cbvprintf_impl+0x238>
    2b76:	f640 0301 	movw	r3, #2049	; 0x801
    2b7a:	4219      	tst	r1, r3
    2b7c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2b80:	d119      	bne.n	2bb6 <z_cbvprintf_impl+0x38e>
    2b82:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2b86:	d009      	beq.n	2b9c <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    2b88:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2b8c:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b90:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2b94:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2b96:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b9a:	d183      	bne.n	2aa4 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    2b9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2ba0:	f043 0301 	orr.w	r3, r3, #1
    2ba4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    2ba8:	e77c      	b.n	2aa4 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    2baa:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2bae:	2102      	movs	r1, #2
    2bb0:	f361 0202 	bfi	r2, r1, #0, #3
    2bb4:	e7ec      	b.n	2b90 <z_cbvprintf_impl+0x368>
    2bb6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2bba:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    2bbc:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2bc0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2bc4:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2bc6:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    2bca:	bf02      	ittt	eq
    2bcc:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    2bd0:	f041 0101 	orreq.w	r1, r1, #1
    2bd4:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    2bd8:	2a63      	cmp	r2, #99	; 0x63
    2bda:	f47f af63 	bne.w	2aa4 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2bde:	3b00      	subs	r3, #0
    2be0:	bf18      	it	ne
    2be2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2be4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2be8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2bec:	430b      	orrs	r3, r1
    2bee:	f363 0241 	bfi	r2, r3, #1, #1
    2bf2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2bf6:	e6b9      	b.n	296c <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    2bf8:	f013 0f38 	tst.w	r3, #56	; 0x38
    2bfc:	d1ce      	bne.n	2b9c <z_cbvprintf_impl+0x374>
    2bfe:	e751      	b.n	2aa4 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    2c00:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2c04:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2c06:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2c0a:	f361 0202 	bfi	r2, r1, #0, #3
    2c0e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    2c12:	bf14      	ite	ne
    2c14:	2301      	movne	r3, #1
    2c16:	2300      	moveq	r3, #0
    2c18:	e7e4      	b.n	2be4 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    2c1a:	2301      	movs	r3, #1
    2c1c:	e7e2      	b.n	2be4 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    2c1e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2c22:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2c24:	bfb4      	ite	lt
    2c26:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    2c28:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    2c2c:	e6b0      	b.n	2990 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    2c2e:	0799      	lsls	r1, r3, #30
    2c30:	f57f aebd 	bpl.w	29ae <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    2c34:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    2c36:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    2c3a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2c3c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    2c40:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2c44:	f003 0207 	and.w	r2, r3, #7
    2c48:	2a04      	cmp	r2, #4
    2c4a:	d107      	bne.n	2c5c <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    2c4c:	078a      	lsls	r2, r1, #30
    2c4e:	d405      	bmi.n	2c5c <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    2c50:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    2c54:	2a00      	cmp	r2, #0
    2c56:	bfac      	ite	ge
    2c58:	2706      	movge	r7, #6
    2c5a:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    2c5c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2c60:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2c62:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2c66:	d133      	bne.n	2cd0 <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    2c68:	1ecb      	subs	r3, r1, #3
    2c6a:	2b04      	cmp	r3, #4
    2c6c:	d804      	bhi.n	2c78 <z_cbvprintf_impl+0x450>
    2c6e:	e8df f003 	tbb	[pc, r3]
    2c72:	4621      	.short	0x4621
    2c74:	2146      	.short	0x2146
    2c76:	21          	.byte	0x21
    2c77:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2c78:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    2c7a:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2c7c:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2c80:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2c84:	d11c      	bne.n	2cc0 <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    2c86:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    2c8a:	17da      	asrs	r2, r3, #31
    2c8c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    2c90:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2c92:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2c96:	9307      	str	r3, [sp, #28]
    2c98:	079b      	lsls	r3, r3, #30
    2c9a:	d050      	beq.n	2d3e <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    2c9c:	9b06      	ldr	r3, [sp, #24]
    2c9e:	9903      	ldr	r1, [sp, #12]
    2ca0:	4632      	mov	r2, r6
    2ca2:	4650      	mov	r0, sl
    2ca4:	f016 fcb4 	bl	19610 <outs>
    2ca8:	2800      	cmp	r0, #0
    2caa:	f2c0 8355 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    2cae:	4405      	add	r5, r0
			continue;
    2cb0:	9e06      	ldr	r6, [sp, #24]
    2cb2:	e5c1      	b.n	2838 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2cb4:	f854 3b04 	ldr.w	r3, [r4], #4
    2cb8:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    2cba:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    2cbe:	e7e8      	b.n	2c92 <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    2cc0:	2902      	cmp	r1, #2
    2cc2:	d1e5      	bne.n	2c90 <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    2cc4:	b21a      	sxth	r2, r3
    2cc6:	f343 33c0 	sbfx	r3, r3, #15, #1
    2cca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2cce:	e7df      	b.n	2c90 <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2cd0:	2b02      	cmp	r3, #2
    2cd2:	d124      	bne.n	2d1e <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    2cd4:	1ecb      	subs	r3, r1, #3
    2cd6:	2b04      	cmp	r3, #4
    2cd8:	d804      	bhi.n	2ce4 <z_cbvprintf_impl+0x4bc>
    2cda:	e8df f003 	tbb	[pc, r3]
    2cde:	1018      	.short	0x1018
    2ce0:	1810      	.short	0x1810
    2ce2:	18          	.byte	0x18
    2ce3:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2ce4:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2ce6:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2cea:	f04f 0200 	mov.w	r2, #0
    2cee:	d014      	beq.n	2d1a <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    2cf0:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    2cf2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2cf6:	d1cc      	bne.n	2c92 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    2cf8:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    2cfa:	9310      	str	r3, [sp, #64]	; 0x40
    2cfc:	e7c9      	b.n	2c92 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    2cfe:	3407      	adds	r4, #7
    2d00:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2d04:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2d0c:	e7c1      	b.n	2c92 <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    2d0e:	f854 3b04 	ldr.w	r3, [r4], #4
    2d12:	9310      	str	r3, [sp, #64]	; 0x40
    2d14:	2300      	movs	r3, #0
    2d16:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    2d18:	e7bb      	b.n	2c92 <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    2d1a:	b2db      	uxtb	r3, r3
    2d1c:	e7cd      	b.n	2cba <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    2d1e:	2b04      	cmp	r3, #4
    2d20:	d108      	bne.n	2d34 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    2d22:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2d24:	f024 0407 	bic.w	r4, r4, #7
    2d28:	e9d4 2300 	ldrd	r2, r3, [r4]
    2d2c:	3408      	adds	r4, #8
    2d2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2d32:	e7ae      	b.n	2c92 <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2d34:	2b03      	cmp	r3, #3
    2d36:	d1ac      	bne.n	2c92 <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    2d38:	f854 3b04 	ldr.w	r3, [r4], #4
    2d3c:	e7dd      	b.n	2cfa <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    2d3e:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    2d42:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    2d46:	d8b3      	bhi.n	2cb0 <z_cbvprintf_impl+0x488>
    2d48:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    2d4c:	d849      	bhi.n	2de2 <z_cbvprintf_impl+0x5ba>
    2d4e:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    2d52:	f000 8091 	beq.w	2e78 <z_cbvprintf_impl+0x650>
    2d56:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    2d5a:	d9a9      	bls.n	2cb0 <z_cbvprintf_impl+0x488>
    2d5c:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    2d60:	d003      	beq.n	2d6a <z_cbvprintf_impl+0x542>
    2d62:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    2d66:	2a02      	cmp	r2, #2
    2d68:	d8a2      	bhi.n	2cb0 <z_cbvprintf_impl+0x488>
	} u = {
    2d6a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    2d6e:	2a00      	cmp	r2, #0
    2d70:	f2c0 8136 	blt.w	2fe0 <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    2d74:	9b07      	ldr	r3, [sp, #28]
    2d76:	0718      	lsls	r0, r3, #28
    2d78:	f100 8135 	bmi.w	2fe6 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    2d7c:	f3c3 1900 	ubfx	r9, r3, #4, #1
    2d80:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2d84:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    2d88:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    2d8c:	2800      	cmp	r0, #0
    2d8e:	f040 812d 	bne.w	2fec <z_cbvprintf_impl+0x7c4>
    2d92:	ea51 0602 	orrs.w	r6, r1, r2
    2d96:	bf14      	ite	ne
    2d98:	2601      	movne	r6, #1
    2d9a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    2d9c:	02d2      	lsls	r2, r2, #11
    2d9e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    2da2:	02c9      	lsls	r1, r1, #11
		c = 'f';
    2da4:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    2da8:	ea40 0e01 	orr.w	lr, r0, r1
    2dac:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    2db0:	bf08      	it	eq
    2db2:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    2db6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    2dba:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    2dbe:	f000 8199 	beq.w	30f4 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
    2dc2:	2e00      	cmp	r6, #0
    2dc4:	f040 8144 	bne.w	3050 <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    2dc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2dca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    2dce:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    2dd2:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2dd4:	2000      	movs	r0, #0
    2dd6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    2dda:	4606      	mov	r6, r0
		fract *= 5U;
    2ddc:	f04f 0c05 	mov.w	ip, #5
    2de0:	e150      	b.n	3084 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    2de2:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    2de6:	2a20      	cmp	r2, #32
    2de8:	f63f af62 	bhi.w	2cb0 <z_cbvprintf_impl+0x488>
    2dec:	a001      	add	r0, pc, #4	; (adr r0, 2df4 <z_cbvprintf_impl+0x5cc>)
    2dee:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2df2:	bf00      	nop
    2df4:	00002f7f 	.word	0x00002f7f
    2df8:	00002cb1 	.word	0x00002cb1
    2dfc:	00002cb1 	.word	0x00002cb1
    2e00:	00002cb1 	.word	0x00002cb1
    2e04:	00002cb1 	.word	0x00002cb1
    2e08:	00002cb1 	.word	0x00002cb1
    2e0c:	00002cb1 	.word	0x00002cb1
    2e10:	00002cb1 	.word	0x00002cb1
    2e14:	00002cb1 	.word	0x00002cb1
    2e18:	00002d6b 	.word	0x00002d6b
    2e1c:	00002cb1 	.word	0x00002cb1
    2e20:	00002f03 	.word	0x00002f03
    2e24:	00002f17 	.word	0x00002f17
    2e28:	00002d6b 	.word	0x00002d6b
    2e2c:	00002d6b 	.word	0x00002d6b
    2e30:	00002d6b 	.word	0x00002d6b
    2e34:	00002cb1 	.word	0x00002cb1
    2e38:	00002f17 	.word	0x00002f17
    2e3c:	00002cb1 	.word	0x00002cb1
    2e40:	00002cb1 	.word	0x00002cb1
    2e44:	00002cb1 	.word	0x00002cb1
    2e48:	00002cb1 	.word	0x00002cb1
    2e4c:	00002fb9 	.word	0x00002fb9
    2e50:	00002f7f 	.word	0x00002f7f
    2e54:	00002f85 	.word	0x00002f85
    2e58:	00002cb1 	.word	0x00002cb1
    2e5c:	00002cb1 	.word	0x00002cb1
    2e60:	00002e7f 	.word	0x00002e7f
    2e64:	00002cb1 	.word	0x00002cb1
    2e68:	00002f7f 	.word	0x00002f7f
    2e6c:	00002cb1 	.word	0x00002cb1
    2e70:	00002cb1 	.word	0x00002cb1
    2e74:	00002f7f 	.word	0x00002f7f
			OUTC('%');
    2e78:	9903      	ldr	r1, [sp, #12]
    2e7a:	4658      	mov	r0, fp
    2e7c:	e4e6      	b.n	284c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    2e7e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    2e80:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    2e82:	db3a      	blt.n	2efa <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    2e84:	4639      	mov	r1, r7
    2e86:	4630      	mov	r0, r6
    2e88:	f016 fecb 	bl	19c22 <strnlen>
			bpe = bps + len;
    2e8c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    2e8e:	2e00      	cmp	r6, #0
    2e90:	f43f af0e 	beq.w	2cb0 <z_cbvprintf_impl+0x488>
		char sign = 0;
    2e94:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    2e98:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2e9c:	f013 0210 	ands.w	r2, r3, #16
    2ea0:	9205      	str	r2, [sp, #20]
    2ea2:	f000 824e 	beq.w	3342 <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
    2ea6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2ea8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    2eac:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    2eb0:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    2eb2:	bf18      	it	ne
    2eb4:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    2eb6:	f8cd 801c 	str.w	r8, [sp, #28]
    2eba:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    2ebc:	bf18      	it	ne
    2ebe:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    2ec0:	9b04      	ldr	r3, [sp, #16]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	f340 8258 	ble.w	3378 <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
    2ec8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2ecc:	1a1b      	subs	r3, r3, r0
    2ece:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    2ed0:	0753      	lsls	r3, r2, #29
    2ed2:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    2ed6:	f100 824f 	bmi.w	3378 <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
    2eda:	0650      	lsls	r0, r2, #25
    2edc:	f140 823f 	bpl.w	335e <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
    2ee0:	f1b9 0f00 	cmp.w	r9, #0
    2ee4:	d007      	beq.n	2ef6 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    2ee6:	9903      	ldr	r1, [sp, #12]
    2ee8:	4648      	mov	r0, r9
    2eea:	47d0      	blx	sl
    2eec:	2800      	cmp	r0, #0
    2eee:	f2c0 8233 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    2ef2:	3501      	adds	r5, #1
						sign = 0;
    2ef4:	46d9      	mov	r9, fp
					pad = '0';
    2ef6:	2230      	movs	r2, #48	; 0x30
    2ef8:	e232      	b.n	3360 <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
    2efa:	4630      	mov	r0, r6
    2efc:	f016 fe57 	bl	19bae <strlen>
    2f00:	e7c4      	b.n	2e8c <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2f04:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    2f08:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    2f0c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    2f10:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2f12:	2001      	movs	r0, #1
    2f14:	e7c0      	b.n	2e98 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    2f16:	9b07      	ldr	r3, [sp, #28]
    2f18:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    2f1a:	bf58      	it	pl
    2f1c:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    2f20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    2f24:	bf54      	ite	pl
    2f26:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    2f2a:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    2f2e:	2b00      	cmp	r3, #0
    2f30:	da06      	bge.n	2f40 <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
    2f32:	4252      	negs	r2, r2
    2f34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2f38:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2f3c:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    2f40:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2f44:	9300      	str	r3, [sp, #0]
    2f46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2f4a:	ab17      	add	r3, sp, #92	; 0x5c
    2f4c:	aa12      	add	r2, sp, #72	; 0x48
    2f4e:	f016 fb19 	bl	19584 <encode_uint>
    2f52:	4606      	mov	r6, r0
			if (precision >= 0) {
    2f54:	2f00      	cmp	r7, #0
    2f56:	db0c      	blt.n	2f72 <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    2f58:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2f5c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2f60:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    2f62:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2f66:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    2f68:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2f6c:	d901      	bls.n	2f72 <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    2f6e:	1afb      	subs	r3, r7, r3
    2f70:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    2f72:	2e00      	cmp	r6, #0
    2f74:	f43f ae9c 	beq.w	2cb0 <z_cbvprintf_impl+0x488>
    2f78:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    2f7c:	e056      	b.n	302c <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    2f7e:	f04f 0900 	mov.w	r9, #0
    2f82:	e7dd      	b.n	2f40 <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    2f84:	9810      	ldr	r0, [sp, #64]	; 0x40
    2f86:	2800      	cmp	r0, #0
    2f88:	f000 81d6 	beq.w	3338 <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2f8c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2f90:	9300      	str	r3, [sp, #0]
    2f92:	aa12      	add	r2, sp, #72	; 0x48
    2f94:	ab17      	add	r3, sp, #92	; 0x5c
    2f96:	2100      	movs	r1, #0
    2f98:	f016 faf4 	bl	19584 <encode_uint>
				conv->altform_0c = true;
    2f9c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    2fa0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2fa4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2fa8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2fac:	4606      	mov	r6, r0
				conv->altform_0c = true;
    2fae:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    2fb2:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    2fb6:	e7cd      	b.n	2f54 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    2fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    2fba:	2907      	cmp	r1, #7
    2fbc:	f63f ae78 	bhi.w	2cb0 <z_cbvprintf_impl+0x488>
    2fc0:	e8df f001 	tbb	[pc, r1]
    2fc4:	0c06040c 	.word	0x0c06040c
    2fc8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2fcc:	701d      	strb	r5, [r3, #0]
		break;
    2fce:	e66f      	b.n	2cb0 <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    2fd0:	801d      	strh	r5, [r3, #0]
		break;
    2fd2:	e66d      	b.n	2cb0 <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    2fd4:	17ea      	asrs	r2, r5, #31
    2fd6:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2fda:	e669      	b.n	2cb0 <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2fdc:	601d      	str	r5, [r3, #0]
		break;
    2fde:	e667      	b.n	2cb0 <z_cbvprintf_impl+0x488>
		*sign = '-';
    2fe0:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2fe4:	e6ce      	b.n	2d84 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    2fe6:	f04f 092b 	mov.w	r9, #43	; 0x2b
    2fea:	e6cb      	b.n	2d84 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2fec:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2ff0:	42b0      	cmp	r0, r6
    2ff2:	d12a      	bne.n	304a <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    2ff4:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    2ff6:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    2ffa:	d11e      	bne.n	303a <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c) != 0) {
    2ffc:	2b1a      	cmp	r3, #26
    2ffe:	bf35      	itete	cc
    3000:	2349      	movcc	r3, #73	; 0x49
    3002:	2369      	movcs	r3, #105	; 0x69
    3004:	214e      	movcc	r1, #78	; 0x4e
    3006:	216e      	movcs	r1, #110	; 0x6e
    3008:	bf34      	ite	cc
    300a:	2246      	movcc	r2, #70	; 0x46
    300c:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    300e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    3012:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    3016:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    301a:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    301e:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    3022:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    3026:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    302a:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    302c:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    302e:	f1b9 0f00 	cmp.w	r9, #0
    3032:	f43f af31 	beq.w	2e98 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    3036:	3001      	adds	r0, #1
    3038:	e72e      	b.n	2e98 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c) != 0) {
    303a:	2b19      	cmp	r3, #25
    303c:	bf8b      	itete	hi
    303e:	236e      	movhi	r3, #110	; 0x6e
    3040:	234e      	movls	r3, #78	; 0x4e
    3042:	2161      	movhi	r1, #97	; 0x61
    3044:	2141      	movls	r1, #65	; 0x41
    3046:	461a      	mov	r2, r3
    3048:	e7e1      	b.n	300e <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    304a:	2600      	movs	r6, #0
    304c:	e6a6      	b.n	2d9c <z_cbvprintf_impl+0x574>
				expo--;
    304e:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    3050:	1849      	adds	r1, r1, r1
    3052:	4152      	adcs	r2, r2
    3054:	2a00      	cmp	r2, #0
    3056:	dafa      	bge.n	304e <z_cbvprintf_impl+0x826>
    3058:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    305c:	e6b4      	b.n	2dc8 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    305e:	0849      	lsrs	r1, r1, #1
    3060:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    3064:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3066:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    306a:	4640      	mov	r0, r8
			expo++;
    306c:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    3070:	d2f5      	bcs.n	305e <z_cbvprintf_impl+0x836>
		fract *= 5U;
    3072:	fb0c fe02 	mul.w	lr, ip, r2
    3076:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    307a:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    307e:	4472      	add	r2, lr
		decexp--;
    3080:	3e01      	subs	r6, #1
    3082:	2001      	movs	r0, #1
	while (expo < -2) {
    3084:	f118 0f02 	cmn.w	r8, #2
    3088:	dbe9      	blt.n	305e <z_cbvprintf_impl+0x836>
    308a:	b108      	cbz	r0, 3090 <z_cbvprintf_impl+0x868>
    308c:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    3090:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    3094:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    3098:	dc2f      	bgt.n	30fa <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
    309a:	f1c8 0004 	rsb	r0, r8, #4
    309e:	f108 081c 	add.w	r8, r8, #28
    30a2:	f1a0 0c20 	sub.w	ip, r0, #32
    30a6:	40c2      	lsrs	r2, r0
    30a8:	fa21 f300 	lsr.w	r3, r1, r0
    30ac:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    30b0:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    30b4:	ea42 0208 	orr.w	r2, r2, r8
    30b8:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    30bc:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    30be:	ea42 020c 	orr.w	r2, r2, ip
    30c2:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    30c4:	d13a      	bne.n	313c <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
    30c6:	1cf3      	adds	r3, r6, #3
    30c8:	db01      	blt.n	30ce <z_cbvprintf_impl+0x8a6>
    30ca:	42b7      	cmp	r7, r6
    30cc:	da2b      	bge.n	3126 <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
    30ce:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    30d2:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    30d4:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    30d8:	dd7f      	ble.n	31da <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
    30da:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    30de:	0680      	lsls	r0, r0, #26
				precision--;
    30e0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    30e4:	d479      	bmi.n	31da <z_cbvprintf_impl+0x9b2>
    30e6:	1e3b      	subs	r3, r7, #0
    30e8:	bf18      	it	ne
    30ea:	2301      	movne	r3, #1
	bool prune_zero = false;
    30ec:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    30ee:	f107 0801 	add.w	r8, r7, #1
    30f2:	e02d      	b.n	3150 <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    30f4:	f04f 0800 	mov.w	r8, #0
    30f8:	e66c      	b.n	2dd4 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    30fa:	3202      	adds	r2, #2
    30fc:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    3100:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    3102:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    3106:	f016 fa0e 	bl	19526 <_ldiv5>
		expo--;
    310a:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    310e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    3112:	3601      	adds	r6, #1
			fract <<= 1;
    3114:	1892      	adds	r2, r2, r2
    3116:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    3118:	2900      	cmp	r1, #0
			expo--;
    311a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    311e:	daf9      	bge.n	3114 <z_cbvprintf_impl+0x8ec>
    3120:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    3124:	e7b4      	b.n	3090 <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    3126:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    312a:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    312c:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    3130:	d451      	bmi.n	31d6 <z_cbvprintf_impl+0x9ae>
    3132:	1e3b      	subs	r3, r7, #0
    3134:	bf18      	it	ne
    3136:	2301      	movne	r3, #1
	bool prune_zero = false;
    3138:	9305      	str	r3, [sp, #20]
    313a:	e004      	b.n	3146 <z_cbvprintf_impl+0x91e>
    313c:	2300      	movs	r3, #0
	if (c == 'f') {
    313e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    3142:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    3144:	d1d3      	bne.n	30ee <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
    3146:	eb17 0806 	adds.w	r8, r7, r6
    314a:	f04f 0b66 	mov.w	fp, #102	; 0x66
    314e:	d446      	bmi.n	31de <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
    3150:	f1b8 0f10 	cmp.w	r8, #16
    3154:	bfa8      	it	ge
    3156:	f04f 0810 	movge.w	r8, #16
    315a:	2010      	movs	r0, #16
    315c:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    315e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    3162:	2000      	movs	r0, #0
    3164:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    3168:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    316c:	f1b8 0f00 	cmp.w	r8, #0
    3170:	d138      	bne.n	31e4 <z_cbvprintf_impl+0x9bc>
	fract += round;
    3172:	9908      	ldr	r1, [sp, #32]
    3174:	1812      	adds	r2, r2, r0
    3176:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    317a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    317e:	d23f      	bcs.n	3200 <z_cbvprintf_impl+0x9d8>
	fract += round;
    3180:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    3184:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    3186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    318a:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    318e:	f040 80b2 	bne.w	32f6 <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
    3192:	2e00      	cmp	r6, #0
    3194:	dc3f      	bgt.n	3216 <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
    3196:	2130      	movs	r1, #48	; 0x30
    3198:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    319c:	2a00      	cmp	r2, #0
    319e:	d163      	bne.n	3268 <z_cbvprintf_impl+0xa40>
    31a0:	2f00      	cmp	r7, #0
    31a2:	f340 81a8 	ble.w	34f6 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    31a6:	222e      	movs	r2, #46	; 0x2e
    31a8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    31ac:	b186      	cbz	r6, 31d0 <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
    31ae:	4272      	negs	r2, r6
    31b0:	42ba      	cmp	r2, r7
    31b2:	bfa8      	it	ge
    31b4:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    31b6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    31ba:	9213      	str	r2, [sp, #76]	; 0x4c
    31bc:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    31be:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    31c2:	bfd4      	ite	le
    31c4:	2200      	movle	r2, #0
    31c6:	2201      	movgt	r2, #1
    31c8:	f362 1145 	bfi	r1, r2, #5, #1
    31cc:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    31d0:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    31d4:	e037      	b.n	3246 <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
    31d6:	2300      	movs	r3, #0
    31d8:	e7ae      	b.n	3138 <z_cbvprintf_impl+0x910>
    31da:	2300      	movs	r3, #0
    31dc:	e786      	b.n	30ec <z_cbvprintf_impl+0x8c4>
			decimals = 0;
    31de:	f04f 0800 	mov.w	r8, #0
    31e2:	e7ba      	b.n	315a <z_cbvprintf_impl+0x932>
	*v >>= 1;
    31e4:	0840      	lsrs	r0, r0, #1
    31e6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    31ea:	085b      	lsrs	r3, r3, #1
    31ec:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    31f0:	a80e      	add	r0, sp, #56	; 0x38
    31f2:	9209      	str	r2, [sp, #36]	; 0x24
    31f4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    31f8:	f016 f995 	bl	19526 <_ldiv5>
    31fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    31fe:	e7b3      	b.n	3168 <z_cbvprintf_impl+0x940>
	*v >>= 1;
    3200:	0852      	lsrs	r2, r2, #1
    3202:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    3206:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    3208:	0849      	lsrs	r1, r1, #1
    320a:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    320e:	3601      	adds	r6, #1
	_ldiv5(v);
    3210:	f016 f989 	bl	19526 <_ldiv5>
		decexp++;
    3214:	e7b6      	b.n	3184 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
    3216:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    321a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    321c:	2900      	cmp	r1, #0
    321e:	dd09      	ble.n	3234 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
    3220:	a90b      	add	r1, sp, #44	; 0x2c
    3222:	a80c      	add	r0, sp, #48	; 0x30
    3224:	9207      	str	r2, [sp, #28]
    3226:	f016 f996 	bl	19556 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    322a:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    322c:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    3230:	9a07      	ldr	r2, [sp, #28]
    3232:	d1f2      	bne.n	321a <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
    3234:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    3236:	b99a      	cbnz	r2, 3260 <z_cbvprintf_impl+0xa38>
    3238:	2f00      	cmp	r7, #0
    323a:	f340 815a 	ble.w	34f2 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    323e:	212e      	movs	r1, #46	; 0x2e
    3240:	f808 1b01 	strb.w	r1, [r8], #1
    3244:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    3246:	2f00      	cmp	r7, #0
    3248:	dd17      	ble.n	327a <z_cbvprintf_impl+0xa52>
    324a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    324c:	2a00      	cmp	r2, #0
    324e:	dd14      	ble.n	327a <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
    3250:	a90b      	add	r1, sp, #44	; 0x2c
    3252:	a80c      	add	r0, sp, #48	; 0x30
    3254:	f016 f97f 	bl	19556 <_get_digit>
		precision--;
    3258:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    325a:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    325e:	e7f2      	b.n	3246 <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
    3260:	222e      	movs	r2, #46	; 0x2e
    3262:	f808 2b01 	strb.w	r2, [r8], #1
    3266:	e7ed      	b.n	3244 <z_cbvprintf_impl+0xa1c>
    3268:	222e      	movs	r2, #46	; 0x2e
    326a:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    326e:	2e00      	cmp	r6, #0
    3270:	d0ae      	beq.n	31d0 <z_cbvprintf_impl+0x9a8>
    3272:	2f00      	cmp	r7, #0
    3274:	dc9b      	bgt.n	31ae <z_cbvprintf_impl+0x986>
			*buf++ = '.';
    3276:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    327a:	9b05      	ldr	r3, [sp, #20]
    327c:	2b00      	cmp	r3, #0
    327e:	d14e      	bne.n	331e <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
    3280:	9714      	str	r7, [sp, #80]	; 0x50
    3282:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    3284:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    3288:	2a45      	cmp	r2, #69	; 0x45
    328a:	d123      	bne.n	32d4 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
    328c:	2e00      	cmp	r6, #0
			decexp = -decexp;
    328e:	bfba      	itte	lt
    3290:	4276      	neglt	r6, r6
			*buf++ = '-';
    3292:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    3294:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    3296:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    3298:	bfc8      	it	gt
    329a:	2164      	movgt	r1, #100	; 0x64
    329c:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    329e:	bfd1      	iteee	le
    32a0:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    32a2:	fbb6 f3f1 	udivgt	r3, r6, r1
    32a6:	1cfa      	addgt	r2, r7, #3
    32a8:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    32ac:	bfc8      	it	gt
    32ae:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    32b2:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    32b6:	bfc8      	it	gt
    32b8:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    32ba:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    32be:	fbb6 f3f1 	udiv	r3, r6, r1
    32c2:	4617      	mov	r7, r2
    32c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    32c8:	fb01 6313 	mls	r3, r1, r3, r6
    32cc:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    32ce:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    32d2:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    32d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    32d6:	2b00      	cmp	r3, #0
    32d8:	dc2c      	bgt.n	3334 <z_cbvprintf_impl+0xb0c>
    32da:	9b14      	ldr	r3, [sp, #80]	; 0x50
    32dc:	2b00      	cmp	r3, #0
    32de:	bfd4      	ite	le
    32e0:	2300      	movle	r3, #0
    32e2:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    32e4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    32e8:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    32ec:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    32ee:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    32f2:	703b      	strb	r3, [r7, #0]
	return bps;
    32f4:	e699      	b.n	302a <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    32f6:	a90b      	add	r1, sp, #44	; 0x2c
    32f8:	a80c      	add	r0, sp, #48	; 0x30
    32fa:	9207      	str	r2, [sp, #28]
    32fc:	f016 f92b 	bl	19556 <_get_digit>
		if (*buf++ != '0') {
    3300:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    3302:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    3306:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    3308:	bf18      	it	ne
    330a:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    330e:	b912      	cbnz	r2, 3316 <z_cbvprintf_impl+0xaee>
    3310:	2f00      	cmp	r7, #0
    3312:	f340 80f0 	ble.w	34f6 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    3316:	222e      	movs	r2, #46	; 0x2e
    3318:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    331c:	e758      	b.n	31d0 <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
    331e:	4647      	mov	r7, r8
    3320:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3324:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    3328:	2a30      	cmp	r2, #48	; 0x30
    332a:	d0f8      	beq.n	331e <z_cbvprintf_impl+0xaf6>
    332c:	2a2e      	cmp	r2, #46	; 0x2e
    332e:	bf08      	it	eq
    3330:	4647      	moveq	r7, r8
    3332:	e7a7      	b.n	3284 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
    3334:	2301      	movs	r3, #1
    3336:	e7d5      	b.n	32e4 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
    3338:	4f70      	ldr	r7, [pc, #448]	; (34fc <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
    333a:	4681      	mov	r9, r0
			bps = "(nil)";
    333c:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    333e:	2005      	movs	r0, #5
    3340:	e5aa      	b.n	2e98 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    3342:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    3344:	bf48      	it	mi
    3346:	3001      	addmi	r0, #1
    3348:	e5ae      	b.n	2ea8 <z_cbvprintf_impl+0x680>
					OUTC(pad);
    334a:	4610      	mov	r0, r2
    334c:	9209      	str	r2, [sp, #36]	; 0x24
    334e:	9903      	ldr	r1, [sp, #12]
    3350:	47d0      	blx	sl
    3352:	2800      	cmp	r0, #0
    3354:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3356:	da05      	bge.n	3364 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
    3358:	b01f      	add	sp, #124	; 0x7c
    335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    335e:	2220      	movs	r2, #32
					pad = '0';
    3360:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    3364:	4659      	mov	r1, fp
    3366:	2900      	cmp	r1, #0
    3368:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    336c:	dced      	bgt.n	334a <z_cbvprintf_impl+0xb22>
    336e:	9b04      	ldr	r3, [sp, #16]
    3370:	f8cd b010 	str.w	fp, [sp, #16]
    3374:	442b      	add	r3, r5
    3376:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    3378:	f1b9 0f00 	cmp.w	r9, #0
    337c:	d005      	beq.n	338a <z_cbvprintf_impl+0xb62>
			OUTC(sign);
    337e:	9903      	ldr	r1, [sp, #12]
    3380:	4648      	mov	r0, r9
    3382:	47d0      	blx	sl
    3384:	2800      	cmp	r0, #0
    3386:	dbe7      	blt.n	3358 <z_cbvprintf_impl+0xb30>
    3388:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    338a:	9b08      	ldr	r3, [sp, #32]
    338c:	2b00      	cmp	r3, #0
    338e:	d075      	beq.n	347c <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
    3390:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    3394:	2b00      	cmp	r3, #0
    3396:	db28      	blt.n	33ea <z_cbvprintf_impl+0xbc2>
    3398:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
    339a:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    339e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    33a2:	2b09      	cmp	r3, #9
    33a4:	46d9      	mov	r9, fp
    33a6:	f10b 0b01 	add.w	fp, fp, #1
    33aa:	d93f      	bls.n	342c <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
    33ac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    33b0:	1bae      	subs	r6, r5, r6
    33b2:	0699      	lsls	r1, r3, #26
    33b4:	444e      	add	r6, r9
    33b6:	d407      	bmi.n	33c8 <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
    33b8:	4642      	mov	r2, r8
    33ba:	2a00      	cmp	r2, #0
    33bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    33c0:	dc39      	bgt.n	3436 <z_cbvprintf_impl+0xc0e>
    33c2:	9b07      	ldr	r3, [sp, #28]
    33c4:	4433      	add	r3, r6
    33c6:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    33c8:	f899 0000 	ldrb.w	r0, [r9]
    33cc:	282e      	cmp	r0, #46	; 0x2e
    33ce:	d10a      	bne.n	33e6 <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
    33d0:	9903      	ldr	r1, [sp, #12]
    33d2:	47d0      	blx	sl
						OUTC('0');
    33d4:	2800      	cmp	r0, #0
    33d6:	dbbf      	blt.n	3358 <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
    33d8:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    33dc:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    33e0:	dc2f      	bgt.n	3442 <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
    33e2:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    33e6:	464d      	mov	r5, r9
    33e8:	e035      	b.n	3456 <z_cbvprintf_impl+0xc2e>
    33ea:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    33ec:	f899 0000 	ldrb.w	r0, [r9]
    33f0:	2870      	cmp	r0, #112	; 0x70
    33f2:	46c8      	mov	r8, r9
    33f4:	f109 0901 	add.w	r9, r9, #1
    33f8:	d113      	bne.n	3422 <z_cbvprintf_impl+0xbfa>
    33fa:	1bae      	subs	r6, r5, r6
    33fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
    33fe:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    3400:	4435      	add	r5, r6
    3402:	1bab      	subs	r3, r5, r6
    3404:	2b00      	cmp	r3, #0
    3406:	dc31      	bgt.n	346c <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
    3408:	9903      	ldr	r1, [sp, #12]
    340a:	463b      	mov	r3, r7
    340c:	4642      	mov	r2, r8
    340e:	4650      	mov	r0, sl
    3410:	f016 f8fe 	bl	19610 <outs>
    3414:	2800      	cmp	r0, #0
    3416:	db9f      	blt.n	3358 <z_cbvprintf_impl+0xb30>
    3418:	4430      	add	r0, r6
    341a:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    341c:	4605      	mov	r5, r0
    341e:	4406      	add	r6, r0
    3420:	e062      	b.n	34e8 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
    3422:	9903      	ldr	r1, [sp, #12]
    3424:	47d0      	blx	sl
    3426:	2800      	cmp	r0, #0
    3428:	dae0      	bge.n	33ec <z_cbvprintf_impl+0xbc4>
    342a:	e795      	b.n	3358 <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
    342c:	9903      	ldr	r1, [sp, #12]
    342e:	47d0      	blx	sl
    3430:	2800      	cmp	r0, #0
    3432:	dab2      	bge.n	339a <z_cbvprintf_impl+0xb72>
    3434:	e790      	b.n	3358 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    3436:	9903      	ldr	r1, [sp, #12]
    3438:	2030      	movs	r0, #48	; 0x30
    343a:	47d0      	blx	sl
    343c:	2800      	cmp	r0, #0
    343e:	dabb      	bge.n	33b8 <z_cbvprintf_impl+0xb90>
    3440:	e78a      	b.n	3358 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    3442:	9903      	ldr	r1, [sp, #12]
    3444:	2030      	movs	r0, #48	; 0x30
    3446:	47d0      	blx	sl
    3448:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    344c:	e7c2      	b.n	33d4 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
    344e:	9903      	ldr	r1, [sp, #12]
    3450:	47d0      	blx	sl
    3452:	2800      	cmp	r0, #0
    3454:	db80      	blt.n	3358 <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp) != 0) {
    3456:	7828      	ldrb	r0, [r5, #0]
    3458:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    345c:	2b09      	cmp	r3, #9
    345e:	46a8      	mov	r8, r5
    3460:	f105 0501 	add.w	r5, r5, #1
    3464:	d9f3      	bls.n	344e <z_cbvprintf_impl+0xc26>
    3466:	eba6 0609 	sub.w	r6, r6, r9
    346a:	e7c7      	b.n	33fc <z_cbvprintf_impl+0xbd4>
				OUTC('0');
    346c:	9903      	ldr	r1, [sp, #12]
    346e:	2030      	movs	r0, #48	; 0x30
    3470:	47d0      	blx	sl
    3472:	2800      	cmp	r0, #0
    3474:	f6ff af70 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    3478:	3601      	adds	r6, #1
    347a:	e7c2      	b.n	3402 <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
    347c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    3480:	06da      	lsls	r2, r3, #27
    3482:	d401      	bmi.n	3488 <z_cbvprintf_impl+0xc60>
    3484:	071b      	lsls	r3, r3, #28
    3486:	d506      	bpl.n	3496 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
    3488:	9903      	ldr	r1, [sp, #12]
    348a:	2030      	movs	r0, #48	; 0x30
    348c:	47d0      	blx	sl
    348e:	2800      	cmp	r0, #0
    3490:	f6ff af62 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    3494:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    3496:	9b05      	ldr	r3, [sp, #20]
    3498:	b13b      	cbz	r3, 34aa <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
    349a:	9903      	ldr	r1, [sp, #12]
    349c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    34a0:	47d0      	blx	sl
    34a2:	2800      	cmp	r0, #0
    34a4:	f6ff af58 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    34a8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    34aa:	44a8      	add	r8, r5
    34ac:	e006      	b.n	34bc <z_cbvprintf_impl+0xc94>
				OUTC('0');
    34ae:	9903      	ldr	r1, [sp, #12]
    34b0:	2030      	movs	r0, #48	; 0x30
    34b2:	47d0      	blx	sl
    34b4:	2800      	cmp	r0, #0
    34b6:	f6ff af4f 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    34ba:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    34bc:	eba8 0305 	sub.w	r3, r8, r5
    34c0:	2b00      	cmp	r3, #0
    34c2:	dcf4      	bgt.n	34ae <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
    34c4:	9903      	ldr	r1, [sp, #12]
    34c6:	463b      	mov	r3, r7
    34c8:	4632      	mov	r2, r6
    34ca:	4650      	mov	r0, sl
    34cc:	f016 f8a0 	bl	19610 <outs>
    34d0:	2800      	cmp	r0, #0
    34d2:	f6ff af41 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    34d6:	4428      	add	r0, r5
    34d8:	e79f      	b.n	341a <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
    34da:	9903      	ldr	r1, [sp, #12]
    34dc:	2020      	movs	r0, #32
    34de:	47d0      	blx	sl
    34e0:	2800      	cmp	r0, #0
    34e2:	f6ff af39 	blt.w	3358 <z_cbvprintf_impl+0xb30>
    34e6:	3501      	adds	r5, #1
		while (width > 0) {
    34e8:	1b73      	subs	r3, r6, r5
    34ea:	2b00      	cmp	r3, #0
    34ec:	dcf5      	bgt.n	34da <z_cbvprintf_impl+0xcb2>
    34ee:	f7ff bbdf 	b.w	2cb0 <z_cbvprintf_impl+0x488>
			decexp = 0;
    34f2:	4616      	mov	r6, r2
    34f4:	e6c1      	b.n	327a <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
    34f6:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    34fa:	e6be      	b.n	327a <z_cbvprintf_impl+0xa52>
    34fc:	0001f747 	.word	0x0001f747

00003500 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    3500:	f012 bfc8 	b.w	16494 <SystemInit>

00003504 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3508:	4605      	mov	r5, r0
	__asm__ volatile(
    350a:	f04f 0320 	mov.w	r3, #32
    350e:	f3ef 8611 	mrs	r6, BASEPRI
    3512:	f383 8812 	msr	BASEPRI_MAX, r3
    3516:	f3bf 8f6f 	isb	sy
	return list->head;
    351a:	4b0e      	ldr	r3, [pc, #56]	; (3554 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    351c:	4f0e      	ldr	r7, [pc, #56]	; (3558 <pm_state_notify+0x54>)
    351e:	681c      	ldr	r4, [r3, #0]
    3520:	f8df 8038 	ldr.w	r8, [pc, #56]	; 355c <pm_state_notify+0x58>
    3524:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3528:	b92c      	cbnz	r4, 3536 <pm_state_notify+0x32>
	__asm__ volatile(
    352a:	f386 8811 	msr	BASEPRI, r6
    352e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    3536:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    353a:	2d00      	cmp	r5, #0
    353c:	bf18      	it	ne
    353e:	4613      	movne	r3, r2
		if (callback) {
    3540:	b12b      	cbz	r3, 354e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3542:	f898 2010 	ldrb.w	r2, [r8, #16]
    3546:	fb09 f202 	mul.w	r2, r9, r2
    354a:	5cb8      	ldrb	r0, [r7, r2]
    354c:	4798      	blx	r3
	return node->next;
    354e:	6824      	ldr	r4, [r4, #0]
    3550:	e7ea      	b.n	3528 <pm_state_notify+0x24>
    3552:	bf00      	nop
    3554:	200011fc 	.word	0x200011fc
    3558:	200011f0 	.word	0x200011f0
    355c:	200026a4 	.word	0x200026a4

00003560 <pm_system_resume>:

void pm_system_resume(void)
{
    3560:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    3562:	4b14      	ldr	r3, [pc, #80]	; (35b4 <pm_system_resume+0x54>)
    3564:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3566:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    356a:	f004 031f 	and.w	r3, r4, #31
    356e:	2201      	movs	r2, #1
    3570:	409a      	lsls	r2, r3
    3572:	4b11      	ldr	r3, [pc, #68]	; (35b8 <pm_system_resume+0x58>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3574:	0961      	lsrs	r1, r4, #5
    3576:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    357a:	43d0      	mvns	r0, r2
    357c:	e853 1f00 	ldrex	r1, [r3]
    3580:	ea01 0500 	and.w	r5, r1, r0
    3584:	e843 5600 	strex	r6, r5, [r3]
    3588:	2e00      	cmp	r6, #0
    358a:	d1f7      	bne.n	357c <pm_system_resume+0x1c>
    358c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3590:	420a      	tst	r2, r1
    3592:	d00e      	beq.n	35b2 <pm_system_resume+0x52>
		pm_state_exit_post_ops(z_cpus_pm_state[id].state, z_cpus_pm_state[id].substate_id);
    3594:	230c      	movs	r3, #12
    3596:	4e09      	ldr	r6, [pc, #36]	; (35bc <pm_system_resume+0x5c>)
    3598:	435c      	muls	r4, r3
    359a:	1935      	adds	r5, r6, r4
    359c:	5d30      	ldrb	r0, [r6, r4]
    359e:	7869      	ldrb	r1, [r5, #1]
    35a0:	f016 fb54 	bl	19c4c <pm_state_exit_post_ops>
		pm_state_notify(false);
    35a4:	2000      	movs	r0, #0
    35a6:	f7ff ffad 	bl	3504 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    35aa:	2300      	movs	r3, #0
    35ac:	5133      	str	r3, [r6, r4]
    35ae:	e9c5 3301 	strd	r3, r3, [r5, #4]
			0, 0};
	}
}
    35b2:	bd70      	pop	{r4, r5, r6, pc}
    35b4:	200026a4 	.word	0x200026a4
    35b8:	20001204 	.word	0x20001204
    35bc:	200011f0 	.word	0x200011f0

000035c0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    35c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    35c4:	4b33      	ldr	r3, [pc, #204]	; (3694 <pm_system_suspend+0xd4>)
{
    35c6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    35c8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    35ca:	f04f 0320 	mov.w	r3, #32
    35ce:	f3ef 8811 	mrs	r8, BASEPRI
    35d2:	f383 8812 	msr	BASEPRI_MAX, r3
    35d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    35da:	240c      	movs	r4, #12
    35dc:	4b2e      	ldr	r3, [pc, #184]	; (3698 <pm_system_suspend+0xd8>)
    35de:	4e2f      	ldr	r6, [pc, #188]	; (369c <pm_system_suspend+0xdc>)
    35e0:	436c      	muls	r4, r5
    35e2:	191a      	adds	r2, r3, r4
    35e4:	5d19      	ldrb	r1, [r3, r4]
    35e6:	2900      	cmp	r1, #0
    35e8:	d049      	beq.n	367e <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    35ea:	ca07      	ldmia	r2, {r0, r1, r2}
    35ec:	eb06 0c04 	add.w	ip, r6, r4
    35f0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    35f4:	2200      	movs	r2, #0
    35f6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    35f8:	f388 8811 	msr	BASEPRI, r8
    35fc:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3600:	230c      	movs	r3, #12
    3602:	436b      	muls	r3, r5
    3604:	18f2      	adds	r2, r6, r3
    3606:	5cf0      	ldrb	r0, [r6, r3]
    3608:	b3b8      	cbz	r0, 367a <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    360a:	1c7b      	adds	r3, r7, #1
    360c:	d010      	beq.n	3630 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    360e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3612:	4c23      	ldr	r4, [pc, #140]	; (36a0 <pm_system_suspend+0xe0>)
    3614:	4a23      	ldr	r2, [pc, #140]	; (36a4 <pm_system_suspend+0xe4>)
    3616:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    361a:	2100      	movs	r1, #0
    361c:	fbec 4100 	umlal	r4, r1, ip, r0
    3620:	2300      	movs	r3, #0
    3622:	4620      	mov	r0, r4
    3624:	f7fd f9ca 	bl	9bc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    3628:	2101      	movs	r1, #1
    362a:	1a38      	subs	r0, r7, r0
    362c:	f012 fed8 	bl	163e0 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3630:	f015 f83a 	bl	186a8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    3634:	2001      	movs	r0, #1
    3636:	f7ff ff65 	bl	3504 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    363a:	f3bf 8f5b 	dmb	ish
    363e:	4b1a      	ldr	r3, [pc, #104]	; (36a8 <pm_system_suspend+0xe8>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3640:	096a      	lsrs	r2, r5, #5
    3642:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    3646:	2401      	movs	r4, #1
    3648:	f005 021f 	and.w	r2, r5, #31
    364c:	fa04 f202 	lsl.w	r2, r4, r2
    3650:	e853 0f00 	ldrex	r0, [r3]
    3654:	4310      	orrs	r0, r2
    3656:	e843 0100 	strex	r1, r0, [r3]
    365a:	2900      	cmp	r1, #0
    365c:	d1f8      	bne.n	3650 <pm_system_suspend+0x90>
    365e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_cpus_pm_state[id].state, z_cpus_pm_state[id].substate_id);
    3662:	230c      	movs	r3, #12
    3664:	436b      	muls	r3, r5
    3666:	18f2      	adds	r2, r6, r3
    3668:	5cf0      	ldrb	r0, [r6, r3]
    366a:	7851      	ldrb	r1, [r2, #1]
    366c:	f016 fae2 	bl	19c34 <pm_state_set>
	if (atomic_add(&_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    3670:	f7ff ff76 	bl	3560 <pm_system_resume>
	k_sched_unlock();
    3674:	f015 f82c 	bl	186d0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    3678:	4620      	mov	r0, r4
}
    367a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    367e:	4601      	mov	r1, r0
    3680:	4628      	mov	r0, r5
    3682:	f000 f813 	bl	36ac <pm_policy_next_state>
		if (info != NULL) {
    3686:	2800      	cmp	r0, #0
    3688:	d0b6      	beq.n	35f8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    368a:	c807      	ldmia	r0, {r0, r1, r2}
    368c:	4434      	add	r4, r6
    368e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    3692:	e7b1      	b.n	35f8 <pm_system_suspend+0x38>
    3694:	200026a4 	.word	0x200026a4
    3698:	200011e4 	.word	0x200011e4
    369c:	200011f0 	.word	0x200011f0
    36a0:	000f423f 	.word	0x000f423f
    36a4:	000f4240 	.word	0x000f4240
    36a8:	20001204 	.word	0x20001204

000036ac <pm_policy_next_state>:
	next_event_cyc = new_next_event_cyc;
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    36ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cyc = k_ticks_to_cyc_ceil32(ticks);
	}

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);

	if (next_event_cyc >= 0) {
    36b0:	4c38      	ldr	r4, [pc, #224]	; (3794 <pm_policy_next_state+0xe8>)
{
    36b2:	b085      	sub	sp, #20
		cyc = k_ticks_to_cyc_ceil32(ticks);
    36b4:	1c4b      	adds	r3, r1, #1
{
    36b6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    36b8:	a903      	add	r1, sp, #12
		cyc = k_ticks_to_cyc_ceil32(ticks);
    36ba:	bf0c      	ite	eq
    36bc:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
    36c0:	f04f 0800 	movne.w	r8, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    36c4:	f000 f86e 	bl	37a4 <pm_state_cpu_get_all>
	if (next_event_cyc >= 0) {
    36c8:	6863      	ldr	r3, [r4, #4]
    36ca:	2b00      	cmp	r3, #0
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    36cc:	4605      	mov	r5, r0
	if (next_event_cyc >= 0) {
    36ce:	db12      	blt.n	36f6 <pm_policy_next_state+0x4a>
    36d0:	f019 fa03 	bl	1cada <sys_clock_cycle_get_32>
		uint32_t cyc_curr = k_cycle_get_32();
		int64_t cyc_evt = next_event_cyc - cyc_curr;
    36d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    36d8:	1a1c      	subs	r4, r3, r0
    36da:	f162 0600 	sbc.w	r6, r2, #0

		/* event happening after cycle counter max value, pad */
		if (next_event_cyc <= cyc_curr) {
    36de:	4298      	cmp	r0, r3
    36e0:	f04f 0300 	mov.w	r3, #0
    36e4:	4193      	sbcs	r3, r2
    36e6:	db02      	blt.n	36ee <pm_policy_next_state+0x42>
			cyc_evt += UINT32_MAX;
    36e8:	3c01      	subs	r4, #1
    36ea:	f146 0600 	adc.w	r6, r6, #0
		}

		if (cyc_evt > 0) {
    36ee:	2c01      	cmp	r4, #1
    36f0:	f176 0300 	sbcs.w	r3, r6, #0
    36f4:	da02      	bge.n	36fc <pm_policy_next_state+0x50>
			 * otherwise, who comes earlier wins
			 */
			if (cyc < 0) {
				cyc = cyc_evt;
			} else {
				cyc = MIN(cyc, cyc_evt);
    36f6:	463c      	mov	r4, r7
    36f8:	4646      	mov	r6, r8
    36fa:	e009      	b.n	3710 <pm_policy_next_state+0x64>
			if (cyc < 0) {
    36fc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    3700:	bf08      	it	eq
    3702:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    3706:	d003      	beq.n	3710 <pm_policy_next_state+0x64>
				cyc = MIN(cyc, cyc_evt);
    3708:	42a7      	cmp	r7, r4
    370a:	eb78 0306 	sbcs.w	r3, r8, r6
    370e:	dbf2      	blt.n	36f6 <pm_policy_next_state+0x4a>

		min_residency_cyc = k_us_to_cyc_ceil32(state->min_residency_us);
		exit_latency_cyc = k_us_to_cyc_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_cyc >= 0) &&
    3710:	4b21      	ldr	r3, [pc, #132]	; (3798 <pm_policy_next_state+0xec>)
    3712:	9f03      	ldr	r7, [sp, #12]
    3714:	681b      	ldr	r3, [r3, #0]
    3716:	9300      	str	r3, [sp, #0]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3718:	1e6b      	subs	r3, r5, #1
    371a:	b21b      	sxth	r3, r3
    371c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3720:	f8df 9078 	ldr.w	r9, [pc, #120]	; 379c <pm_policy_next_state+0xf0>
    3724:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    3728:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    372c:	f04f 0b00 	mov.w	fp, #0
    3730:	b925      	cbnz	r5, 373c <pm_policy_next_state+0x90>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
			return state;
		}
	}

	return NULL;
    3732:	46aa      	mov	sl, r5
}
    3734:	4650      	mov	r0, sl
    3736:	b005      	add	sp, #20
    3738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    373c:	6878      	ldr	r0, [r7, #4]
    373e:	4a18      	ldr	r2, [pc, #96]	; (37a0 <pm_policy_next_state+0xf4>)
    3740:	46cc      	mov	ip, r9
    3742:	4659      	mov	r1, fp
    3744:	fbe0 c108 	umlal	ip, r1, r0, r8
    3748:	2300      	movs	r3, #0
    374a:	4660      	mov	r0, ip
    374c:	f7fd f936 	bl	9bc <__aeabi_uldivmod>
    3750:	9001      	str	r0, [sp, #4]
    3752:	68b8      	ldr	r0, [r7, #8]
    3754:	4a12      	ldr	r2, [pc, #72]	; (37a0 <pm_policy_next_state+0xf4>)
    3756:	46cc      	mov	ip, r9
    3758:	4659      	mov	r1, fp
    375a:	fbe0 c108 	umlal	ip, r1, r0, r8
    375e:	2300      	movs	r3, #0
    3760:	4660      	mov	r0, ip
    3762:	f7fd f92b 	bl	9bc <__aeabi_uldivmod>
		if ((max_latency_cyc >= 0) &&
    3766:	9b00      	ldr	r3, [sp, #0]
    3768:	2b00      	cmp	r3, #0
		const struct pm_state_info *state = &cpu_states[i];
    376a:	46ba      	mov	sl, r7
		if ((max_latency_cyc >= 0) &&
    376c:	db01      	blt.n	3772 <pm_policy_next_state+0xc6>
    376e:	4283      	cmp	r3, r0
    3770:	d90b      	bls.n	378a <pm_policy_next_state+0xde>
		if ((cyc < 0) ||
    3772:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    3776:	bf08      	it	eq
    3778:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    377c:	d0da      	beq.n	3734 <pm_policy_next_state+0x88>
		    (cyc >= (min_residency_cyc + exit_latency_cyc))) {
    377e:	9b01      	ldr	r3, [sp, #4]
    3780:	4418      	add	r0, r3
		if ((cyc < 0) ||
    3782:	4284      	cmp	r4, r0
    3784:	f176 0300 	sbcs.w	r3, r6, #0
    3788:	dad4      	bge.n	3734 <pm_policy_next_state+0x88>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    378a:	3d01      	subs	r5, #1
    378c:	b2ad      	uxth	r5, r5
    378e:	3f0c      	subs	r7, #12
    3790:	e7ce      	b.n	3730 <pm_policy_next_state+0x84>
    3792:	bf00      	nop
    3794:	20000000 	.word	0x20000000
    3798:	2000019c 	.word	0x2000019c
    379c:	000f423f 	.word	0x000f423f
    37a0:	000f4240 	.word	0x000f4240

000037a4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_STATUS_OKAY_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    37a4:	b908      	cbnz	r0, 37aa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    37a6:	4b02      	ldr	r3, [pc, #8]	; (37b0 <pm_state_cpu_get_all+0xc>)
    37a8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    37aa:	2000      	movs	r0, #0
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop
    37b0:	0001de0c 	.word	0x0001de0c

000037b4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    37b4:	4904      	ldr	r1, [pc, #16]	; (37c8 <sub_bytes+0x14>)
    37b6:	1e43      	subs	r3, r0, #1
    37b8:	300f      	adds	r0, #15
    37ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    37be:	5c8a      	ldrb	r2, [r1, r2]
    37c0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    37c2:	4283      	cmp	r3, r0
    37c4:	d1f9      	bne.n	37ba <sub_bytes+0x6>
	}
}
    37c6:	4770      	bx	lr
    37c8:	0001f74b 	.word	0x0001f74b

000037cc <tc_aes128_set_encrypt_key>:
{
    37cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    37ce:	4e26      	ldr	r6, [pc, #152]	; (3868 <tc_aes128_set_encrypt_key+0x9c>)
{
    37d0:	4607      	mov	r7, r0
    37d2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    37d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    37d6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    37d8:	ad01      	add	r5, sp, #4
    37da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    37dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    37de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    37e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    37e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    37e8:	4638      	mov	r0, r7
    37ea:	2f00      	cmp	r7, #0
    37ec:	d038      	beq.n	3860 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    37ee:	2c00      	cmp	r4, #0
    37f0:	d038      	beq.n	3864 <tc_aes128_set_encrypt_key+0x98>
    37f2:	1f38      	subs	r0, r7, #4
    37f4:	4621      	mov	r1, r4
    37f6:	4602      	mov	r2, r0
    37f8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    37fa:	784b      	ldrb	r3, [r1, #1]
    37fc:	780d      	ldrb	r5, [r1, #0]
    37fe:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3800:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3804:	78cd      	ldrb	r5, [r1, #3]
    3806:	432b      	orrs	r3, r5
    3808:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    380a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    380c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3810:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3812:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    3816:	d1f0      	bne.n	37fa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3818:	4c14      	ldr	r4, [pc, #80]	; (386c <tc_aes128_set_encrypt_key+0xa0>)
    381a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    381c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    381e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    3820:	d116      	bne.n	3850 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3822:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3826:	5ca5      	ldrb	r5, [r4, r2]
    3828:	0e1a      	lsrs	r2, r3, #24
    382a:	5ca2      	ldrb	r2, [r4, r2]
    382c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3830:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3834:	b2db      	uxtb	r3, r3
    3836:	5d65      	ldrb	r5, [r4, r5]
    3838:	5ce3      	ldrb	r3, [r4, r3]
    383a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    383e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3842:	f021 0303 	bic.w	r3, r1, #3
    3846:	3330      	adds	r3, #48	; 0x30
    3848:	446b      	add	r3, sp
    384a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    384e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    3850:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3854:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    3856:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    3858:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    385a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    385c:	d1de      	bne.n	381c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    385e:	2001      	movs	r0, #1
}
    3860:	b00d      	add	sp, #52	; 0x34
    3862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3864:	4620      	mov	r0, r4
    3866:	e7fb      	b.n	3860 <tc_aes128_set_encrypt_key+0x94>
    3868:	0001dd14 	.word	0x0001dd14
    386c:	0001f74b 	.word	0x0001f74b

00003870 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3870:	4901      	ldr	r1, [pc, #4]	; (3878 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3872:	2210      	movs	r2, #16
	str	r2, [r1]
    3874:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3876:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3878:	e000ed10 	.word	0xe000ed10

0000387c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    387c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    387e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3880:	f380 8811 	msr	BASEPRI, r0
	isb
    3884:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3888:	f3bf 8f4f 	dsb	sy
    388c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    388e:	b662      	cpsie	i
	isb
    3890:	f3bf 8f6f 	isb	sy

	bx	lr
    3894:	4770      	bx	lr
    3896:	bf00      	nop

00003898 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3898:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    389a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    389c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    38a0:	f3bf 8f4f 	dsb	sy
    38a4:	bf20      	wfe

	msr	BASEPRI, r0
    38a6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    38aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    38ac:	4770      	bx	lr
    38ae:	bf00      	nop

000038b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    38b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    38b2:	2800      	cmp	r0, #0
    38b4:	db07      	blt.n	38c6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38b6:	4a04      	ldr	r2, [pc, #16]	; (38c8 <arch_irq_enable+0x18>)
    38b8:	0941      	lsrs	r1, r0, #5
    38ba:	2301      	movs	r3, #1
    38bc:	f000 001f 	and.w	r0, r0, #31
    38c0:	4083      	lsls	r3, r0
    38c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    38c6:	4770      	bx	lr
    38c8:	e000e100 	.word	0xe000e100

000038cc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    38cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    38ce:	2800      	cmp	r0, #0
    38d0:	db0c      	blt.n	38ec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38d2:	0943      	lsrs	r3, r0, #5
    38d4:	4906      	ldr	r1, [pc, #24]	; (38f0 <arch_irq_disable+0x24>)
    38d6:	f000 001f 	and.w	r0, r0, #31
    38da:	3320      	adds	r3, #32
    38dc:	2201      	movs	r2, #1
    38de:	4082      	lsls	r2, r0
    38e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    38e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38e8:	f3bf 8f6f 	isb	sy
}
    38ec:	4770      	bx	lr
    38ee:	bf00      	nop
    38f0:	e000e100 	.word	0xe000e100

000038f4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    38f4:	4b05      	ldr	r3, [pc, #20]	; (390c <arch_irq_is_enabled+0x18>)
    38f6:	0942      	lsrs	r2, r0, #5
    38f8:	f000 001f 	and.w	r0, r0, #31
    38fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3900:	2301      	movs	r3, #1
    3902:	fa03 f000 	lsl.w	r0, r3, r0
}
    3906:	4010      	ands	r0, r2
    3908:	4770      	bx	lr
    390a:	bf00      	nop
    390c:	e000e100 	.word	0xe000e100

00003910 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3910:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3912:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3914:	bfa8      	it	ge
    3916:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    391a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    391e:	bfb8      	it	lt
    3920:	4b06      	ldrlt	r3, [pc, #24]	; (393c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3922:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3926:	bfac      	ite	ge
    3928:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    392c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3930:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3932:	bfb4      	ite	lt
    3934:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3936:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    393a:	4770      	bx	lr
    393c:	e000ed14 	.word	0xe000ed14

00003940 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3940:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3942:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3944:	4b04      	ldr	r3, [pc, #16]	; (3958 <_arch_isr_direct_pm+0x18>)
    3946:	695a      	ldr	r2, [r3, #20]
    3948:	b11a      	cbz	r2, 3952 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    394a:	2200      	movs	r2, #0
    394c:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    394e:	f019 facb 	bl	1cee8 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3952:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3954:	bd08      	pop	{r3, pc}
    3956:	bf00      	nop
    3958:	200026a4 	.word	0x200026a4

0000395c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    395c:	bf30      	wfi
    b z_SysNmiOnReset
    395e:	f7ff bffd 	b.w	395c <z_SysNmiOnReset>
    3962:	bf00      	nop

00003964 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3964:	4a0f      	ldr	r2, [pc, #60]	; (39a4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3966:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3968:	4b0f      	ldr	r3, [pc, #60]	; (39a8 <z_arm_prep_c+0x44>)
    396a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    396e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3970:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3974:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    397c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3984:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3988:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    398c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3990:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3994:	f013 ff6e 	bl	17874 <z_bss_zero>
	z_data_copy();
    3998:	f014 ffd2 	bl	18940 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    399c:	f000 fa20 	bl	3de0 <z_arm_interrupt_init>
	z_cstart();
    39a0:	f013 ffba 	bl	17918 <z_cstart>
    39a4:	00000000 	.word	0x00000000
    39a8:	e000ed00 	.word	0xe000ed00

000039ac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    39ac:	4a09      	ldr	r2, [pc, #36]	; (39d4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    39ae:	490a      	ldr	r1, [pc, #40]	; (39d8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    39b0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    39b2:	6809      	ldr	r1, [r1, #0]
    39b4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    39b6:	4909      	ldr	r1, [pc, #36]	; (39dc <arch_swap+0x30>)
	_current->arch.basepri = key;
    39b8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    39ba:	684b      	ldr	r3, [r1, #4]
    39bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    39c0:	604b      	str	r3, [r1, #4]
    39c2:	2300      	movs	r3, #0
    39c4:	f383 8811 	msr	BASEPRI, r3
    39c8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    39cc:	6893      	ldr	r3, [r2, #8]
}
    39ce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    39d0:	4770      	bx	lr
    39d2:	bf00      	nop
    39d4:	200026a4 	.word	0x200026a4
    39d8:	0001f430 	.word	0x0001f430
    39dc:	e000ed00 	.word	0xe000ed00

000039e0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    39e0:	4912      	ldr	r1, [pc, #72]	; (3a2c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    39e2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    39e4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    39e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    39ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    39ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    39f2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    39f4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    39f8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    39fc:	4f0c      	ldr	r7, [pc, #48]	; (3a30 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    39fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3a02:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3a04:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3a06:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3a08:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3a0a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3a0c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3a0e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3a12:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3a14:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3a16:	f000 fa29 	bl	3e6c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3a1a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3a1e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3a22:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3a26:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3a2a:	4770      	bx	lr
    ldr r1, =_kernel
    3a2c:	200026a4 	.word	0x200026a4
    ldr v4, =_SCS_ICSR
    3a30:	e000ed04 	.word	0xe000ed04

00003a34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3a34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3a38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3a3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3a3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3a42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3a44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3a48:	2902      	cmp	r1, #2
    beq _oops
    3a4a:	d0ff      	beq.n	3a4c <_oops>

00003a4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3a4c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3a4e:	f016 f89f 	bl	19b90 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3a52:	bd01      	pop	{r0, pc}

00003a54 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3a54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3a58:	9b00      	ldr	r3, [sp, #0]
    3a5a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3a5e:	490a      	ldr	r1, [pc, #40]	; (3a88 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3a60:	9b01      	ldr	r3, [sp, #4]
    3a62:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3a66:	9b02      	ldr	r3, [sp, #8]
    3a68:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3a6c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3a74:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3a78:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3a7c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3a7e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3a80:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3a82:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop
    3a88:	00018f6d 	.word	0x00018f6d

00003a8c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3a8c:	4a09      	ldr	r2, [pc, #36]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
{
    3a8e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3a90:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3a92:	b170      	cbz	r0, 3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3a94:	f113 0f16 	cmn.w	r3, #22
    3a98:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3a9a:	d005      	beq.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a9c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3aa0:	429a      	cmp	r2, r3
    3aa2:	d805      	bhi.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3aa4:	4283      	cmp	r3, r0
    3aa6:	d203      	bcs.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
		return 0;
    3aa8:	4281      	cmp	r1, r0
    3aaa:	bf28      	it	cs
    3aac:	2000      	movcs	r0, #0
    3aae:	4770      	bx	lr
    3ab0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3ab2:	4770      	bx	lr
    3ab4:	200026a4 	.word	0x200026a4

00003ab8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3ab8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3aba:	4b09      	ldr	r3, [pc, #36]	; (3ae0 <arch_switch_to_main_thread+0x28>)
{
    3abc:	460d      	mov	r5, r1
    3abe:	4614      	mov	r4, r2
	_current = main_thread;
    3ac0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3ac2:	f000 f9d3 	bl	3e6c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3ac6:	4620      	mov	r0, r4
    3ac8:	f385 8809 	msr	PSP, r5
    3acc:	2100      	movs	r1, #0
    3ace:	b663      	cpsie	if
    3ad0:	f381 8811 	msr	BASEPRI, r1
    3ad4:	f3bf 8f6f 	isb	sy
    3ad8:	2200      	movs	r2, #0
    3ada:	2300      	movs	r3, #0
    3adc:	f015 fa46 	bl	18f6c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3ae0:	200026a4 	.word	0x200026a4

00003ae4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3ae4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3ae6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3ae8:	4a0b      	ldr	r2, [pc, #44]	; (3b18 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3aea:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3aec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3aee:	bf1e      	ittt	ne
	movne	r1, #0
    3af0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3af2:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3af4:	f019 f9f8 	blne	1cee8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3af8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3afa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3afe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3b02:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3b06:	4905      	ldr	r1, [pc, #20]	; (3b1c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3b08:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3b0a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3b0c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3b0e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3b12:	4903      	ldr	r1, [pc, #12]	; (3b20 <_isr_wrapper+0x3c>)
	bx r1
    3b14:	4708      	bx	r1
    3b16:	0000      	.short	0x0000
	ldr r2, =_kernel
    3b18:	200026a4 	.word	0x200026a4
	ldr r1, =_sw_isr_table
    3b1c:	0001da60 	.word	0x0001da60
	ldr r1, =z_arm_int_exit
    3b20:	00003b25 	.word	0x00003b25

00003b24 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3b24:	4b04      	ldr	r3, [pc, #16]	; (3b38 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3b26:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3b28:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3b2a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3b2c:	d003      	beq.n	3b36 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3b2e:	4903      	ldr	r1, [pc, #12]	; (3b3c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3b34:	600a      	str	r2, [r1, #0]

00003b36 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3b36:	4770      	bx	lr
	ldr r3, =_kernel
    3b38:	200026a4 	.word	0x200026a4
	ldr r1, =_SCS_ICSR
    3b3c:	e000ed04 	.word	0xe000ed04

00003b40 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3b40:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b42:	4b26      	ldr	r3, [pc, #152]	; (3bdc <mem_manage_fault+0x9c>)
{
    3b44:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3b48:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    3b4e:	bf14      	ite	ne
    3b50:	2411      	movne	r4, #17
    3b52:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3b54:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3b5a:	bf18      	it	ne
    3b5c:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3b5e:	0792      	lsls	r2, r2, #30
{
    3b60:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3b62:	d50a      	bpl.n	3b7a <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3b64:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b68:	0614      	lsls	r4, r2, #24
    3b6a:	d534      	bpl.n	3bd6 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    3b6c:	b119      	cbz	r1, 3b76 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3b74:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3b76:	2413      	movs	r4, #19
    3b78:	e001      	b.n	3b7e <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    3b7a:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3b7e:	4b17      	ldr	r3, [pc, #92]	; (3bdc <mem_manage_fault+0x9c>)
    3b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3b82:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    3b88:	bf18      	it	ne
    3b8a:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3b8c:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    3b92:	bf18      	it	ne
    3b94:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3b96:	06d2      	lsls	r2, r2, #27
    3b98:	d402      	bmi.n	3ba0 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3b9c:	079b      	lsls	r3, r3, #30
    3b9e:	d50a      	bpl.n	3bb6 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3ba0:	4b0e      	ldr	r3, [pc, #56]	; (3bdc <mem_manage_fault+0x9c>)
    3ba2:	685b      	ldr	r3, [r3, #4]
    3ba4:	0519      	lsls	r1, r3, #20
    3ba6:	d506      	bpl.n	3bb6 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3ba8:	4631      	mov	r1, r6
    3baa:	f7ff ff6f 	bl	3a8c <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    3bae:	b110      	cbz	r0, 3bb6 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3bb0:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    3bb4:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3bb6:	4b09      	ldr	r3, [pc, #36]	; (3bdc <mem_manage_fault+0x9c>)
    3bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bba:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3bbc:	bf42      	ittt	mi
    3bbe:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3bc0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3bc4:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bc8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3bcc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3bce:	2300      	movs	r3, #0
    3bd0:	702b      	strb	r3, [r5, #0]

	return reason;
}
    3bd2:	4620      	mov	r0, r4
    3bd4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    3bd6:	f06f 0015 	mvn.w	r0, #21
    3bda:	e7cc      	b.n	3b76 <mem_manage_fault+0x36>
    3bdc:	e000ed00 	.word	0xe000ed00

00003be0 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3be0:	4b13      	ldr	r3, [pc, #76]	; (3c30 <usage_fault.constprop.0+0x50>)
    3be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3be4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3bea:	bf14      	ite	ne
    3bec:	201e      	movne	r0, #30
    3bee:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3bf0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3bf6:	bf18      	it	ne
    3bf8:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3bfa:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3c00:	bf18      	it	ne
    3c02:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3c04:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3c0a:	bf18      	it	ne
    3c0c:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3c0e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3c14:	bf18      	it	ne
    3c16:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3c18:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c1e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3c22:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    3c26:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    3c28:	bf18      	it	ne
    3c2a:	2024      	movne	r0, #36	; 0x24
    3c2c:	4770      	bx	lr
    3c2e:	bf00      	nop
    3c30:	e000ed00 	.word	0xe000ed00

00003c34 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c34:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c36:	4b19      	ldr	r3, [pc, #100]	; (3c9c <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3c38:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3c3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3c3c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    3c3e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    3c42:	bf14      	ite	ne
    3c44:	2017      	movne	r0, #23
    3c46:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3c48:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3c4c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3c4e:	bf18      	it	ne
    3c50:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3c52:	05a4      	lsls	r4, r4, #22
    3c54:	d509      	bpl.n	3c6a <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    3c56:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3c58:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3c5a:	0400      	lsls	r0, r0, #16
    3c5c:	d504      	bpl.n	3c68 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    3c5e:	b11a      	cbz	r2, 3c68 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3c66:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3c68:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3c6a:	4b0c      	ldr	r3, [pc, #48]	; (3c9c <bus_fault.constprop.0+0x68>)
    3c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3c6e:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3c74:	bf18      	it	ne
    3c76:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3c78:	05d2      	lsls	r2, r2, #23
    3c7a:	d40c      	bmi.n	3c96 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3c82:	bf18      	it	ne
    3c84:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3c86:	4a05      	ldr	r2, [pc, #20]	; (3c9c <bus_fault.constprop.0+0x68>)
    3c88:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c8a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3c8e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3c90:	2300      	movs	r3, #0
    3c92:	700b      	strb	r3, [r1, #0]
}
    3c94:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3c96:	201b      	movs	r0, #27
    3c98:	e7f5      	b.n	3c86 <bus_fault.constprop.0+0x52>
    3c9a:	bf00      	nop
    3c9c:	e000ed00 	.word	0xe000ed00

00003ca0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3ca0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3ca2:	4b45      	ldr	r3, [pc, #276]	; (3db8 <z_arm_fault+0x118>)
    3ca4:	685b      	ldr	r3, [r3, #4]
{
    3ca6:	b08a      	sub	sp, #40	; 0x28
    3ca8:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3cae:	2600      	movs	r6, #0
    3cb0:	f386 8811 	msr	BASEPRI, r6
    3cb4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3cb8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3cbc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3cc0:	d111      	bne.n	3ce6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3cc2:	f002 000c 	and.w	r0, r2, #12
    3cc6:	2808      	cmp	r0, #8
    3cc8:	d00d      	beq.n	3ce6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3cca:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3ccc:	bf4c      	ite	mi
    3cce:	460d      	movmi	r5, r1
			*nested_exc = true;
    3cd0:	2601      	movpl	r6, #1
	*recoverable = false;
    3cd2:	2200      	movs	r2, #0
	switch (fault) {
    3cd4:	3b03      	subs	r3, #3
	*recoverable = false;
    3cd6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3cda:	2b03      	cmp	r3, #3
    3cdc:	d805      	bhi.n	3cea <z_arm_fault+0x4a>
    3cde:	e8df f003 	tbb	[pc, r3]
    3ce2:	5d1e      	.short	0x5d1e
    3ce4:	5a61      	.short	0x5a61
		return NULL;
    3ce6:	4635      	mov	r5, r6
    3ce8:	e7f3      	b.n	3cd2 <z_arm_fault+0x32>
    3cea:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3cf0:	b99b      	cbnz	r3, 3d1a <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3cf2:	2220      	movs	r2, #32
    3cf4:	4629      	mov	r1, r5
    3cf6:	a802      	add	r0, sp, #8
    3cf8:	f015 ff7c 	bl	19bf4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cfe:	2e00      	cmp	r6, #0
    3d00:	d054      	beq.n	3dac <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3d06:	b922      	cbnz	r2, 3d12 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3d08:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3d0c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3d10:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    3d12:	a902      	add	r1, sp, #8
    3d14:	4620      	mov	r0, r4
    3d16:	f015 ff39 	bl	19b8c <z_arm_fatal_error>
}
    3d1a:	b00a      	add	sp, #40	; 0x28
    3d1c:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3d1e:	4b26      	ldr	r3, [pc, #152]	; (3db8 <z_arm_fault+0x118>)
    3d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d22:	0791      	lsls	r1, r2, #30
    3d24:	d4e1      	bmi.n	3cea <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d28:	2a00      	cmp	r2, #0
    3d2a:	dbde      	blt.n	3cea <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d2e:	0052      	lsls	r2, r2, #1
    3d30:	d5db      	bpl.n	3cea <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3d32:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3d34:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    3d3a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d40:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3d44:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3d46:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    3d4e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d54:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3d58:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3d5c:	4291      	cmp	r1, r2
    3d5e:	d00a      	beq.n	3d76 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d62:	b2d2      	uxtb	r2, r2
    3d64:	b14a      	cbz	r2, 3d7a <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    3d66:	f10d 0207 	add.w	r2, sp, #7
    3d6a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3d6c:	4628      	mov	r0, r5
    3d6e:	f7ff fee7 	bl	3b40 <mem_manage_fault>
		reason = usage_fault(esf);
    3d72:	4604      	mov	r4, r0
		break;
    3d74:	e7ba      	b.n	3cec <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    3d76:	682c      	ldr	r4, [r5, #0]
    3d78:	e7b8      	b.n	3cec <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    3d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d7c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    3d80:	d005      	beq.n	3d8e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    3d82:	f10d 0107 	add.w	r1, sp, #7
    3d86:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3d88:	f7ff ff54 	bl	3c34 <bus_fault.constprop.0>
    3d8c:	e7f1      	b.n	3d72 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3d94:	d3a9      	bcc.n	3cea <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    3d96:	f7ff ff23 	bl	3be0 <usage_fault.constprop.0>
    3d9a:	e7ea      	b.n	3d72 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    3d9c:	f10d 0207 	add.w	r2, sp, #7
    3da0:	2100      	movs	r1, #0
    3da2:	e7e3      	b.n	3d6c <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    3da4:	f10d 0107 	add.w	r1, sp, #7
    3da8:	2000      	movs	r0, #0
    3daa:	e7ed      	b.n	3d88 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3dac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3db0:	f023 0301 	bic.w	r3, r3, #1
    3db4:	e7ac      	b.n	3d10 <z_arm_fault+0x70>
    3db6:	bf00      	nop
    3db8:	e000ed00 	.word	0xe000ed00

00003dbc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3dbc:	4a02      	ldr	r2, [pc, #8]	; (3dc8 <z_arm_fault_init+0xc>)
    3dbe:	6953      	ldr	r3, [r2, #20]
    3dc0:	f043 0310 	orr.w	r3, r3, #16
    3dc4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3dc6:	4770      	bx	lr
    3dc8:	e000ed00 	.word	0xe000ed00

00003dcc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3dcc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3dd0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3dd4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3dd6:	4672      	mov	r2, lr
	bl z_arm_fault
    3dd8:	f7ff ff62 	bl	3ca0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3ddc:	bd01      	pop	{r0, pc}
    3dde:	bf00      	nop

00003de0 <z_arm_interrupt_init>:
    3de0:	4804      	ldr	r0, [pc, #16]	; (3df4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3de2:	2300      	movs	r3, #0
    3de4:	2120      	movs	r1, #32
    3de6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3de8:	3301      	adds	r3, #1
    3dea:	2b27      	cmp	r3, #39	; 0x27
    3dec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3df0:	d1f9      	bne.n	3de6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3df2:	4770      	bx	lr
    3df4:	e000e100 	.word	0xe000e100

00003df8 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3df8:	f7ff fb82 	bl	3500 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3dfc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3dfe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3e02:	4808      	ldr	r0, [pc, #32]	; (3e24 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3e04:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    3e08:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3e0a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3e0e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3e12:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3e14:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3e16:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3e1a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3e1e:	f7ff fda1 	bl	3964 <z_arm_prep_c>
    3e22:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3e24:	20003b40 	.word	0x20003b40

00003e28 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3e28:	4b08      	ldr	r3, [pc, #32]	; (3e4c <z_impl_k_thread_abort+0x24>)
    3e2a:	689b      	ldr	r3, [r3, #8]
    3e2c:	4283      	cmp	r3, r0
    3e2e:	d10b      	bne.n	3e48 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e30:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3e34:	b143      	cbz	r3, 3e48 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e36:	4b06      	ldr	r3, [pc, #24]	; (3e50 <z_impl_k_thread_abort+0x28>)
    3e38:	685a      	ldr	r2, [r3, #4]
    3e3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3e3e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3e46:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3e48:	f014 bd08 	b.w	1885c <z_thread_abort>
    3e4c:	200026a4 	.word	0x200026a4
    3e50:	e000ed00 	.word	0xe000ed00

00003e54 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3e54:	4b02      	ldr	r3, [pc, #8]	; (3e60 <z_arm_configure_static_mpu_regions+0xc>)
    3e56:	4a03      	ldr	r2, [pc, #12]	; (3e64 <z_arm_configure_static_mpu_regions+0x10>)
    3e58:	4803      	ldr	r0, [pc, #12]	; (3e68 <z_arm_configure_static_mpu_regions+0x14>)
    3e5a:	2101      	movs	r1, #1
    3e5c:	f000 b870 	b.w	3f40 <arm_core_mpu_configure_static_mpu_regions>
    3e60:	20010000 	.word	0x20010000
    3e64:	20000000 	.word	0x20000000
    3e68:	0001de0c 	.word	0x0001de0c

00003e6c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3e6c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3e6e:	4b05      	ldr	r3, [pc, #20]	; (3e84 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3e70:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    3e72:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3e74:	4a04      	ldr	r2, [pc, #16]	; (3e88 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3e76:	2140      	movs	r1, #64	; 0x40
    3e78:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3e7c:	4618      	mov	r0, r3
    3e7e:	2101      	movs	r1, #1
    3e80:	f000 b868 	b.w	3f54 <arm_core_mpu_configure_dynamic_mpu_regions>
    3e84:	20001208 	.word	0x20001208
    3e88:	150b0000 	.word	0x150b0000

00003e8c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3e8e:	4e20      	ldr	r6, [pc, #128]	; (3f10 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3e90:	2500      	movs	r5, #0
    3e92:	428d      	cmp	r5, r1
    3e94:	da39      	bge.n	3f0a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    3e96:	6844      	ldr	r4, [r0, #4]
    3e98:	b374      	cbz	r4, 3ef8 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3e9a:	b153      	cbz	r3, 3eb2 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3e9c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3ea0:	ea14 0f0c 	tst.w	r4, ip
    3ea4:	d12f      	bne.n	3f06 <mpu_configure_regions+0x7a>
		&&
    3ea6:	2c1f      	cmp	r4, #31
    3ea8:	d92d      	bls.n	3f06 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    3eaa:	6807      	ldr	r7, [r0, #0]
		&&
    3eac:	ea1c 0f07 	tst.w	ip, r7
    3eb0:	d129      	bne.n	3f06 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3eb2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3eb4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3eb6:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3eba:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3ebe:	d91e      	bls.n	3efe <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    3ec0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3ec4:	d81d      	bhi.n	3f02 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3ec6:	3c01      	subs	r4, #1
    3ec8:	fab4 f484 	clz	r4, r4
    3ecc:	f1c4 041f 	rsb	r4, r4, #31
    3ed0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3ed2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3ed6:	ea4c 0c04 	orr.w	ip, ip, r4
    3eda:	d814      	bhi.n	3f06 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3edc:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3ee0:	4314      	orrs	r4, r2
    3ee2:	f044 0410 	orr.w	r4, r4, #16
    3ee6:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3eea:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3eee:	f04c 0401 	orr.w	r4, ip, #1
    3ef2:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3ef6:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3ef8:	3501      	adds	r5, #1
    3efa:	300c      	adds	r0, #12
    3efc:	e7c9      	b.n	3e92 <mpu_configure_regions+0x6>
		return REGION_32B;
    3efe:	2408      	movs	r4, #8
    3f00:	e7e7      	b.n	3ed2 <mpu_configure_regions+0x46>
		return REGION_4G;
    3f02:	243e      	movs	r4, #62	; 0x3e
    3f04:	e7e5      	b.n	3ed2 <mpu_configure_regions+0x46>
			return -EINVAL;
    3f06:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    3f0a:	4610      	mov	r0, r2
    3f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f0e:	bf00      	nop
    3f10:	e000ed00 	.word	0xe000ed00

00003f14 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3f14:	4b04      	ldr	r3, [pc, #16]	; (3f28 <arm_core_mpu_enable+0x14>)
    3f16:	2205      	movs	r2, #5
    3f18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3f1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f20:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
    3f24:	4770      	bx	lr
    3f26:	bf00      	nop
    3f28:	e000ed00 	.word	0xe000ed00

00003f2c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3f2c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
    3f30:	4b02      	ldr	r3, [pc, #8]	; (3f3c <arm_core_mpu_disable+0x10>)
    3f32:	2200      	movs	r2, #0
    3f34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3f38:	4770      	bx	lr
    3f3a:	bf00      	nop
    3f3c:	e000ed00 	.word	0xe000ed00

00003f40 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3f40:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3f42:	4c03      	ldr	r4, [pc, #12]	; (3f50 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3f44:	2301      	movs	r3, #1
    3f46:	7822      	ldrb	r2, [r4, #0]
    3f48:	f7ff ffa0 	bl	3e8c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3f4c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3f4e:	bd10      	pop	{r4, pc}
    3f50:	20002713 	.word	0x20002713

00003f54 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3f54:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3f56:	4a09      	ldr	r2, [pc, #36]	; (3f7c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3f58:	2300      	movs	r3, #0
    3f5a:	7812      	ldrb	r2, [r2, #0]
    3f5c:	f7ff ff96 	bl	3e8c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3f60:	f110 0f16 	cmn.w	r0, #22
    3f64:	d002      	beq.n	3f6c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3f66:	4a06      	ldr	r2, [pc, #24]	; (3f80 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3f68:	2807      	cmp	r0, #7
    3f6a:	dd00      	ble.n	3f6e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3f6c:	bd08      	pop	{r3, pc}
    3f6e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    3f72:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    3f76:	3001      	adds	r0, #1
    3f78:	e7f6      	b.n	3f68 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    3f7a:	bf00      	nop
    3f7c:	20002713 	.word	0x20002713
    3f80:	e000ed00 	.word	0xe000ed00

00003f84 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3f84:	4914      	ldr	r1, [pc, #80]	; (3fd8 <z_arm_mpu_init+0x54>)
    3f86:	6808      	ldr	r0, [r1, #0]
    3f88:	2808      	cmp	r0, #8
{
    3f8a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3f8c:	d821      	bhi.n	3fd2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3f8e:	f7ff ffcd 	bl	3f2c <arm_core_mpu_disable>
    3f92:	4c12      	ldr	r4, [pc, #72]	; (3fdc <z_arm_mpu_init+0x58>)
    3f94:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3f96:	2200      	movs	r2, #0
    3f98:	4290      	cmp	r0, r2
    3f9a:	f101 010c 	add.w	r1, r1, #12
    3f9e:	d105      	bne.n	3fac <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3fa0:	4b0f      	ldr	r3, [pc, #60]	; (3fe0 <z_arm_mpu_init+0x5c>)
    3fa2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3fa4:	f7ff ffb6 	bl	3f14 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3fa8:	2000      	movs	r0, #0
}
    3faa:	bd10      	pop	{r4, pc}
    3fac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3fb0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3fb4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3fb8:	4313      	orrs	r3, r2
    3fba:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3fbe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3fc6:	f043 0301 	orr.w	r3, r3, #1
    3fca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3fce:	3201      	adds	r2, #1
    3fd0:	e7e2      	b.n	3f98 <z_arm_mpu_init+0x14>
		return -1;
    3fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fd6:	e7e8      	b.n	3faa <z_arm_mpu_init+0x26>
    3fd8:	0001de18 	.word	0x0001de18
    3fdc:	e000ed00 	.word	0xe000ed00
    3fe0:	20002713 	.word	0x20002713

00003fe4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3fe4:	4b01      	ldr	r3, [pc, #4]	; (3fec <__stdout_hook_install+0x8>)
    3fe6:	6018      	str	r0, [r3, #0]
}
    3fe8:	4770      	bx	lr
    3fea:	bf00      	nop
    3fec:	200001a0 	.word	0x200001a0

00003ff0 <nordicsemi_nrf52_init>:

static int nordicsemi_nrf52_init(void)
{
#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3ff0:	4b02      	ldr	r3, [pc, #8]	; (3ffc <nordicsemi_nrf52_init+0xc>)
    3ff2:	2201      	movs	r2, #1
    3ff4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#if NRF_POWER_HAS_DCDCEN_VDDH && defined(CONFIG_SOC_DCDC_NRF52X_HV)
	nrf_power_dcdcen_vddh_set(NRF_POWER, true);
#endif

	return 0;
}
    3ff8:	2000      	movs	r0, #0
    3ffa:	4770      	bx	lr
    3ffc:	4001e000 	.word	0x4001e000

00004000 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4000:	b120      	cbz	r0, 400c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4002:	4b03      	ldr	r3, [pc, #12]	; (4010 <arch_busy_wait+0x10>)
    4004:	0180      	lsls	r0, r0, #6
    4006:	f043 0301 	orr.w	r3, r3, #1
    400a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    400c:	4770      	bx	lr
    400e:	bf00      	nop
    4010:	0001dd60 	.word	0x0001dd60

00004014 <pwr_ctrl_init>:

static const struct gpio_dt_spec ccs_gpio =
	GPIO_DT_SPEC_GET(DT_NODELABEL(ccs_pwr), enable_gpios);

static int pwr_ctrl_init(void)
{
    4014:	b510      	push	{r4, lr}
    4016:	4c0e      	ldr	r4, [pc, #56]	; (4050 <pwr_ctrl_init+0x3c>)
    4018:	4620      	mov	r0, r4
    401a:	f018 fe7d 	bl	1cd18 <z_device_is_ready>
	int ret;

	if (!device_is_ready(ccs_gpio.port)) {
    401e:	b198      	cbz	r0, 4048 <pwr_ctrl_init+0x34>
	struct gpio_driver_data *data =
    4020:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    4022:	68a1      	ldr	r1, [r4, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4024:	6813      	ldr	r3, [r2, #0]
    4026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    402a:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    402c:	680b      	ldr	r3, [r1, #0]
    402e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
    4032:	210a      	movs	r1, #10
    4034:	4620      	mov	r0, r4
    4036:	4798      	blx	r3
		return -ENODEV;
	}

	ret = gpio_pin_configure_dt(&ccs_gpio, GPIO_OUTPUT_HIGH);
	if (ret < 0) {
    4038:	2800      	cmp	r0, #0
    403a:	db04      	blt.n	4046 <pwr_ctrl_init+0x32>
	return z_impl_k_sleep(timeout);
    403c:	2021      	movs	r0, #33	; 0x21
    403e:	2100      	movs	r1, #0
    4040:	f014 fbec 	bl	1881c <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */
    4044:	2000      	movs	r0, #0

	return 0;
}
    4046:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4048:	f06f 0012 	mvn.w	r0, #18
    404c:	e7fb      	b.n	4046 <pwr_ctrl_init+0x32>
    404e:	bf00      	nop
    4050:	0001d9e8 	.word	0x0001d9e8

00004054 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    4054:	b508      	push	{r3, lr}
    4056:	4804      	ldr	r0, [pc, #16]	; (4068 <xoshiro128_initialize+0x14>)
    4058:	f018 fe5e 	bl	1cd18 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    405c:	2800      	cmp	r0, #0
}
    405e:	bf0c      	ite	eq
    4060:	f06f 0012 	mvneq.w	r0, #18
    4064:	2000      	movne	r0, #0
    4066:	bd08      	pop	{r3, pc}
    4068:	0001d95c 	.word	0x0001d95c

0000406c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
    406c:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
    406e:	4d0a      	ldr	r5, [pc, #40]	; (4098 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    4070:	4b0a      	ldr	r3, [pc, #40]	; (409c <long_wq_init+0x30>)
{
    4072:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    4074:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
    4076:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
    4078:	9302      	str	r3, [sp, #8]
    407a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
    407c:	f019 f8c2 	bl	1d204 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
    4080:	ab02      	add	r3, sp, #8
    4082:	9300      	str	r3, [sp, #0]
    4084:	4628      	mov	r0, r5
    4086:	4906      	ldr	r1, [pc, #24]	; (40a0 <long_wq_init+0x34>)
    4088:	230a      	movs	r3, #10
    408a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
    408e:	f014 f867 	bl	18160 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
    4092:	4620      	mov	r0, r4
    4094:	b005      	add	sp, #20
    4096:	bd30      	pop	{r4, r5, pc}
    4098:	20000a60 	.word	0x20000a60
    409c:	0001f87c 	.word	0x0001f87c
    40a0:	20002b80 	.word	0x20002b80

000040a4 <bt_long_wq_schedule>:
{
    40a4:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
    40a6:	4801      	ldr	r0, [pc, #4]	; (40ac <bt_long_wq_schedule+0x8>)
    40a8:	f014 b892 	b.w	181d0 <k_work_schedule_for_queue>
    40ac:	20000a60 	.word	0x20000a60

000040b0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    40b0:	b430      	push	{r4, r5}
    40b2:	4603      	mov	r3, r0
    40b4:	4608      	mov	r0, r1
	switch (src->type) {
    40b6:	781a      	ldrb	r2, [r3, #0]
    40b8:	2a01      	cmp	r2, #1
    40ba:	d013      	beq.n	40e4 <uuid_to_uuid128+0x34>
    40bc:	2a02      	cmp	r2, #2
    40be:	d026      	beq.n	410e <uuid_to_uuid128+0x5e>
    40c0:	b972      	cbnz	r2, 40e0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    40c2:	4a15      	ldr	r2, [pc, #84]	; (4118 <uuid_to_uuid128+0x68>)
    40c4:	f102 0410 	add.w	r4, r2, #16
    40c8:	f852 5b04 	ldr.w	r5, [r2], #4
    40cc:	f841 5b04 	str.w	r5, [r1], #4
    40d0:	42a2      	cmp	r2, r4
    40d2:	d1f9      	bne.n	40c8 <uuid_to_uuid128+0x18>
    40d4:	7812      	ldrb	r2, [r2, #0]
    40d6:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    40d8:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
    40da:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    40dc:	0a1b      	lsrs	r3, r3, #8
    40de:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    40e0:	bc30      	pop	{r4, r5}
    40e2:	4770      	bx	lr
		*dst = uuid128_base;
    40e4:	4a0c      	ldr	r2, [pc, #48]	; (4118 <uuid_to_uuid128+0x68>)
    40e6:	f102 0410 	add.w	r4, r2, #16
    40ea:	f852 5b04 	ldr.w	r5, [r2], #4
    40ee:	f841 5b04 	str.w	r5, [r1], #4
    40f2:	42a2      	cmp	r2, r4
    40f4:	d1f9      	bne.n	40ea <uuid_to_uuid128+0x3a>
    40f6:	7812      	ldrb	r2, [r2, #0]
    40f8:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    40fa:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
    40fc:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    40fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    4102:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4104:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    4106:	0a1b      	lsrs	r3, r3, #8
    4108:	7382      	strb	r2, [r0, #14]
    410a:	7403      	strb	r3, [r0, #16]
}
    410c:	e7e8      	b.n	40e0 <uuid_to_uuid128+0x30>
}
    410e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    4110:	2211      	movs	r2, #17
    4112:	4619      	mov	r1, r3
    4114:	f015 bd6e 	b.w	19bf4 <memcpy>
    4118:	0001f885 	.word	0x0001f885

0000411c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    411c:	b538      	push	{r3, r4, r5, lr}
    411e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    4120:	4805      	ldr	r0, [pc, #20]	; (4138 <bt_buf_get_rx+0x1c>)
    4122:	f017 fcb9 	bl	1ba98 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    4126:	4604      	mov	r4, r0
    4128:	b120      	cbz	r0, 4134 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    412a:	2100      	movs	r1, #0
    412c:	300c      	adds	r0, #12
    412e:	f017 fcee 	bl	1bb0e <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    4132:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4134:	4620      	mov	r0, r4
    4136:	bd38      	pop	{r3, r4, r5, pc}
    4138:	20000a04 	.word	0x20000a04

0000413c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    413c:	b570      	push	{r4, r5, r6, lr}
    413e:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4140:	480d      	ldr	r0, [pc, #52]	; (4178 <bt_buf_get_cmd_complete+0x3c>)
    4142:	f3bf 8f5b 	dmb	ish
    4146:	460b      	mov	r3, r1
    4148:	2100      	movs	r1, #0
    414a:	e850 4f00 	ldrex	r4, [r0]
    414e:	e840 1500 	strex	r5, r1, [r0]
    4152:	2d00      	cmp	r5, #0
    4154:	d1f9      	bne.n	414a <bt_buf_get_cmd_complete+0xe>
    4156:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    415a:	b924      	cbnz	r4, 4166 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    415c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4160:	2001      	movs	r0, #1
    4162:	f7ff bfdb 	b.w	411c <bt_buf_get_rx>
    4166:	2301      	movs	r3, #1
    4168:	f104 000c 	add.w	r0, r4, #12
    416c:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    416e:	8221      	strh	r1, [r4, #16]
    4170:	f017 fccd 	bl	1bb0e <net_buf_simple_reserve>
}
    4174:	4620      	mov	r0, r4
    4176:	bd70      	pop	{r4, r5, r6, pc}
    4178:	20000140 	.word	0x20000140

0000417c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    417c:	b570      	push	{r4, r5, r6, lr}
    417e:	4604      	mov	r4, r0
	switch (evt) {
    4180:	2c0f      	cmp	r4, #15
{
    4182:	460d      	mov	r5, r1
    4184:	4610      	mov	r0, r2
    4186:	4619      	mov	r1, r3
	switch (evt) {
    4188:	d805      	bhi.n	4196 <bt_buf_get_evt+0x1a>
    418a:	2c0d      	cmp	r4, #13
    418c:	d90d      	bls.n	41aa <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    418e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4192:	f7ff bfd3 	b.w	413c <bt_buf_get_cmd_complete>
	switch (evt) {
    4196:	2c13      	cmp	r4, #19
    4198:	d107      	bne.n	41aa <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
    419a:	480c      	ldr	r0, [pc, #48]	; (41cc <bt_buf_get_evt+0x50>)
    419c:	f017 fc7c 	bl	1ba98 <net_buf_alloc_fixed>
			if (buf) {
    41a0:	4604      	mov	r4, r0
    41a2:	b938      	cbnz	r0, 41b4 <bt_buf_get_evt+0x38>
{
    41a4:	2400      	movs	r4, #0
}
    41a6:	4620      	mov	r0, r4
    41a8:	bd70      	pop	{r4, r5, r6, pc}
    41aa:	4602      	mov	r2, r0
    41ac:	460b      	mov	r3, r1
		if (discardable) {
    41ae:	b145      	cbz	r5, 41c2 <bt_buf_get_evt+0x46>
    41b0:	4807      	ldr	r0, [pc, #28]	; (41d0 <bt_buf_get_evt+0x54>)
    41b2:	e7f3      	b.n	419c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
    41b4:	2100      	movs	r1, #0
    41b6:	300c      	adds	r0, #12
    41b8:	f017 fca9 	bl	1bb0e <net_buf_simple_reserve>
    41bc:	2301      	movs	r3, #1
    41be:	7623      	strb	r3, [r4, #24]
}
    41c0:	e7f1      	b.n	41a6 <bt_buf_get_evt+0x2a>
}
    41c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    41c6:	2001      	movs	r0, #1
    41c8:	f7ff bfa8 	b.w	411c <bt_buf_get_rx>
    41cc:	20000a30 	.word	0x20000a30
    41d0:	20000980 	.word	0x20000980

000041d4 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    41d4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    41d6:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    41d8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
    41dc:	781b      	ldrb	r3, [r3, #0]
    41de:	b96b      	cbnz	r3, 41fc <hci_disconn_complete_prio+0x28>
		return;
	}

	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_ALL);
    41e0:	210f      	movs	r1, #15
    41e2:	4620      	mov	r0, r4
    41e4:	f001 fdf8 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
    41e8:	4605      	mov	r5, r0
    41ea:	b940      	cbnz	r0, 41fe <hci_disconn_complete_prio+0x2a>
		if (!disconnected_handles[i]) {
    41ec:	4b08      	ldr	r3, [pc, #32]	; (4210 <hci_disconn_complete_prio+0x3c>)
    41ee:	881a      	ldrh	r2, [r3, #0]
    41f0:	b922      	cbnz	r2, 41fc <hci_disconn_complete_prio+0x28>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    41f2:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    41f6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    41fa:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    41fc:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    41fe:	2101      	movs	r1, #1
    4200:	f001 fd28 	bl	5c54 <bt_conn_set_state>
	bt_conn_unref(conn);
    4204:	4628      	mov	r0, r5
}
    4206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    420a:	f016 ba41 	b.w	1a690 <bt_conn_unref>
    420e:	bf00      	nop
    4210:	200026e0 	.word	0x200026e0

00004214 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4214:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    4216:	4c08      	ldr	r4, [pc, #32]	; (4238 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4218:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    421a:	2205      	movs	r2, #5
    421c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    4220:	f001 fec6 	bl	5fb0 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
    4224:	b938      	cbnz	r0, 4236 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4226:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    422a:	4904      	ldr	r1, [pc, #16]	; (423c <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
    422c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4230:	2204      	movs	r2, #4
    4232:	f001 bebd 	b.w	5fb0 <bt_conn_lookup_state_le>
}
    4236:	bd10      	pop	{r4, pc}
    4238:	20000008 	.word	0x20000008
    423c:	0001f862 	.word	0x0001f862

00004240 <hci_le_meta_event>:
#endif /* CONFIG_BT_CONN */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    4240:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    4242:	2101      	movs	r1, #1
    4244:	4604      	mov	r4, r0
    4246:	300c      	adds	r0, #12
    4248:	f017 fc8c 	bl	1bb64 <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    424c:	4621      	mov	r1, r4
    424e:	4a03      	ldr	r2, [pc, #12]	; (425c <hci_le_meta_event+0x1c>)
    4250:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	LOG_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    4252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    4256:	2307      	movs	r3, #7
    4258:	f015 bdd3 	b.w	19e02 <handle_event_common.isra.0>
    425c:	0001deb0 	.word	0x0001deb0

00004260 <hci_cmd_done>:
{
    4260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4262:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4264:	7a90      	ldrb	r0, [r2, #10]
{
    4266:	460e      	mov	r6, r1
    4268:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    426a:	f010 fb17 	bl	1489c <net_buf_pool_get>
    426e:	4b28      	ldr	r3, [pc, #160]	; (4310 <hci_cmd_done+0xb0>)
    4270:	4283      	cmp	r3, r0
    4272:	d14b      	bne.n	430c <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
    4274:	4620      	mov	r0, r4
    4276:	f010 fb19 	bl	148ac <net_buf_id>
    427a:	4d26      	ldr	r5, [pc, #152]	; (4314 <hci_cmd_done+0xb4>)
    427c:	230c      	movs	r3, #12
    427e:	fb03 5000 	mla	r0, r3, r0, r5
    4282:	8843      	ldrh	r3, [r0, #2]
    4284:	42bb      	cmp	r3, r7
    4286:	d141      	bne.n	430c <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
    4288:	4f23      	ldr	r7, [pc, #140]	; (4318 <hci_cmd_done+0xb8>)
    428a:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
    428e:	b120      	cbz	r0, 429a <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    4290:	f010 fbb2 	bl	149f8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4294:	2300      	movs	r3, #0
    4296:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    429a:	4620      	mov	r0, r4
    429c:	f010 fb06 	bl	148ac <net_buf_id>
    42a0:	270c      	movs	r7, #12
    42a2:	fb07 5000 	mla	r0, r7, r0, r5
    42a6:	6843      	ldr	r3, [r0, #4]
    42a8:	b19b      	cbz	r3, 42d2 <hci_cmd_done+0x72>
    42aa:	b996      	cbnz	r6, 42d2 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    42ac:	4620      	mov	r0, r4
    42ae:	f010 fafd 	bl	148ac <net_buf_id>
    42b2:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    42b6:	2101      	movs	r1, #1
    42b8:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    42ba:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
    42be:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    42c0:	f003 071f 	and.w	r7, r3, #31
    42c4:	40b9      	lsls	r1, r7
	if (val) {
    42c6:	095b      	lsrs	r3, r3, #5
    42c8:	b1d2      	cbz	r2, 4300 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    42ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    42ce:	f015 fd6a 	bl	19da6 <atomic_or>
	if (cmd(buf)->sync) {
    42d2:	4620      	mov	r0, r4
    42d4:	f010 faea 	bl	148ac <net_buf_id>
    42d8:	270c      	movs	r7, #12
    42da:	fb07 5000 	mla	r0, r7, r0, r5
    42de:	6883      	ldr	r3, [r0, #8]
    42e0:	b1a3      	cbz	r3, 430c <hci_cmd_done+0xac>
		cmd(buf)->status = status;
    42e2:	4620      	mov	r0, r4
    42e4:	f010 fae2 	bl	148ac <net_buf_id>
    42e8:	4378      	muls	r0, r7
    42ea:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    42ec:	4620      	mov	r0, r4
    42ee:	f010 fadd 	bl	148ac <net_buf_id>
    42f2:	fb07 5500 	mla	r5, r7, r0, r5
    42f6:	68a8      	ldr	r0, [r5, #8]
}
    42f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    42fc:	f013 bd8c 	b.w	17e18 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4300:	43c9      	mvns	r1, r1
    4302:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4306:	f015 fd93 	bl	19e30 <atomic_and.isra.0>
    430a:	e7e2      	b.n	42d2 <hci_cmd_done+0x72>
    430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    430e:	bf00      	nop
    4310:	200009d8 	.word	0x200009d8
    4314:	20001214 	.word	0x20001214
    4318:	20000008 	.word	0x20000008

0000431c <hci_cmd_status>:
{
    431c:	b538      	push	{r3, r4, r5, lr}
    431e:	2104      	movs	r1, #4
    4320:	4604      	mov	r4, r0
    4322:	300c      	adds	r0, #12
    4324:	f017 fc1e 	bl	1bb64 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    4328:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    432a:	7801      	ldrb	r1, [r0, #0]
    432c:	8840      	ldrh	r0, [r0, #2]
    432e:	4622      	mov	r2, r4
    4330:	f7ff ff96 	bl	4260 <hci_cmd_done>
	if (ncmd) {
    4334:	b125      	cbz	r5, 4340 <hci_cmd_status+0x24>
    4336:	4803      	ldr	r0, [pc, #12]	; (4344 <hci_cmd_status+0x28>)
}
    4338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    433c:	f013 bd6c 	b.w	17e18 <z_impl_k_sem_give>
    4340:	bd38      	pop	{r3, r4, r5, pc}
    4342:	bf00      	nop
    4344:	20000128 	.word	0x20000128

00004348 <hci_cmd_complete>:
{
    4348:	b538      	push	{r3, r4, r5, lr}
    434a:	2103      	movs	r1, #3
    434c:	4604      	mov	r4, r0
    434e:	300c      	adds	r0, #12
    4350:	f017 fc08 	bl	1bb64 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4354:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    4356:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    4358:	7819      	ldrb	r1, [r3, #0]
    435a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    435e:	4622      	mov	r2, r4
    4360:	f7ff ff7e 	bl	4260 <hci_cmd_done>
	if (ncmd) {
    4364:	b125      	cbz	r5, 4370 <hci_cmd_complete+0x28>
    4366:	4803      	ldr	r0, [pc, #12]	; (4374 <hci_cmd_complete+0x2c>)
}
    4368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    436c:	f013 bd54 	b.w	17e18 <z_impl_k_sem_give>
    4370:	bd38      	pop	{r3, r4, r5, pc}
    4372:	bf00      	nop
    4374:	20000128 	.word	0x20000128

00004378 <bt_hci_cmd_state_set_init>:
{
    4378:	b510      	push	{r4, lr}
	state->bit = bit;
    437a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    437e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4382:	720b      	strb	r3, [r1, #8]
{
    4384:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    4386:	f010 fa91 	bl	148ac <net_buf_id>
    438a:	4b03      	ldr	r3, [pc, #12]	; (4398 <bt_hci_cmd_state_set_init+0x20>)
    438c:	220c      	movs	r2, #12
    438e:	fb02 3300 	mla	r3, r2, r0, r3
    4392:	605c      	str	r4, [r3, #4]
}
    4394:	bd10      	pop	{r4, pc}
    4396:	bf00      	nop
    4398:	20001214 	.word	0x20001214

0000439c <bt_hci_cmd_create>:
{
    439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    43a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    43a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    43a8:	4606      	mov	r6, r0
    43aa:	4817      	ldr	r0, [pc, #92]	; (4408 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    43ac:	4d17      	ldr	r5, [pc, #92]	; (440c <bt_hci_cmd_create+0x70>)
{
    43ae:	460f      	mov	r7, r1
    43b0:	f017 fb72 	bl	1ba98 <net_buf_alloc_fixed>
    43b4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    43b6:	f100 0a0c 	add.w	sl, r0, #12
    43ba:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    43bc:	f04f 0800 	mov.w	r8, #0
    43c0:	4650      	mov	r0, sl
    43c2:	f017 fba4 	bl	1bb0e <net_buf_simple_reserve>
    43c6:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    43ca:	4620      	mov	r0, r4
    43cc:	f010 fa6e 	bl	148ac <net_buf_id>
    43d0:	f04f 090c 	mov.w	r9, #12
    43d4:	fb09 5000 	mla	r0, r9, r0, r5
    43d8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    43da:	4620      	mov	r0, r4
    43dc:	f010 fa66 	bl	148ac <net_buf_id>
    43e0:	fb09 5000 	mla	r0, r9, r0, r5
    43e4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    43e8:	4620      	mov	r0, r4
    43ea:	f010 fa5f 	bl	148ac <net_buf_id>
    43ee:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    43f2:	2103      	movs	r1, #3
    43f4:	4650      	mov	r0, sl
    43f6:	f8c5 8004 	str.w	r8, [r5, #4]
    43fa:	f017 fb8c 	bl	1bb16 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    43fe:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    4400:	7087      	strb	r7, [r0, #2]
}
    4402:	4620      	mov	r0, r4
    4404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4408:	200009d8 	.word	0x200009d8
    440c:	20001214 	.word	0x20001214

00004410 <bt_hci_cmd_send_sync>:
{
    4410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4414:	4607      	mov	r7, r0
    4416:	b086      	sub	sp, #24
    4418:	4615      	mov	r5, r2
	if (!buf) {
    441a:	460c      	mov	r4, r1
    441c:	b921      	cbnz	r1, 4428 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    441e:	f7ff ffbd 	bl	439c <bt_hci_cmd_create>
		if (!buf) {
    4422:	4604      	mov	r4, r0
    4424:	2800      	cmp	r0, #0
    4426:	d04d      	beq.n	44c4 <bt_hci_cmd_send_sync+0xb4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    4428:	2201      	movs	r2, #1
    442a:	2100      	movs	r1, #0
    442c:	4668      	mov	r0, sp
    442e:	f018 fe28 	bl	1d082 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    4432:	4620      	mov	r0, r4
    4434:	f010 fa3a 	bl	148ac <net_buf_id>
    4438:	f8df 8094 	ldr.w	r8, [pc, #148]	; 44d0 <bt_hci_cmd_send_sync+0xc0>
    443c:	230c      	movs	r3, #12
    443e:	fb03 8000 	mla	r0, r3, r0, r8
    4442:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    4446:	4620      	mov	r0, r4
    4448:	f017 fb2f 	bl	1baaa <net_buf_ref>
    444c:	4601      	mov	r1, r0
    444e:	4821      	ldr	r0, [pc, #132]	; (44d4 <bt_hci_cmd_send_sync+0xc4>)
    4450:	f017 fb29 	bl	1baa6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    4454:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    4458:	2300      	movs	r3, #0
    445a:	4668      	mov	r0, sp
    445c:	f013 fd02 	bl	17e64 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    4460:	4606      	mov	r6, r0
    4462:	b188      	cbz	r0, 4488 <bt_hci_cmd_send_sync+0x78>
    4464:	f240 134b 	movw	r3, #331	; 0x14b
    4468:	4a1b      	ldr	r2, [pc, #108]	; (44d8 <bt_hci_cmd_send_sync+0xc8>)
    446a:	491c      	ldr	r1, [pc, #112]	; (44dc <bt_hci_cmd_send_sync+0xcc>)
    446c:	481c      	ldr	r0, [pc, #112]	; (44e0 <bt_hci_cmd_send_sync+0xd0>)
    446e:	f015 f8e6 	bl	1963e <assert_print>
    4472:	481c      	ldr	r0, [pc, #112]	; (44e4 <bt_hci_cmd_send_sync+0xd4>)
    4474:	4632      	mov	r2, r6
    4476:	4639      	mov	r1, r7
    4478:	f015 f8e1 	bl	1963e <assert_print>
    447c:	4040      	eors	r0, r0
    447e:	f380 8811 	msr	BASEPRI, r0
    4482:	f04f 0003 	mov.w	r0, #3
    4486:	df02      	svc	2
	status = cmd(buf)->status;
    4488:	4620      	mov	r0, r4
    448a:	f010 fa0f 	bl	148ac <net_buf_id>
    448e:	230c      	movs	r3, #12
    4490:	4358      	muls	r0, r3
    4492:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    4496:	b16e      	cbz	r6, 44b4 <bt_hci_cmd_send_sync+0xa4>
		net_buf_unref(buf);
    4498:	4620      	mov	r0, r4
    449a:	f010 faad 	bl	149f8 <net_buf_unref>
		switch (status) {
    449e:	2e09      	cmp	r6, #9
    44a0:	d013      	beq.n	44ca <bt_hci_cmd_send_sync+0xba>
			return -EIO;
    44a2:	2e0d      	cmp	r6, #13
    44a4:	bf0c      	ite	eq
    44a6:	f06f 000b 	mvneq.w	r0, #11
    44aa:	f06f 0004 	mvnne.w	r0, #4
}
    44ae:	b006      	add	sp, #24
    44b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    44b4:	b115      	cbz	r5, 44bc <bt_hci_cmd_send_sync+0xac>
		*rsp = buf;
    44b6:	602c      	str	r4, [r5, #0]
	return 0;
    44b8:	2000      	movs	r0, #0
    44ba:	e7f8      	b.n	44ae <bt_hci_cmd_send_sync+0x9e>
		net_buf_unref(buf);
    44bc:	4620      	mov	r0, r4
    44be:	f010 fa9b 	bl	149f8 <net_buf_unref>
    44c2:	e7f9      	b.n	44b8 <bt_hci_cmd_send_sync+0xa8>
			return -ENOBUFS;
    44c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    44c8:	e7f1      	b.n	44ae <bt_hci_cmd_send_sync+0x9e>
			return -ECONNREFUSED;
    44ca:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    44ce:	e7ee      	b.n	44ae <bt_hci_cmd_send_sync+0x9e>
    44d0:	20001214 	.word	0x20001214
    44d4:	20000144 	.word	0x20000144
    44d8:	0001f89e 	.word	0x0001f89e
    44dc:	0001f8d2 	.word	0x0001f8d2
    44e0:	0001f8db 	.word	0x0001f8db
    44e4:	0001f8f8 	.word	0x0001f8f8

000044e8 <bt_hci_le_rand>:
{
    44e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    44ea:	4b14      	ldr	r3, [pc, #80]	; (453c <bt_hci_le_rand+0x54>)
    44ec:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    44f0:	2b00      	cmp	r3, #0
{
    44f2:	4605      	mov	r5, r0
    44f4:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    44f6:	da1d      	bge.n	4534 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    44f8:	b914      	cbnz	r4, 4500 <bt_hci_le_rand+0x18>
	return 0;
    44fa:	4620      	mov	r0, r4
}
    44fc:	b003      	add	sp, #12
    44fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    4500:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    4502:	aa01      	add	r2, sp, #4
    4504:	f04f 0100 	mov.w	r1, #0
    4508:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    450c:	4626      	mov	r6, r4
    450e:	bf28      	it	cs
    4510:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    4512:	f7ff ff7d 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4516:	2800      	cmp	r0, #0
    4518:	d1f0      	bne.n	44fc <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    451a:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    451c:	68f9      	ldr	r1, [r7, #12]
    451e:	4632      	mov	r2, r6
    4520:	3101      	adds	r1, #1
    4522:	4628      	mov	r0, r5
    4524:	f015 fb66 	bl	19bf4 <memcpy>
		net_buf_unref(rsp);
    4528:	4638      	mov	r0, r7
    452a:	f010 fa65 	bl	149f8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    452e:	4435      	add	r5, r6
		len -= count;
    4530:	1ba4      	subs	r4, r4, r6
    4532:	e7e1      	b.n	44f8 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    4534:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4538:	e7e0      	b.n	44fc <bt_hci_le_rand+0x14>
    453a:	bf00      	nop
    453c:	20000008 	.word	0x20000008

00004540 <bt_hci_le_enh_conn_complete>:
{
    4540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disconnected_handles[i] == handle) {
    4544:	4b7c      	ldr	r3, [pc, #496]	; (4738 <bt_hci_le_enh_conn_complete+0x1f8>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4546:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
    454a:	8819      	ldrh	r1, [r3, #0]
    454c:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
    4550:	4291      	cmp	r1, r2
    4552:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    4556:	bf08      	it	eq
    4558:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
    455a:	7804      	ldrb	r4, [r0, #0]
{
    455c:	b088      	sub	sp, #32
    455e:	4605      	mov	r5, r0
			return true;
    4560:	bf08      	it	eq
    4562:	2601      	moveq	r6, #1
	if (evt->status) {
    4564:	b1bc      	cbz	r4, 4596 <bt_hci_le_enh_conn_complete+0x56>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4566:	2c3c      	cmp	r4, #60	; 0x3c
    4568:	d137      	bne.n	45da <bt_hci_le_enh_conn_complete+0x9a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    456a:	f000 ff73 	bl	5454 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    456e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    4572:	3010      	adds	r0, #16
    4574:	f015 fc5c 	bl	19e30 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    4578:	2000      	movs	r0, #0
    457a:	f7ff fe4b 	bl	4214 <find_pending_connect.part.0>
		if (!conn) {
    457e:	4605      	mov	r5, r0
    4580:	b358      	cbz	r0, 45da <bt_hci_le_enh_conn_complete+0x9a>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    4582:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4584:	2100      	movs	r1, #0
    4586:	f001 fb65 	bl	5c54 <bt_conn_set_state>
		bt_conn_unref(conn);
    458a:	4628      	mov	r0, r5
}
    458c:	b008      	add	sp, #32
    458e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    4592:	f016 b87d 	b.w	1a690 <bt_conn_unref>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    4596:	78c3      	ldrb	r3, [r0, #3]
    4598:	2b01      	cmp	r3, #1
    459a:	bf08      	it	eq
    459c:	4b67      	ldreq	r3, [pc, #412]	; (473c <bt_hci_le_enh_conn_complete+0x1fc>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    459e:	f100 0704 	add.w	r7, r0, #4
    45a2:	4638      	mov	r0, r7
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
    45a4:	bf08      	it	eq
    45a6:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    45aa:	f015 fbb6 	bl	19d1a <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    45ae:	4639      	mov	r1, r7
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
    45b0:	b1b0      	cbz	r0, 45e0 <bt_hci_le_enh_conn_complete+0xa0>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
    45b2:	a806      	add	r0, sp, #24
    45b4:	f015 fba7 	bl	19d06 <bt_addr_le_copy_resolved>
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    45b8:	2206      	movs	r2, #6
    45ba:	f105 0111 	add.w	r1, r5, #17
    45be:	f10d 0011 	add.w	r0, sp, #17
    45c2:	f015 fb17 	bl	19bf4 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
    45c6:	2301      	movs	r3, #1
    45c8:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    45cc:	78eb      	ldrb	r3, [r5, #3]
    45ce:	2b01      	cmp	r3, #1
    45d0:	d014      	beq.n	45fc <bt_hci_le_enh_conn_complete+0xbc>
		bt_hci_disconnect(handle, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    45d2:	2113      	movs	r1, #19
    45d4:	4640      	mov	r0, r8
    45d6:	f015 fd18 	bl	1a00a <bt_hci_disconnect>
}
    45da:	b008      	add	sp, #32
    45dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
    45e0:	4620      	mov	r0, r4
    45e2:	f015 fe4a 	bl	1a27a <bt_lookup_id_addr>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    45e6:	2207      	movs	r2, #7
    45e8:	4601      	mov	r1, r0
    45ea:	a806      	add	r0, sp, #24
    45ec:	f015 fb02 	bl	19bf4 <memcpy>
    45f0:	2207      	movs	r2, #7
    45f2:	4639      	mov	r1, r7
    45f4:	a804      	add	r0, sp, #16
    45f6:	f015 fafd 	bl	19bf4 <memcpy>
}
    45fa:	e7e7      	b.n	45cc <bt_hci_le_enh_conn_complete+0x8c>
    45fc:	a806      	add	r0, sp, #24
    45fe:	f7ff fe09 	bl	4214 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4602:	78eb      	ldrb	r3, [r5, #3]
    4604:	2b01      	cmp	r3, #1
    4606:	4604      	mov	r4, r0
    4608:	d10a      	bne.n	4620 <bt_hci_le_enh_conn_complete+0xe0>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    460a:	f000 ff23 	bl	5454 <bt_le_adv_lookup_legacy>
    460e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    4612:	4607      	mov	r7, r0
    4614:	3010      	adds	r0, #16
    4616:	f015 fc0b 	bl	19e30 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    461a:	4638      	mov	r0, r7
    461c:	f015 ff9b 	bl	1a556 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    4620:	2c00      	cmp	r4, #0
    4622:	d0d6      	beq.n	45d2 <bt_hci_le_enh_conn_complete+0x92>
	conn->handle = sys_le16_to_cpu(evt->handle);
    4624:	4620      	mov	r0, r4
    4626:	f8b5 3001 	ldrh.w	r3, [r5, #1]
    462a:	f820 3b88 	strh.w	r3, [r0], #136
	memcpy(dst, src, sizeof(*dst));
    462e:	2207      	movs	r2, #7
    4630:	a906      	add	r1, sp, #24
    4632:	f015 fadf 	bl	19bf4 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    4636:	f8b5 3017 	ldrh.w	r3, [r5, #23]
    463a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    463e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
    4642:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4646:	f8b5 301b 	ldrh.w	r3, [r5, #27]
    464a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    464e:	78eb      	ldrb	r3, [r5, #3]
    4650:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    4652:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4654:	2b01      	cmp	r3, #1
	conn->err = 0U;
    4656:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4658:	d117      	bne.n	468a <bt_hci_le_enh_conn_complete+0x14a>
    465a:	2207      	movs	r2, #7
    465c:	a904      	add	r1, sp, #16
    465e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    4662:	f015 fac7 	bl	19bf4 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    4666:	f000 fef5 	bl	5454 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    466a:	7a21      	ldrb	r1, [r4, #8]
    466c:	4d33      	ldr	r5, [pc, #204]	; (473c <bt_hci_le_enh_conn_complete+0x1fc>)
    466e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    4672:	4429      	add	r1, r5
    4674:	2207      	movs	r2, #7
    4676:	f104 0096 	add.w	r0, r4, #150	; 0x96
    467a:	f015 fabb 	bl	19bf4 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    467e:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    4682:	065d      	lsls	r5, r3, #25
    4684:	d501      	bpl.n	468a <bt_hci_le_enh_conn_complete+0x14a>
			bt_le_adv_resume();
    4686:	f001 f87f 	bl	5788 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    468a:	2107      	movs	r1, #7
    468c:	4620      	mov	r0, r4
    468e:	f001 fae1 	bl	5c54 <bt_conn_set_state>
	if (is_disconnected) {
    4692:	b11e      	cbz	r6, 469c <bt_hci_le_enh_conn_complete+0x15c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4694:	2101      	movs	r1, #1
    4696:	4620      	mov	r0, r4
    4698:	f001 fadc 	bl	5c54 <bt_conn_set_state>
	bt_conn_connected(conn);
    469c:	4620      	mov	r0, r4
    469e:	f016 f835 	bl	1a70c <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
    46a2:	7aa3      	ldrb	r3, [r4, #10]
    46a4:	2b07      	cmp	r3, #7
    46a6:	d142      	bne.n	472e <bt_hci_le_enh_conn_complete+0x1ee>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    46a8:	f3bf 8f5b 	dmb	ish
    46ac:	6863      	ldr	r3, [r4, #4]
    46ae:	4e23      	ldr	r6, [pc, #140]	; (473c <bt_hci_le_enh_conn_complete+0x1fc>)
    46b0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    46b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    46b8:	d118      	bne.n	46ec <bt_hci_le_enh_conn_complete+0x1ac>
    46ba:	78e3      	ldrb	r3, [r4, #3]
    46bc:	b11b      	cbz	r3, 46c6 <bt_hci_le_enh_conn_complete+0x186>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    46be:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
    46c2:	0718      	lsls	r0, r3, #28
    46c4:	d512      	bpl.n	46ec <bt_hci_le_enh_conn_complete+0x1ac>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    46c6:	2102      	movs	r1, #2
    46c8:	f242 0016 	movw	r0, #8214	; 0x2016
    46cc:	f7ff fe66 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
    46d0:	4605      	mov	r5, r0
    46d2:	b158      	cbz	r0, 46ec <bt_hci_le_enh_conn_complete+0x1ac>
    46d4:	2102      	movs	r1, #2
    46d6:	300c      	adds	r0, #12
    46d8:	f017 fa1d 	bl	1bb16 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    46dc:	8823      	ldrh	r3, [r4, #0]
    46de:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
    46e0:	2200      	movs	r2, #0
    46e2:	4629      	mov	r1, r5
    46e4:	f242 0016 	movw	r0, #8214	; 0x2016
    46e8:	f7ff fe92 	bl	4410 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    46ec:	f896 30d9 	ldrb.w	r3, [r6, #217]	; 0xd9
    46f0:	07d9      	lsls	r1, r3, #31
    46f2:	d506      	bpl.n	4702 <bt_hci_le_enh_conn_complete+0x1c2>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    46f4:	2100      	movs	r1, #0
    46f6:	2302      	movs	r3, #2
    46f8:	9100      	str	r1, [sp, #0]
    46fa:	461a      	mov	r2, r3
    46fc:	4620      	mov	r0, r4
    46fe:	f015 fcbd 	bl	1a07c <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    4702:	f896 30d8 	ldrb.w	r3, [r6, #216]	; 0xd8
    4706:	069a      	lsls	r2, r3, #26
    4708:	d511      	bpl.n	472e <bt_hci_le_enh_conn_complete+0x1ee>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    470a:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
    470e:	689b      	ldr	r3, [r3, #8]
    4710:	079b      	lsls	r3, r3, #30
    4712:	d50c      	bpl.n	472e <bt_hci_le_enh_conn_complete+0x1ee>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    4714:	f10d 010e 	add.w	r1, sp, #14
    4718:	a803      	add	r0, sp, #12
    471a:	f015 fc5e 	bl	19fda <hci_le_read_max_data_len>
			if (!err) {
    471e:	b930      	cbnz	r0, 472e <bt_hci_le_enh_conn_complete+0x1ee>
				err = bt_le_set_data_len(conn,
    4720:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    4724:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    4728:	4620      	mov	r0, r4
    472a:	f015 fc89 	bl	1a040 <bt_le_set_data_len>
	bt_conn_unref(conn);
    472e:	4620      	mov	r0, r4
    4730:	f015 ffae 	bl	1a690 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    4734:	e751      	b.n	45da <bt_hci_le_enh_conn_complete+0x9a>
    4736:	bf00      	nop
    4738:	200026e0 	.word	0x200026e0
    473c:	20000008 	.word	0x20000008

00004740 <le_legacy_conn_complete>:
{
    4740:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    4742:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
    4744:	4c18      	ldr	r4, [pc, #96]	; (47a8 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
    4746:	780b      	ldrb	r3, [r1, #0]
{
    4748:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
    474a:	2207      	movs	r2, #7
	enh.status         = evt->status;
    474c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
    4750:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    4754:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
    4758:	78cb      	ldrb	r3, [r1, #3]
    475a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
    475e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    4762:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
    4766:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    476a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
    476e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    4772:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
    4776:	7c4b      	ldrb	r3, [r1, #17]
    4778:	f88d 301d 	strb.w	r3, [sp, #29]
    477c:	3104      	adds	r1, #4
    477e:	a801      	add	r0, sp, #4
    4780:	f015 fa38 	bl	19bf4 <memcpy>
	memcpy(dst, src, sizeof(*dst));
    4784:	4621      	mov	r1, r4
    4786:	2206      	movs	r2, #6
    4788:	f10d 000b 	add.w	r0, sp, #11
    478c:	f015 fa32 	bl	19bf4 <memcpy>
    4790:	2206      	movs	r2, #6
    4792:	4621      	mov	r1, r4
    4794:	f10d 0011 	add.w	r0, sp, #17
    4798:	f015 fa2c 	bl	19bf4 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
    479c:	4668      	mov	r0, sp
    479e:	f7ff fecf 	bl	4540 <bt_hci_le_enh_conn_complete>
}
    47a2:	b008      	add	sp, #32
    47a4:	bd10      	pop	{r4, pc}
    47a6:	bf00      	nop
    47a8:	0001f876 	.word	0x0001f876

000047ac <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    47ac:	4b02      	ldr	r3, [pc, #8]	; (47b8 <bt_send+0xc>)
    47ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    47b2:	695b      	ldr	r3, [r3, #20]
    47b4:	4718      	bx	r3
    47b6:	bf00      	nop
    47b8:	20000008 	.word	0x20000008

000047bc <bt_hci_cmd_send>:
{
    47bc:	b538      	push	{r3, r4, r5, lr}
    47be:	4605      	mov	r5, r0
	if (!buf) {
    47c0:	460c      	mov	r4, r1
    47c2:	b919      	cbnz	r1, 47cc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    47c4:	f7ff fdea 	bl	439c <bt_hci_cmd_create>
		if (!buf) {
    47c8:	4604      	mov	r4, r0
    47ca:	b198      	cbz	r0, 47f4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    47cc:	f640 4335 	movw	r3, #3125	; 0xc35
    47d0:	429d      	cmp	r5, r3
    47d2:	d109      	bne.n	47e8 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    47d4:	4620      	mov	r0, r4
    47d6:	f7ff ffe9 	bl	47ac <bt_send>
		if (err) {
    47da:	4605      	mov	r5, r0
    47dc:	b140      	cbz	r0, 47f0 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
    47de:	4620      	mov	r0, r4
    47e0:	f010 f90a 	bl	149f8 <net_buf_unref>
}
    47e4:	4628      	mov	r0, r5
    47e6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    47e8:	4804      	ldr	r0, [pc, #16]	; (47fc <bt_hci_cmd_send+0x40>)
    47ea:	4621      	mov	r1, r4
    47ec:	f017 f95b 	bl	1baa6 <net_buf_put>
	return 0;
    47f0:	2500      	movs	r5, #0
    47f2:	e7f7      	b.n	47e4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    47f4:	f06f 0568 	mvn.w	r5, #104	; 0x68
    47f8:	e7f4      	b.n	47e4 <bt_hci_cmd_send+0x28>
    47fa:	bf00      	nop
    47fc:	20000144 	.word	0x20000144

00004800 <hci_tx_thread>:
{
    4800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    4804:	4f3c      	ldr	r7, [pc, #240]	; (48f8 <hci_tx_thread+0xf8>)
		BT_ASSERT(err == 0);
    4806:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 48fc <hci_tx_thread+0xfc>
			ev_count += bt_conn_prepare_events(&events[1]);
    480a:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    480e:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4810:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
    4812:	f36f 3394 	bfc	r3, #14, #7
    4816:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4818:	f001 f9ca 	bl	5bb0 <bt_conn_prepare_events>
    481c:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    481e:	4836      	ldr	r0, [pc, #216]	; (48f8 <hci_tx_thread+0xf8>)
    4820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4828:	4629      	mov	r1, r5
    482a:	f014 fa85 	bl	18d38 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    482e:	b160      	cbz	r0, 484a <hci_tx_thread+0x4a>
    4830:	4933      	ldr	r1, [pc, #204]	; (4900 <hci_tx_thread+0x100>)
    4832:	4834      	ldr	r0, [pc, #208]	; (4904 <hci_tx_thread+0x104>)
    4834:	f640 23d6 	movw	r3, #2774	; 0xad6
    4838:	4642      	mov	r2, r8
    483a:	f014 ff00 	bl	1963e <assert_print>
    483e:	4040      	eors	r0, r0
    4840:	f380 8811 	msr	BASEPRI, r0
    4844:	f04f 0003 	mov.w	r0, #3
    4848:	df02      	svc	2
{
    484a:	4e2b      	ldr	r6, [pc, #172]	; (48f8 <hci_tx_thread+0xf8>)
	for (; count; ev++, count--) {
    484c:	b915      	cbnz	r5, 4854 <hci_tx_thread+0x54>
	z_impl_k_yield();
    484e:	f013 ff63 	bl	18718 <z_impl_k_yield>
	while (1) {
    4852:	e7dc      	b.n	480e <hci_tx_thread+0xe>
		switch (ev->state) {
    4854:	68f3      	ldr	r3, [r6, #12]
    4856:	f3c3 3386 	ubfx	r3, r3, #14, #7
    485a:	2b04      	cmp	r3, #4
    485c:	d142      	bne.n	48e4 <hci_tx_thread+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
    485e:	7b33      	ldrb	r3, [r6, #12]
    4860:	2b00      	cmp	r3, #0
    4862:	d142      	bne.n	48ea <hci_tx_thread+0xea>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4864:	4828      	ldr	r0, [pc, #160]	; (4908 <hci_tx_thread+0x108>)
    4866:	2200      	movs	r2, #0
    4868:	2300      	movs	r3, #0
    486a:	f017 f91a 	bl	1baa2 <net_buf_get>
	BT_ASSERT(buf);
    486e:	4604      	mov	r4, r0
    4870:	b960      	cbnz	r0, 488c <hci_tx_thread+0x8c>
    4872:	4926      	ldr	r1, [pc, #152]	; (490c <hci_tx_thread+0x10c>)
    4874:	4823      	ldr	r0, [pc, #140]	; (4904 <hci_tx_thread+0x104>)
    4876:	f640 2368 	movw	r3, #2664	; 0xa68
    487a:	4642      	mov	r2, r8
    487c:	f014 fedf 	bl	1963e <assert_print>
    4880:	4040      	eors	r0, r0
    4882:	f380 8811 	msr	BASEPRI, r0
    4886:	f04f 0003 	mov.w	r0, #3
    488a:	df02      	svc	2
	if (bt_dev.sent_cmd) {
    488c:	f8df a080 	ldr.w	sl, [pc, #128]	; 4910 <hci_tx_thread+0x110>
	return z_impl_k_sem_take(sem, timeout);
    4890:	4820      	ldr	r0, [pc, #128]	; (4914 <hci_tx_thread+0x114>)
    4892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    489a:	f013 fae3 	bl	17e64 <z_impl_k_sem_take>
    489e:	f8da 0138 	ldr.w	r0, [sl, #312]	; 0x138
    48a2:	b120      	cbz	r0, 48ae <hci_tx_thread+0xae>
		net_buf_unref(bt_dev.sent_cmd);
    48a4:	f010 f8a8 	bl	149f8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    48a8:	2300      	movs	r3, #0
    48aa:	f8ca 3138 	str.w	r3, [sl, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    48ae:	4620      	mov	r0, r4
    48b0:	f017 f8fb 	bl	1baaa <net_buf_ref>
    48b4:	f8ca 0138 	str.w	r0, [sl, #312]	; 0x138
	err = bt_send(buf);
    48b8:	4620      	mov	r0, r4
    48ba:	f7ff ff77 	bl	47ac <bt_send>
	if (err) {
    48be:	b188      	cbz	r0, 48e4 <hci_tx_thread+0xe4>
	z_impl_k_sem_give(sem);
    48c0:	4814      	ldr	r0, [pc, #80]	; (4914 <hci_tx_thread+0x114>)
    48c2:	f013 faa9 	bl	17e18 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    48c6:	4620      	mov	r0, r4
    48c8:	f00f fff0 	bl	148ac <net_buf_id>
    48cc:	4b12      	ldr	r3, [pc, #72]	; (4918 <hci_tx_thread+0x118>)
    48ce:	220c      	movs	r2, #12
    48d0:	fb02 3000 	mla	r0, r2, r0, r3
    48d4:	211f      	movs	r1, #31
    48d6:	8840      	ldrh	r0, [r0, #2]
    48d8:	4622      	mov	r2, r4
    48da:	f7ff fcc1 	bl	4260 <hci_cmd_done>
		net_buf_unref(buf);
    48de:	4620      	mov	r0, r4
    48e0:	f010 f88a 	bl	149f8 <net_buf_unref>
	for (; count; ev++, count--) {
    48e4:	3614      	adds	r6, #20
    48e6:	3d01      	subs	r5, #1
    48e8:	e7b0      	b.n	484c <hci_tx_thread+0x4c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    48ea:	2b01      	cmp	r3, #1
    48ec:	d1fa      	bne.n	48e4 <hci_tx_thread+0xe4>
					conn = CONTAINER_OF(ev->fifo,
    48ee:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    48f0:	3838      	subs	r0, #56	; 0x38
    48f2:	f001 fc37 	bl	6164 <bt_conn_process_tx>
    48f6:	e7f5      	b.n	48e4 <hci_tx_thread+0xe4>
    48f8:	200001a4 	.word	0x200001a4
    48fc:	0001f89e 	.word	0x0001f89e
    4900:	0001f8d2 	.word	0x0001f8d2
    4904:	0001f8db 	.word	0x0001f8db
    4908:	20000144 	.word	0x20000144
    490c:	0001fa51 	.word	0x0001fa51
    4910:	20000008 	.word	0x20000008
    4914:	20000128 	.word	0x20000128
    4918:	20001214 	.word	0x20001214

0000491c <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4920:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    4922:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    4926:	4630      	mov	r0, r6
    4928:	f017 f92c 	bl	1bb84 <net_buf_simple_headroom>
	state->len = buf->len;
    492c:	f8b4 8010 	ldrh.w	r8, [r4, #16]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    4930:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    4934:	4605      	mov	r5, r0
    4936:	d80c      	bhi.n	4952 <hci_event_prio+0x36>
    4938:	4a1c      	ldr	r2, [pc, #112]	; (49ac <hci_event_prio+0x90>)
    493a:	491d      	ldr	r1, [pc, #116]	; (49b0 <hci_event_prio+0x94>)
    493c:	481d      	ldr	r0, [pc, #116]	; (49b4 <hci_event_prio+0x98>)
    493e:	f640 637d 	movw	r3, #3709	; 0xe7d
    4942:	f014 fe7c 	bl	1963e <assert_print>
    4946:	4040      	eors	r0, r0
    4948:	f380 8811 	msr	BASEPRI, r0
    494c:	f04f 0003 	mov.w	r0, #3
    4950:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4952:	4630      	mov	r0, r6
    4954:	2102      	movs	r1, #2
    4956:	f017 f905 	bl	1bb64 <net_buf_simple_pull_mem>
    495a:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    495c:	7800      	ldrb	r0, [r0, #0]
    495e:	f015 f9e0 	bl	19d22 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4962:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4964:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    4966:	d40c      	bmi.n	4982 <hci_event_prio+0x66>
    4968:	4a10      	ldr	r2, [pc, #64]	; (49ac <hci_event_prio+0x90>)
    496a:	4913      	ldr	r1, [pc, #76]	; (49b8 <hci_event_prio+0x9c>)
    496c:	4811      	ldr	r0, [pc, #68]	; (49b4 <hci_event_prio+0x98>)
    496e:	f640 6381 	movw	r3, #3713	; 0xe81
    4972:	f014 fe64 	bl	1963e <assert_print>
    4976:	4040      	eors	r0, r0
    4978:	f380 8811 	msr	BASEPRI, r0
    497c:	f04f 0003 	mov.w	r0, #3
    4980:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    4982:	2305      	movs	r3, #5
    4984:	4a0d      	ldr	r2, [pc, #52]	; (49bc <hci_event_prio+0xa0>)
    4986:	7838      	ldrb	r0, [r7, #0]
    4988:	4621      	mov	r1, r4
    498a:	f015 fa3a 	bl	19e02 <handle_event_common.isra.0>

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    498e:	07b3      	lsls	r3, r6, #30
    4990:	d507      	bpl.n	49a2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    4992:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    4994:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
    4998:	fa13 f585 	uxtah	r5, r3, r5
    499c:	60e5      	str	r5, [r4, #12]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    49a2:	4620      	mov	r0, r4
}
    49a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    49a8:	f010 b826 	b.w	149f8 <net_buf_unref>
    49ac:	0001f89e 	.word	0x0001f89e
    49b0:	0001f924 	.word	0x0001f924
    49b4:	0001f8db 	.word	0x0001f8db
    49b8:	0001f93d 	.word	0x0001f93d
    49bc:	0001de68 	.word	0x0001de68

000049c0 <bt_recv>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_recv(struct net_buf *buf)
{
    49c0:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    49c2:	7e03      	ldrb	r3, [r0, #24]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	LOG_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    49c4:	2b01      	cmp	r3, #1
{
    49c6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    49c8:	d037      	beq.n	4a3a <bt_recv+0x7a>
    49ca:	2b03      	cmp	r3, #3
    49cc:	d164      	bne.n	4a98 <bt_recv+0xd8>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    49ce:	8a03      	ldrh	r3, [r0, #16]
    49d0:	2b03      	cmp	r3, #3
    49d2:	d80c      	bhi.n	49ee <bt_recv+0x2e>
    49d4:	4a33      	ldr	r2, [pc, #204]	; (4aa4 <bt_recv+0xe4>)
    49d6:	4934      	ldr	r1, [pc, #208]	; (4aa8 <bt_recv+0xe8>)
    49d8:	4834      	ldr	r0, [pc, #208]	; (4aac <bt_recv+0xec>)
    49da:	f240 13f9 	movw	r3, #505	; 0x1f9
    49de:	f014 fe2e 	bl	1963e <assert_print>
    49e2:	4040      	eors	r0, r0
    49e4:	f380 8811 	msr	BASEPRI, r0
    49e8:	f04f 0003 	mov.w	r0, #3
    49ec:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    49ee:	2104      	movs	r1, #4
    49f0:	f104 000c 	add.w	r0, r4, #12
    49f4:	f017 f8b6 	bl	1bb64 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    49f8:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    49fa:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    49fc:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    49fe:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
    4a00:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
    4a02:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    4a06:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    4a08:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
    4a0a:	d003      	beq.n	4a14 <bt_recv+0x54>
	net_buf_unref(buf);
    4a0c:	4620      	mov	r0, r4
    4a0e:	f00f fff3 	bl	149f8 <net_buf_unref>
}
    4a12:	e010      	b.n	4a36 <bt_recv+0x76>
	conn = bt_conn_lookup_handle(acl(buf)->handle, BT_CONN_TYPE_ALL);
    4a14:	210f      	movs	r1, #15
    4a16:	f001 f9df 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
    4a1a:	4605      	mov	r5, r0
    4a1c:	2800      	cmp	r0, #0
    4a1e:	d0f5      	beq.n	4a0c <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    4a20:	f001 f9ee 	bl	5e00 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    4a24:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    4a26:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
    4a28:	4621      	mov	r1, r4
    4a2a:	4628      	mov	r0, r5
    4a2c:	f015 fdc7 	bl	1a5be <bt_conn_recv>
	bt_conn_unref(conn);
    4a30:	4628      	mov	r0, r5
    4a32:	f015 fe2d 	bl	1a690 <bt_conn_unref>
#if defined(CONFIG_BT_RECV_BLOCKING)
		hci_acl(buf);
#else
		rx_queue_put(buf);
#endif
		return 0;
    4a36:	2000      	movs	r0, #0
	default:
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    4a38:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4a3a:	8a03      	ldrh	r3, [r0, #16]
    4a3c:	2b01      	cmp	r3, #1
    4a3e:	d80c      	bhi.n	4a5a <bt_recv+0x9a>
    4a40:	4a18      	ldr	r2, [pc, #96]	; (4aa4 <bt_recv+0xe4>)
    4a42:	4919      	ldr	r1, [pc, #100]	; (4aa8 <bt_recv+0xe8>)
    4a44:	4819      	ldr	r0, [pc, #100]	; (4aac <bt_recv+0xec>)
    4a46:	f640 2355 	movw	r3, #2645	; 0xa55
    4a4a:	f014 fdf8 	bl	1963e <assert_print>
    4a4e:	4040      	eors	r0, r0
    4a50:	f380 8811 	msr	BASEPRI, r0
    4a54:	f04f 0003 	mov.w	r0, #3
    4a58:	df02      	svc	2
    4a5a:	2102      	movs	r1, #2
    4a5c:	f104 000c 	add.w	r0, r4, #12
    4a60:	f017 f880 	bl	1bb64 <net_buf_simple_pull_mem>
    4a64:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    4a66:	7800      	ldrb	r0, [r0, #0]
    4a68:	f015 f95b 	bl	19d22 <bt_hci_evt_get_flags>
    4a6c:	0783      	lsls	r3, r0, #30
    4a6e:	d40c      	bmi.n	4a8a <bt_recv+0xca>
    4a70:	4a0c      	ldr	r2, [pc, #48]	; (4aa4 <bt_recv+0xe4>)
    4a72:	490f      	ldr	r1, [pc, #60]	; (4ab0 <bt_recv+0xf0>)
    4a74:	480d      	ldr	r0, [pc, #52]	; (4aac <bt_recv+0xec>)
    4a76:	f640 2359 	movw	r3, #2649	; 0xa59
    4a7a:	f014 fde0 	bl	1963e <assert_print>
    4a7e:	4040      	eors	r0, r0
    4a80:	f380 8811 	msr	BASEPRI, r0
    4a84:	f04f 0003 	mov.w	r0, #3
    4a88:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    4a8a:	4a0a      	ldr	r2, [pc, #40]	; (4ab4 <bt_recv+0xf4>)
    4a8c:	7828      	ldrb	r0, [r5, #0]
    4a8e:	2304      	movs	r3, #4
    4a90:	4621      	mov	r1, r4
    4a92:	f015 f9b6 	bl	19e02 <handle_event_common.isra.0>
    4a96:	e7b9      	b.n	4a0c <bt_recv+0x4c>
		net_buf_unref(buf);
    4a98:	f00f ffae 	bl	149f8 <net_buf_unref>
		return -EINVAL;
    4a9c:	f06f 0015 	mvn.w	r0, #21
    4aa0:	e7ca      	b.n	4a38 <bt_recv+0x78>
    4aa2:	bf00      	nop
    4aa4:	0001f89e 	.word	0x0001f89e
    4aa8:	0001f924 	.word	0x0001f924
    4aac:	0001f8db 	.word	0x0001f8db
    4ab0:	0001f956 	.word	0x0001f956
    4ab4:	0001de90 	.word	0x0001de90

00004ab8 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    4ab8:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4aba:	7e03      	ldrb	r3, [r0, #24]
    4abc:	2b01      	cmp	r3, #1
{
    4abe:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4ac0:	d00c      	beq.n	4adc <bt_recv_prio+0x24>
    4ac2:	4a09      	ldr	r2, [pc, #36]	; (4ae8 <bt_recv_prio+0x30>)
    4ac4:	4909      	ldr	r1, [pc, #36]	; (4aec <bt_recv_prio+0x34>)
    4ac6:	480a      	ldr	r0, [pc, #40]	; (4af0 <bt_recv_prio+0x38>)
    4ac8:	f640 63d3 	movw	r3, #3795	; 0xed3
    4acc:	f014 fdb7 	bl	1963e <assert_print>
    4ad0:	4040      	eors	r0, r0
    4ad2:	f380 8811 	msr	BASEPRI, r0
    4ad6:	f04f 0003 	mov.w	r0, #3
    4ada:	df02      	svc	2

	hci_event_prio(buf);
    4adc:	4620      	mov	r0, r4
    4ade:	f7ff ff1d 	bl	491c <hci_event_prio>

	return 0;
}
    4ae2:	2000      	movs	r0, #0
    4ae4:	bd10      	pop	{r4, pc}
    4ae6:	bf00      	nop
    4ae8:	0001f89e 	.word	0x0001f89e
    4aec:	0001f984 	.word	0x0001f984
    4af0:	0001f8db 	.word	0x0001f8db

00004af4 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    4af4:	4a08      	ldr	r2, [pc, #32]	; (4b18 <bt_hci_driver_register+0x24>)
{
    4af6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    4af8:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    4afc:	b930      	cbnz	r0, 4b0c <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    4afe:	68d9      	ldr	r1, [r3, #12]
    4b00:	b139      	cbz	r1, 4b12 <bt_hci_driver_register+0x1e>
    4b02:	6959      	ldr	r1, [r3, #20]
    4b04:	b129      	cbz	r1, 4b12 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    4b06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	LOG_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    4b0a:	4770      	bx	lr
		return -EALREADY;
    4b0c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4b10:	4770      	bx	lr
		return -EINVAL;
    4b12:	f06f 0015 	mvn.w	r0, #21
}
    4b16:	4770      	bx	lr
    4b18:	20000008 	.word	0x20000008

00004b1c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4b1c:	4801      	ldr	r0, [pc, #4]	; (4b24 <bt_finalize_init+0x8>)
    4b1e:	2104      	movs	r1, #4
    4b20:	f015 b941 	b.w	19da6 <atomic_or>
    4b24:	200000dc 	.word	0x200000dc

00004b28 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    4b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    4b2a:	4db0      	ldr	r5, [pc, #704]	; (4dec <bt_init+0x2c4>)
    4b2c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    4b30:	6899      	ldr	r1, [r3, #8]
    4b32:	f011 0101 	ands.w	r1, r1, #1
    4b36:	d121      	bne.n	4b7c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4b38:	aa01      	add	r2, sp, #4
    4b3a:	f640 4003 	movw	r0, #3075	; 0xc03
    4b3e:	f7ff fc67 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4b42:	4604      	mov	r4, r0
    4b44:	2800      	cmp	r0, #0
    4b46:	d161      	bne.n	4c0c <bt_init+0xe4>
		hci_reset_complete(rsp);
    4b48:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    4b4a:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    4b4c:	781b      	ldrb	r3, [r3, #0]
    4b4e:	b99b      	cbnz	r3, 4b78 <bt_init+0x50>
    4b50:	f3bf 8f5b 	dmb	ish
    4b54:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    4b58:	f3bf 8f5b 	dmb	ish
    4b5c:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4b60:	f003 0309 	and.w	r3, r3, #9
    4b64:	f3bf 8f5b 	dmb	ish
    4b68:	e852 1f00 	ldrex	r1, [r2]
    4b6c:	e842 3400 	strex	r4, r3, [r2]
    4b70:	2c00      	cmp	r4, #0
    4b72:	d1f9      	bne.n	4b68 <bt_init+0x40>
    4b74:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    4b78:	f00f ff3e 	bl	149f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4b7c:	aa01      	add	r2, sp, #4
    4b7e:	2100      	movs	r1, #0
    4b80:	f241 0003 	movw	r0, #4099	; 0x1003
    4b84:	f7ff fc44 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4b88:	4604      	mov	r4, r0
    4b8a:	2800      	cmp	r0, #0
    4b8c:	d13e      	bne.n	4c0c <bt_init+0xe4>
	read_local_features_complete(rsp);
    4b8e:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4b90:	4897      	ldr	r0, [pc, #604]	; (4df0 <bt_init+0x2c8>)
    4b92:	68f1      	ldr	r1, [r6, #12]
    4b94:	2208      	movs	r2, #8
    4b96:	3101      	adds	r1, #1
    4b98:	f015 f82c 	bl	19bf4 <memcpy>
	net_buf_unref(rsp);
    4b9c:	4630      	mov	r0, r6
    4b9e:	f00f ff2b 	bl	149f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4ba2:	4621      	mov	r1, r4
    4ba4:	aa01      	add	r2, sp, #4
    4ba6:	f241 0001 	movw	r0, #4097	; 0x1001
    4baa:	f7ff fc31 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4bae:	4604      	mov	r4, r0
    4bb0:	bb60      	cbnz	r0, 4c0c <bt_init+0xe4>
	read_local_ver_complete(rsp);
    4bb2:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4bb4:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    4bb6:	785a      	ldrb	r2, [r3, #1]
    4bb8:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4bbc:	885a      	ldrh	r2, [r3, #2]
    4bbe:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    4bc2:	791a      	ldrb	r2, [r3, #4]
    4bc4:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4bc8:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    4bcc:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4bd0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    4bd4:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    4bd8:	f00f ff0e 	bl	149f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4bdc:	4621      	mov	r1, r4
    4bde:	aa01      	add	r2, sp, #4
    4be0:	f241 0002 	movw	r0, #4098	; 0x1002
    4be4:	f7ff fc14 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4be8:	4604      	mov	r4, r0
    4bea:	b978      	cbnz	r0, 4c0c <bt_init+0xe4>
	read_supported_commands_complete(rsp);
    4bec:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    4bee:	4881      	ldr	r0, [pc, #516]	; (4df4 <bt_init+0x2cc>)
    4bf0:	68f1      	ldr	r1, [r6, #12]
    4bf2:	2240      	movs	r2, #64	; 0x40
    4bf4:	3101      	adds	r1, #1
    4bf6:	f014 fffd 	bl	19bf4 <memcpy>
	net_buf_unref(rsp);
    4bfa:	4630      	mov	r0, r6
    4bfc:	f00f fefc 	bl	149f8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    4c00:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    4c04:	065e      	lsls	r6, r3, #25
    4c06:	d404      	bmi.n	4c12 <bt_init+0xea>
		return -ENODEV;
    4c08:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    4c0c:	4620      	mov	r0, r4
    4c0e:	b003      	add	sp, #12
    4c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4c12:	4621      	mov	r1, r4
    4c14:	aa01      	add	r2, sp, #4
    4c16:	f242 0003 	movw	r0, #8195	; 0x2003
    4c1a:	f7ff fbf9 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4c1e:	4604      	mov	r4, r0
    4c20:	2800      	cmp	r0, #0
    4c22:	d1f3      	bne.n	4c0c <bt_init+0xe4>
	read_le_features_complete(rsp);
    4c24:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4c26:	4874      	ldr	r0, [pc, #464]	; (4df8 <bt_init+0x2d0>)
    4c28:	68f1      	ldr	r1, [r6, #12]
    4c2a:	2208      	movs	r2, #8
    4c2c:	3101      	adds	r1, #1
    4c2e:	f014 ffe1 	bl	19bf4 <memcpy>
	net_buf_unref(rsp);
    4c32:	4630      	mov	r0, r6
    4c34:	f00f fee0 	bl	149f8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4c38:	4621      	mov	r1, r4
    4c3a:	aa01      	add	r2, sp, #4
    4c3c:	f242 0002 	movw	r0, #8194	; 0x2002
    4c40:	f7ff fbe6 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4c44:	4604      	mov	r4, r0
    4c46:	2800      	cmp	r0, #0
    4c48:	d1e0      	bne.n	4c0c <bt_init+0xe4>
		le_read_buffer_size_complete(rsp);
    4c4a:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    4c4c:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    4c4e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4c52:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
    4c54:	b141      	cbz	r1, 4c68 <bt_init+0x140>
    4c56:	78d9      	ldrb	r1, [r3, #3]
    4c58:	b131      	cbz	r1, 4c68 <bt_init+0x140>
	bt_dev.le.acl_mtu = acl_mtu;
    4c5a:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    4c5e:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    4c60:	4866      	ldr	r0, [pc, #408]	; (4dfc <bt_init+0x2d4>)
    4c62:	4611      	mov	r1, r2
    4c64:	f018 fa0d 	bl	1d082 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    4c68:	4620      	mov	r0, r4
    4c6a:	f00f fec5 	bl	149f8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4c6e:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
    4c72:	f016 0620 	ands.w	r6, r6, #32
    4c76:	d118      	bne.n	4caa <bt_init+0x182>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4c78:	2102      	movs	r1, #2
    4c7a:	f640 406d 	movw	r0, #3181	; 0xc6d
    4c7e:	f7ff fb8d 	bl	439c <bt_hci_cmd_create>
		if (!buf) {
    4c82:	4604      	mov	r4, r0
    4c84:	2800      	cmp	r0, #0
    4c86:	f000 80a9 	beq.w	4ddc <bt_init+0x2b4>
	return net_buf_simple_add(&buf->b, len);
    4c8a:	2102      	movs	r1, #2
    4c8c:	300c      	adds	r0, #12
    4c8e:	f016 ff42 	bl	1bb16 <net_buf_simple_add>
		cp_le->le = 0x01;
    4c92:	2301      	movs	r3, #1
    4c94:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    4c96:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4c98:	4621      	mov	r1, r4
    4c9a:	4632      	mov	r2, r6
    4c9c:	f640 406d 	movw	r0, #3181	; 0xc6d
    4ca0:	f7ff fbb6 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4ca4:	4604      	mov	r4, r0
    4ca6:	2800      	cmp	r0, #0
    4ca8:	d1b0      	bne.n	4c0c <bt_init+0xe4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4caa:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    4cae:	071c      	lsls	r4, r3, #28
    4cb0:	d512      	bpl.n	4cd8 <bt_init+0x1b0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4cb2:	aa01      	add	r2, sp, #4
    4cb4:	2100      	movs	r1, #0
    4cb6:	f242 001c 	movw	r0, #8220	; 0x201c
    4cba:	f7ff fba9 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4cbe:	4604      	mov	r4, r0
    4cc0:	2800      	cmp	r0, #0
    4cc2:	d1a3      	bne.n	4c0c <bt_init+0xe4>
		le_read_supp_states_complete(rsp);
    4cc4:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4cc6:	68c3      	ldr	r3, [r0, #12]
    4cc8:	f8d3 2001 	ldr.w	r2, [r3, #1]
    4ccc:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    4cd0:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    4cd4:	f00f fe90 	bl	149f8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4cd8:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
    4cdc:	0698      	lsls	r0, r3, #26
    4cde:	d523      	bpl.n	4d28 <bt_init+0x200>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    4ce0:	f10d 0102 	add.w	r1, sp, #2
    4ce4:	4668      	mov	r0, sp
    4ce6:	f015 f978 	bl	19fda <hci_le_read_max_data_len>
		if (err) {
    4cea:	4604      	mov	r4, r0
    4cec:	2800      	cmp	r0, #0
    4cee:	d18d      	bne.n	4c0c <bt_init+0xe4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4cf0:	2104      	movs	r1, #4
    4cf2:	f242 0024 	movw	r0, #8228	; 0x2024
    4cf6:	f7ff fb51 	bl	439c <bt_hci_cmd_create>
		if (!buf) {
    4cfa:	4606      	mov	r6, r0
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d06d      	beq.n	4ddc <bt_init+0x2b4>
    4d00:	2104      	movs	r1, #4
    4d02:	300c      	adds	r0, #12
    4d04:	f016 ff07 	bl	1bb16 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4d08:	f8bd 3000 	ldrh.w	r3, [sp]
    4d0c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4d0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4d12:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4d14:	4622      	mov	r2, r4
    4d16:	4631      	mov	r1, r6
    4d18:	f242 0024 	movw	r0, #8228	; 0x2024
    4d1c:	f7ff fb78 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4d20:	4604      	mov	r4, r0
    4d22:	2800      	cmp	r0, #0
    4d24:	f47f af72 	bne.w	4c0c <bt_init+0xe4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4d28:	2108      	movs	r1, #8
    4d2a:	f242 0001 	movw	r0, #8193	; 0x2001
    4d2e:	f7ff fb35 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
    4d32:	4604      	mov	r4, r0
    4d34:	2800      	cmp	r0, #0
    4d36:	d051      	beq.n	4ddc <bt_init+0x2b4>
    4d38:	2108      	movs	r1, #8
    4d3a:	300c      	adds	r0, #12
    4d3c:	f016 feeb 	bl	1bb16 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4d40:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4d44:	f012 0f02 	tst.w	r2, #2
    4d48:	bf14      	ite	ne
    4d4a:	232f      	movne	r3, #47	; 0x2f
    4d4c:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    4d4e:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    4d50:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4d54:	bf48      	it	mi
    4d56:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    4d5a:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4d5e:	bf18      	it	ne
    4d60:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    4d64:	2200      	movs	r2, #0
    4d66:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4d68:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4d6c:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    4d6e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4d70:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4d72:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4d74:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4d76:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4d78:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4d7a:	4621      	mov	r1, r4
    4d7c:	f242 0001 	movw	r0, #8193	; 0x2001
    4d80:	f7ff fb46 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4d84:	4604      	mov	r4, r0
    4d86:	2800      	cmp	r0, #0
    4d88:	f47f af40 	bne.w	4c0c <bt_init+0xe4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4d8c:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
    4d90:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4d94:	069a      	lsls	r2, r3, #26
    4d96:	d424      	bmi.n	4de2 <bt_init+0x2ba>
	if (bt_dev.le.acl_mtu) {
    4d98:	b9c9      	cbnz	r1, 4dce <bt_init+0x2a6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4d9a:	aa01      	add	r2, sp, #4
    4d9c:	f241 0005 	movw	r0, #4101	; 0x1005
    4da0:	f7ff fb36 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4da4:	4604      	mov	r4, r0
    4da6:	2800      	cmp	r0, #0
    4da8:	f47f af30 	bne.w	4c0c <bt_init+0xe4>
	if (bt_dev.le.acl_mtu) {
    4dac:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
    4db0:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
    4db2:	b94b      	cbnz	r3, 4dc8 <bt_init+0x2a0>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    4db4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    4db6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4dba:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    4dbe:	889a      	ldrh	r2, [r3, #4]
    4dc0:	480e      	ldr	r0, [pc, #56]	; (4dfc <bt_init+0x2d4>)
    4dc2:	4611      	mov	r1, r2
    4dc4:	f018 f95d 	bl	1d082 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    4dc8:	4620      	mov	r0, r4
    4dca:	f00f fe15 	bl	149f8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4dce:	2108      	movs	r1, #8
    4dd0:	f640 4001 	movw	r0, #3073	; 0xc01
    4dd4:	f7ff fae2 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
    4dd8:	4604      	mov	r4, r0
    4dda:	b988      	cbnz	r0, 4e00 <bt_init+0x2d8>
		return -ENOBUFS;
    4ddc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4de0:	e714      	b.n	4c0c <bt_init+0xe4>
	else if (!bt_dev.le.acl_mtu) {
    4de2:	2900      	cmp	r1, #0
    4de4:	d1f3      	bne.n	4dce <bt_init+0x2a6>
		return -EIO;
    4de6:	f06f 0404 	mvn.w	r4, #4
    4dea:	e70f      	b.n	4c0c <bt_init+0xe4>
    4dec:	20000008 	.word	0x20000008
    4df0:	20000080 	.word	0x20000080
    4df4:	20000088 	.word	0x20000088
    4df8:	200000e0 	.word	0x200000e0
    4dfc:	20000110 	.word	0x20000110
    4e00:	2108      	movs	r1, #8
    4e02:	300c      	adds	r0, #12
    4e04:	f016 fe87 	bl	1bb16 <net_buf_simple_add>
	dst[0] = val;
    4e08:	2310      	movs	r3, #16
    4e0a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4e0c:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    4e0e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    4e10:	7043      	strb	r3, [r0, #1]
    4e12:	2602      	movs	r6, #2
    4e14:	2320      	movs	r3, #32
	dst[0] = val;
    4e16:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4e18:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    4e1a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4e1c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4e1e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4e20:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4e22:	4621      	mov	r1, r4
    4e24:	f640 4001 	movw	r0, #3073	; 0xc01
    4e28:	f7ff faf2 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4e2c:	4604      	mov	r4, r0
    4e2e:	2800      	cmp	r0, #0
    4e30:	f47f aeec 	bne.w	4c0c <bt_init+0xe4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    4e34:	4601      	mov	r1, r0
    4e36:	aa01      	add	r2, sp, #4
    4e38:	f64f 4001 	movw	r0, #64513	; 0xfc01
    4e3c:	f7ff fae8 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4e40:	4604      	mov	r4, r0
    4e42:	bb48      	cbnz	r0, 4e98 <bt_init+0x370>
	net_buf_unref(rsp);
    4e44:	9801      	ldr	r0, [sp, #4]
    4e46:	f00f fdd7 	bl	149f8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    4e4a:	4621      	mov	r1, r4
    4e4c:	aa01      	add	r2, sp, #4
    4e4e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    4e52:	f7ff fadd 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    4e56:	4604      	mov	r4, r0
    4e58:	b9f0      	cbnz	r0, 4e98 <bt_init+0x370>
	rp.cmds = (void *)rsp->data;
    4e5a:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    4e5c:	4816      	ldr	r0, [pc, #88]	; (4eb8 <bt_init+0x390>)
    4e5e:	68f9      	ldr	r1, [r7, #12]
    4e60:	4632      	mov	r2, r6
    4e62:	3101      	adds	r1, #1
    4e64:	f014 fec6 	bl	19bf4 <memcpy>
	net_buf_unref(rsp);
    4e68:	4638      	mov	r0, r7
    4e6a:	f00f fdc5 	bl	149f8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    4e6e:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    4e72:	075b      	lsls	r3, r3, #29
    4e74:	d510      	bpl.n	4e98 <bt_init+0x370>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    4e76:	aa01      	add	r2, sp, #4
    4e78:	4621      	mov	r1, r4
    4e7a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    4e7e:	f7ff fac7 	bl	4410 <bt_hci_cmd_send_sync>
		if (err) {
    4e82:	b948      	cbnz	r0, 4e98 <bt_init+0x370>
		rp.feat = (void *)rsp->data;
    4e84:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    4e86:	480d      	ldr	r0, [pc, #52]	; (4ebc <bt_init+0x394>)
    4e88:	68e1      	ldr	r1, [r4, #12]
    4e8a:	2201      	movs	r2, #1
    4e8c:	4411      	add	r1, r2
    4e8e:	f014 feb1 	bl	19bf4 <memcpy>
		net_buf_unref(rsp);
    4e92:	4620      	mov	r0, r4
    4e94:	f00f fdb0 	bl	149f8 <net_buf_unref>
	err = bt_id_init();
    4e98:	f000 fa46 	bl	5328 <bt_id_init>
	if (err) {
    4e9c:	4604      	mov	r4, r0
    4e9e:	2800      	cmp	r0, #0
    4ea0:	f47f aeb4 	bne.w	4c0c <bt_init+0xe4>
		err = bt_conn_init();
    4ea4:	f001 f9ec 	bl	6280 <bt_conn_init>
		if (err) {
    4ea8:	4604      	mov	r4, r0
    4eaa:	2800      	cmp	r0, #0
    4eac:	f47f aeae 	bne.w	4c0c <bt_init+0xe4>
	bt_finalize_init();
    4eb0:	f7ff fe34 	bl	4b1c <bt_finalize_init>
	return 0;
    4eb4:	e6aa      	b.n	4c0c <bt_init+0xe4>
    4eb6:	bf00      	nop
    4eb8:	200000c9 	.word	0x200000c9
    4ebc:	200000c8 	.word	0x200000c8

00004ec0 <init_work>:

static void init_work(struct k_work *work)
{
    4ec0:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    4ec2:	f7ff fe31 	bl	4b28 <bt_init>
	if (ready_cb) {
    4ec6:	4b03      	ldr	r3, [pc, #12]	; (4ed4 <init_work+0x14>)
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	b113      	cbz	r3, 4ed2 <init_work+0x12>
		ready_cb(err);
	}
}
    4ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    4ed0:	4718      	bx	r3
}
    4ed2:	bd10      	pop	{r4, pc}
    4ed4:	2000122c 	.word	0x2000122c

00004ed8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    4ed8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    4eda:	4d26      	ldr	r5, [pc, #152]	; (4f74 <bt_enable+0x9c>)
    4edc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    4ee0:	b088      	sub	sp, #32
    4ee2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d03f      	beq.n	4f68 <bt_enable+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4ee8:	f06f 0102 	mvn.w	r1, #2
    4eec:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    4ef0:	f014 ff9e 	bl	19e30 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4ef4:	2101      	movs	r1, #1
    4ef6:	f014 ff56 	bl	19da6 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4efa:	ea10 0401 	ands.w	r4, r0, r1
    4efe:	d136      	bne.n	4f6e <bt_enable+0x96>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    4f00:	4b1d      	ldr	r3, [pc, #116]	; (4f78 <bt_enable+0xa0>)
    4f02:	601e      	str	r6, [r3, #0]
    4f04:	460a      	mov	r2, r1
    4f06:	f505 7090 	add.w	r0, r5, #288	; 0x120
    4f0a:	f018 f8ba 	bl	1d082 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    4f0e:	f505 709e 	add.w	r0, r5, #316	; 0x13c
    4f12:	f018 f871 	bl	1cff8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4f16:	2200      	movs	r2, #0
    4f18:	2300      	movs	r3, #0
    4f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4f1e:	f06f 0308 	mvn.w	r3, #8
    4f22:	e9cd 4302 	strd	r4, r3, [sp, #8]
    4f26:	e9cd 4400 	strd	r4, r4, [sp]
    4f2a:	4b14      	ldr	r3, [pc, #80]	; (4f7c <bt_enable+0xa4>)
    4f2c:	4914      	ldr	r1, [pc, #80]	; (4f80 <bt_enable+0xa8>)
    4f2e:	9404      	str	r4, [sp, #16]
    4f30:	f44f 7240 	mov.w	r2, #768	; 0x300
    4f34:	4813      	ldr	r0, [pc, #76]	; (4f84 <bt_enable+0xac>)
    4f36:	f012 fde1 	bl	17afc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    4f3a:	4913      	ldr	r1, [pc, #76]	; (4f88 <bt_enable+0xb0>)
    4f3c:	4811      	ldr	r0, [pc, #68]	; (4f84 <bt_enable+0xac>)
    4f3e:	f017 ffce 	bl	1cede <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    4f42:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    4f46:	68db      	ldr	r3, [r3, #12]
    4f48:	4798      	blx	r3
	if (err) {
    4f4a:	4604      	mov	r4, r0
    4f4c:	b948      	cbnz	r0, 4f62 <bt_enable+0x8a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    4f4e:	b926      	cbnz	r6, 4f5a <bt_enable+0x82>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4f50:	b008      	add	sp, #32
    4f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    4f56:	f7ff bde7 	b.w	4b28 <bt_init>
	k_work_submit(&bt_dev.init);
    4f5a:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    4f5e:	f013 f8f9 	bl	18154 <k_work_submit>
}
    4f62:	4620      	mov	r0, r4
    4f64:	b008      	add	sp, #32
    4f66:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    4f68:	f06f 0412 	mvn.w	r4, #18
    4f6c:	e7f9      	b.n	4f62 <bt_enable+0x8a>
		return -EALREADY;
    4f6e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4f72:	e7f6      	b.n	4f62 <bt_enable+0x8a>
    4f74:	20000008 	.word	0x20000008
    4f78:	2000122c 	.word	0x2000122c
    4f7c:	00004801 	.word	0x00004801
    4f80:	20003100 	.word	0x20003100
    4f84:	20000b00 	.word	0x20000b00
    4f88:	0001f9a7 	.word	0x0001f9a7

00004f8c <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4f8c:	4b04      	ldr	r3, [pc, #16]	; (4fa0 <bt_is_ready+0x14>)
    4f8e:	f3bf 8f5b 	dmb	ish
    4f92:	6818      	ldr	r0, [r3, #0]
    4f94:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    4f98:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4f9c:	4770      	bx	lr
    4f9e:	bf00      	nop
    4fa0:	200000dc 	.word	0x200000dc

00004fa4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    4fa4:	4800      	ldr	r0, [pc, #0]	; (4fa8 <bt_get_name+0x4>)
    4fa6:	4770      	bx	lr
    4fa8:	0001f9ad 	.word	0x0001f9ad

00004fac <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    4fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    4fae:	4f0a      	ldr	r7, [pc, #40]	; (4fd8 <id_find+0x2c>)
{
    4fb0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    4fb2:	2500      	movs	r5, #0
    4fb4:	79fb      	ldrb	r3, [r7, #7]
    4fb6:	b2ec      	uxtb	r4, r5
    4fb8:	42a3      	cmp	r3, r4
    4fba:	d802      	bhi.n	4fc2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    4fbc:	f06f 0001 	mvn.w	r0, #1
    4fc0:	e009      	b.n	4fd6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    4fc2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    4fc6:	4439      	add	r1, r7
    4fc8:	4630      	mov	r0, r6
    4fca:	f015 f94e 	bl	1a26a <bt_addr_le_eq>
    4fce:	3501      	adds	r5, #1
    4fd0:	2800      	cmp	r0, #0
    4fd2:	d0ef      	beq.n	4fb4 <id_find+0x8>
    4fd4:	4620      	mov	r0, r4
}
    4fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fd8:	20000008 	.word	0x20000008

00004fdc <set_random_address>:
{
    4fdc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    4fde:	4913      	ldr	r1, [pc, #76]	; (502c <set_random_address+0x50>)
    4fe0:	2206      	movs	r2, #6
    4fe2:	4605      	mov	r5, r0
    4fe4:	f014 fdf6 	bl	19bd4 <memcmp>
	if (bt_addr_eq(addr, &bt_dev.random_addr.a)) {
    4fe8:	b1d8      	cbz	r0, 5022 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    4fea:	2106      	movs	r1, #6
    4fec:	f242 0005 	movw	r0, #8197	; 0x2005
    4ff0:	f7ff f9d4 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
    4ff4:	4604      	mov	r4, r0
    4ff6:	b1b0      	cbz	r0, 5026 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    4ff8:	2206      	movs	r2, #6
    4ffa:	4629      	mov	r1, r5
    4ffc:	300c      	adds	r0, #12
    4ffe:	f016 fd90 	bl	1bb22 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5002:	2200      	movs	r2, #0
    5004:	4621      	mov	r1, r4
    5006:	f242 0005 	movw	r0, #8197	; 0x2005
    500a:	f7ff fa01 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    500e:	b948      	cbnz	r0, 5024 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    5010:	2206      	movs	r2, #6
    5012:	4806      	ldr	r0, [pc, #24]	; (502c <set_random_address+0x50>)
    5014:	4629      	mov	r1, r5
    5016:	f014 fded 	bl	19bf4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    501a:	4b05      	ldr	r3, [pc, #20]	; (5030 <set_random_address+0x54>)
    501c:	2201      	movs	r2, #1
    501e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    5022:	2000      	movs	r0, #0
}
    5024:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5026:	f06f 0068 	mvn.w	r0, #104	; 0x68
    502a:	e7fb      	b.n	5024 <set_random_address+0x48>
    502c:	20000071 	.word	0x20000071
    5030:	20000008 	.word	0x20000008

00005034 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    5034:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5036:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    5038:	460d      	mov	r5, r1
    503a:	b179      	cbz	r1, 505c <id_create.constprop.0+0x28>
    503c:	4914      	ldr	r1, [pc, #80]	; (5090 <id_create.constprop.0+0x5c>)
    503e:	4628      	mov	r0, r5
    5040:	f015 f913 	bl	1a26a <bt_addr_le_eq>
    5044:	b950      	cbnz	r0, 505c <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    5046:	4813      	ldr	r0, [pc, #76]	; (5094 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5048:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    504c:	2207      	movs	r2, #7
    504e:	4629      	mov	r1, r5
    5050:	4420      	add	r0, r4
    5052:	f014 fdcf 	bl	19bf4 <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		(void)bt_settings_store_id();
		(void)bt_settings_store_irk();
	}

	return 0;
    5056:	2000      	movs	r0, #0
}
    5058:	b003      	add	sp, #12
    505a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    505c:	4668      	mov	r0, sp
    505e:	f014 fe44 	bl	19cea <bt_addr_le_create_static>
			if (err) {
    5062:	2800      	cmp	r0, #0
    5064:	d1f8      	bne.n	5058 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    5066:	4668      	mov	r0, sp
    5068:	f7ff ffa0 	bl	4fac <id_find>
    506c:	2800      	cmp	r0, #0
    506e:	daf5      	bge.n	505c <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5070:	4b08      	ldr	r3, [pc, #32]	; (5094 <id_create.constprop.0+0x60>)
    5072:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5076:	441c      	add	r4, r3
    5078:	2207      	movs	r2, #7
    507a:	4669      	mov	r1, sp
    507c:	4620      	mov	r0, r4
    507e:	f014 fdb9 	bl	19bf4 <memcpy>
		if (addr) {
    5082:	2d00      	cmp	r5, #0
    5084:	d0e7      	beq.n	5056 <id_create.constprop.0+0x22>
    5086:	2207      	movs	r2, #7
    5088:	4621      	mov	r1, r4
    508a:	4628      	mov	r0, r5
    508c:	e7e1      	b.n	5052 <id_create.constprop.0+0x1e>
    508e:	bf00      	nop
    5090:	0001f869 	.word	0x0001f869
    5094:	20000008 	.word	0x20000008

00005098 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    5098:	b570      	push	{r4, r5, r6, lr}
    509a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    509c:	4604      	mov	r4, r0
    509e:	b918      	cbnz	r0, 50a8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    50a0:	b1bd      	cbz	r5, 50d2 <bt_id_create+0x3a>
			return -EINVAL;
    50a2:	f06f 0015 	mvn.w	r0, #21
		bt_dev.id_count--;
		return err;
	}

	return new_id;
}
    50a6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    50a8:	491d      	ldr	r1, [pc, #116]	; (5120 <bt_id_create+0x88>)
    50aa:	f015 f8de 	bl	1a26a <bt_addr_le_eq>
    50ae:	2800      	cmp	r0, #0
    50b0:	d1f6      	bne.n	50a0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    50b2:	7823      	ldrb	r3, [r4, #0]
    50b4:	2b01      	cmp	r3, #1
    50b6:	d1f4      	bne.n	50a2 <bt_id_create+0xa>
    50b8:	79a3      	ldrb	r3, [r4, #6]
    50ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    50be:	2bc0      	cmp	r3, #192	; 0xc0
    50c0:	d1ef      	bne.n	50a2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    50c2:	4620      	mov	r0, r4
    50c4:	f7ff ff72 	bl	4fac <id_find>
    50c8:	2800      	cmp	r0, #0
    50ca:	dbe9      	blt.n	50a0 <bt_id_create+0x8>
			return -EALREADY;
    50cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    50d0:	e7e9      	b.n	50a6 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    50d2:	4d14      	ldr	r5, [pc, #80]	; (5124 <bt_id_create+0x8c>)
    50d4:	79eb      	ldrb	r3, [r5, #7]
    50d6:	2b01      	cmp	r3, #1
    50d8:	d01e      	beq.n	5118 <bt_id_create+0x80>
    50da:	f3bf 8f5b 	dmb	ish
    50de:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    50e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    50e6:	07db      	lsls	r3, r3, #31
    50e8:	d50b      	bpl.n	5102 <bt_id_create+0x6a>
	new_id = bt_dev.id_count++;
    50ea:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    50ec:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
    50ee:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
    50f0:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
    50f2:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
    50f4:	f7ff ff9e 	bl	5034 <id_create.constprop.0>
	if (err) {
    50f8:	b160      	cbz	r0, 5114 <bt_id_create+0x7c>
		bt_dev.id_count--;
    50fa:	79eb      	ldrb	r3, [r5, #7]
    50fc:	3b01      	subs	r3, #1
    50fe:	71eb      	strb	r3, [r5, #7]
		return err;
    5100:	e7d1      	b.n	50a6 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    5102:	2c00      	cmp	r4, #0
    5104:	d0cd      	beq.n	50a2 <bt_id_create+0xa>
    5106:	4906      	ldr	r1, [pc, #24]	; (5120 <bt_id_create+0x88>)
    5108:	4620      	mov	r0, r4
    510a:	f015 f8ae 	bl	1a26a <bt_addr_le_eq>
    510e:	2800      	cmp	r0, #0
    5110:	d0eb      	beq.n	50ea <bt_id_create+0x52>
    5112:	e7c6      	b.n	50a2 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    5114:	4630      	mov	r0, r6
    5116:	e7c6      	b.n	50a6 <bt_id_create+0xe>
		return -ENOMEM;
    5118:	f06f 000b 	mvn.w	r0, #11
    511c:	e7c3      	b.n	50a6 <bt_id_create+0xe>
    511e:	bf00      	nop
    5120:	0001f869 	.word	0x0001f869
    5124:	20000008 	.word	0x20000008

00005128 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5128:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    512a:	4604      	mov	r4, r0
    512c:	b198      	cbz	r0, 5156 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    512e:	aa01      	add	r2, sp, #4
    5130:	2100      	movs	r1, #0
    5132:	f241 0009 	movw	r0, #4105	; 0x1009
    5136:	f7ff f96b 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    513a:	4606      	mov	r6, r0
    513c:	b958      	cbnz	r0, 5156 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    513e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    5140:	490f      	ldr	r1, [pc, #60]	; (5180 <bt_id_read_public_addr+0x58>)

	if (bt_addr_eq(&rp->bdaddr, BT_ADDR_ANY) ||
    5142:	68dd      	ldr	r5, [r3, #12]
    5144:	3501      	adds	r5, #1
    5146:	2206      	movs	r2, #6
    5148:	4628      	mov	r0, r5
    514a:	f014 fd43 	bl	19bd4 <memcmp>
    514e:	b928      	cbnz	r0, 515c <bt_id_read_public_addr+0x34>
	    bt_addr_eq(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
    5150:	9801      	ldr	r0, [sp, #4]
    5152:	f00f fc51 	bl	149f8 <net_buf_unref>
		return 0U;
    5156:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    5158:	b002      	add	sp, #8
    515a:	bd70      	pop	{r4, r5, r6, pc}
    515c:	4909      	ldr	r1, [pc, #36]	; (5184 <bt_id_read_public_addr+0x5c>)
    515e:	2206      	movs	r2, #6
    5160:	4628      	mov	r0, r5
    5162:	f014 fd37 	bl	19bd4 <memcmp>
	if (bt_addr_eq(&rp->bdaddr, BT_ADDR_ANY) ||
    5166:	2800      	cmp	r0, #0
    5168:	d0f2      	beq.n	5150 <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
    516a:	2206      	movs	r2, #6
    516c:	4629      	mov	r1, r5
    516e:	1c60      	adds	r0, r4, #1
    5170:	f014 fd40 	bl	19bf4 <memcpy>
	net_buf_unref(rsp);
    5174:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    5176:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    5178:	f00f fc3e 	bl	149f8 <net_buf_unref>
	return 1U;
    517c:	2001      	movs	r0, #1
    517e:	e7eb      	b.n	5158 <bt_id_read_public_addr+0x30>
    5180:	0001f876 	.word	0x0001f876
    5184:	0001f870 	.word	0x0001f870

00005188 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    5188:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    518a:	4668      	mov	r0, sp
    518c:	f7ff ffcc 	bl	5128 <bt_id_read_public_addr>
    5190:	4b04      	ldr	r3, [pc, #16]	; (51a4 <bt_setup_public_id_addr+0x1c>)
    5192:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    5194:	b118      	cbz	r0, 519e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    5196:	4669      	mov	r1, sp
    5198:	2000      	movs	r0, #0
    519a:	f7ff ff4b 	bl	5034 <id_create.constprop.0>
}
    519e:	b003      	add	sp, #12
    51a0:	f85d fb04 	ldr.w	pc, [sp], #4
    51a4:	20000008 	.word	0x20000008

000051a8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    51a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    51ac:	4b16      	ldr	r3, [pc, #88]	; (5208 <bt_read_static_addr+0x60>)
    51ae:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    51b2:	07db      	lsls	r3, r3, #31
{
    51b4:	4607      	mov	r7, r0
    51b6:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    51b8:	d404      	bmi.n	51c4 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
    51ba:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    51bc:	4630      	mov	r0, r6
    51be:	b002      	add	sp, #8
    51c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    51c4:	aa01      	add	r2, sp, #4
    51c6:	2100      	movs	r1, #0
    51c8:	f64f 4009 	movw	r0, #64521	; 0xfc09
    51cc:	f7ff f920 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    51d0:	4604      	mov	r4, r0
    51d2:	2800      	cmp	r0, #0
    51d4:	d1f1      	bne.n	51ba <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
    51d6:	9b01      	ldr	r3, [sp, #4]
    51d8:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    51da:	786e      	ldrb	r6, [r5, #1]
    51dc:	4546      	cmp	r6, r8
    51de:	bf28      	it	cs
    51e0:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
    51e2:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    51e4:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    51e8:	42a6      	cmp	r6, r4
    51ea:	dc03      	bgt.n	51f4 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
    51ec:	9801      	ldr	r0, [sp, #4]
    51ee:	f00f fc03 	bl	149f8 <net_buf_unref>
	return cnt;
    51f2:	e7e3      	b.n	51bc <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    51f4:	4629      	mov	r1, r5
    51f6:	fb08 7004 	mla	r0, r8, r4, r7
    51fa:	2216      	movs	r2, #22
    51fc:	f014 fcfa 	bl	19bf4 <memcpy>
	for (i = 0; i < cnt; i++) {
    5200:	3401      	adds	r4, #1
    5202:	3516      	adds	r5, #22
    5204:	e7f0      	b.n	51e8 <bt_read_static_addr+0x40>
    5206:	bf00      	nop
    5208:	20000008 	.word	0x20000008

0000520c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    520c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    520e:	4e15      	ldr	r6, [pc, #84]	; (5264 <bt_setup_random_id_addr+0x58>)
    5210:	79f4      	ldrb	r4, [r6, #7]
{
    5212:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    5214:	b92c      	cbnz	r4, 5222 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    5216:	2101      	movs	r1, #1
    5218:	a802      	add	r0, sp, #8
    521a:	f7ff ffc5 	bl	51a8 <bt_read_static_addr>
    521e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    5220:	b9c8      	cbnz	r0, 5256 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    5222:	2100      	movs	r1, #0
    5224:	4608      	mov	r0, r1
}
    5226:	b009      	add	sp, #36	; 0x24
    5228:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    522c:	f7ff bf34 	b.w	5098 <bt_id_create>
    5230:	ab02      	add	r3, sp, #8
    5232:	fb07 3105 	mla	r1, r7, r5, r3
    5236:	2206      	movs	r2, #6
    5238:	f10d 0001 	add.w	r0, sp, #1
    523c:	f014 fcda 	bl	19bf4 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    5240:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    5242:	4669      	mov	r1, sp
    5244:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    5246:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    524a:	f7ff fef3 	bl	5034 <id_create.constprop.0>
				if (err) {
    524e:	3401      	adds	r4, #1
    5250:	b110      	cbz	r0, 5258 <bt_setup_random_id_addr+0x4c>
}
    5252:	b009      	add	sp, #36	; 0x24
    5254:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    5256:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    5258:	79f3      	ldrb	r3, [r6, #7]
    525a:	b2e5      	uxtb	r5, r4
    525c:	42ab      	cmp	r3, r5
    525e:	d8e7      	bhi.n	5230 <bt_setup_random_id_addr+0x24>
			return 0;
    5260:	2000      	movs	r0, #0
    5262:	e7f6      	b.n	5252 <bt_setup_random_id_addr+0x46>
    5264:	20000008 	.word	0x20000008

00005268 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    526c:	4690      	mov	r8, r2
    526e:	460e      	mov	r6, r1
    5270:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    5272:	4602      	mov	r2, r0
    5274:	2800      	cmp	r0, #0
    5276:	d052      	beq.n	531e <bt_id_set_adv_own_addr+0xb6>
    5278:	2b00      	cmp	r3, #0
    527a:	d050      	beq.n	531e <bt_id_set_adv_own_addr+0xb6>

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	/* Short-circuit to force NRPA usage */
	if (options & BT_LE_ADV_OPT_USE_NRPA) {
    527c:	0331      	lsls	r1, r6, #12
	id_addr = &bt_dev.id_addr[adv->id];
    527e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_USE_NRPA) {
    5280:	d507      	bpl.n	5292 <bt_id_set_adv_own_addr+0x2a>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5282:	0773      	lsls	r3, r6, #29
    5284:	d44b      	bmi.n	531e <bt_id_set_adv_own_addr+0xb6>
			LOG_ERR("Can't set both IDENTITY & NRPA");

			return -EINVAL;
		}

		err = bt_id_set_adv_private_addr(adv);
    5286:	f015 f805 	bl	1a294 <bt_id_set_adv_private_addr>
		if (err) {
    528a:	bb88      	cbnz	r0, 52f0 <bt_id_set_adv_own_addr+0x88>
			return err;
		}
		*own_addr_type = BT_ADDR_LE_RANDOM;
    528c:	2301      	movs	r3, #1
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
			}

			*own_addr_type = id_addr->type;
    528e:	702b      	strb	r3, [r5, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
    5290:	e02d      	b.n	52ee <bt_id_set_adv_own_addr+0x86>
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5292:	07f7      	lsls	r7, r6, #31
    5294:	d52e      	bpl.n	52f4 <bt_id_set_adv_own_addr+0x8c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    5296:	4f23      	ldr	r7, [pc, #140]	; (5324 <bt_id_set_adv_own_addr+0xbc>)
    5298:	f1b8 0f00 	cmp.w	r8, #0
    529c:	d013      	beq.n	52c6 <bt_id_set_adv_own_addr+0x5e>
    529e:	06b0      	lsls	r0, r6, #26
    52a0:	d40a      	bmi.n	52b8 <bt_id_set_adv_own_addr+0x50>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    52a2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    52a6:	5cfb      	ldrb	r3, [r7, r3]
    52a8:	2b01      	cmp	r3, #1
    52aa:	d011      	beq.n	52d0 <bt_id_set_adv_own_addr+0x68>
			*own_addr_type = id_addr->type;
    52ac:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    52ae:	06b2      	lsls	r2, r6, #26
    52b0:	d51d      	bpl.n	52ee <bt_id_set_adv_own_addr+0x86>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    52b2:	f043 0302 	orr.w	r3, r3, #2
    52b6:	e7ea      	b.n	528e <bt_id_set_adv_own_addr+0x26>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    52b8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    52bc:	0659      	lsls	r1, r3, #25
    52be:	d4f0      	bmi.n	52a2 <bt_id_set_adv_own_addr+0x3a>
			return -ENOTSUP;
    52c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    52c4:	e014      	b.n	52f0 <bt_id_set_adv_own_addr+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    52c6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    52ca:	5cfb      	ldrb	r3, [r7, r3]
    52cc:	2b01      	cmp	r3, #1
    52ce:	d1de      	bne.n	528e <bt_id_set_adv_own_addr+0x26>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    52d0:	2107      	movs	r1, #7
    52d2:	fb01 7104 	mla	r1, r1, r4, r7
    52d6:	3101      	adds	r1, #1
    52d8:	4610      	mov	r0, r2
    52da:	f014 ffd3 	bl	1a284 <bt_id_set_adv_random_addr>
				if (err) {
    52de:	b938      	cbnz	r0, 52f0 <bt_id_set_adv_own_addr+0x88>
			*own_addr_type = id_addr->type;
    52e0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    52e4:	5d3b      	ldrb	r3, [r7, r4]
    52e6:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    52e8:	f1b8 0f00 	cmp.w	r8, #0
    52ec:	d1df      	bne.n	52ae <bt_id_set_adv_own_addr+0x46>
		return 0;
    52ee:	2000      	movs	r0, #0
			return err;
		}
	}

	return 0;
}
    52f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    52f4:	0773      	lsls	r3, r6, #29
    52f6:	d50e      	bpl.n	5316 <bt_id_set_adv_own_addr+0xae>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    52f8:	4e0a      	ldr	r6, [pc, #40]	; (5324 <bt_id_set_adv_own_addr+0xbc>)
    52fa:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    52fe:	5df3      	ldrb	r3, [r6, r7]
    5300:	2b01      	cmp	r3, #1
    5302:	d1c4      	bne.n	528e <bt_id_set_adv_own_addr+0x26>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    5304:	2107      	movs	r1, #7
    5306:	fb11 3104 	smlabb	r1, r1, r4, r3
    530a:	4431      	add	r1, r6
    530c:	f014 ffba 	bl	1a284 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    5310:	5df3      	ldrb	r3, [r6, r7]
    5312:	702b      	strb	r3, [r5, #0]
		if (err) {
    5314:	e7ec      	b.n	52f0 <bt_id_set_adv_own_addr+0x88>
			err = bt_id_set_adv_private_addr(adv);
    5316:	f014 ffbd 	bl	1a294 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    531a:	2301      	movs	r3, #1
    531c:	e7f9      	b.n	5312 <bt_id_set_adv_own_addr+0xaa>
		return -EINVAL;
    531e:	f06f 0015 	mvn.w	r0, #21
    5322:	e7e5      	b.n	52f0 <bt_id_set_adv_own_addr+0x88>
    5324:	20000008 	.word	0x20000008

00005328 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    5328:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_PRIVACY)
	bt_addr_copy(&bt_dev.rpa[BT_ID_DEFAULT], BT_ADDR_NONE);
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    532a:	4c0a      	ldr	r4, [pc, #40]	; (5354 <bt_id_init+0x2c>)
    532c:	79e3      	ldrb	r3, [r4, #7]
    532e:	b10b      	cbz	r3, 5334 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
			return err;
		}
	}

	return 0;
    5330:	2000      	movs	r0, #0
}
    5332:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    5334:	f7ff ff28 	bl	5188 <bt_setup_public_id_addr>
		if (err) {
    5338:	2800      	cmp	r0, #0
    533a:	d1fa      	bne.n	5332 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    533c:	79e3      	ldrb	r3, [r4, #7]
    533e:	2b00      	cmp	r3, #0
    5340:	d1f6      	bne.n	5330 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    5342:	f7ff ff63 	bl	520c <bt_setup_random_id_addr>
		if (err) {
    5346:	2800      	cmp	r0, #0
    5348:	d1f3      	bne.n	5332 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    534a:	1c60      	adds	r0, r4, #1
}
    534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    5350:	f7ff be44 	b.w	4fdc <set_random_address>
    5354:	20000008 	.word	0x20000008

00005358 <valid_adv_param>:

	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
    5358:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    535a:	6843      	ldr	r3, [r0, #4]
{
    535c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    535e:	0558      	lsls	r0, r3, #21
    5360:	d501      	bpl.n	5366 <valid_adv_param+0xe>
		return false;
    5362:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    5364:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5366:	6922      	ldr	r2, [r4, #16]
    5368:	b10a      	cbz	r2, 536e <valid_adv_param+0x16>
    536a:	07d9      	lsls	r1, r3, #31
    536c:	d5f9      	bpl.n	5362 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    536e:	4d19      	ldr	r5, [pc, #100]	; (53d4 <valid_adv_param+0x7c>)
    5370:	7820      	ldrb	r0, [r4, #0]
    5372:	79eb      	ldrb	r3, [r5, #7]
    5374:	4283      	cmp	r3, r0
    5376:	d9f4      	bls.n	5362 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    5378:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
    537c:	4916      	ldr	r1, [pc, #88]	; (53d8 <valid_adv_param+0x80>)
    537e:	2207      	movs	r2, #7
    5380:	4428      	add	r0, r5
    5382:	f014 fc27 	bl	19bd4 <memcmp>
	if (param->id >= bt_dev.id_count ||
    5386:	2800      	cmp	r0, #0
    5388:	d0eb      	beq.n	5362 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    538a:	6860      	ldr	r0, [r4, #4]
    538c:	07c2      	lsls	r2, r0, #31
    538e:	d406      	bmi.n	539e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5390:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    5394:	2b08      	cmp	r3, #8
    5396:	d802      	bhi.n	539e <valid_adv_param+0x46>
    5398:	68a3      	ldr	r3, [r4, #8]
    539a:	2b9f      	cmp	r3, #159	; 0x9f
    539c:	d9e1      	bls.n	5362 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    539e:	f010 0f30 	tst.w	r0, #48	; 0x30
    53a2:	d002      	beq.n	53aa <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    53a4:	6923      	ldr	r3, [r4, #16]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d0db      	beq.n	5362 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    53aa:	06c3      	lsls	r3, r0, #27
    53ac:	d401      	bmi.n	53b2 <valid_adv_param+0x5a>
    53ae:	6923      	ldr	r3, [r4, #16]
    53b0:	b943      	cbnz	r3, 53c4 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    53b2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    53b6:	429a      	cmp	r2, r3
    53b8:	d8d3      	bhi.n	5362 <valid_adv_param+0xa>
    53ba:	2a1f      	cmp	r2, #31
    53bc:	d9d1      	bls.n	5362 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    53be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    53c2:	d8ce      	bhi.n	5362 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    53c4:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    53c8:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    53cc:	bf18      	it	ne
    53ce:	2001      	movne	r0, #1
    53d0:	e7c8      	b.n	5364 <valid_adv_param+0xc>
    53d2:	bf00      	nop
    53d4:	20000008 	.word	0x20000008
    53d8:	0001f869 	.word	0x0001f869

000053dc <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
    53dc:	b508      	push	{r3, lr}
    53de:	4904      	ldr	r1, [pc, #16]	; (53f0 <adv_is_directed+0x14>)
    53e0:	2207      	movs	r2, #7
    53e2:	3009      	adds	r0, #9
    53e4:	f014 fbf6 	bl	19bd4 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
    53e8:	3800      	subs	r0, #0
    53ea:	bf18      	it	ne
    53ec:	2001      	movne	r0, #1
    53ee:	bd08      	pop	{r3, pc}
    53f0:	0001f869 	.word	0x0001f869

000053f4 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    53f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    53f6:	4b15      	ldr	r3, [pc, #84]	; (544c <le_adv_start_add_conn+0x58>)
    53f8:	7802      	ldrb	r2, [r0, #0]
    53fa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
    53fe:	4604      	mov	r4, r0
    5400:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
    5402:	f7ff ffeb 	bl	53dc <adv_is_directed>
    5406:	4603      	mov	r3, r0
    5408:	7820      	ldrb	r0, [r4, #0]
    540a:	b96b      	cbnz	r3, 5428 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    540c:	4910      	ldr	r1, [pc, #64]	; (5450 <le_adv_start_add_conn+0x5c>)
    540e:	f000 fd9b 	bl	5f48 <bt_conn_add_le>
		if (!conn) {
    5412:	4604      	mov	r4, r0
    5414:	b910      	cbnz	r0, 541c <le_adv_start_add_conn+0x28>
			return -ENOMEM;
    5416:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
    541a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
    541c:	2104      	movs	r1, #4
    541e:	f000 fc19 	bl	5c54 <bt_conn_set_state>
		*out_conn = conn;
    5422:	602c      	str	r4, [r5, #0]
		return 0;
    5424:	2000      	movs	r0, #0
    5426:	e7f8      	b.n	541a <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    5428:	f104 0609 	add.w	r6, r4, #9
    542c:	4631      	mov	r1, r6
    542e:	f015 f998 	bl	1a762 <bt_conn_exists_le>
    5432:	b940      	cbnz	r0, 5446 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    5434:	7820      	ldrb	r0, [r4, #0]
    5436:	4631      	mov	r1, r6
    5438:	f000 fd86 	bl	5f48 <bt_conn_add_le>
	if (!conn) {
    543c:	4604      	mov	r4, r0
    543e:	2800      	cmp	r0, #0
    5440:	d0e9      	beq.n	5416 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
    5442:	2105      	movs	r1, #5
    5444:	e7eb      	b.n	541e <le_adv_start_add_conn+0x2a>
		return -EINVAL;
    5446:	f06f 0015 	mvn.w	r0, #21
    544a:	e7e6      	b.n	541a <le_adv_start_add_conn+0x26>
    544c:	20000008 	.word	0x20000008
    5450:	0001f862 	.word	0x0001f862

00005454 <bt_le_adv_lookup_legacy>:
}
    5454:	4800      	ldr	r0, [pc, #0]	; (5458 <bt_le_adv_lookup_legacy+0x4>)
    5456:	4770      	bx	lr
    5458:	20000020 	.word	0x20000020

0000545c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    5460:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
    5464:	b08d      	sub	sp, #52	; 0x34
    5466:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    5468:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    546a:	ebb9 0503 	subs.w	r5, r9, r3
{
    546e:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5470:	488b      	ldr	r0, [pc, #556]	; (56a0 <bt_le_adv_start_legacy+0x244>)
    5472:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    5474:	bf18      	it	ne
    5476:	2501      	movne	r5, #1
	struct bt_conn *conn = NULL;
    5478:	9307      	str	r3, [sp, #28]
    547a:	f014 ff35 	bl	1a2e8 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    547e:	0742      	lsls	r2, r0, #29
{
    5480:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5482:	f140 8102 	bpl.w	568a <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    5486:	4608      	mov	r0, r1
    5488:	f7ff ff66 	bl	5358 <valid_adv_param>
    548c:	b928      	cbnz	r0, 549a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    548e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    5492:	4658      	mov	r0, fp
    5494:	b00d      	add	sp, #52	; 0x34
    5496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    549a:	4620      	mov	r0, r4
    549c:	f014 ff11 	bl	1a2c2 <bt_id_adv_random_addr_check>
    54a0:	4680      	mov	r8, r0
    54a2:	2800      	cmp	r0, #0
    54a4:	d0f3      	beq.n	548e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    54a6:	f106 0710 	add.w	r7, r6, #16
    54aa:	4638      	mov	r0, r7
    54ac:	f014 ff1c 	bl	1a2e8 <atomic_get>
    54b0:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    54b2:	f3c0 1bc0 	ubfx	fp, r0, #7, #1
    54b6:	f100 80eb 	bmi.w	5690 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    54ba:	220f      	movs	r2, #15
    54bc:	4659      	mov	r1, fp
    54be:	a808      	add	r0, sp, #32
    54c0:	f014 fba3 	bl	19c0a <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    54c4:	68a3      	ldr	r3, [r4, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
    54c6:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    54c8:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    54cc:	68e3      	ldr	r3, [r4, #12]
    54ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    54d2:	f014 fefa 	bl	1a2ca <get_adv_channel_map>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    54d6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    54da:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    54de:	4870      	ldr	r0, [pc, #448]	; (56a0 <bt_le_adv_start_legacy+0x244>)
	set_param.filter_policy = get_filter_policy(param->options);
    54e0:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
    54e4:	f014 ff06 	bl	1a2f4 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    54e8:	4a6e      	ldr	r2, [pc, #440]	; (56a4 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    54ea:	7823      	ldrb	r3, [r4, #0]
    54ec:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    54ee:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    54f2:	6861      	ldr	r1, [r4, #4]
    54f4:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    54f8:	462a      	mov	r2, r5
    54fa:	4630      	mov	r0, r6
    54fc:	f7ff feb4 	bl	5268 <bt_id_set_adv_own_addr>
	if (err) {
    5500:	4683      	mov	fp, r0
    5502:	2800      	cmp	r0, #0
    5504:	d1c5      	bne.n	5492 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    5506:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
    550a:	2207      	movs	r2, #7
	if (dir_adv) {
    550c:	f1b9 0f00 	cmp.w	r9, #0
    5510:	d013      	beq.n	553a <bt_le_adv_start_legacy+0xde>
    5512:	6921      	ldr	r1, [r4, #16]
    5514:	f014 fb6e 	bl	19bf4 <memcpy>
	name_type = get_adv_name_type_param(param);
    5518:	4620      	mov	r0, r4
    551a:	f014 ffe7 	bl	1a4ec <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    551e:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
    5520:	4605      	mov	r5, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5522:	07d0      	lsls	r0, r2, #31
    5524:	d416      	bmi.n	5554 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    5526:	0592      	lsls	r2, r2, #22
    5528:	d403      	bmi.n	5532 <bt_le_adv_start_legacy+0xd6>
    552a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    552c:	b90b      	cbnz	r3, 5532 <bt_le_adv_start_legacy+0xd6>
    552e:	2d02      	cmp	r5, #2
    5530:	d14d      	bne.n	55ce <bt_le_adv_start_legacy+0x172>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    5532:	2302      	movs	r3, #2
    5534:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    5538:	e01a      	b.n	5570 <bt_le_adv_start_legacy+0x114>
    553a:	495b      	ldr	r1, [pc, #364]	; (56a8 <bt_le_adv_start_legacy+0x24c>)
    553c:	f014 fb5a 	bl	19bf4 <memcpy>
	name_type = get_adv_name_type_param(param);
    5540:	4620      	mov	r0, r4
    5542:	f014 ffd3 	bl	1a4ec <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5546:	6862      	ldr	r2, [r4, #4]
    5548:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
    554a:	4605      	mov	r5, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    554c:	d5eb      	bpl.n	5526 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
    554e:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
    5552:	e00d      	b.n	5570 <bt_le_adv_start_legacy+0x114>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    5554:	f012 0f10 	tst.w	r2, #16
    5558:	bf0c      	ite	eq
    555a:	2201      	moveq	r2, #1
    555c:	2204      	movne	r2, #4
    555e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    5562:	6921      	ldr	r1, [r4, #16]
    5564:	2207      	movs	r2, #7
    5566:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    556a:	f014 fb43 	bl	19bf4 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    556e:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5570:	210f      	movs	r1, #15
    5572:	f242 0006 	movw	r0, #8198	; 0x2006
    5576:	f7fe ff11 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
    557a:	4683      	mov	fp, r0
    557c:	2800      	cmp	r0, #0
    557e:	f000 808a 	beq.w	5696 <bt_le_adv_start_legacy+0x23a>
    5582:	220f      	movs	r2, #15
    5584:	a908      	add	r1, sp, #32
    5586:	300c      	adds	r0, #12
    5588:	f016 facb 	bl	1bb22 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    558c:	2200      	movs	r2, #0
    558e:	4659      	mov	r1, fp
    5590:	f242 0006 	movw	r0, #8198	; 0x2006
    5594:	f7fe ff3c 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
    5598:	2800      	cmp	r0, #0
    559a:	d17f      	bne.n	569c <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    559c:	f1b9 0f00 	cmp.w	r9, #0
    55a0:	d01b      	beq.n	55da <bt_le_adv_start_legacy+0x17e>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    55a2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    55a4:	07db      	lsls	r3, r3, #31
    55a6:	d426      	bmi.n	55f6 <bt_le_adv_start_legacy+0x19a>
	return bt_le_adv_set_enable_legacy(adv, enable);
    55a8:	4630      	mov	r0, r6
    55aa:	2101      	movs	r1, #1
    55ac:	f014 ffae 	bl	1a50c <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    55b0:	9e07      	ldr	r6, [sp, #28]
	if (err) {
    55b2:	4683      	mov	fp, r0
    55b4:	2800      	cmp	r0, #0
    55b6:	d060      	beq.n	567a <bt_le_adv_start_legacy+0x21e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    55b8:	2e00      	cmp	r6, #0
    55ba:	f43f af6a 	beq.w	5492 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    55be:	4630      	mov	r0, r6
    55c0:	2100      	movs	r1, #0
    55c2:	f000 fb47 	bl	5c54 <bt_conn_set_state>
			bt_conn_unref(conn);
    55c6:	4630      	mov	r0, r6
    55c8:	f015 f862 	bl	1a690 <bt_conn_unref>
    55cc:	e761      	b.n	5492 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    55ce:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    55d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    55d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    55d8:	e7ca      	b.n	5570 <bt_le_adv_start_legacy+0x114>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    55da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    55dc:	9300      	str	r3, [sp, #0]
    55de:	e9cd 8501 	strd	r8, r5, [sp, #4]
    55e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    55e4:	9905      	ldr	r1, [sp, #20]
    55e6:	4652      	mov	r2, sl
    55e8:	4630      	mov	r0, r6
    55ea:	f014 ff08 	bl	1a3fe <le_adv_update.constprop.0>
		if (err) {
    55ee:	4683      	mov	fp, r0
    55f0:	2800      	cmp	r0, #0
    55f2:	d0d6      	beq.n	55a2 <bt_le_adv_start_legacy+0x146>
    55f4:	e74d      	b.n	5492 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    55f6:	a907      	add	r1, sp, #28
    55f8:	4630      	mov	r0, r6
    55fa:	f7ff fefb 	bl	53f4 <le_adv_start_add_conn>
		if (err) {
    55fe:	4683      	mov	fp, r0
    5600:	2800      	cmp	r0, #0
    5602:	d0d1      	beq.n	55a8 <bt_le_adv_start_legacy+0x14c>
			if (err == -ENOMEM && !dir_adv &&
    5604:	f110 0f0c 	cmn.w	r0, #12
    5608:	f47f af43 	bne.w	5492 <bt_le_adv_start_legacy+0x36>
    560c:	f1b9 0f00 	cmp.w	r9, #0
    5610:	f47f af3f 	bne.w	5492 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5614:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    5616:	0790      	lsls	r0, r2, #30
    5618:	f53f af3b 	bmi.w	5492 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    561c:	6863      	ldr	r3, [r4, #4]
    561e:	f083 0302 	eor.w	r3, r3, #2
    5622:	f3c3 0b40 	ubfx	fp, r3, #1, #1
    5626:	f00b 0201 	and.w	r2, fp, #1
    562a:	210e      	movs	r1, #14
    562c:	4638      	mov	r0, r7
    562e:	f014 fecf 	bl	1a3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    5632:	1e6b      	subs	r3, r5, #1
    5634:	425a      	negs	r2, r3
    5636:	415a      	adcs	r2, r3
    5638:	2108      	movs	r1, #8
    563a:	4638      	mov	r0, r7
    563c:	f014 fec8 	bl	1a3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    5640:	1ea9      	subs	r1, r5, #2
    5642:	424a      	negs	r2, r1
    5644:	414a      	adcs	r2, r1
    5646:	4638      	mov	r0, r7
    5648:	2109      	movs	r1, #9
    564a:	f014 fec1 	bl	1a3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    564e:	6862      	ldr	r2, [r4, #4]
    5650:	210a      	movs	r1, #10
    5652:	f002 0201 	and.w	r2, r2, #1
    5656:	4638      	mov	r0, r7
    5658:	f014 feba 	bl	1a3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    565c:	4642      	mov	r2, r8
    565e:	210b      	movs	r1, #11
    5660:	4638      	mov	r0, r7
    5662:	f014 feb5 	bl	1a3d0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    5666:	6862      	ldr	r2, [r4, #4]
    5668:	210d      	movs	r1, #13
    566a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    566e:	4638      	mov	r0, r7
    5670:	f014 feae 	bl	1a3d0 <atomic_set_bit_to>
	return 0;
    5674:	f04f 0b00 	mov.w	fp, #0
    5678:	e70b      	b.n	5492 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    567a:	b116      	cbz	r6, 5682 <bt_le_adv_start_legacy+0x226>
		bt_conn_unref(conn);
    567c:	4630      	mov	r0, r6
    567e:	f015 f807 	bl	1a690 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    5682:	f1b9 0f00 	cmp.w	r9, #0
    5686:	d1ce      	bne.n	5626 <bt_le_adv_start_legacy+0x1ca>
    5688:	e7c8      	b.n	561c <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    568a:	f06f 0b0a 	mvn.w	fp, #10
    568e:	e700      	b.n	5492 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    5690:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    5694:	e6fd      	b.n	5492 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    5696:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    569a:	e6fa      	b.n	5492 <bt_le_adv_start_legacy+0x36>
    569c:	4683      	mov	fp, r0
    569e:	e6f8      	b.n	5492 <bt_le_adv_start_legacy+0x36>
    56a0:	200000dc 	.word	0x200000dc
    56a4:	20000008 	.word	0x20000008
    56a8:	0001f869 	.word	0x0001f869

000056ac <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    56ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    56ae:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    56b0:	9a06      	ldr	r2, [sp, #24]
{
    56b2:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    56b4:	e9cd 3200 	strd	r3, r2, [sp]
    56b8:	462b      	mov	r3, r5
    56ba:	460a      	mov	r2, r1
    56bc:	4601      	mov	r1, r0
    56be:	4811      	ldr	r0, [pc, #68]	; (5704 <bt_le_adv_start+0x58>)
    56c0:	f7ff fecc 	bl	545c <bt_le_adv_start_legacy>
    56c4:	4621      	mov	r1, r4
    56c6:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    56c8:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    56ca:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    56ce:	429d      	cmp	r5, r3
    56d0:	d102      	bne.n	56d8 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    56d2:	4630      	mov	r0, r6
    56d4:	b002      	add	sp, #8
    56d6:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    56d8:	880a      	ldrh	r2, [r1, #0]
    56da:	4282      	cmp	r2, r0
    56dc:	d104      	bne.n	56e8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    56de:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    56e0:	b112      	cbz	r2, 56e8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    56e2:	7812      	ldrb	r2, [r2, #0]
    56e4:	07d2      	lsls	r2, r2, #31
    56e6:	d402      	bmi.n	56ee <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    56e8:	3301      	adds	r3, #1
    56ea:	3108      	adds	r1, #8
    56ec:	e7ef      	b.n	56ce <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    56ee:	4906      	ldr	r1, [pc, #24]	; (5708 <bt_le_adv_start+0x5c>)
    56f0:	4806      	ldr	r0, [pc, #24]	; (570c <bt_le_adv_start+0x60>)
    56f2:	f017 fd8d 	bl	1d210 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    56f6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    56fa:	2300      	movs	r3, #0
    56fc:	4803      	ldr	r0, [pc, #12]	; (570c <bt_le_adv_start+0x60>)
    56fe:	f012 fdc5 	bl	1828c <k_work_reschedule>
    5702:	e7e6      	b.n	56d2 <bt_le_adv_start+0x26>
    5704:	20000020 	.word	0x20000020
    5708:	0001a55d 	.word	0x0001a55d
    570c:	20000038 	.word	0x20000038

00005710 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    5710:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    5712:	4819      	ldr	r0, [pc, #100]	; (5778 <bt_le_adv_stop+0x68>)
    5714:	f014 ff1f 	bl	1a556 <bt_le_lim_adv_cancel_timeout>
    5718:	4818      	ldr	r0, [pc, #96]	; (577c <bt_le_adv_stop+0x6c>)
    571a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    571e:	f014 fde9 	bl	1a2f4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5722:	4816      	ldr	r0, [pc, #88]	; (577c <bt_le_adv_stop+0x6c>)
    5724:	f014 fde0 	bl	1a2e8 <atomic_get>
    5728:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    572a:	061a      	lsls	r2, r3, #24
    572c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    5730:	d521      	bpl.n	5776 <bt_le_adv_stop+0x66>
    5732:	4812      	ldr	r0, [pc, #72]	; (577c <bt_le_adv_stop+0x6c>)
    5734:	f014 fdd8 	bl	1a2e8 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5738:	0543      	lsls	r3, r0, #21
    573a:	d512      	bpl.n	5762 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
    573c:	480e      	ldr	r0, [pc, #56]	; (5778 <bt_le_adv_stop+0x68>)
    573e:	f7ff fe4d 	bl	53dc <adv_is_directed>
    5742:	4b0f      	ldr	r3, [pc, #60]	; (5780 <bt_le_adv_stop+0x70>)
    5744:	b998      	cbnz	r0, 576e <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    5746:	490f      	ldr	r1, [pc, #60]	; (5784 <bt_le_adv_stop+0x74>)
    5748:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    574a:	7e18      	ldrb	r0, [r3, #24]
    574c:	f000 fc30 	bl	5fb0 <bt_conn_lookup_state_le>
    5750:	4604      	mov	r4, r0
	if (conn) {
    5752:	b130      	cbz	r0, 5762 <bt_le_adv_stop+0x52>
		conn->err = status;
    5754:	2100      	movs	r1, #0
    5756:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5758:	f000 fa7c 	bl	5c54 <bt_conn_set_state>
		bt_conn_unref(conn);
    575c:	4620      	mov	r0, r4
    575e:	f014 ff97 	bl	1a690 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    5762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    5766:	4804      	ldr	r0, [pc, #16]	; (5778 <bt_le_adv_stop+0x68>)
    5768:	2100      	movs	r1, #0
    576a:	f014 becf 	b.w	1a50c <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    576e:	2205      	movs	r2, #5
    5770:	f103 0121 	add.w	r1, r3, #33	; 0x21
    5774:	e7e9      	b.n	574a <bt_le_adv_stop+0x3a>
}
    5776:	bd10      	pop	{r4, pc}
    5778:	20000020 	.word	0x20000020
    577c:	20000030 	.word	0x20000030
    5780:	20000008 	.word	0x20000008
    5784:	0001f862 	.word	0x0001f862

00005788 <bt_le_adv_resume>:

	return options;
}

void bt_le_adv_resume(void)
{
    5788:	b573      	push	{r0, r1, r4, r5, r6, lr}
    578a:	4832      	ldr	r0, [pc, #200]	; (5854 <bt_le_adv_resume+0xcc>)
    578c:	4c31      	ldr	r4, [pc, #196]	; (5854 <bt_le_adv_resume+0xcc>)
    578e:	f014 fdab 	bl	1a2e8 <atomic_get>
	if (!adv) {
		LOG_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    5792:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    5796:	d05a      	beq.n	584e <bt_le_adv_resume+0xc6>
    5798:	4620      	mov	r0, r4
    579a:	f014 fda5 	bl	1a2e8 <atomic_get>
    579e:	0603      	lsls	r3, r0, #24
    57a0:	d455      	bmi.n	584e <bt_le_adv_resume+0xc6>
    57a2:	4620      	mov	r0, r4
    57a4:	f014 fda0 	bl	1a2e8 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    57a8:	0546      	lsls	r6, r0, #21
    57aa:	d550      	bpl.n	584e <bt_le_adv_resume+0xc6>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    57ac:	a901      	add	r1, sp, #4
    57ae:	f1a4 0010 	sub.w	r0, r4, #16
    57b2:	f7ff fe1f 	bl	53f4 <le_adv_start_add_conn>
	if (err) {
    57b6:	2800      	cmp	r0, #0
    57b8:	d149      	bne.n	584e <bt_le_adv_resume+0xc6>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	} else {
		uint8_t own_addr_type;
		bool dir_adv = adv_is_directed(adv);
    57ba:	f1a4 0010 	sub.w	r0, r4, #16
    57be:	f7ff fe0d 	bl	53dc <adv_is_directed>
    57c2:	4602      	mov	r2, r0
    57c4:	4620      	mov	r0, r4
    57c6:	f014 fd8f 	bl	1a2e8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    57ca:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    57ce:	4620      	mov	r0, r4
    57d0:	f014 fd8a 	bl	1a2e8 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    57d4:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    57d8:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
    57da:	ea4f 0141 	mov.w	r1, r1, lsl #1
    57de:	481d      	ldr	r0, [pc, #116]	; (5854 <bt_le_adv_resume+0xcc>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
    57e0:	bf48      	it	mi
    57e2:	f041 0101 	orrmi.w	r1, r1, #1
    57e6:	f014 fd7f 	bl	1a2e8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    57ea:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
    57ec:	bf48      	it	mi
    57ee:	f041 0104 	orrmi.w	r1, r1, #4
		uint32_t options = adv_get_options(adv);

		/* Always set the address. Don't assume it has not changed. */
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
    57f2:	4819      	ldr	r0, [pc, #100]	; (5858 <bt_le_adv_resume+0xd0>)
    57f4:	f10d 0303 	add.w	r3, sp, #3
    57f8:	f7ff fd36 	bl	5268 <bt_id_set_adv_own_addr>
		if (err) {
    57fc:	4605      	mov	r5, r0
    57fe:	bb30      	cbnz	r0, 584e <bt_le_adv_resume+0xc6>
	return bt_le_adv_set_enable_legacy(adv, enable);
    5800:	4815      	ldr	r0, [pc, #84]	; (5858 <bt_le_adv_resume+0xd0>)
    5802:	2101      	movs	r1, #1
    5804:	f014 fe82 	bl	1a50c <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    5808:	9e01      	ldr	r6, [sp, #4]
	if (err) {
    580a:	b928      	cbnz	r0, 5818 <bt_le_adv_resume+0x90>
	bt_conn_unref(conn);
    580c:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    580e:	b002      	add	sp, #8
    5810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5814:	f014 bf3c 	b.w	1a690 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5818:	4629      	mov	r1, r5
    581a:	4630      	mov	r0, r6
    581c:	f000 fa1a 	bl	5c54 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5820:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    5824:	480b      	ldr	r0, [pc, #44]	; (5854 <bt_le_adv_resume+0xcc>)
    5826:	f014 fd65 	bl	1a2f4 <atomic_and>
    582a:	4605      	mov	r5, r0
	bt_conn_unref(conn);
    582c:	4630      	mov	r0, r6
    582e:	f014 ff2f 	bl	1a690 <bt_conn_unref>
	if (persist_paused) {
    5832:	046b      	lsls	r3, r5, #17
    5834:	d50b      	bpl.n	584e <bt_le_adv_resume+0xc6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5836:	f3bf 8f5b 	dmb	ish
    583a:	e854 3f00 	ldrex	r3, [r4]
    583e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5842:	e844 3200 	strex	r2, r3, [r4]
    5846:	2a00      	cmp	r2, #0
    5848:	d1f7      	bne.n	583a <bt_le_adv_resume+0xb2>
    584a:	f3bf 8f5b 	dmb	ish
}
    584e:	b002      	add	sp, #8
    5850:	bd70      	pop	{r4, r5, r6, pc}
    5852:	bf00      	nop
    5854:	20000030 	.word	0x20000030
    5858:	20000020 	.word	0x20000020

0000585c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    585c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    585e:	4b0b      	ldr	r3, [pc, #44]	; (588c <notify_connected+0x30>)
    5860:	681d      	ldr	r5, [r3, #0]
{
    5862:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5864:	b925      	cbnz	r5, 5870 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5866:	4d0a      	ldr	r5, [pc, #40]	; (5890 <notify_connected+0x34>)
    5868:	4e0a      	ldr	r6, [pc, #40]	; (5894 <notify_connected+0x38>)
    586a:	42b5      	cmp	r5, r6
    586c:	d307      	bcc.n	587e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    586e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
    5870:	682b      	ldr	r3, [r5, #0]
    5872:	b113      	cbz	r3, 587a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
    5874:	7a61      	ldrb	r1, [r4, #9]
    5876:	4620      	mov	r0, r4
    5878:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    587a:	692d      	ldr	r5, [r5, #16]
    587c:	e7f2      	b.n	5864 <notify_connected+0x8>
		if (cb->connected) {
    587e:	682b      	ldr	r3, [r5, #0]
    5880:	b113      	cbz	r3, 5888 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
    5882:	7a61      	ldrb	r1, [r4, #9]
    5884:	4620      	mov	r0, r4
    5886:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5888:	3514      	adds	r5, #20
    588a:	e7ee      	b.n	586a <notify_connected+0xe>
    588c:	20001260 	.word	0x20001260
    5890:	0001dbbc 	.word	0x0001dbbc
    5894:	0001dbd0 	.word	0x0001dbd0

00005898 <tx_notify>:
{
    5898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
    589c:	4f15      	ldr	r7, [pc, #84]	; (58f4 <tx_notify+0x5c>)
{
    589e:	4604      	mov	r4, r0
	tx->cb = NULL;
    58a0:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    58a4:	f04f 0220 	mov.w	r2, #32
    58a8:	f3ef 8311 	mrs	r3, BASEPRI
    58ac:	f382 8812 	msr	BASEPRI_MAX, r2
    58b0:	f3bf 8f6f 	isb	sy
	return list->head;
    58b4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
    58b6:	b929      	cbnz	r1, 58c4 <tx_notify+0x2c>
	__asm__ volatile(
    58b8:	f383 8811 	msr	BASEPRI, r3
    58bc:	f3bf 8f6f 	isb	sy
}
    58c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    58c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
    58c6:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    58c8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    58ca:	4281      	cmp	r1, r0
	list->tail = node;
    58cc:	bf08      	it	eq
    58ce:	6262      	streq	r2, [r4, #36]	; 0x24
    58d0:	f383 8811 	msr	BASEPRI, r3
    58d4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
    58d8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
    58dc:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
    58e0:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
    58e4:	4638      	mov	r0, r7
    58e6:	f017 fbb3 	bl	1d050 <k_queue_append>
		cb(conn, user_data, 0);
    58ea:	2200      	movs	r2, #0
    58ec:	4631      	mov	r1, r6
    58ee:	4620      	mov	r0, r4
    58f0:	47a8      	blx	r5
	while (1) {
    58f2:	e7d7      	b.n	58a4 <tx_notify+0xc>
    58f4:	2000093c 	.word	0x2000093c

000058f8 <conn_tx_destroy>:
{
    58f8:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
    58fa:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
    58fe:	2200      	movs	r2, #0
	tx->user_data = NULL;
    5900:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
    5904:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
    5906:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
    5908:	4805      	ldr	r0, [pc, #20]	; (5920 <conn_tx_destroy+0x28>)
    590a:	f017 fba1 	bl	1d050 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
    590e:	4631      	mov	r1, r6
    5910:	4620      	mov	r0, r4
    5912:	462b      	mov	r3, r5
    5914:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
    5918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
    591c:	4718      	bx	r3
    591e:	bf00      	nop
    5920:	2000093c 	.word	0x2000093c

00005924 <send_frag>:
{
    5924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
    5928:	f8df 8178 	ldr.w	r8, [pc, #376]	; 5aa4 <send_frag+0x180>
{
    592c:	461f      	mov	r7, r3
	if (bt_dev.le.acl_mtu) {
    592e:	f8b8 3104 	ldrh.w	r3, [r8, #260]	; 0x104
	return NULL;
    5932:	2b00      	cmp	r3, #0
{
    5934:	4604      	mov	r4, r0
    5936:	460d      	mov	r5, r1
	return NULL;
    5938:	f508 7084 	add.w	r0, r8, #264	; 0x108
{
    593c:	4616      	mov	r6, r2
	return NULL;
    593e:	bf08      	it	eq
    5940:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
    5942:	2200      	movs	r2, #0
    5944:	2300      	movs	r3, #0
    5946:	f012 fa8d 	bl	17e64 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
    594a:	2800      	cmp	r0, #0
    594c:	f040 80a7 	bne.w	5a9e <send_frag+0x17a>
	if (frag) {
    5950:	2e00      	cmp	r6, #0
    5952:	d07a      	beq.n	5a4a <send_frag+0x126>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    5954:	f106 0a0c 	add.w	sl, r6, #12
    5958:	4650      	mov	r0, sl
		uint16_t frag_len = MIN(conn_mtu(conn) + iso_hdr,
    595a:	f8b8 b104 	ldrh.w	fp, [r8, #260]	; 0x104
    595e:	f016 f915 	bl	1bb8c <net_buf_simple_tailroom>
    5962:	4558      	cmp	r0, fp
    5964:	d96b      	bls.n	5a3e <send_frag+0x11a>
	return bt_dev.le.acl_mtu;
    5966:	f8b8 b104 	ldrh.w	fp, [r8, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
    596a:	f855 1f0c 	ldr.w	r1, [r5, #12]!
    596e:	465a      	mov	r2, fp
    5970:	4650      	mov	r0, sl
    5972:	f016 f8d6 	bl	1bb22 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    5976:	4659      	mov	r1, fp
    5978:	4628      	mov	r0, r5
    597a:	f016 f8eb 	bl	1bb54 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
    597e:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    5980:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
    5982:	2b07      	cmp	r3, #7
    5984:	f040 8088 	bne.w	5a98 <send_frag+0x174>
	__asm__ volatile(
    5988:	f04f 0320 	mov.w	r3, #32
    598c:	f3ef 8211 	mrs	r2, BASEPRI
    5990:	f383 8812 	msr	BASEPRI_MAX, r3
    5994:	f3bf 8f6f 	isb	sy
	if (tx) {
    5998:	2d00      	cmp	r5, #0
    599a:	d061      	beq.n	5a60 <send_frag+0x13c>
	parent->next = child;
    599c:	2300      	movs	r3, #0
    599e:	602b      	str	r3, [r5, #0]
	return list->tail;
    59a0:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
    59a2:	2b00      	cmp	r3, #0
    59a4:	d159      	bne.n	5a5a <send_frag+0x136>
	list->head = node;
    59a6:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    59aa:	f382 8811 	msr	BASEPRI, r2
    59ae:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    59b2:	2104      	movs	r1, #4
    59b4:	f106 000c 	add.w	r0, r6, #12
    59b8:	f016 f8c4 	bl	1bb44 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    59bc:	8823      	ldrh	r3, [r4, #0]
    59be:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
    59c2:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
    59c6:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    59c8:	8a33      	ldrh	r3, [r6, #16]
    59ca:	3b04      	subs	r3, #4
    59cc:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    59ce:	2302      	movs	r3, #2
    59d0:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
    59d2:	4630      	mov	r0, r6
    59d4:	f7fe feea 	bl	47ac <bt_send>
	if (err) {
    59d8:	4607      	mov	r7, r0
    59da:	b368      	cbz	r0, 5a38 <send_frag+0x114>
	__asm__ volatile(
    59dc:	f04f 0320 	mov.w	r3, #32
    59e0:	f3ef 8111 	mrs	r1, BASEPRI
    59e4:	f383 8812 	msr	BASEPRI_MAX, r3
    59e8:	f3bf 8f6f 	isb	sy
		if (tx) {
    59ec:	2d00      	cmp	r5, #0
    59ee:	d04d      	beq.n	5a8c <send_frag+0x168>
	return list->head;
    59f0:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    59f2:	2200      	movs	r2, #0
    59f4:	b15b      	cbz	r3, 5a0e <send_frag+0xea>
    59f6:	429d      	cmp	r5, r3
    59f8:	d145      	bne.n	5a86 <send_frag+0x162>
	return node->next;
    59fa:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    59fc:	2a00      	cmp	r2, #0
    59fe:	d13c      	bne.n	5a7a <send_frag+0x156>
    5a00:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    5a02:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    5a04:	4295      	cmp	r5, r2
    5a06:	d100      	bne.n	5a0a <send_frag+0xe6>
	list->tail = node;
    5a08:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    5a0a:	2300      	movs	r3, #0
    5a0c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    5a0e:	f381 8811 	msr	BASEPRI, r1
    5a12:	f3bf 8f6f 	isb	sy
		err = -EIO;
    5a16:	f06f 0704 	mvn.w	r7, #4
	if (bt_dev.le.acl_mtu) {
    5a1a:	f8b8 3104 	ldrh.w	r3, [r8, #260]	; 0x104
	return NULL;
    5a1e:	4822      	ldr	r0, [pc, #136]	; (5aa8 <send_frag+0x184>)
    5a20:	2b00      	cmp	r3, #0
    5a22:	bf08      	it	eq
    5a24:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    5a26:	f012 f9f7 	bl	17e18 <z_impl_k_sem_give>
	if (tx) {
    5a2a:	b12d      	cbz	r5, 5a38 <send_frag+0x114>
		tx_data(buf)->tx = NULL;
    5a2c:	2300      	movs	r3, #0
    5a2e:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
    5a30:	4629      	mov	r1, r5
    5a32:	4620      	mov	r0, r4
    5a34:	f7ff ff60 	bl	58f8 <conn_tx_destroy>
}
    5a38:	4638      	mov	r0, r7
    5a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
    5a3e:	4650      	mov	r0, sl
    5a40:	f016 f8a4 	bl	1bb8c <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn) + iso_hdr,
    5a44:	fa1f fb80 	uxth.w	fp, r0
    5a48:	e78f      	b.n	596a <send_frag+0x46>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5a4a:	2200      	movs	r2, #0
    5a4c:	2300      	movs	r3, #0
    5a4e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5a52:	f016 f826 	bl	1baa2 <net_buf_get>
    5a56:	4606      	mov	r6, r0
		frag = buf;
    5a58:	e791      	b.n	597e <send_frag+0x5a>
    5a5a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5a5c:	61a5      	str	r5, [r4, #24]
}
    5a5e:	e7a4      	b.n	59aa <send_frag+0x86>
	return list->tail;
    5a60:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    5a62:	b133      	cbz	r3, 5a72 <send_frag+0x14e>
			pending_no_cb = &tail_tx->pending_no_cb;
    5a64:	f103 090c 	add.w	r9, r3, #12
    5a68:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    5a6a:	3301      	adds	r3, #1
    5a6c:	f8c9 3000 	str.w	r3, [r9]
    5a70:	e79b      	b.n	59aa <send_frag+0x86>
			pending_no_cb = &conn->pending_no_cb;
    5a72:	69e3      	ldr	r3, [r4, #28]
    5a74:	f104 091c 	add.w	r9, r4, #28
    5a78:	e7f7      	b.n	5a6a <send_frag+0x146>
	parent->next = child;
    5a7a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5a7c:	69a3      	ldr	r3, [r4, #24]
    5a7e:	429d      	cmp	r5, r3
	list->tail = node;
    5a80:	bf08      	it	eq
    5a82:	61a2      	streq	r2, [r4, #24]
}
    5a84:	e7c1      	b.n	5a0a <send_frag+0xe6>
	return node->next;
    5a86:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	e7b3      	b.n	59f4 <send_frag+0xd0>
			(*pending_no_cb)--;
    5a8c:	f8d9 3000 	ldr.w	r3, [r9]
    5a90:	3b01      	subs	r3, #1
    5a92:	f8c9 3000 	str.w	r3, [r9]
    5a96:	e7ba      	b.n	5a0e <send_frag+0xea>
		err = -ENOTCONN;
    5a98:	f06f 077f 	mvn.w	r7, #127	; 0x7f
    5a9c:	e7bd      	b.n	5a1a <send_frag+0xf6>
		return -ENOBUFS;
    5a9e:	f06f 0768 	mvn.w	r7, #104	; 0x68
    5aa2:	e7c9      	b.n	5a38 <send_frag+0x114>
    5aa4:	20000008 	.word	0x20000008
    5aa8:	20000110 	.word	0x20000110

00005aac <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
    5aac:	4804      	ldr	r0, [pc, #16]	; (5ac0 <bt_conn_get_pkts+0x14>)
    5aae:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
    5ab8:	bf08      	it	eq
    5aba:	2000      	moveq	r0, #0
    5abc:	4770      	bx	lr
    5abe:	bf00      	nop
    5ac0:	20000008 	.word	0x20000008

00005ac4 <bt_conn_new>:
{
    5ac4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
    5ac6:	2200      	movs	r2, #0
    5ac8:	4604      	mov	r4, r0
    5aca:	428a      	cmp	r2, r1
    5acc:	d102      	bne.n	5ad4 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    5ace:	2400      	movs	r4, #0
}
    5ad0:	4620      	mov	r0, r4
    5ad2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5ad4:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    5ad8:	2001      	movs	r0, #1
    5ada:	f3bf 8f5b 	dmb	ish
    5ade:	e853 5f00 	ldrex	r5, [r3]
    5ae2:	2d00      	cmp	r5, #0
    5ae4:	d104      	bne.n	5af0 <bt_conn_new+0x2c>
    5ae6:	e843 0c00 	strex	ip, r0, [r3]
    5aea:	f1bc 0f00 	cmp.w	ip, #0
    5aee:	d1f6      	bne.n	5ade <bt_conn_new+0x1a>
    5af0:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    5af4:	d002      	beq.n	5afc <bt_conn_new+0x38>
    5af6:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
    5af8:	4402      	add	r2, r0
    5afa:	e7e6      	b.n	5aca <bt_conn_new+0x6>
	if (!conn) {
    5afc:	2c00      	cmp	r4, #0
    5afe:	d0e6      	beq.n	5ace <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    5b00:	22bc      	movs	r2, #188	; 0xbc
    5b02:	2100      	movs	r1, #0
    5b04:	4620      	mov	r0, r4
    5b06:	f014 f880 	bl	19c0a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    5b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    5b0e:	4904      	ldr	r1, [pc, #16]	; (5b20 <bt_conn_new+0x5c>)
    5b10:	f017 fb7e 	bl	1d210 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    5b14:	4903      	ldr	r1, [pc, #12]	; (5b24 <bt_conn_new+0x60>)
    5b16:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5b1a:	f017 fb35 	bl	1d188 <k_work_init>
	return conn;
    5b1e:	e7d7      	b.n	5ad0 <bt_conn_new+0xc>
    5b20:	00006061 	.word	0x00006061
    5b24:	0001a561 	.word	0x0001a561

00005b28 <bt_conn_send_cb>:
{
    5b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b2a:	461f      	mov	r7, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    5b2c:	7acb      	ldrb	r3, [r1, #11]
    5b2e:	2b07      	cmp	r3, #7
{
    5b30:	4606      	mov	r6, r0
    5b32:	460d      	mov	r5, r1
    5b34:	4614      	mov	r4, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
    5b36:	d930      	bls.n	5b9a <bt_conn_send_cb+0x72>
	if (conn->state != BT_CONN_CONNECTED) {
    5b38:	7a83      	ldrb	r3, [r0, #10]
    5b3a:	2b07      	cmp	r3, #7
    5b3c:	d11b      	bne.n	5b76 <bt_conn_send_cb+0x4e>
	if (cb) {
    5b3e:	b352      	cbz	r2, 5b96 <bt_conn_send_cb+0x6e>
	return z_impl_z_current_get();
    5b40:	f012 fe86 	bl	18850 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    5b44:	4b18      	ldr	r3, [pc, #96]	; (5ba8 <bt_conn_send_cb+0x80>)
    5b46:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    5b48:	4818      	ldr	r0, [pc, #96]	; (5bac <bt_conn_send_cb+0x84>)
    5b4a:	bf07      	ittee	eq
    5b4c:	2200      	moveq	r2, #0
    5b4e:	2300      	moveq	r3, #0
    5b50:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    5b54:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    5b58:	f012 f92a 	bl	17db0 <z_impl_k_queue_get>
    5b5c:	4601      	mov	r1, r0
		if (!tx) {
    5b5e:	b1f8      	cbz	r0, 5ba0 <bt_conn_send_cb+0x78>
		if (conn->state != BT_CONN_CONNECTED) {
    5b60:	7ab3      	ldrb	r3, [r6, #10]
    5b62:	2b07      	cmp	r3, #7
    5b64:	f04f 0200 	mov.w	r2, #0
    5b68:	d008      	beq.n	5b7c <bt_conn_send_cb+0x54>
	tx->user_data = NULL;
    5b6a:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
    5b6e:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
    5b70:	480e      	ldr	r0, [pc, #56]	; (5bac <bt_conn_send_cb+0x84>)
    5b72:	f017 fa6d 	bl	1d050 <k_queue_append>
		return -ENOTCONN;
    5b76:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    5b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
    5b7c:	e9c0 4701 	strd	r4, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    5b80:	60c2      	str	r2, [r0, #12]
	tx_data(buf)->is_cont = false;
    5b82:	2400      	movs	r4, #0
		tx_data(buf)->tx = tx;
    5b84:	61a9      	str	r1, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
    5b86:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
    5b8a:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
    5b8c:	4629      	mov	r1, r5
    5b8e:	f015 ff8a 	bl	1baa6 <net_buf_put>
	return 0;
    5b92:	4620      	mov	r0, r4
    5b94:	e7f1      	b.n	5b7a <bt_conn_send_cb+0x52>
    5b96:	4611      	mov	r1, r2
    5b98:	e7f3      	b.n	5b82 <bt_conn_send_cb+0x5a>
		return -EINVAL;
    5b9a:	f06f 0015 	mvn.w	r0, #21
    5b9e:	e7ec      	b.n	5b7a <bt_conn_send_cb+0x52>
			return -ENOBUFS;
    5ba0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5ba4:	e7e9      	b.n	5b7a <bt_conn_send_cb+0x52>
    5ba6:	bf00      	nop
    5ba8:	200010c8 	.word	0x200010c8
    5bac:	2000093c 	.word	0x2000093c

00005bb0 <bt_conn_prepare_events>:
{
    5bb0:	b570      	push	{r4, r5, r6, lr}
    5bb2:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
    5bb4:	4823      	ldr	r0, [pc, #140]	; (5c44 <bt_conn_prepare_events+0x94>)
    5bb6:	f017 fe45 	bl	1d844 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5bba:	4b22      	ldr	r3, [pc, #136]	; (5c44 <bt_conn_prepare_events+0x94>)
    5bbc:	2200      	movs	r2, #0
    5bbe:	4620      	mov	r0, r4
    5bc0:	2101      	movs	r1, #1
    5bc2:	f017 fe22 	bl	1d80a <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bc6:	f3bf 8f5b 	dmb	ish
    5bca:	4b1f      	ldr	r3, [pc, #124]	; (5c48 <bt_conn_prepare_events+0x98>)
    5bcc:	681a      	ldr	r2, [r3, #0]
    5bce:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    5bd2:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    5bd6:	b90a      	cbnz	r2, 5bdc <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5bd8:	2001      	movs	r0, #1
}
    5bda:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    5bdc:	f1a3 01bc 	sub.w	r1, r3, #188	; 0xbc
    5be0:	f813 3cb2 	ldrb.w	r3, [r3, #-178]
    5be4:	b993      	cbnz	r3, 5c0c <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5be6:	f3bf 8f5b 	dmb	ish
    5bea:	1d0b      	adds	r3, r1, #4
    5bec:	e853 2f00 	ldrex	r2, [r3]
    5bf0:	f022 0540 	bic.w	r5, r2, #64	; 0x40
    5bf4:	e843 5600 	strex	r6, r5, [r3]
    5bf8:	2e00      	cmp	r6, #0
    5bfa:	d1f7      	bne.n	5bec <bt_conn_prepare_events+0x3c>
    5bfc:	f3bf 8f5b 	dmb	ish
    5c00:	0653      	lsls	r3, r2, #25
    5c02:	d503      	bpl.n	5c0c <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
    5c04:	4608      	mov	r0, r1
    5c06:	f014 fcb7 	bl	1a578 <conn_cleanup>
		return -ENOTCONN;
    5c0a:	e7e5      	b.n	5bd8 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
    5c0c:	7a8b      	ldrb	r3, [r1, #10]
    5c0e:	2b07      	cmp	r3, #7
    5c10:	d1e2      	bne.n	5bd8 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
    5c12:	4b0e      	ldr	r3, [pc, #56]	; (5c4c <bt_conn_prepare_events+0x9c>)
    5c14:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
    5c18:	2a00      	cmp	r2, #0
    5c1a:	d0dd      	beq.n	5bd8 <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    5c1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
    5c20:	6b89      	ldr	r1, [r1, #56]	; 0x38
    5c22:	b151      	cbz	r1, 5c3a <bt_conn_prepare_events+0x8a>
    5c24:	b94a      	cbnz	r2, 5c3a <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
    5c26:	f503 7384 	add.w	r3, r3, #264	; 0x108
    5c2a:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
    5c2c:	f017 fded 	bl	1d80a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    5c30:	2301      	movs	r3, #1
    5c32:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    5c36:	2002      	movs	r0, #2
	return ev_count;
    5c38:	e7cf      	b.n	5bda <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
    5c3a:	4b05      	ldr	r3, [pc, #20]	; (5c50 <bt_conn_prepare_events+0xa0>)
    5c3c:	2200      	movs	r2, #0
    5c3e:	2104      	movs	r1, #4
    5c40:	e7f4      	b.n	5c2c <bt_conn_prepare_events+0x7c>
    5c42:	bf00      	nop
    5c44:	200001e0 	.word	0x200001e0
    5c48:	20000c3c 	.word	0x20000c3c
    5c4c:	20000008 	.word	0x20000008
    5c50:	20000bb8 	.word	0x20000bb8

00005c54 <bt_conn_set_state>:
{
    5c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
    5c58:	7a85      	ldrb	r5, [r0, #10]
    5c5a:	428d      	cmp	r5, r1
{
    5c5c:	4604      	mov	r4, r0
	if (conn->state == state) {
    5c5e:	f000 8098 	beq.w	5d92 <bt_conn_set_state+0x13e>
	conn->state = state;
    5c62:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    5c64:	b925      	cbnz	r5, 5c70 <bt_conn_set_state+0x1c>
		if (conn->type != BT_CONN_TYPE_ISO) {
    5c66:	7883      	ldrb	r3, [r0, #2]
    5c68:	2b08      	cmp	r3, #8
    5c6a:	d001      	beq.n	5c70 <bt_conn_set_state+0x1c>
			bt_conn_ref(conn);
    5c6c:	f014 fcf4 	bl	1a658 <bt_conn_ref>
	switch (conn->state) {
    5c70:	7aa3      	ldrb	r3, [r4, #10]
    5c72:	2b01      	cmp	r3, #1
    5c74:	d11d      	bne.n	5cb2 <bt_conn_set_state+0x5e>
	if (bt_dev.le.acl_mtu) {
    5c76:	4d56      	ldr	r5, [pc, #344]	; (5dd0 <bt_conn_set_state+0x17c>)
		tx->pending_no_cb = 0U;
    5c78:	2700      	movs	r7, #0
	return NULL;
    5c7a:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
    5c7e:	f04f 0220 	mov.w	r2, #32
    5c82:	f3ef 8311 	mrs	r3, BASEPRI
    5c86:	f382 8812 	msr	BASEPRI_MAX, r2
    5c8a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    5c8e:	69e2      	ldr	r2, [r4, #28]
    5c90:	2a00      	cmp	r2, #0
    5c92:	d078      	beq.n	5d86 <bt_conn_set_state+0x132>
			conn->pending_no_cb--;
    5c94:	3a01      	subs	r2, #1
    5c96:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
    5c98:	f383 8811 	msr	BASEPRI, r3
    5c9c:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
    5ca0:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	bf14      	ite	ne
    5ca8:	4630      	movne	r0, r6
    5caa:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
    5cac:	f012 f8b4 	bl	17e18 <z_impl_k_sem_give>
}
    5cb0:	e7e5      	b.n	5c7e <bt_conn_set_state+0x2a>
	switch (conn->state) {
    5cb2:	2b07      	cmp	r3, #7
    5cb4:	d009      	beq.n	5cca <bt_conn_set_state+0x76>
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d16b      	bne.n	5d92 <bt_conn_set_state+0x13e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5cba:	78a3      	ldrb	r3, [r4, #2]
    5cbc:	2b04      	cmp	r3, #4
    5cbe:	d124      	bne.n	5d0a <bt_conn_set_state+0xb6>
			bt_conn_unref(conn);
    5cc0:	4620      	mov	r0, r4
}
    5cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
    5cc6:	f014 bce3 	b.w	1a690 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5cca:	78a3      	ldrb	r3, [r4, #2]
    5ccc:	2b04      	cmp	r3, #4
    5cce:	d060      	beq.n	5d92 <bt_conn_set_state+0x13e>
	z_impl_k_queue_init(queue);
    5cd0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5cd4:	f017 f990 	bl	1cff8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    5cd8:	483e      	ldr	r0, [pc, #248]	; (5dd4 <bt_conn_set_state+0x180>)
    5cda:	2100      	movs	r1, #0
    5cdc:	f013 f888 	bl	18df0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    5ce0:	2300      	movs	r3, #0
	list->tail = NULL;
    5ce2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5ce6:	78e3      	ldrb	r3, [r4, #3]
    5ce8:	2b01      	cmp	r3, #1
    5cea:	d152      	bne.n	5d92 <bt_conn_set_state+0x13e>
			if (conn->type == BT_CONN_TYPE_LE) {
    5cec:	78a3      	ldrb	r3, [r4, #2]
    5cee:	2b01      	cmp	r3, #1
				conn->le.conn_param_retry_countdown =
    5cf0:	bf04      	itt	eq
    5cf2:	2303      	moveq	r3, #3
    5cf4:	f884 30ac 	strbeq.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
    5cf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    5cfc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    5d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
    5d04:	2300      	movs	r3, #0
    5d06:	f012 ba8d 	b.w	18224 <k_work_schedule>
		switch (old_state) {
    5d0a:	3d01      	subs	r5, #1
    5d0c:	2d05      	cmp	r5, #5
    5d0e:	d840      	bhi.n	5d92 <bt_conn_set_state+0x13e>
    5d10:	a301      	add	r3, pc, #4	; (adr r3, 5d18 <bt_conn_set_state+0xc4>)
    5d12:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    5d16:	bf00      	nop
    5d18:	00005d31 	.word	0x00005d31
    5d1c:	00005d79 	.word	0x00005d79
    5d20:	00005cc1 	.word	0x00005cc1
    5d24:	00005cc1 	.word	0x00005cc1
    5d28:	00005d79 	.word	0x00005d79
    5d2c:	00005d79 	.word	0x00005d79
			tx_notify(conn);
    5d30:	4620      	mov	r0, r4
    5d32:	f7ff fdb1 	bl	5898 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    5d36:	78a3      	ldrb	r3, [r4, #2]
    5d38:	2b01      	cmp	r3, #1
    5d3a:	d10a      	bne.n	5d52 <bt_conn_set_state+0xfe>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
    5d3c:	f104 0558 	add.w	r5, r4, #88	; 0x58
    5d40:	4628      	mov	r0, r5
    5d42:	f017 fa71 	bl	1d228 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
    5d46:	f010 0f0c 	tst.w	r0, #12
    5d4a:	d002      	beq.n	5d52 <bt_conn_set_state+0xfe>
				k_work_cancel_delayable(&conn->deferred_work);
    5d4c:	4628      	mov	r0, r5
    5d4e:	f017 fa6d 	bl	1d22c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d52:	f3bf 8f5b 	dmb	ish
    5d56:	3404      	adds	r4, #4
    5d58:	e854 3f00 	ldrex	r3, [r4]
    5d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d60:	e844 3200 	strex	r2, r3, [r4]
    5d64:	2a00      	cmp	r2, #0
    5d66:	d1f7      	bne.n	5d58 <bt_conn_set_state+0x104>
    5d68:	f3bf 8f5b 	dmb	ish
    5d6c:	4819      	ldr	r0, [pc, #100]	; (5dd4 <bt_conn_set_state+0x180>)
}
    5d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d72:	2100      	movs	r1, #0
    5d74:	f013 b83c 	b.w	18df0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    5d78:	7a63      	ldrb	r3, [r4, #9]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d0a0      	beq.n	5cc0 <bt_conn_set_state+0x6c>
				notify_connected(conn);
    5d7e:	4620      	mov	r0, r4
    5d80:	f7ff fd6c 	bl	585c <notify_connected>
    5d84:	e79c      	b.n	5cc0 <bt_conn_set_state+0x6c>
	return list->head;
    5d86:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
    5d88:	b929      	cbnz	r1, 5d96 <bt_conn_set_state+0x142>
    5d8a:	f383 8811 	msr	BASEPRI, r3
    5d8e:	f3bf 8f6f 	isb	sy
}
    5d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5d96:	69a0      	ldr	r0, [r4, #24]
	return node->next;
    5d98:	680a      	ldr	r2, [r1, #0]
	list->head = node;
    5d9a:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5d9c:	4281      	cmp	r1, r0
	list->tail = node;
    5d9e:	bf08      	it	eq
    5da0:	61a2      	streq	r2, [r4, #24]
    5da2:	f383 8811 	msr	BASEPRI, r3
    5da6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    5daa:	f04f 0220 	mov.w	r2, #32
    5dae:	f3ef 8311 	mrs	r3, BASEPRI
    5db2:	f382 8812 	msr	BASEPRI_MAX, r2
    5db6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    5dba:	68ca      	ldr	r2, [r1, #12]
    5dbc:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    5dbe:	60cf      	str	r7, [r1, #12]
	__asm__ volatile(
    5dc0:	f383 8811 	msr	BASEPRI, r3
    5dc4:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
    5dc8:	4620      	mov	r0, r4
    5dca:	f7ff fd95 	bl	58f8 <conn_tx_destroy>
    5dce:	e767      	b.n	5ca0 <bt_conn_set_state+0x4c>
    5dd0:	20000008 	.word	0x20000008
    5dd4:	200001e0 	.word	0x200001e0

00005dd8 <bt_conn_lookup_handle>:
{
    5dd8:	b510      	push	{r4, lr}
    5dda:	4602      	mov	r2, r0
    5ddc:	460c      	mov	r4, r1
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    5dde:	4807      	ldr	r0, [pc, #28]	; (5dfc <bt_conn_lookup_handle+0x24>)
    5de0:	2101      	movs	r1, #1
    5de2:	f014 fc71 	bl	1a6c8 <conn_lookup_handle>
	if (conn) {
    5de6:	4603      	mov	r3, r0
    5de8:	b910      	cbnz	r0, 5df0 <bt_conn_lookup_handle+0x18>
	return NULL;
    5dea:	2300      	movs	r3, #0
}
    5dec:	4618      	mov	r0, r3
    5dee:	bd10      	pop	{r4, pc}
		if (type & conn->type) {
    5df0:	7882      	ldrb	r2, [r0, #2]
    5df2:	4214      	tst	r4, r2
    5df4:	d1fa      	bne.n	5dec <bt_conn_lookup_handle+0x14>
		bt_conn_unref(conn);
    5df6:	f014 fc4b 	bl	1a690 <bt_conn_unref>
    5dfa:	e7f6      	b.n	5dea <bt_conn_lookup_handle+0x12>
    5dfc:	20000b80 	.word	0x20000b80

00005e00 <bt_conn_index>:
		index = conn - acl_conns;
    5e00:	4b03      	ldr	r3, [pc, #12]	; (5e10 <bt_conn_index+0x10>)
    5e02:	1ac0      	subs	r0, r0, r3
    5e04:	4b03      	ldr	r3, [pc, #12]	; (5e14 <bt_conn_index+0x14>)
    5e06:	1180      	asrs	r0, r0, #6
    5e08:	4358      	muls	r0, r3
}
    5e0a:	b2c0      	uxtb	r0, r0
    5e0c:	4770      	bx	lr
    5e0e:	bf00      	nop
    5e10:	20000b80 	.word	0x20000b80
    5e14:	aaaaaaab 	.word	0xaaaaaaab

00005e18 <bt_conn_create_pdu_timeout>:
{
    5e18:	b538      	push	{r3, r4, r5, lr}
    5e1a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    5e1c:	4906      	ldr	r1, [pc, #24]	; (5e38 <bt_conn_create_pdu_timeout+0x20>)
    5e1e:	2800      	cmp	r0, #0
    5e20:	bf08      	it	eq
    5e22:	4608      	moveq	r0, r1
    5e24:	f015 fe38 	bl	1ba98 <net_buf_alloc_fixed>
	if (!buf) {
    5e28:	4604      	mov	r4, r0
    5e2a:	b118      	cbz	r0, 5e34 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    5e2c:	1d29      	adds	r1, r5, #4
    5e2e:	300c      	adds	r0, #12
    5e30:	f015 fe6d 	bl	1bb0e <net_buf_simple_reserve>
}
    5e34:	4620      	mov	r0, r4
    5e36:	bd38      	pop	{r3, r4, r5, pc}
    5e38:	20000954 	.word	0x20000954

00005e3c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    5e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5e3e:	f3bf 8f5b 	dmb	ish
    5e42:	6842      	ldr	r2, [r0, #4]
    5e44:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    5e48:	0592      	lsls	r2, r2, #22
{
    5e4a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    5e4c:	f100 0304 	add.w	r3, r0, #4
    5e50:	d519      	bpl.n	5e86 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    5e52:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    5e56:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    5e5a:	4291      	cmp	r1, r2
    5e5c:	d813      	bhi.n	5e86 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    5e5e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    5e62:	4291      	cmp	r1, r2
    5e64:	d30f      	bcc.n	5e86 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    5e66:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    5e6a:	4291      	cmp	r1, r2
    5e6c:	d10b      	bne.n	5e86 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e6e:	f3bf 8f5b 	dmb	ish
    5e72:	e853 1f00 	ldrex	r1, [r3]
    5e76:	f421 7100 	bic.w	r1, r1, #512	; 0x200
    5e7a:	e843 1200 	strex	r2, r1, [r3]
    5e7e:	2a00      	cmp	r2, #0
    5e80:	d1f7      	bne.n	5e72 <notify_le_param_updated+0x36>
    5e82:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    5e86:	4b10      	ldr	r3, [pc, #64]	; (5ec8 <notify_le_param_updated+0x8c>)
    5e88:	681d      	ldr	r5, [r3, #0]
    5e8a:	b925      	cbnz	r5, 5e96 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5e8c:	4d0f      	ldr	r5, [pc, #60]	; (5ecc <notify_le_param_updated+0x90>)
    5e8e:	4f10      	ldr	r7, [pc, #64]	; (5ed0 <notify_le_param_updated+0x94>)
    5e90:	42bd      	cmp	r5, r7
    5e92:	d30c      	bcc.n	5eae <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    5e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    5e96:	68ee      	ldr	r6, [r5, #12]
    5e98:	b13e      	cbz	r6, 5eaa <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    5e9a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    5e9e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    5ea2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    5ea6:	4620      	mov	r0, r4
    5ea8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5eaa:	692d      	ldr	r5, [r5, #16]
    5eac:	e7ed      	b.n	5e8a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    5eae:	68ee      	ldr	r6, [r5, #12]
    5eb0:	b13e      	cbz	r6, 5ec2 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    5eb2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    5eb6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    5eba:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    5ebe:	4620      	mov	r0, r4
    5ec0:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5ec2:	3514      	adds	r5, #20
    5ec4:	e7e4      	b.n	5e90 <notify_le_param_updated+0x54>
    5ec6:	bf00      	nop
    5ec8:	20001260 	.word	0x20001260
    5ecc:	0001dbbc 	.word	0x0001dbbc
    5ed0:	0001dbd0 	.word	0x0001dbd0

00005ed4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    5ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ed8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    5eda:	4608      	mov	r0, r1
{
    5edc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    5ede:	f014 f8f8 	bl	1a0d2 <bt_le_conn_params_valid>
    5ee2:	4605      	mov	r5, r0
    5ee4:	b918      	cbnz	r0, 5eee <le_param_req+0x1a>
		return false;
    5ee6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    5ee8:	4628      	mov	r0, r5
    5eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5eee:	4b13      	ldr	r3, [pc, #76]	; (5f3c <le_param_req+0x68>)
    5ef0:	681e      	ldr	r6, [r3, #0]
    5ef2:	b946      	cbnz	r6, 5f06 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5ef4:	4e12      	ldr	r6, [pc, #72]	; (5f40 <le_param_req+0x6c>)
    5ef6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5f44 <le_param_req+0x70>
    5efa:	4546      	cmp	r6, r8
    5efc:	d2f4      	bcs.n	5ee8 <le_param_req+0x14>
		if (!cb->le_param_req) {
    5efe:	68b3      	ldr	r3, [r6, #8]
    5f00:	b983      	cbnz	r3, 5f24 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5f02:	3614      	adds	r6, #20
    5f04:	e7f9      	b.n	5efa <le_param_req+0x26>
		if (!cb->le_param_req) {
    5f06:	68b3      	ldr	r3, [r6, #8]
    5f08:	b90b      	cbnz	r3, 5f0e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    5f0a:	6936      	ldr	r6, [r6, #16]
    5f0c:	e7f1      	b.n	5ef2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    5f0e:	4621      	mov	r1, r4
    5f10:	4638      	mov	r0, r7
    5f12:	4798      	blx	r3
    5f14:	2800      	cmp	r0, #0
    5f16:	d0e6      	beq.n	5ee6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    5f18:	4620      	mov	r0, r4
    5f1a:	f014 f8da 	bl	1a0d2 <bt_le_conn_params_valid>
    5f1e:	2800      	cmp	r0, #0
    5f20:	d1f3      	bne.n	5f0a <le_param_req+0x36>
    5f22:	e7e0      	b.n	5ee6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    5f24:	4621      	mov	r1, r4
    5f26:	4638      	mov	r0, r7
    5f28:	4798      	blx	r3
    5f2a:	2800      	cmp	r0, #0
    5f2c:	d0db      	beq.n	5ee6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    5f2e:	4620      	mov	r0, r4
    5f30:	f014 f8cf 	bl	1a0d2 <bt_le_conn_params_valid>
    5f34:	2800      	cmp	r0, #0
    5f36:	d1e4      	bne.n	5f02 <le_param_req+0x2e>
    5f38:	e7d5      	b.n	5ee6 <le_param_req+0x12>
    5f3a:	bf00      	nop
    5f3c:	20001260 	.word	0x20001260
    5f40:	0001dbbc 	.word	0x0001dbbc
    5f44:	0001dbd0 	.word	0x0001dbd0

00005f48 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    5f48:	b570      	push	{r4, r5, r6, lr}
    5f4a:	4606      	mov	r6, r0
    5f4c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    5f4e:	4809      	ldr	r0, [pc, #36]	; (5f74 <bt_conn_add_le+0x2c>)
    5f50:	2101      	movs	r1, #1
    5f52:	f7ff fdb7 	bl	5ac4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    5f56:	4604      	mov	r4, r0
    5f58:	b150      	cbz	r0, 5f70 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    5f5a:	7206      	strb	r6, [r0, #8]
    5f5c:	2207      	movs	r2, #7
    5f5e:	4629      	mov	r1, r5
    5f60:	3088      	adds	r0, #136	; 0x88
    5f62:	f013 fe47 	bl	19bf4 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    5f66:	2301      	movs	r3, #1
    5f68:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5f6a:	4b03      	ldr	r3, [pc, #12]	; (5f78 <bt_conn_add_le+0x30>)
    5f6c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    5f70:	4620      	mov	r0, r4
    5f72:	bd70      	pop	{r4, r5, r6, pc}
    5f74:	20000b80 	.word	0x20000b80
    5f78:	00280018 	.word	0x00280018

00005f7c <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5f80:	480a      	ldr	r0, [pc, #40]	; (5fac <bt_conn_lookup_addr_le+0x30>)
{
    5f82:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5f84:	f014 fb68 	bl	1a658 <bt_conn_ref>
    5f88:	4604      	mov	r4, r0

		if (!conn) {
    5f8a:	b120      	cbz	r0, 5f96 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    5f8c:	7883      	ldrb	r3, [r0, #2]
    5f8e:	2b01      	cmp	r3, #1
    5f90:	d004      	beq.n	5f9c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
    5f92:	f014 fb7d 	bl	1a690 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    5f96:	2400      	movs	r4, #0
}
    5f98:	4620      	mov	r0, r4
    5f9a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    5f9c:	4632      	mov	r2, r6
    5f9e:	4629      	mov	r1, r5
    5fa0:	f014 fbbf 	bl	1a722 <bt_conn_is_peer_addr_le>
    5fa4:	2800      	cmp	r0, #0
    5fa6:	d1f7      	bne.n	5f98 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    5fa8:	4620      	mov	r0, r4
    5faa:	e7f2      	b.n	5f92 <bt_conn_lookup_addr_le+0x16>
    5fac:	20000b80 	.word	0x20000b80

00005fb0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    5fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fb2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5fb4:	480e      	ldr	r0, [pc, #56]	; (5ff0 <bt_conn_lookup_state_le+0x40>)
{
    5fb6:	460e      	mov	r6, r1
    5fb8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5fba:	f014 fb4d 	bl	1a658 <bt_conn_ref>

		if (!conn) {
    5fbe:	4604      	mov	r4, r0
    5fc0:	b120      	cbz	r0, 5fcc <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    5fc2:	7883      	ldrb	r3, [r0, #2]
    5fc4:	2b01      	cmp	r3, #1
    5fc6:	d003      	beq.n	5fd0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    5fc8:	f014 fb62 	bl	1a690 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    5fcc:	2400      	movs	r4, #0
    5fce:	e00d      	b.n	5fec <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    5fd0:	b136      	cbz	r6, 5fe0 <bt_conn_lookup_state_le+0x30>
    5fd2:	4632      	mov	r2, r6
    5fd4:	4629      	mov	r1, r5
    5fd6:	f014 fba4 	bl	1a722 <bt_conn_is_peer_addr_le>
    5fda:	b908      	cbnz	r0, 5fe0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    5fdc:	4620      	mov	r0, r4
    5fde:	e7f3      	b.n	5fc8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    5fe0:	7aa3      	ldrb	r3, [r4, #10]
    5fe2:	42bb      	cmp	r3, r7
    5fe4:	d1fa      	bne.n	5fdc <bt_conn_lookup_state_le+0x2c>
    5fe6:	7a23      	ldrb	r3, [r4, #8]
    5fe8:	42ab      	cmp	r3, r5
    5fea:	d1f7      	bne.n	5fdc <bt_conn_lookup_state_le+0x2c>
}
    5fec:	4620      	mov	r0, r4
    5fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ff0:	20000b80 	.word	0x20000b80

00005ff4 <send_conn_le_param_update>:
{
    5ff4:	b538      	push	{r3, r4, r5, lr}
    5ff6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    5ff8:	4608      	mov	r0, r1
{
    5ffa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    5ffc:	f014 f869 	bl	1a0d2 <bt_le_conn_params_valid>
    6000:	b348      	cbz	r0, 6056 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6002:	4b16      	ldr	r3, [pc, #88]	; (605c <send_conn_le_param_update+0x68>)
    6004:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
    6008:	0799      	lsls	r1, r3, #30
    600a:	d407      	bmi.n	601c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    600c:	78e3      	ldrb	r3, [r4, #3]
    600e:	b183      	cbz	r3, 6032 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    6010:	4629      	mov	r1, r5
    6012:	4620      	mov	r0, r4
}
    6014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6018:	f000 b9b0 	b.w	637c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    601c:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
    6020:	079a      	lsls	r2, r3, #30
    6022:	d5f3      	bpl.n	600c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6024:	f3bf 8f5b 	dmb	ish
    6028:	6863      	ldr	r3, [r4, #4]
    602a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    602e:	055b      	lsls	r3, r3, #21
    6030:	d4ec      	bmi.n	600c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    6032:	4629      	mov	r1, r5
    6034:	4620      	mov	r0, r4
    6036:	f014 fb9c 	bl	1a772 <bt_conn_le_conn_update>
		if (rc == 0) {
    603a:	b958      	cbnz	r0, 6054 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    603c:	882b      	ldrh	r3, [r5, #0]
    603e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    6042:	886b      	ldrh	r3, [r5, #2]
    6044:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    6048:	88ab      	ldrh	r3, [r5, #4]
    604a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    604e:	88eb      	ldrh	r3, [r5, #6]
    6050:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    6054:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6056:	f06f 0015 	mvn.w	r0, #21
    605a:	e7fb      	b.n	6054 <send_conn_le_param_update+0x60>
    605c:	20000008 	.word	0x20000008

00006060 <deferred_work>:
{
    6060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    6062:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    6066:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    6068:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    606c:	b9fb      	cbnz	r3, 60ae <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    606e:	4630      	mov	r0, r6
    6070:	f014 fbd4 	bl	1a81c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6074:	4b34      	ldr	r3, [pc, #208]	; (6148 <deferred_work+0xe8>)
    6076:	681d      	ldr	r5, [r3, #0]
    6078:	b94d      	cbnz	r5, 608e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    607a:	4d34      	ldr	r5, [pc, #208]	; (614c <deferred_work+0xec>)
    607c:	4f34      	ldr	r7, [pc, #208]	; (6150 <deferred_work+0xf0>)
    607e:	42bd      	cmp	r5, r7
    6080:	d30d      	bcc.n	609e <deferred_work+0x3e>
		bt_conn_unref(conn);
    6082:	4630      	mov	r0, r6
}
    6084:	b003      	add	sp, #12
    6086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    608a:	f014 bb01 	b.w	1a690 <bt_conn_unref>
		if (cb->disconnected) {
    608e:	686b      	ldr	r3, [r5, #4]
    6090:	b11b      	cbz	r3, 609a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    6092:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    6096:	4630      	mov	r0, r6
    6098:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    609a:	692d      	ldr	r5, [r5, #16]
    609c:	e7ec      	b.n	6078 <deferred_work+0x18>
		if (cb->disconnected) {
    609e:	686b      	ldr	r3, [r5, #4]
    60a0:	b11b      	cbz	r3, 60aa <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    60a2:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    60a6:	4630      	mov	r0, r6
    60a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    60aa:	3514      	adds	r5, #20
    60ac:	e7e7      	b.n	607e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    60ae:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    60b2:	2b01      	cmp	r3, #1
    60b4:	d130      	bne.n	6118 <deferred_work+0xb8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    60ba:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    60be:	e855 3f00 	ldrex	r3, [r5]
    60c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    60c6:	e845 2100 	strex	r1, r2, [r5]
    60ca:	2900      	cmp	r1, #0
    60cc:	d1f7      	bne.n	60be <deferred_work+0x5e>
    60ce:	f3bf 8f5b 	dmb	ish
    60d2:	059b      	lsls	r3, r3, #22
    60d4:	d522      	bpl.n	611c <deferred_work+0xbc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    60d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    60d8:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
    60da:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    60dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    60de:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
    60e0:	4630      	mov	r0, r6
    60e2:	f7ff ff87 	bl	5ff4 <send_conn_le_param_update>
		if (!err) {
    60e6:	b958      	cbnz	r0, 6100 <deferred_work+0xa0>
    60e8:	f3bf 8f5b 	dmb	ish
    60ec:	e855 3f00 	ldrex	r3, [r5]
    60f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    60f4:	e845 3200 	strex	r2, r3, [r5]
    60f8:	2a00      	cmp	r2, #0
    60fa:	d1f7      	bne.n	60ec <deferred_work+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60fc:	f3bf 8f5b 	dmb	ish
    6100:	f3bf 8f5b 	dmb	ish
    6104:	e855 3f00 	ldrex	r3, [r5]
    6108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    610c:	e845 3200 	strex	r2, r3, [r5]
    6110:	2a00      	cmp	r2, #0
    6112:	d1f7      	bne.n	6104 <deferred_work+0xa4>
    6114:	f3bf 8f5b 	dmb	ish
}
    6118:	b003      	add	sp, #12
    611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    611c:	4a0d      	ldr	r2, [pc, #52]	; (6154 <deferred_work+0xf4>)
    611e:	6810      	ldr	r0, [r2, #0]
    6120:	6851      	ldr	r1, [r2, #4]
    6122:	466b      	mov	r3, sp
    6124:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
    6126:	4669      	mov	r1, sp
    6128:	4630      	mov	r0, r6
    612a:	f7ff ff63 	bl	5ff4 <send_conn_le_param_update>
		if (!err) {
    612e:	2800      	cmp	r0, #0
    6130:	d1e6      	bne.n	6100 <deferred_work+0xa0>
    6132:	f3bf 8f5b 	dmb	ish
    6136:	e855 3f00 	ldrex	r3, [r5]
    613a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    613e:	e845 3200 	strex	r2, r3, [r5]
    6142:	2a00      	cmp	r2, #0
    6144:	d0da      	beq.n	60fc <deferred_work+0x9c>
    6146:	e7f6      	b.n	6136 <deferred_work+0xd6>
    6148:	20001260 	.word	0x20001260
    614c:	0001dbbc 	.word	0x0001dbbc
    6150:	0001dbd0 	.word	0x0001dbd0
    6154:	0001dd50 	.word	0x0001dd50

00006158 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    6158:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    615a:	4801      	ldr	r0, [pc, #4]	; (6160 <bt_conn_create_frag_timeout+0x8>)
    615c:	f7ff be5c 	b.w	5e18 <bt_conn_create_pdu_timeout>
    6160:	200009ac 	.word	0x200009ac

00006164 <bt_conn_process_tx>:
{
    6164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    6168:	7a83      	ldrb	r3, [r0, #10]
{
    616a:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    616c:	b993      	cbnz	r3, 6194 <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    616e:	f3bf 8f5b 	dmb	ish
    6172:	1d03      	adds	r3, r0, #4
    6174:	e853 2f00 	ldrex	r2, [r3]
    6178:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    617c:	e843 1400 	strex	r4, r1, [r3]
    6180:	2c00      	cmp	r4, #0
    6182:	d1f7      	bne.n	6174 <bt_conn_process_tx+0x10>
    6184:	f3bf 8f5b 	dmb	ish
    6188:	0653      	lsls	r3, r2, #25
    618a:	d503      	bpl.n	6194 <bt_conn_process_tx+0x30>
}
    618c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
    6190:	f014 b9f2 	b.w	1a578 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
    6194:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6198:	f016 ff6f 	bl	1d07a <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
    619c:	4604      	mov	r4, r0
    619e:	b960      	cbnz	r0, 61ba <bt_conn_process_tx+0x56>
    61a0:	4a33      	ldr	r2, [pc, #204]	; (6270 <bt_conn_process_tx+0x10c>)
    61a2:	4934      	ldr	r1, [pc, #208]	; (6274 <bt_conn_process_tx+0x110>)
    61a4:	4834      	ldr	r0, [pc, #208]	; (6278 <bt_conn_process_tx+0x114>)
    61a6:	f240 33a6 	movw	r3, #934	; 0x3a6
    61aa:	f013 fa48 	bl	1963e <assert_print>
    61ae:	4040      	eors	r0, r0
    61b0:	f380 8811 	msr	BASEPRI, r0
    61b4:	f04f 0003 	mov.w	r0, #3
    61b8:	df02      	svc	2
	buf = net_buf_ref(buf);
    61ba:	4620      	mov	r0, r4
    61bc:	f015 fc75 	bl	1baaa <net_buf_ref>
	return bt_dev.le.acl_mtu;
    61c0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 627c <bt_conn_process_tx+0x118>
	if (fits_single_ctlr_buf(buf, conn) && !tx_data(buf)->is_cont) {
    61c4:	8a02      	ldrh	r2, [r0, #16]
    61c6:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
    61ca:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
    61cc:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
    61ce:	7f02      	ldrb	r2, [r0, #28]
	if (fits_single_ctlr_buf(buf, conn) && !tx_data(buf)->is_cont) {
    61d0:	d807      	bhi.n	61e2 <bt_conn_process_tx+0x7e>
    61d2:	b932      	cbnz	r2, 61e2 <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
    61d4:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
    61d6:	4621      	mov	r1, r4
    61d8:	4628      	mov	r0, r5
    61da:	f7ff fba3 	bl	5924 <send_frag>
    61de:	4606      	mov	r6, r0
    61e0:	e030      	b.n	6244 <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
    61e2:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
    61e4:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
    61e8:	8a22      	ldrh	r2, [r4, #16]
    61ea:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
    61ee:	429a      	cmp	r2, r3
    61f0:	d804      	bhi.n	61fc <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
    61f2:	2301      	movs	r3, #1
    61f4:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
    61f6:	2200      	movs	r2, #0
    61f8:	2303      	movs	r3, #3
    61fa:	e7ec      	b.n	61d6 <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
    61fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6204:	2000      	movs	r0, #0
    6206:	f7ff ffa7 	bl	6158 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    620a:	7aab      	ldrb	r3, [r5, #10]
    620c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    620e:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6210:	d006      	beq.n	6220 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
    6212:	f00e fbf1 	bl	149f8 <net_buf_unref>
	net_buf_unref(buf);
    6216:	4620      	mov	r0, r4
}
    6218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
    621c:	f00e bbec 	b.w	149f8 <net_buf_unref>
	tx_data(frag)->tx = NULL;
    6220:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
    6224:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
    6228:	4602      	mov	r2, r0
    622a:	463b      	mov	r3, r7
    622c:	4621      	mov	r1, r4
    622e:	4628      	mov	r0, r5
    6230:	f7ff fb78 	bl	5924 <send_frag>
		if (err) {
    6234:	4606      	mov	r6, r0
    6236:	b1b8      	cbz	r0, 6268 <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
    6238:	f007 0701 	and.w	r7, r7, #1
    623c:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
    623e:	4640      	mov	r0, r8
    6240:	f00e fbda 	bl	149f8 <net_buf_unref>
	net_buf_unref(buf);
    6244:	4620      	mov	r0, r4
    6246:	f00e fbd7 	bl	149f8 <net_buf_unref>
	if (err  == -EIO) {
    624a:	3605      	adds	r6, #5
    624c:	d10e      	bne.n	626c <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
    624e:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
    6250:	2300      	movs	r3, #0
    6252:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
    6254:	4620      	mov	r0, r4
    6256:	f00e fbcf 	bl	149f8 <net_buf_unref>
		if (tx) {
    625a:	b13e      	cbz	r6, 626c <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
    625c:	4631      	mov	r1, r6
    625e:	4628      	mov	r0, r5
}
    6260:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
    6264:	f7ff bb48 	b.w	58f8 <conn_tx_destroy>
		flags = FRAG_CONT;
    6268:	2701      	movs	r7, #1
    626a:	e7bd      	b.n	61e8 <bt_conn_process_tx+0x84>
}
    626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6270:	0001f9cd 	.word	0x0001f9cd
    6274:	0001fa51 	.word	0x0001fa51
    6278:	0001f8db 	.word	0x0001f8db
    627c:	20000008 	.word	0x20000008

00006280 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    6280:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
    6282:	480c      	ldr	r0, [pc, #48]	; (62b4 <bt_conn_init+0x34>)
    6284:	f016 feb8 	bl	1cff8 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    6288:	490b      	ldr	r1, [pc, #44]	; (62b8 <bt_conn_init+0x38>)
    628a:	480a      	ldr	r0, [pc, #40]	; (62b4 <bt_conn_init+0x34>)
    628c:	f016 fee0 	bl	1d050 <k_queue_append>
    6290:	490a      	ldr	r1, [pc, #40]	; (62bc <bt_conn_init+0x3c>)
    6292:	4808      	ldr	r0, [pc, #32]	; (62b4 <bt_conn_init+0x34>)
    6294:	f016 fedc 	bl	1d050 <k_queue_append>
    6298:	4909      	ldr	r1, [pc, #36]	; (62c0 <bt_conn_init+0x40>)
    629a:	4806      	ldr	r0, [pc, #24]	; (62b4 <bt_conn_init+0x34>)
    629c:	f016 fed8 	bl	1d050 <k_queue_append>
	}

	bt_att_init();
    62a0:	f000 fe04 	bl	6eac <bt_att_init>

	err = bt_smp_init();
    62a4:	f015 fbf5 	bl	1ba92 <bt_smp_init>
	if (err) {
    62a8:	4604      	mov	r4, r0
    62aa:	b908      	cbnz	r0, 62b0 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    62ac:	f014 fb40 	bl	1a930 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    62b0:	4620      	mov	r0, r4
    62b2:	bd10      	pop	{r4, pc}
    62b4:	2000093c 	.word	0x2000093c
    62b8:	20001230 	.word	0x20001230
    62bc:	20001240 	.word	0x20001240
    62c0:	20001250 	.word	0x20001250

000062c4 <l2cap_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    62c4:	4b04      	ldr	r3, [pc, #16]	; (62d8 <l2cap_accept+0x14>)
    62c6:	6818      	ldr	r0, [r3, #0]
    62c8:	b918      	cbnz	r0, 62d2 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    62ca:	4a04      	ldr	r2, [pc, #16]	; (62dc <l2cap_accept+0x18>)
    62cc:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    62ce:	600b      	str	r3, [r1, #0]

		return 0;
    62d0:	4770      	bx	lr
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    62d2:	f06f 000b 	mvn.w	r0, #11
}
    62d6:	4770      	bx	lr
    62d8:	20001264 	.word	0x20001264
    62dc:	0001df18 	.word	0x0001df18

000062e0 <bt_l2cap_connected>:
{
    62e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    62e2:	4d24      	ldr	r5, [pc, #144]	; (6374 <bt_l2cap_connected+0x94>)
    62e4:	4f24      	ldr	r7, [pc, #144]	; (6378 <bt_l2cap_connected+0x98>)
{
    62e6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    62e8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    62ea:	42bd      	cmp	r5, r7
    62ec:	d301      	bcc.n	62f2 <bt_l2cap_connected+0x12>
}
    62ee:	b003      	add	sp, #12
    62f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
    62f2:	686b      	ldr	r3, [r5, #4]
    62f4:	a901      	add	r1, sp, #4
    62f6:	4620      	mov	r0, r4
    62f8:	4798      	blx	r3
    62fa:	2800      	cmp	r0, #0
    62fc:	db34      	blt.n	6368 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
    62fe:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
    6300:	882a      	ldrh	r2, [r5, #0]
    6302:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
    6304:	849a      	strh	r2, [r3, #36]	; 0x24
    6306:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    630a:	68a8      	ldr	r0, [r5, #8]
    630c:	f3bf 8f5b 	dmb	ish
    6310:	e852 1f00 	ldrex	r1, [r2]
    6314:	e842 6c00 	strex	ip, r6, [r2]
    6318:	f1bc 0f00 	cmp.w	ip, #0
    631c:	d1f8      	bne.n	6310 <bt_l2cap_connected+0x30>
    631e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    6322:	609e      	str	r6, [r3, #8]
	return list->tail;
    6324:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    6326:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
    632a:	b9f9      	cbnz	r1, 636c <bt_l2cap_connected+0x8c>
	list->head = node;
    632c:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
    6330:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
    6332:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
    6334:	9801      	ldr	r0, [sp, #4]
    6336:	6843      	ldr	r3, [r0, #4]
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	b103      	cbz	r3, 633e <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    633c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    633e:	9b01      	ldr	r3, [sp, #4]
    6340:	f3bf 8f5b 	dmb	ish
    6344:	3310      	adds	r3, #16
    6346:	e853 1f00 	ldrex	r1, [r3]
    634a:	f041 0101 	orr.w	r1, r1, #1
    634e:	e843 1200 	strex	r2, r1, [r3]
    6352:	2a00      	cmp	r2, #0
    6354:	d1f7      	bne.n	6346 <bt_l2cap_connected+0x66>
    6356:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    635a:	9801      	ldr	r0, [sp, #4]
    635c:	6843      	ldr	r3, [r0, #4]
    635e:	69db      	ldr	r3, [r3, #28]
    6360:	b113      	cbz	r3, 6368 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
    6362:	f100 0110 	add.w	r1, r0, #16
    6366:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    6368:	350c      	adds	r5, #12
    636a:	e7be      	b.n	62ea <bt_l2cap_connected+0xa>
	parent->next = child;
    636c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    636e:	6562      	str	r2, [r4, #84]	; 0x54
}
    6370:	e7de      	b.n	6330 <bt_l2cap_connected+0x50>
    6372:	bf00      	nop
    6374:	0001db98 	.word	0x0001db98
    6378:	0001dbbc 	.word	0x0001dbbc

0000637c <bt_l2cap_update_conn_param>:
{
    637c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    637e:	4b17      	ldr	r3, [pc, #92]	; (63dc <bt_l2cap_update_conn_param+0x60>)
{
    6380:	460e      	mov	r6, r1
	ident++;
    6382:	7819      	ldrb	r1, [r3, #0]
    6384:	3101      	adds	r1, #1
    6386:	b2c9      	uxtb	r1, r1
    6388:	2901      	cmp	r1, #1
    638a:	bf38      	it	cc
    638c:	2101      	movcc	r1, #1
{
    638e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6390:	2208      	movs	r2, #8
    6392:	2012      	movs	r0, #18
	ident++;
    6394:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6396:	f014 fa15 	bl	1a7c4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    639a:	4604      	mov	r4, r0
    639c:	b1d0      	cbz	r0, 63d4 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
    639e:	2108      	movs	r1, #8
    63a0:	300c      	adds	r0, #12
    63a2:	f015 fbb8 	bl	1bb16 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    63a6:	8833      	ldrh	r3, [r6, #0]
    63a8:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    63aa:	8873      	ldrh	r3, [r6, #2]
    63ac:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    63ae:	88b3      	ldrh	r3, [r6, #4]
    63b0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    63b2:	88f3      	ldrh	r3, [r6, #6]
    63b4:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    63b6:	2300      	movs	r3, #0
    63b8:	4628      	mov	r0, r5
    63ba:	9300      	str	r3, [sp, #0]
    63bc:	4622      	mov	r2, r4
    63be:	2105      	movs	r1, #5
    63c0:	f014 fa47 	bl	1a852 <bt_l2cap_send_cb>
	if (err) {
    63c4:	4605      	mov	r5, r0
    63c6:	b110      	cbz	r0, 63ce <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
    63c8:	4620      	mov	r0, r4
    63ca:	f00e fb15 	bl	149f8 <net_buf_unref>
}
    63ce:	4628      	mov	r0, r5
    63d0:	b002      	add	sp, #8
    63d2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    63d4:	f06f 050b 	mvn.w	r5, #11
    63d8:	e7f9      	b.n	63ce <bt_l2cap_update_conn_param+0x52>
    63da:	bf00      	nop
    63dc:	20002714 	.word	0x20002714

000063e0 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
    63e0:	2823      	cmp	r0, #35	; 0x23
    63e2:	d81f      	bhi.n	6424 <att_op_get_type+0x44>
    63e4:	281a      	cmp	r0, #26
    63e6:	d804      	bhi.n	63f2 <att_op_get_type+0x12>
    63e8:	1e43      	subs	r3, r0, #1
    63ea:	2b18      	cmp	r3, #24
    63ec:	d90e      	bls.n	640c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    63ee:	2006      	movs	r0, #6
    63f0:	4770      	bx	lr
	switch (op) {
    63f2:	f1a0 031b 	sub.w	r3, r0, #27
    63f6:	2b08      	cmp	r3, #8
    63f8:	d81e      	bhi.n	6438 <att_op_get_type+0x58>
    63fa:	e8df f003 	tbb	[pc, r3]
    63fe:	1d05      	.short	0x1d05
    6400:	191d231b 	.word	0x191d231b
    6404:	1d25      	.short	0x1d25
    6406:	05          	.byte	0x05
    6407:	00          	.byte	0x00
		return ATT_NOTIFICATION;
    6408:	2003      	movs	r0, #3
    640a:	4770      	bx	lr
	switch (op) {
    640c:	4a0f      	ldr	r2, [pc, #60]	; (644c <att_op_get_type+0x6c>)
    640e:	2301      	movs	r3, #1
    6410:	4083      	lsls	r3, r0
    6412:	401a      	ands	r2, r3
    6414:	b9c2      	cbnz	r2, 6448 <att_op_get_type+0x68>
    6416:	4a0e      	ldr	r2, [pc, #56]	; (6450 <att_op_get_type+0x70>)
    6418:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
    641a:	2a00      	cmp	r2, #0
    641c:	bf14      	ite	ne
    641e:	2001      	movne	r0, #1
    6420:	2006      	moveq	r0, #6
    6422:	4770      	bx	lr
	switch (op) {
    6424:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    6428:	2b52      	cmp	r3, #82	; 0x52
    642a:	d105      	bne.n	6438 <att_op_get_type+0x58>
		return ATT_COMMAND;
    642c:	2000      	movs	r0, #0
}
    642e:	4770      	bx	lr
		return ATT_REQUEST;
    6430:	2001      	movs	r0, #1
    6432:	4770      	bx	lr
		return ATT_INDICATION;
    6434:	2005      	movs	r0, #5
    6436:	4770      	bx	lr
		return ATT_COMMAND;
    6438:	f010 0f40 	tst.w	r0, #64	; 0x40
    643c:	bf0c      	ite	eq
    643e:	2006      	moveq	r0, #6
    6440:	2000      	movne	r0, #0
    6442:	4770      	bx	lr
	switch (op) {
    6444:	2004      	movs	r0, #4
    6446:	4770      	bx	lr
		return ATT_RESPONSE;
    6448:	2002      	movs	r0, #2
    644a:	4770      	bx	lr
    644c:	028aaaaa 	.word	0x028aaaaa
    6450:	01455554 	.word	0x01455554

00006454 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    6454:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    6456:	3804      	subs	r0, #4
    6458:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    645a:	a901      	add	r1, sp, #4
    645c:	4802      	ldr	r0, [pc, #8]	; (6468 <bt_att_released+0x14>)
    645e:	f016 fd0f 	bl	1ce80 <k_mem_slab_free>
}
    6462:	b003      	add	sp, #12
    6464:	f85d fb04 	ldr.w	pc, [sp], #4
    6468:	200008ec 	.word	0x200008ec

0000646c <tx_meta_data_free>:
{
    646c:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
    646e:	2100      	movs	r1, #0
{
    6470:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
    6472:	2214      	movs	r2, #20
    6474:	f013 fbc9 	bl	19c0a <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
    6478:	4621      	mov	r1, r4
    647a:	4802      	ldr	r0, [pc, #8]	; (6484 <tx_meta_data_free+0x18>)
}
    647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
    6480:	f016 bde6 	b.w	1d050 <k_queue_append>
    6484:	20000924 	.word	0x20000924

00006488 <bt_att_connected>:
{
    6488:	b510      	push	{r4, lr}
    648a:	f100 0330 	add.w	r3, r0, #48	; 0x30
    648e:	4604      	mov	r4, r0
    6490:	f3bf 8f5b 	dmb	ish
    6494:	e853 1f00 	ldrex	r1, [r3]
    6498:	f041 0104 	orr.w	r1, r1, #4
    649c:	e843 1200 	strex	r2, r1, [r3]
    64a0:	2a00      	cmp	r2, #0
    64a2:	d1f7      	bne.n	6494 <bt_att_connected+0xc>
    64a4:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(att_chan);
    64a8:	1f20      	subs	r0, r4, #4
    64aa:	f014 fbb2 	bl	1ac12 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    64ae:	f104 0054 	add.w	r0, r4, #84	; 0x54
    64b2:	4904      	ldr	r1, [pc, #16]	; (64c4 <bt_att_connected+0x3c>)
    64b4:	f016 feac 	bl	1d210 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
    64b8:	6820      	ldr	r0, [r4, #0]
}
    64ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
    64be:	f001 bb2d 	b.w	7b1c <bt_gatt_connected>
    64c2:	bf00      	nop
    64c4:	0001b2cb 	.word	0x0001b2cb

000064c8 <read_group_cb>:
{
    64c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    64cc:	4605      	mov	r5, r0
    64ce:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    64d0:	f04f 0800 	mov.w	r8, #0
    64d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    64d8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    64da:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    64dc:	f88d 8008 	strb.w	r8, [sp, #8]
    64e0:	a902      	add	r1, sp, #8
{
    64e2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    64e4:	f8ad 300a 	strh.w	r3, [sp, #10]
    64e8:	f013 fbb6 	bl	19c58 <bt_uuid_cmp>
    64ec:	b1a0      	cbz	r0, 6518 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    64ee:	f642 0301 	movw	r3, #10241	; 0x2801
    64f2:	6828      	ldr	r0, [r5, #0]
    64f4:	f88d 800c 	strb.w	r8, [sp, #12]
    64f8:	a903      	add	r1, sp, #12
    64fa:	f8ad 300e 	strh.w	r3, [sp, #14]
    64fe:	f013 fbab 	bl	19c58 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    6502:	b148      	cbz	r0, 6518 <read_group_cb+0x50>
		if (data->group &&
    6504:	6923      	ldr	r3, [r4, #16]
    6506:	b11b      	cbz	r3, 6510 <read_group_cb+0x48>
    6508:	885a      	ldrh	r2, [r3, #2]
    650a:	42b2      	cmp	r2, r6
    650c:	d200      	bcs.n	6510 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    650e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    6510:	2001      	movs	r0, #1
}
    6512:	b004      	add	sp, #16
    6514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6518:	6861      	ldr	r1, [r4, #4]
    651a:	6828      	ldr	r0, [r5, #0]
    651c:	f013 fb9c 	bl	19c58 <bt_uuid_cmp>
    6520:	b110      	cbz	r0, 6528 <read_group_cb+0x60>
		data->group = NULL;
    6522:	2300      	movs	r3, #0
    6524:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    6526:	e7f3      	b.n	6510 <read_group_cb+0x48>
	if (data->rsp->len &&
    6528:	68e3      	ldr	r3, [r4, #12]
	    bt_att_mtu(chan) - data->buf->len < data->rsp->len) {
    652a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    652c:	781a      	ldrb	r2, [r3, #0]
    652e:	b16a      	cbz	r2, 654c <read_group_cb+0x84>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
    6530:	f8b7 c01a 	ldrh.w	ip, [r7, #26]
    6534:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
	    bt_att_mtu(chan) - data->buf->len < data->rsp->len) {
    6536:	8a03      	ldrh	r3, [r0, #16]
    6538:	458c      	cmp	ip, r1
    653a:	bf94      	ite	ls
    653c:	ebc3 030c 	rsbls	r3, r3, ip
    6540:	ebc3 0301 	rsbhi	r3, r3, r1
	if (data->rsp->len &&
    6544:	4293      	cmp	r3, r2
    6546:	da01      	bge.n	654c <read_group_cb+0x84>
		return BT_GATT_ITER_STOP;
    6548:	2000      	movs	r0, #0
    654a:	e7e2      	b.n	6512 <read_group_cb+0x4a>
    654c:	2104      	movs	r1, #4
    654e:	300c      	adds	r0, #12
    6550:	f015 fae1 	bl	1bb16 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    6554:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
    6556:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    6558:	6923      	ldr	r3, [r4, #16]
    655a:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    655c:	4b07      	ldr	r3, [pc, #28]	; (657c <read_group_cb+0xb4>)
    655e:	9300      	str	r3, [sp, #0]
    6560:	9401      	str	r4, [sp, #4]
    6562:	68a2      	ldr	r2, [r4, #8]
    6564:	2300      	movs	r3, #0
    6566:	4629      	mov	r1, r5
    6568:	4638      	mov	r0, r7
    656a:	f014 fb95 	bl	1ac98 <att_chan_read>
	if (read < 0) {
    656e:	2800      	cmp	r0, #0
    6570:	dbea      	blt.n	6548 <read_group_cb+0x80>
	if (!data->group) {
    6572:	6920      	ldr	r0, [r4, #16]
    6574:	3800      	subs	r0, #0
    6576:	bf18      	it	ne
    6578:	2001      	movne	r0, #1
    657a:	e7ca      	b.n	6512 <read_group_cb+0x4a>
    657c:	0001ac79 	.word	0x0001ac79

00006580 <bt_att_chan_create_pdu.isra.0>:
	if (len + sizeof(op) > bt_att_mtu(chan)) {
    6580:	4281      	cmp	r1, r0
static struct net_buf *bt_att_chan_create_pdu(struct bt_att_chan *chan, uint8_t op, size_t len)
    6582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > bt_att_mtu(chan)) {
    6584:	bf28      	it	cs
    6586:	4601      	movcs	r1, r0
    6588:	3301      	adds	r3, #1
    658a:	428b      	cmp	r3, r1
static struct net_buf *bt_att_chan_create_pdu(struct bt_att_chan *chan, uint8_t op, size_t len)
    658c:	4615      	mov	r5, r2
	if (len + sizeof(op) > bt_att_mtu(chan)) {
    658e:	d822      	bhi.n	65d6 <bt_att_chan_create_pdu.isra.0+0x56>
	switch (att_op_get_type(op)) {
    6590:	4610      	mov	r0, r2
    6592:	f7ff ff25 	bl	63e0 <att_op_get_type>
    6596:	2802      	cmp	r0, #2
    6598:	d020      	beq.n	65dc <bt_att_chan_create_pdu.isra.0+0x5c>
    659a:	2804      	cmp	r0, #4
    659c:	d01e      	beq.n	65dc <bt_att_chan_create_pdu.isra.0+0x5c>
		timeout = K_FOREVER;
    659e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    65a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
    65a6:	2100      	movs	r1, #0
    65a8:	4632      	mov	r2, r6
    65aa:	463b      	mov	r3, r7
    65ac:	4608      	mov	r0, r1
    65ae:	f014 f94d 	bl	1a84c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
    65b2:	4604      	mov	r4, r0
    65b4:	b178      	cbz	r0, 65d6 <bt_att_chan_create_pdu.isra.0+0x56>
	return z_impl_z_current_get();
    65b6:	f012 f94b 	bl	18850 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    65ba:	4b0e      	ldr	r3, [pc, #56]	; (65f4 <bt_att_chan_create_pdu.isra.0+0x74>)
    65bc:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    65be:	480e      	ldr	r0, [pc, #56]	; (65f8 <bt_att_chan_create_pdu.isra.0+0x78>)
    65c0:	bf07      	ittee	eq
    65c2:	2200      	moveq	r2, #0
    65c4:	2300      	moveq	r3, #0
    65c6:	4632      	movne	r2, r6
    65c8:	463b      	movne	r3, r7
    65ca:	f011 fbf1 	bl	17db0 <z_impl_k_queue_get>
	if (!data) {
    65ce:	b948      	cbnz	r0, 65e4 <bt_att_chan_create_pdu.isra.0+0x64>
		net_buf_unref(buf);
    65d0:	4620      	mov	r0, r4
    65d2:	f00e fa11 	bl	149f8 <net_buf_unref>
		return NULL;
    65d6:	2400      	movs	r4, #0
}
    65d8:	4620      	mov	r0, r4
    65da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
    65dc:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
    65e0:	2700      	movs	r7, #0
    65e2:	e7e0      	b.n	65a6 <bt_att_chan_create_pdu.isra.0+0x26>
	bt_att_tx_meta_data(buf) = data;
    65e4:	61a0      	str	r0, [r4, #24]
    65e6:	2101      	movs	r1, #1
    65e8:	f104 000c 	add.w	r0, r4, #12
    65ec:	f015 fa93 	bl	1bb16 <net_buf_simple_add>
	hdr->code = op;
    65f0:	7005      	strb	r5, [r0, #0]
	return buf;
    65f2:	e7f1      	b.n	65d8 <bt_att_chan_create_pdu.isra.0+0x58>
    65f4:	200010c8 	.word	0x200010c8
    65f8:	20000924 	.word	0x20000924

000065fc <read_type_cb>:
{
    65fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    6600:	6817      	ldr	r7, [r2, #0]
{
    6602:	4605      	mov	r5, r0
    6604:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6606:	6800      	ldr	r0, [r0, #0]
    6608:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    660a:	687e      	ldr	r6, [r7, #4]
{
    660c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    660e:	f013 fb23 	bl	19c58 <bt_uuid_cmp>
    6612:	4681      	mov	r9, r0
    6614:	2800      	cmp	r0, #0
    6616:	d142      	bne.n	669e <read_type_cb+0xa2>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6618:	4630      	mov	r0, r6
    661a:	2295      	movs	r2, #149	; 0x95
    661c:	4629      	mov	r1, r5
    661e:	f015 f8ee 	bl	1b7fe <bt_gatt_check_perm>
    6622:	4606      	mov	r6, r0
    6624:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6626:	b140      	cbz	r0, 663a <read_type_cb+0x3e>
		if (data->rsp->len) {
    6628:	68e3      	ldr	r3, [r4, #12]
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	b10b      	cbz	r3, 6632 <read_type_cb+0x36>
			data->err = 0x00;
    662e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
    6632:	2000      	movs	r0, #0
}
    6634:	b003      	add	sp, #12
    6636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    663a:	68a0      	ldr	r0, [r4, #8]
    663c:	f015 fa39 	bl	1bab2 <net_buf_frag_last>
    6640:	2102      	movs	r1, #2
    6642:	300c      	adds	r0, #12
    6644:	f015 fa67 	bl	1bb16 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6648:	4b16      	ldr	r3, [pc, #88]	; (66a4 <read_type_cb+0xa8>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    664a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
    664c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    6650:	9300      	str	r3, [sp, #0]
    6652:	9401      	str	r4, [sp, #4]
    6654:	68a2      	ldr	r2, [r4, #8]
    6656:	4633      	mov	r3, r6
    6658:	4629      	mov	r1, r5
    665a:	4638      	mov	r0, r7
    665c:	f014 fb1c 	bl	1ac98 <att_chan_read>
	if (read < 0) {
    6660:	2800      	cmp	r0, #0
    6662:	da07      	bge.n	6674 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
    6664:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    6668:	bf26      	itte	cs
    666a:	4240      	negcs	r0, r0
    666c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    666e:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    6670:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    6672:	e7de      	b.n	6632 <read_type_cb+0x36>
	if (!data->item) {
    6674:	6923      	ldr	r3, [r4, #16]
    6676:	2b00      	cmp	r3, #0
    6678:	d0db      	beq.n	6632 <read_type_cb+0x36>
	return bt_att_mtu(chan) - net_buf_frags_len(data->buf) >
    667a:	68a0      	ldr	r0, [r4, #8]
    667c:	f014 f963 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
    6680:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    6682:	8b7a      	ldrh	r2, [r7, #26]
	return bt_att_mtu(chan) - net_buf_frags_len(data->buf) >
    6684:	429a      	cmp	r2, r3
    6686:	bf94      	ite	ls
    6688:	ebc0 0002 	rsbls	r0, r0, r2
    668c:	ebc0 0003 	rsbhi	r0, r0, r3
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    6690:	68e3      	ldr	r3, [r4, #12]
    6692:	781b      	ldrb	r3, [r3, #0]
    6694:	4298      	cmp	r0, r3
    6696:	bf94      	ite	ls
    6698:	2000      	movls	r0, #0
    669a:	2001      	movhi	r0, #1
    669c:	e7ca      	b.n	6634 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    669e:	2001      	movs	r0, #1
    66a0:	e7c8      	b.n	6634 <read_type_cb+0x38>
    66a2:	bf00      	nop
    66a4:	0001a957 	.word	0x0001a957

000066a8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    66a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    66aa:	2300      	movs	r3, #0
{
    66ac:	4604      	mov	r4, r0
    66ae:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    66b0:	482a      	ldr	r0, [pc, #168]	; (675c <bt_att_accept+0xb4>)
    66b2:	2200      	movs	r2, #0
    66b4:	4669      	mov	r1, sp
    66b6:	f011 f9c1 	bl	17a3c <k_mem_slab_alloc>
    66ba:	4605      	mov	r5, r0
    66bc:	b9c0      	cbnz	r0, 66f0 <bt_att_accept+0x48>
	return z_impl_z_current_get();
    66be:	f012 f8c7 	bl	18850 <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
    66c2:	4b27      	ldr	r3, [pc, #156]	; (6760 <bt_att_accept+0xb8>)

	(void)memset(att, 0, sizeof(*att));
    66c4:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
    66c6:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
    66c8:	222c      	movs	r2, #44	; 0x2c
    66ca:	9800      	ldr	r0, [sp, #0]
    66cc:	f013 fa9d 	bl	19c0a <memset>
	att->conn = conn;
    66d0:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    66d2:	4824      	ldr	r0, [pc, #144]	; (6764 <bt_att_accept+0xbc>)
	att->conn = conn;
    66d4:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
    66d6:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    66d8:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
    66da:	e9c4 5501 	strd	r5, r5, [r4, #4]
    66de:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    66e2:	2200      	movs	r2, #0
    66e4:	2300      	movs	r3, #0
    66e6:	a901      	add	r1, sp, #4
    66e8:	f011 f9a8 	bl	17a3c <k_mem_slab_alloc>
    66ec:	4605      	mov	r5, r0
    66ee:	b120      	cbz	r0, 66fa <bt_att_accept+0x52>
		return -ENOMEM;
    66f0:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    66f4:	4628      	mov	r0, r5
    66f6:	b003      	add	sp, #12
    66f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(chan, 0, sizeof(*chan));
    66fa:	4601      	mov	r1, r0
    66fc:	2290      	movs	r2, #144	; 0x90
    66fe:	9801      	ldr	r0, [sp, #4]
    6700:	f013 fa83 	bl	19c0a <memset>
	chan->chan.chan.ops = &ops;
    6704:	9801      	ldr	r0, [sp, #4]
    6706:	4b18      	ldr	r3, [pc, #96]	; (6768 <bt_att_accept+0xc0>)
    6708:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
    670a:	303c      	adds	r0, #60	; 0x3c
    670c:	f016 fc74 	bl	1cff8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6710:	9b01      	ldr	r3, [sp, #4]
    6712:	f3bf 8f5b 	dmb	ish
    6716:	3334      	adds	r3, #52	; 0x34
    6718:	e853 2f00 	ldrex	r2, [r3]
    671c:	e843 5100 	strex	r1, r5, [r3]
    6720:	2900      	cmp	r1, #0
    6722:	d1f9      	bne.n	6718 <bt_att_accept+0x70>
    6724:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
    672c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
    672e:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
    6730:	b91b      	cbnz	r3, 673a <bt_att_accept+0x92>
    6732:	f104 000c 	add.w	r0, r4, #12
    6736:	f016 fc5f 	bl	1cff8 <z_impl_k_queue_init>
	return list->head;
    673a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
    673c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
    6740:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    6742:	f107 0388 	add.w	r3, r7, #136	; 0x88
	list->head = node;
    6746:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    6748:	b902      	cbnz	r2, 674c <bt_att_accept+0xa4>
	list->tail = node;
    674a:	62a3      	str	r3, [r4, #40]	; 0x28
	if (bt_att_is_enhanced(chan)) {
    674c:	9b01      	ldr	r3, [sp, #4]
		chan->chan.tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    674e:	2217      	movs	r2, #23
    6750:	855a      	strh	r2, [r3, #42]	; 0x2a
		chan->chan.rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    6752:	835a      	strh	r2, [r3, #26]
	*ch = &chan->chan.chan;
    6754:	3304      	adds	r3, #4
    6756:	6033      	str	r3, [r6, #0]
	return 0;
    6758:	e7cc      	b.n	66f4 <bt_att_accept+0x4c>
    675a:	bf00      	nop
    675c:	200008d0 	.word	0x200008d0
    6760:	200012d0 	.word	0x200012d0
    6764:	200008ec 	.word	0x200008ec
    6768:	200001f0 	.word	0x200001f0

0000676c <chan_send>:
{
    676c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
    6770:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
    6774:	68cb      	ldr	r3, [r1, #12]
	struct bt_att_chan *prev_chan = data->att_chan;
    6776:	f8d8 9000 	ldr.w	r9, [r8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    677a:	f3bf 8f5b 	dmb	ish
    677e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6780:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    6784:	0752      	lsls	r2, r2, #29
{
    6786:	4606      	mov	r6, r0
    6788:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
    678a:	d53a      	bpl.n	6802 <chan_send+0x96>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	2bd2      	cmp	r3, #210	; 0xd2
    6790:	d10f      	bne.n	67b2 <chan_send+0x46>
		err = bt_smp_sign(chan->att->conn, buf);
    6792:	6803      	ldr	r3, [r0, #0]
    6794:	6818      	ldr	r0, [r3, #0]
    6796:	f015 f979 	bl	1ba8c <bt_smp_sign>
		if (err) {
    679a:	4605      	mov	r5, r0
    679c:	b148      	cbz	r0, 67b2 <chan_send+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
    679e:	69a0      	ldr	r0, [r4, #24]
    67a0:	f7ff fe64 	bl	646c <tx_meta_data_free>
			net_buf_unref(buf);
    67a4:	4620      	mov	r0, r4
    67a6:	f00e f927 	bl	149f8 <net_buf_unref>
}
    67aa:	4628      	mov	r0, r5
    67ac:	b002      	add	sp, #8
    67ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	state->offset = net_buf_simple_headroom(buf);
    67b2:	f104 000c 	add.w	r0, r4, #12
    67b6:	f015 f9e5 	bl	1bb84 <net_buf_simple_headroom>
	state->len = buf->len;
    67ba:	f8b4 a010 	ldrh.w	sl, [r4, #16]
	data->att_chan = chan;
    67be:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    67c2:	6833      	ldr	r3, [r6, #0]
    67c4:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    67c6:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    67c8:	4607      	mov	r7, r0
    67ca:	7818      	ldrb	r0, [r3, #0]
    67cc:	f7ff fe08 	bl	63e0 <att_op_get_type>
	switch (op_type) {
    67d0:	2805      	cmp	r0, #5
    67d2:	bf96      	itet	ls
    67d4:	4b0c      	ldrls	r3, [pc, #48]	; (6808 <chan_send+0x9c>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
    67d6:	4b0d      	ldrhi	r3, [pc, #52]	; (680c <chan_send+0xa0>)
    67d8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    67dc:	f8cd 8000 	str.w	r8, [sp]
    67e0:	4628      	mov	r0, r5
    67e2:	4622      	mov	r2, r4
    67e4:	2104      	movs	r1, #4
    67e6:	f014 f834 	bl	1a852 <bt_l2cap_send_cb>
	if (err) {
    67ea:	4605      	mov	r5, r0
    67ec:	2800      	cmp	r0, #0
    67ee:	d0dc      	beq.n	67aa <chan_send+0x3e>
	buf->data = buf->__buf + state->offset;
    67f0:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    67f2:	f8a4 a010 	strh.w	sl, [r4, #16]
	buf->data = buf->__buf + state->offset;
    67f6:	fa13 f787 	uxtah	r7, r3, r7
    67fa:	60e7      	str	r7, [r4, #12]
		data->att_chan = prev_chan;
    67fc:	f8c8 9000 	str.w	r9, [r8]
    6800:	e7d3      	b.n	67aa <chan_send+0x3e>
		return -EINVAL;
    6802:	f06f 0515 	mvn.w	r5, #21
    6806:	e7d0      	b.n	67aa <chan_send+0x3e>
    6808:	0001df40 	.word	0x0001df40
    680c:	0001b135 	.word	0x0001b135

00006810 <bt_att_recv>:
{
    6810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    6814:	8a0b      	ldrh	r3, [r1, #16]
{
    6816:	4605      	mov	r5, r0
    6818:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    681a:	2b00      	cmp	r3, #0
    681c:	d05d      	beq.n	68da <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
    681e:	2101      	movs	r1, #1
    6820:	f104 000c 	add.w	r0, r4, #12
    6824:	f015 f99e 	bl	1bb64 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    6828:	f855 3c04 	ldr.w	r3, [r5, #-4]
    682c:	4680      	mov	r8, r0
    682e:	2b00      	cmp	r3, #0
    6830:	d053      	beq.n	68da <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
    6832:	7801      	ldrb	r1, [r0, #0]
    6834:	4e2b      	ldr	r6, [pc, #172]	; (68e4 <bt_att_recv+0xd4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    6836:	1f2f      	subs	r7, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6838:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    683a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
    683e:	428a      	cmp	r2, r1
    6840:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
    6844:	eb06 0bc3 	add.w	fp, r6, r3, lsl #3
    6848:	d11e      	bne.n	6888 <bt_att_recv+0x78>
		if (handler->type == ATT_REQUEST &&
    684a:	f89b 9002 	ldrb.w	r9, [fp, #2]
    684e:	f1b9 0f01 	cmp.w	r9, #1
    6852:	d129      	bne.n	68a8 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
    6854:	2100      	movs	r1, #0
    6856:	f105 0030 	add.w	r0, r5, #48	; 0x30
    685a:	f014 faee 	bl	1ae3a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
    685e:	2800      	cmp	r0, #0
    6860:	d13b      	bne.n	68da <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
    6862:	8a22      	ldrh	r2, [r4, #16]
    6864:	f89b 3001 	ldrb.w	r3, [fp, #1]
    6868:	429a      	cmp	r2, r3
    686a:	d339      	bcc.n	68e0 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
    686c:	4456      	add	r6, sl
    686e:	4621      	mov	r1, r4
    6870:	6873      	ldr	r3, [r6, #4]
    6872:	4638      	mov	r0, r7
    6874:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6876:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
    687a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    687c:	d12d      	bne.n	68da <bt_att_recv+0xca>
    687e:	b360      	cbz	r0, 68da <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
    6880:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
    6884:	b349      	cbz	r1, 68da <bt_att_recv+0xca>
    6886:	e00a      	b.n	689e <bt_att_recv+0x8e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6888:	3301      	adds	r3, #1
    688a:	2b0e      	cmp	r3, #14
    688c:	d1d5      	bne.n	683a <bt_att_recv+0x2a>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    688e:	4608      	mov	r0, r1
    6890:	f7ff fda6 	bl	63e0 <att_op_get_type>
    6894:	b308      	cbz	r0, 68da <bt_att_recv+0xca>
    6896:	2805      	cmp	r0, #5
    6898:	d01f      	beq.n	68da <bt_att_recv+0xca>
	if (!req) {
    689a:	b1f1      	cbz	r1, 68da <bt_att_recv+0xca>
    689c:	2306      	movs	r3, #6
    689e:	2200      	movs	r2, #0
    68a0:	4638      	mov	r0, r7
    68a2:	f014 fbfb 	bl	1b09c <send_err_rsp.part.0>
    68a6:	e018      	b.n	68da <bt_att_recv+0xca>
		} else if (handler->type == ATT_INDICATION &&
    68a8:	f1b9 0f05 	cmp.w	r9, #5
    68ac:	d00a      	beq.n	68c4 <bt_att_recv+0xb4>
	if (buf->len < handler->expect_len) {
    68ae:	8a22      	ldrh	r2, [r4, #16]
    68b0:	f89b 3001 	ldrb.w	r3, [fp, #1]
    68b4:	429a      	cmp	r2, r3
    68b6:	d310      	bcc.n	68da <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
    68b8:	f8db 3004 	ldr.w	r3, [fp, #4]
    68bc:	4621      	mov	r1, r4
    68be:	4638      	mov	r0, r7
    68c0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    68c2:	e00a      	b.n	68da <bt_att_recv+0xca>
			   atomic_test_and_set_bit(att_chan->flags,
    68c4:	2101      	movs	r1, #1
    68c6:	f105 0030 	add.w	r0, r5, #48	; 0x30
    68ca:	f014 fab6 	bl	1ae3a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
    68ce:	b920      	cbnz	r0, 68da <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
    68d0:	f89b 2001 	ldrb.w	r2, [fp, #1]
    68d4:	8a23      	ldrh	r3, [r4, #16]
    68d6:	429a      	cmp	r2, r3
    68d8:	d9c8      	bls.n	686c <bt_att_recv+0x5c>
}
    68da:	2000      	movs	r0, #0
    68dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = BT_ATT_ERR_INVALID_PDU;
    68e0:	2304      	movs	r3, #4
    68e2:	e7cd      	b.n	6880 <bt_att_recv+0x70>
    68e4:	0001df58 	.word	0x0001df58

000068e8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    68e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68ea:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    68ec:	6803      	ldr	r3, [r0, #0]
    68ee:	460d      	mov	r5, r1
    68f0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    68f2:	b087      	sub	sp, #28
    68f4:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    68f6:	bf18      	it	ne
    68f8:	2101      	movne	r1, #1
    68fa:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    68fc:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    68fe:	f015 f85a 	bl	1b9b6 <bt_gatt_change_aware>
    6902:	b948      	cbnz	r0, 6918 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6904:	2105      	movs	r1, #5
    6906:	f104 0034 	add.w	r0, r4, #52	; 0x34
    690a:	f014 fa96 	bl	1ae3a <atomic_test_and_set_bit>
    690e:	2800      	cmp	r0, #0
    6910:	d049      	beq.n	69a6 <att_write_rsp.constprop.0+0xbe>
			return 0;
    6912:	2000      	movs	r0, #0
}
    6914:	b007      	add	sp, #28
    6916:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
    6918:	2e00      	cmp	r6, #0
    691a:	d046      	beq.n	69aa <att_write_rsp.constprop.0+0xc2>
	(void)memset(&data, 0, sizeof(data));
    691c:	2218      	movs	r2, #24
    691e:	2100      	movs	r1, #0
    6920:	4668      	mov	r0, sp
    6922:	f013 f972 	bl	19c0a <memset>
	if (rsp) {
    6926:	bb67      	cbnz	r7, 6982 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
    6928:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    692a:	4a21      	ldr	r2, [pc, #132]	; (69b0 <att_write_rsp.constprop.0+0xc8>)
	data.conn = chan->att->conn;
    692c:	681b      	ldr	r3, [r3, #0]
    692e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    6930:	2300      	movs	r3, #0
    6932:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    6936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6938:	9303      	str	r3, [sp, #12]
	data.len = len;
    693a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    693e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6942:	2301      	movs	r3, #1
    6944:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6948:	4631      	mov	r1, r6
    694a:	466b      	mov	r3, sp
    694c:	4630      	mov	r0, r6
	data.req = req;
    694e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6952:	f014 f858 	bl	1aa06 <bt_gatt_foreach_attr>
	if (data.err) {
    6956:	f89d 3014 	ldrb.w	r3, [sp, #20]
    695a:	b1eb      	cbz	r3, 6998 <att_write_rsp.constprop.0+0xb0>
		if (rsp) {
    695c:	2f00      	cmp	r7, #0
    695e:	d0d8      	beq.n	6912 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6960:	9b01      	ldr	r3, [sp, #4]
    6962:	6998      	ldr	r0, [r3, #24]
    6964:	f7ff fd82 	bl	646c <tx_meta_data_free>
			net_buf_unref(data.buf);
    6968:	9801      	ldr	r0, [sp, #4]
    696a:	f00e f845 	bl	149f8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
    696e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
    6972:	2d00      	cmp	r5, #0
    6974:	d0cd      	beq.n	6912 <att_write_rsp.constprop.0+0x2a>
    6976:	4632      	mov	r2, r6
    6978:	4629      	mov	r1, r5
    697a:	4620      	mov	r0, r4
    697c:	f014 fb8e 	bl	1b09c <send_err_rsp.part.0>
    6980:	e7c7      	b.n	6912 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    6982:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    6984:	8b60      	ldrh	r0, [r4, #26]
    6986:	2300      	movs	r3, #0
    6988:	463a      	mov	r2, r7
    698a:	f7ff fdf9 	bl	6580 <bt_att_chan_create_pdu.isra.0>
    698e:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    6990:	2800      	cmp	r0, #0
    6992:	d1c9      	bne.n	6928 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
    6994:	200e      	movs	r0, #14
    6996:	e7bd      	b.n	6914 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
    6998:	9901      	ldr	r1, [sp, #4]
    699a:	2900      	cmp	r1, #0
    699c:	d0b9      	beq.n	6912 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
    699e:	4620      	mov	r0, r4
    69a0:	f014 fb6e 	bl	1b080 <bt_att_chan_send_rsp>
    69a4:	e7b5      	b.n	6912 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    69a6:	2012      	movs	r0, #18
    69a8:	e7b4      	b.n	6914 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
    69aa:	2001      	movs	r0, #1
    69ac:	e7b2      	b.n	6914 <att_write_rsp.constprop.0+0x2c>
    69ae:	bf00      	nop
    69b0:	0001a9a5 	.word	0x0001a9a5

000069b4 <att_read_group_req>:
{
    69b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    69b8:	8a0e      	ldrh	r6, [r1, #16]
    69ba:	3e04      	subs	r6, #4
    69bc:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
    69be:	2e02      	cmp	r6, #2
{
    69c0:	4604      	mov	r4, r0
    69c2:	b08c      	sub	sp, #48	; 0x30
    69c4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    69c6:	d001      	beq.n	69cc <att_read_group_req+0x18>
    69c8:	2e10      	cmp	r6, #16
    69ca:	d16a      	bne.n	6aa2 <att_read_group_req+0xee>
    69cc:	2104      	movs	r1, #4
    69ce:	300c      	adds	r0, #12
    69d0:	f015 f8c8 	bl	1bb64 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    69d4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    69d8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    69da:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    69dc:	1d01      	adds	r1, r0, #4
    69de:	4632      	mov	r2, r6
    69e0:	4640      	mov	r0, r8
    69e2:	f013 f967 	bl	19cb4 <bt_uuid_create>
    69e6:	2800      	cmp	r0, #0
    69e8:	d05d      	beq.n	6aa6 <att_read_group_req+0xf2>
	if (!start || !end) {
    69ea:	2d00      	cmp	r5, #0
    69ec:	d03a      	beq.n	6a64 <att_read_group_req+0xb0>
    69ee:	2600      	movs	r6, #0
    69f0:	2f00      	cmp	r7, #0
    69f2:	d036      	beq.n	6a62 <att_read_group_req+0xae>
	if (start > end) {
    69f4:	42bd      	cmp	r5, r7
    69f6:	d835      	bhi.n	6a64 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    69f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    69fc:	a901      	add	r1, sp, #4
    69fe:	4640      	mov	r0, r8
    6a00:	f88d 6004 	strb.w	r6, [sp, #4]
    6a04:	f8ad 3006 	strh.w	r3, [sp, #6]
    6a08:	f013 f926 	bl	19c58 <bt_uuid_cmp>
    6a0c:	bb70      	cbnz	r0, 6a6c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
    6a0e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    6a10:	2214      	movs	r2, #20
    6a12:	2100      	movs	r1, #0
    6a14:	a807      	add	r0, sp, #28
    6a16:	f013 f8f8 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6a1a:	2201      	movs	r2, #1
    6a1c:	2111      	movs	r1, #17
    6a1e:	4630      	mov	r0, r6
    6a20:	f014 fbe3 	bl	1b1ea <bt_att_create_pdu>
    6a24:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6a26:	2800      	cmp	r0, #0
    6a28:	d03d      	beq.n	6aa6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
    6a2a:	2101      	movs	r1, #1
    6a2c:	300c      	adds	r0, #12
	data.uuid = uuid;
    6a2e:	e9cd 4807 	strd	r4, r8, [sp, #28]
    6a32:	f015 f870 	bl	1bb16 <net_buf_simple_add>
	data.rsp->len = 0U;
    6a36:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6a38:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6a3a:	4a1c      	ldr	r2, [pc, #112]	; (6aac <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
    6a3c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6a3e:	4639      	mov	r1, r7
	data.group = NULL;
    6a40:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6a42:	4628      	mov	r0, r5
    6a44:	ab07      	add	r3, sp, #28
    6a46:	f013 ffde 	bl	1aa06 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a4c:	781b      	ldrb	r3, [r3, #0]
    6a4e:	bb1b      	cbnz	r3, 6a98 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a52:	6998      	ldr	r0, [r3, #24]
    6a54:	f7ff fd0a 	bl	646c <tx_meta_data_free>
		net_buf_unref(data.buf);
    6a58:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a5a:	f00d ffcd 	bl	149f8 <net_buf_unref>
	if (!req) {
    6a5e:	230a      	movs	r3, #10
    6a60:	e001      	b.n	6a66 <att_read_group_req+0xb2>
			*err = 0U;
    6a62:	463d      	mov	r5, r7
	if (!req) {
    6a64:	2301      	movs	r3, #1
    6a66:	462a      	mov	r2, r5
    6a68:	2110      	movs	r1, #16
    6a6a:	e00e      	b.n	6a8a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6a6c:	f642 0301 	movw	r3, #10241	; 0x2801
    6a70:	a907      	add	r1, sp, #28
    6a72:	4640      	mov	r0, r8
    6a74:	f88d 601c 	strb.w	r6, [sp, #28]
    6a78:	f8ad 301e 	strh.w	r3, [sp, #30]
    6a7c:	f013 f8ec 	bl	19c58 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6a80:	2800      	cmp	r0, #0
    6a82:	d0c4      	beq.n	6a0e <att_read_group_req+0x5a>
	if (!req) {
    6a84:	2310      	movs	r3, #16
    6a86:	462a      	mov	r2, r5
    6a88:	4619      	mov	r1, r3
    6a8a:	4620      	mov	r0, r4
    6a8c:	f014 fb06 	bl	1b09c <send_err_rsp.part.0>
		return 0;
    6a90:	2000      	movs	r0, #0
}
    6a92:	b00c      	add	sp, #48	; 0x30
    6a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
    6a98:	9909      	ldr	r1, [sp, #36]	; 0x24
    6a9a:	4620      	mov	r0, r4
    6a9c:	f014 faf0 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6aa0:	e7f6      	b.n	6a90 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
    6aa2:	2004      	movs	r0, #4
    6aa4:	e7f5      	b.n	6a92 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
    6aa6:	200e      	movs	r0, #14
    6aa8:	e7f3      	b.n	6a92 <att_read_group_req+0xde>
    6aaa:	bf00      	nop
    6aac:	000064c9 	.word	0x000064c9

00006ab0 <att_read_mult_vl_req>:
{
    6ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6ab4:	6846      	ldr	r6, [r0, #4]
{
    6ab6:	b085      	sub	sp, #20
    6ab8:	4604      	mov	r4, r0
    6aba:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6abc:	4630      	mov	r0, r6
    6abe:	2101      	movs	r1, #1
    6ac0:	f014 ff79 	bl	1b9b6 <bt_gatt_change_aware>
    6ac4:	b950      	cbnz	r0, 6adc <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6ac6:	2105      	movs	r1, #5
    6ac8:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6acc:	f014 f9b5 	bl	1ae3a <atomic_test_and_set_bit>
    6ad0:	2800      	cmp	r0, #0
    6ad2:	d13b      	bne.n	6b4c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6ad4:	2012      	movs	r0, #18
}
    6ad6:	b005      	add	sp, #20
    6ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    6adc:	2210      	movs	r2, #16
    6ade:	2100      	movs	r1, #0
    6ae0:	4668      	mov	r0, sp
    6ae2:	f013 f892 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
    6ae6:	2200      	movs	r2, #0
    6ae8:	2121      	movs	r1, #33	; 0x21
    6aea:	4630      	mov	r0, r6
    6aec:	f014 fb7d 	bl	1b1ea <bt_att_create_pdu>
    6af0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6af2:	b368      	cbz	r0, 6b50 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6af4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 6b54 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
    6af8:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    6afa:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6afe:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    6b02:	8a2b      	ldrh	r3, [r5, #16]
    6b04:	2b01      	cmp	r3, #1
    6b06:	d804      	bhi.n	6b12 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    6b08:	9902      	ldr	r1, [sp, #8]
    6b0a:	4620      	mov	r0, r4
    6b0c:	f014 fab8 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6b10:	e01c      	b.n	6b4c <att_read_mult_vl_req+0x9c>
    6b12:	4638      	mov	r0, r7
    6b14:	f015 f82e 	bl	1bb74 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6b18:	466b      	mov	r3, sp
    6b1a:	464a      	mov	r2, r9
    6b1c:	4601      	mov	r1, r0
    6b1e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6b20:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
    6b24:	f013 ff6f 	bl	1aa06 <bt_gatt_foreach_attr>
		if (data.err) {
    6b28:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	d0e8      	beq.n	6b02 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6b30:	9b02      	ldr	r3, [sp, #8]
    6b32:	6998      	ldr	r0, [r3, #24]
    6b34:	f7ff fc9a 	bl	646c <tx_meta_data_free>
			net_buf_unref(data.buf);
    6b38:	9802      	ldr	r0, [sp, #8]
    6b3a:	f00d ff5d 	bl	149f8 <net_buf_unref>
	if (!req) {
    6b3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6b42:	4632      	mov	r2, r6
    6b44:	2120      	movs	r1, #32
    6b46:	4620      	mov	r0, r4
    6b48:	f014 faa8 	bl	1b09c <send_err_rsp.part.0>
			return 0;
    6b4c:	2000      	movs	r0, #0
    6b4e:	e7c2      	b.n	6ad6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    6b50:	200e      	movs	r0, #14
    6b52:	e7c0      	b.n	6ad6 <att_read_mult_vl_req+0x26>
    6b54:	0001aeab 	.word	0x0001aeab

00006b58 <att_read_mult_req>:
{
    6b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6b5c:	6846      	ldr	r6, [r0, #4]
{
    6b5e:	b085      	sub	sp, #20
    6b60:	4604      	mov	r4, r0
    6b62:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6b64:	4630      	mov	r0, r6
    6b66:	2101      	movs	r1, #1
    6b68:	f014 ff25 	bl	1b9b6 <bt_gatt_change_aware>
    6b6c:	b950      	cbnz	r0, 6b84 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6b6e:	2105      	movs	r1, #5
    6b70:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6b74:	f014 f961 	bl	1ae3a <atomic_test_and_set_bit>
    6b78:	2800      	cmp	r0, #0
    6b7a:	d13b      	bne.n	6bf4 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6b7c:	2012      	movs	r0, #18
}
    6b7e:	b005      	add	sp, #20
    6b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
    6b84:	2210      	movs	r2, #16
    6b86:	2100      	movs	r1, #0
    6b88:	4668      	mov	r0, sp
    6b8a:	f013 f83e 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6b8e:	2200      	movs	r2, #0
    6b90:	210f      	movs	r1, #15
    6b92:	4630      	mov	r0, r6
    6b94:	f014 fb29 	bl	1b1ea <bt_att_create_pdu>
    6b98:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6b9a:	b368      	cbz	r0, 6bf8 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6b9c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 6bfc <att_read_mult_req+0xa4>
	data.chan = chan;
    6ba0:	9400      	str	r4, [sp, #0]
    6ba2:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6ba6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    6baa:	8a2b      	ldrh	r3, [r5, #16]
    6bac:	2b01      	cmp	r3, #1
    6bae:	d804      	bhi.n	6bba <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
    6bb0:	9902      	ldr	r1, [sp, #8]
    6bb2:	4620      	mov	r0, r4
    6bb4:	f014 fa64 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6bb8:	e01c      	b.n	6bf4 <att_read_mult_req+0x9c>
    6bba:	4638      	mov	r0, r7
    6bbc:	f014 ffda 	bl	1bb74 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6bc0:	466b      	mov	r3, sp
    6bc2:	464a      	mov	r2, r9
    6bc4:	4601      	mov	r1, r0
    6bc6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6bc8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6bcc:	f013 ff1b 	bl	1aa06 <bt_gatt_foreach_attr>
		if (data.err) {
    6bd0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d0e8      	beq.n	6baa <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6bd8:	9b02      	ldr	r3, [sp, #8]
    6bda:	6998      	ldr	r0, [r3, #24]
    6bdc:	f7ff fc46 	bl	646c <tx_meta_data_free>
			net_buf_unref(data.buf);
    6be0:	9802      	ldr	r0, [sp, #8]
    6be2:	f00d ff09 	bl	149f8 <net_buf_unref>
	if (!req) {
    6be6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6bea:	4632      	mov	r2, r6
    6bec:	210e      	movs	r1, #14
    6bee:	4620      	mov	r0, r4
    6bf0:	f014 fa54 	bl	1b09c <send_err_rsp.part.0>
			return 0;
    6bf4:	2000      	movs	r0, #0
    6bf6:	e7c2      	b.n	6b7e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
    6bf8:	200e      	movs	r0, #14
    6bfa:	e7c0      	b.n	6b7e <att_read_mult_req+0x26>
    6bfc:	0001ae65 	.word	0x0001ae65

00006c00 <att_read_rsp>:
{
    6c00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6c04:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
    6c08:	4604      	mov	r4, r0
    6c0a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
    6c0c:	4640      	mov	r0, r8
    6c0e:	2101      	movs	r1, #1
{
    6c10:	4617      	mov	r7, r2
    6c12:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
    6c14:	f014 fecf 	bl	1b9b6 <bt_gatt_change_aware>
    6c18:	b948      	cbnz	r0, 6c2e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
    6c1a:	2105      	movs	r1, #5
    6c1c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c20:	f014 f90b 	bl	1ae3a <atomic_test_and_set_bit>
    6c24:	bb78      	cbnz	r0, 6c86 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
    6c26:	2012      	movs	r0, #18
}
    6c28:	b004      	add	sp, #16
    6c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
    6c2e:	b38d      	cbz	r5, 6c94 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
    6c30:	2210      	movs	r2, #16
    6c32:	2100      	movs	r1, #0
    6c34:	4668      	mov	r0, sp
    6c36:	f012 ffe8 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6c3a:	2200      	movs	r2, #0
    6c3c:	4639      	mov	r1, r7
    6c3e:	4640      	mov	r0, r8
    6c40:	f014 fad3 	bl	1b1ea <bt_att_create_pdu>
    6c44:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6c46:	b338      	cbz	r0, 6c98 <att_read_rsp+0x98>
	data.offset = offset;
    6c48:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6c4c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6c50:	2301      	movs	r3, #1
    6c52:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6c56:	4a11      	ldr	r2, [pc, #68]	; (6c9c <att_read_rsp+0x9c>)
	data.chan = chan;
    6c58:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6c5a:	466b      	mov	r3, sp
    6c5c:	4629      	mov	r1, r5
    6c5e:	4628      	mov	r0, r5
    6c60:	f013 fed1 	bl	1aa06 <bt_gatt_foreach_attr>
	if (data.err) {
    6c64:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c68:	b17b      	cbz	r3, 6c8a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6c6a:	9b02      	ldr	r3, [sp, #8]
    6c6c:	6998      	ldr	r0, [r3, #24]
    6c6e:	f7ff fbfd 	bl	646c <tx_meta_data_free>
		net_buf_unref(data.buf);
    6c72:	9802      	ldr	r0, [sp, #8]
    6c74:	f00d fec0 	bl	149f8 <net_buf_unref>
	if (!req) {
    6c78:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c7c:	462a      	mov	r2, r5
    6c7e:	4631      	mov	r1, r6
    6c80:	4620      	mov	r0, r4
    6c82:	f014 fa0b 	bl	1b09c <send_err_rsp.part.0>
			return 0;
    6c86:	2000      	movs	r0, #0
    6c88:	e7ce      	b.n	6c28 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
    6c8a:	9902      	ldr	r1, [sp, #8]
    6c8c:	4620      	mov	r0, r4
    6c8e:	f014 f9f7 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6c92:	e7f8      	b.n	6c86 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
    6c94:	2001      	movs	r0, #1
    6c96:	e7c7      	b.n	6c28 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
    6c98:	200e      	movs	r0, #14
    6c9a:	e7c5      	b.n	6c28 <att_read_rsp+0x28>
    6c9c:	0001ae65 	.word	0x0001ae65

00006ca0 <att_read_type_req>:
{
    6ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    6ca4:	8a0d      	ldrh	r5, [r1, #16]
    6ca6:	3d04      	subs	r5, #4
    6ca8:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
    6caa:	2d02      	cmp	r5, #2
{
    6cac:	4604      	mov	r4, r0
    6cae:	b08c      	sub	sp, #48	; 0x30
    6cb0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    6cb2:	d001      	beq.n	6cb8 <att_read_type_req+0x18>
    6cb4:	2d10      	cmp	r5, #16
    6cb6:	d150      	bne.n	6d5a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    6cb8:	2104      	movs	r1, #4
    6cba:	300c      	adds	r0, #12
    6cbc:	f014 ff52 	bl	1bb64 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6cc0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    6cc4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6cc6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    6cc8:	1d01      	adds	r1, r0, #4
    6cca:	462a      	mov	r2, r5
    6ccc:	4640      	mov	r0, r8
    6cce:	f012 fff1 	bl	19cb4 <bt_uuid_create>
    6cd2:	b188      	cbz	r0, 6cf8 <att_read_type_req+0x58>
	if (!start || !end) {
    6cd4:	b19e      	cbz	r6, 6cfe <att_read_type_req+0x5e>
    6cd6:	b18f      	cbz	r7, 6cfc <att_read_type_req+0x5c>
	if (start > end) {
    6cd8:	42b7      	cmp	r7, r6
    6cda:	d310      	bcc.n	6cfe <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    6cdc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    6cde:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
    6ce0:	2100      	movs	r1, #0
    6ce2:	eb0d 0002 	add.w	r0, sp, r2
    6ce6:	f012 ff90 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6cea:	2201      	movs	r2, #1
    6cec:	2109      	movs	r1, #9
    6cee:	4628      	mov	r0, r5
    6cf0:	f014 fa7b 	bl	1b1ea <bt_att_create_pdu>
    6cf4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    6cf6:	b960      	cbnz	r0, 6d12 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
    6cf8:	200e      	movs	r0, #14
    6cfa:	e007      	b.n	6d0c <att_read_type_req+0x6c>
			*err = 0U;
    6cfc:	463e      	mov	r6, r7
	if (!req) {
    6cfe:	2301      	movs	r3, #1
    6d00:	4632      	mov	r2, r6
    6d02:	2108      	movs	r1, #8
    6d04:	4620      	mov	r0, r4
    6d06:	f014 f9c9 	bl	1b09c <send_err_rsp.part.0>
		return 0;
    6d0a:	2000      	movs	r0, #0
}
    6d0c:	b00c      	add	sp, #48	; 0x30
    6d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    6d12:	2101      	movs	r1, #1
    6d14:	300c      	adds	r0, #12
	data.uuid = uuid;
    6d16:	e9cd 4806 	strd	r4, r8, [sp, #24]
    6d1a:	f014 fefc 	bl	1bb16 <net_buf_simple_add>
	data.rsp->len = 0U;
    6d1e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6d20:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
    6d22:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6d24:	230a      	movs	r3, #10
    6d26:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6d2a:	4a0d      	ldr	r2, [pc, #52]	; (6d60 <att_read_type_req+0xc0>)
    6d2c:	ab06      	add	r3, sp, #24
    6d2e:	4639      	mov	r1, r7
    6d30:	4630      	mov	r0, r6
    6d32:	f013 fe68 	bl	1aa06 <bt_gatt_foreach_attr>
	if (data.err) {
    6d36:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6d3a:	b14b      	cbz	r3, 6d50 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6d3c:	9b08      	ldr	r3, [sp, #32]
    6d3e:	6998      	ldr	r0, [r3, #24]
    6d40:	f7ff fb94 	bl	646c <tx_meta_data_free>
		net_buf_unref(data.buf);
    6d44:	9808      	ldr	r0, [sp, #32]
    6d46:	f00d fe57 	bl	149f8 <net_buf_unref>
	if (!req) {
    6d4a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    6d4e:	e7d7      	b.n	6d00 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
    6d50:	9908      	ldr	r1, [sp, #32]
    6d52:	4620      	mov	r0, r4
    6d54:	f014 f994 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6d58:	e7d7      	b.n	6d0a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
    6d5a:	2004      	movs	r0, #4
    6d5c:	e7d6      	b.n	6d0c <att_read_type_req+0x6c>
    6d5e:	bf00      	nop
    6d60:	000065fd 	.word	0x000065fd

00006d64 <att_find_type_req>:
{
    6d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d68:	460f      	mov	r7, r1
    6d6a:	b086      	sub	sp, #24
    6d6c:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    6d6e:	2106      	movs	r1, #6
    6d70:	f107 000c 	add.w	r0, r7, #12
    6d74:	f014 fef6 	bl	1bb64 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    6d78:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6d7a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
    6d7e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
    6d80:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
    6d84:	b1c5      	cbz	r5, 6db8 <att_find_type_req+0x54>
    6d86:	2300      	movs	r3, #0
    6d88:	f1b8 0f00 	cmp.w	r8, #0
    6d8c:	d013      	beq.n	6db6 <att_find_type_req+0x52>
	if (start > end) {
    6d8e:	4545      	cmp	r5, r8
    6d90:	d812      	bhi.n	6db8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6d92:	f88d 3000 	strb.w	r3, [sp]
    6d96:	f88d 3004 	strb.w	r3, [sp, #4]
    6d9a:	a901      	add	r1, sp, #4
    6d9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6da0:	4668      	mov	r0, sp
    6da2:	f8ad 2002 	strh.w	r2, [sp, #2]
    6da6:	f8ad 3006 	strh.w	r3, [sp, #6]
    6daa:	f012 ff55 	bl	19c58 <bt_uuid_cmp>
    6dae:	4606      	mov	r6, r0
    6db0:	b160      	cbz	r0, 6dcc <att_find_type_req+0x68>
	if (!req) {
    6db2:	230a      	movs	r3, #10
    6db4:	e001      	b.n	6dba <att_find_type_req+0x56>
			*err = 0U;
    6db6:	4645      	mov	r5, r8
	if (!req) {
    6db8:	2301      	movs	r3, #1
    6dba:	462a      	mov	r2, r5
    6dbc:	2106      	movs	r1, #6
    6dbe:	4620      	mov	r0, r4
    6dc0:	f014 f96c 	bl	1b09c <send_err_rsp.part.0>
		return 0;
    6dc4:	2000      	movs	r0, #0
}
    6dc6:	b006      	add	sp, #24
    6dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
    6dcc:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    6dd0:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
    6dd2:	4601      	mov	r1, r0
    6dd4:	2214      	movs	r2, #20
    6dd6:	a801      	add	r0, sp, #4
    6dd8:	f012 ff17 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    6ddc:	4632      	mov	r2, r6
    6dde:	2107      	movs	r1, #7
    6de0:	4650      	mov	r0, sl
    6de2:	f014 fa02 	bl	1b1ea <bt_att_create_pdu>
    6de6:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6de8:	b1f8      	cbz	r0, 6e2a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6dea:	230a      	movs	r3, #10
    6dec:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6df0:	4a0f      	ldr	r2, [pc, #60]	; (6e30 <att_find_type_req+0xcc>)
	data.chan = chan;
    6df2:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6df4:	ab01      	add	r3, sp, #4
    6df6:	4641      	mov	r1, r8
    6df8:	4628      	mov	r0, r5
	data.value = value;
    6dfa:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
    6dfe:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6e02:	f013 fe00 	bl	1aa06 <bt_gatt_foreach_attr>
	if (data.err) {
    6e06:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6e0a:	b14b      	cbz	r3, 6e20 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6e0c:	9b02      	ldr	r3, [sp, #8]
    6e0e:	6998      	ldr	r0, [r3, #24]
    6e10:	f7ff fb2c 	bl	646c <tx_meta_data_free>
		net_buf_unref(data.buf);
    6e14:	9802      	ldr	r0, [sp, #8]
    6e16:	f00d fdef 	bl	149f8 <net_buf_unref>
	if (!req) {
    6e1a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6e1e:	e7cc      	b.n	6dba <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
    6e20:	9902      	ldr	r1, [sp, #8]
    6e22:	4620      	mov	r0, r4
    6e24:	f014 f92c 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6e28:	e7cc      	b.n	6dc4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
    6e2a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    6e2c:	e7cb      	b.n	6dc6 <att_find_type_req+0x62>
    6e2e:	bf00      	nop
    6e30:	0001aa1d 	.word	0x0001aa1d

00006e34 <att_find_info_req>:
{
    6e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6e36:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6e38:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6e3a:	885e      	ldrh	r6, [r3, #2]
{
    6e3c:	b085      	sub	sp, #20
    6e3e:	4604      	mov	r4, r0
	if (!start || !end) {
    6e40:	b195      	cbz	r5, 6e68 <att_find_info_req+0x34>
    6e42:	b186      	cbz	r6, 6e66 <att_find_info_req+0x32>
	if (start > end) {
    6e44:	42b5      	cmp	r5, r6
    6e46:	d80f      	bhi.n	6e68 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    6e48:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
    6e4a:	2210      	movs	r2, #16
    6e4c:	2100      	movs	r1, #0
    6e4e:	4668      	mov	r0, sp
    6e50:	f012 fedb 	bl	19c0a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6e54:	2200      	movs	r2, #0
    6e56:	2105      	movs	r1, #5
    6e58:	4638      	mov	r0, r7
    6e5a:	f014 f9c6 	bl	1b1ea <bt_att_create_pdu>
    6e5e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6e60:	b958      	cbnz	r0, 6e7a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    6e62:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    6e64:	e007      	b.n	6e76 <att_find_info_req+0x42>
			*err = 0U;
    6e66:	4635      	mov	r5, r6
	if (!req) {
    6e68:	2301      	movs	r3, #1
    6e6a:	462a      	mov	r2, r5
    6e6c:	2104      	movs	r1, #4
    6e6e:	4620      	mov	r0, r4
    6e70:	f014 f914 	bl	1b09c <send_err_rsp.part.0>
		return 0;
    6e74:	2000      	movs	r0, #0
}
    6e76:	b005      	add	sp, #20
    6e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6e7a:	466b      	mov	r3, sp
    6e7c:	4a0a      	ldr	r2, [pc, #40]	; (6ea8 <att_find_info_req+0x74>)
	data.chan = chan;
    6e7e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6e80:	4631      	mov	r1, r6
    6e82:	4628      	mov	r0, r5
    6e84:	f013 fdbf 	bl	1aa06 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6e88:	9b02      	ldr	r3, [sp, #8]
    6e8a:	b943      	cbnz	r3, 6e9e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
    6e8c:	9b01      	ldr	r3, [sp, #4]
    6e8e:	6998      	ldr	r0, [r3, #24]
    6e90:	f7ff faec 	bl	646c <tx_meta_data_free>
		net_buf_unref(data.buf);
    6e94:	9801      	ldr	r0, [sp, #4]
    6e96:	f00d fdaf 	bl	149f8 <net_buf_unref>
	if (!req) {
    6e9a:	230a      	movs	r3, #10
    6e9c:	e7e5      	b.n	6e6a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
    6e9e:	9901      	ldr	r1, [sp, #4]
    6ea0:	4620      	mov	r0, r4
    6ea2:	f014 f8ed 	bl	1b080 <bt_att_chan_send_rsp>
	return 0;
    6ea6:	e7e5      	b.n	6e74 <att_find_info_req+0x40>
    6ea8:	0001ab63 	.word	0x0001ab63

00006eac <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
    6eac:	b538      	push	{r3, r4, r5, lr}
    6eae:	4c0b      	ldr	r4, [pc, #44]	; (6edc <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
    6eb0:	4d0b      	ldr	r5, [pc, #44]	; (6ee0 <bt_att_init+0x34>)
    6eb2:	4620      	mov	r0, r4
    6eb4:	f016 f8a0 	bl	1cff8 <z_impl_k_queue_init>
    6eb8:	4629      	mov	r1, r5
    6eba:	4620      	mov	r0, r4
    6ebc:	f016 f8c8 	bl	1d050 <k_queue_append>
    6ec0:	f105 0114 	add.w	r1, r5, #20
    6ec4:	4620      	mov	r0, r4
    6ec6:	f016 f8c3 	bl	1d050 <k_queue_append>
    6eca:	f105 0128 	add.w	r1, r5, #40	; 0x28
    6ece:	4620      	mov	r0, r4
    6ed0:	f016 f8be 	bl	1d050 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
    6ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
    6ed8:	f000 ba54 	b.w	7384 <bt_gatt_init>
    6edc:	20000924 	.word	0x20000924
    6ee0:	20001294 	.word	0x20001294

00006ee4 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    6ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    6ee6:	2300      	movs	r3, #0
{
    6ee8:	4605      	mov	r5, r0
    6eea:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    6eec:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    6eee:	f011 fcaf 	bl	18850 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
    6ef2:	4b0b      	ldr	r3, [pc, #44]	; (6f20 <bt_att_req_alloc+0x3c>)
    6ef4:	681b      	ldr	r3, [r3, #0]
    6ef6:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    6ef8:	bf04      	itt	eq
    6efa:	2500      	moveq	r5, #0
    6efc:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    6efe:	a901      	add	r1, sp, #4
    6f00:	4808      	ldr	r0, [pc, #32]	; (6f24 <bt_att_req_alloc+0x40>)
    6f02:	462a      	mov	r2, r5
    6f04:	4623      	mov	r3, r4
    6f06:	f010 fd99 	bl	17a3c <k_mem_slab_alloc>
    6f0a:	4601      	mov	r1, r0
    6f0c:	b930      	cbnz	r0, 6f1c <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    6f0e:	9801      	ldr	r0, [sp, #4]
    6f10:	2210      	movs	r2, #16
    6f12:	f012 fe7a 	bl	19c0a <memset>

	return req;
    6f16:	9801      	ldr	r0, [sp, #4]
}
    6f18:	b003      	add	sp, #12
    6f1a:	bd30      	pop	{r4, r5, pc}
		return NULL;
    6f1c:	2000      	movs	r0, #0
    6f1e:	e7fb      	b.n	6f18 <bt_att_req_alloc+0x34>
    6f20:	200012d0 	.word	0x200012d0
    6f24:	20000908 	.word	0x20000908

00006f28 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    6f28:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
    6f2a:	6883      	ldr	r3, [r0, #8]
{
    6f2c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
    6f2e:	b14b      	cbz	r3, 6f44 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
    6f30:	6998      	ldr	r0, [r3, #24]
    6f32:	f7ff fa9b 	bl	646c <tx_meta_data_free>
		net_buf_unref(req->buf);
    6f36:	9b01      	ldr	r3, [sp, #4]
    6f38:	6898      	ldr	r0, [r3, #8]
    6f3a:	f00d fd5d 	bl	149f8 <net_buf_unref>
		req->buf = NULL;
    6f3e:	9b01      	ldr	r3, [sp, #4]
    6f40:	2200      	movs	r2, #0
    6f42:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    6f44:	4803      	ldr	r0, [pc, #12]	; (6f54 <bt_att_req_free+0x2c>)
    6f46:	a901      	add	r1, sp, #4
    6f48:	f015 ff9a 	bl	1ce80 <k_mem_slab_free>
}
    6f4c:	b003      	add	sp, #12
    6f4e:	f85d fb04 	ldr.w	pc, [sp], #4
    6f52:	bf00      	nop
    6f54:	20000908 	.word	0x20000908

00006f58 <att_handle_rsp>:
{
    6f58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6f5c:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    6f5e:	3058      	adds	r0, #88	; 0x58
{
    6f60:	460e      	mov	r6, r1
    6f62:	4617      	mov	r7, r2
    6f64:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
    6f66:	f016 f961 	bl	1d22c <k_work_cancel_delayable>
	if (!chan->req) {
    6f6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6f6c:	b930      	cbnz	r0, 6f7c <att_handle_rsp+0x24>
	att_req_send_process(chan->att);
    6f6e:	6820      	ldr	r0, [r4, #0]
    6f70:	f014 f812 	bl	1af98 <att_req_send_process>
}
    6f74:	2000      	movs	r0, #0
    6f76:	b002      	add	sp, #8
    6f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
    6f7c:	4b10      	ldr	r3, [pc, #64]	; (6fc0 <att_handle_rsp+0x68>)
    6f7e:	4298      	cmp	r0, r3
    6f80:	f04f 0800 	mov.w	r8, #0
    6f84:	d102      	bne.n	6f8c <att_handle_rsp+0x34>
		chan->req = NULL;
    6f86:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    6f8a:	e7f0      	b.n	6f6e <att_handle_rsp+0x16>
	func = chan->req->func;
    6f8c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
    6f90:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
    6f94:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6f96:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    6f9a:	f7ff ffc5 	bl	6f28 <bt_att_req_free>
	att_req_send_process(chan->att);
    6f9e:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
    6fa0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
    6fa4:	f013 fff8 	bl	1af98 <att_req_send_process>
	if (func) {
    6fa8:	f1b9 0f00 	cmp.w	r9, #0
    6fac:	d0e2      	beq.n	6f74 <att_handle_rsp+0x1c>
		func(chan->att->conn, err, pdu, len, params);
    6fae:	6820      	ldr	r0, [r4, #0]
    6fb0:	f8cd a000 	str.w	sl, [sp]
    6fb4:	6800      	ldr	r0, [r0, #0]
    6fb6:	463b      	mov	r3, r7
    6fb8:	4632      	mov	r2, r6
    6fba:	4629      	mov	r1, r5
    6fbc:	47c8      	blx	r9
    6fbe:	e7d9      	b.n	6f74 <att_handle_rsp+0x1c>
    6fc0:	200012d4 	.word	0x200012d4

00006fc4 <bt_att_disconnected>:
{
    6fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
    6fc8:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
    6fcc:	4604      	mov	r4, r0
	if (!att_chan->att) {
    6fce:	2e00      	cmp	r6, #0
    6fd0:	d05a      	beq.n	7088 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    6fd2:	f100 0184 	add.w	r1, r0, #132	; 0x84
    6fd6:	f106 0024 	add.w	r0, r6, #36	; 0x24
    6fda:	f013 ff04 	bl	1ade6 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    6fde:	1f27      	subs	r7, r4, #4
    6fe0:	f104 0838 	add.w	r8, r4, #56	; 0x38
    6fe4:	2200      	movs	r2, #0
    6fe6:	2300      	movs	r3, #0
    6fe8:	4640      	mov	r0, r8
    6fea:	f014 fd5a 	bl	1baa2 <net_buf_get>
    6fee:	4605      	mov	r5, r0
    6ff0:	bb48      	cbnz	r0, 7046 <bt_att_disconnected+0x82>
	if (chan->req) {
    6ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6ff4:	b12b      	cbz	r3, 7002 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    6ff6:	4602      	mov	r2, r0
    6ff8:	4601      	mov	r1, r0
    6ffa:	230e      	movs	r3, #14
    6ffc:	4638      	mov	r0, r7
    6ffe:	f7ff ffab 	bl	6f58 <att_handle_rsp>
	chan->att = NULL;
    7002:	2300      	movs	r3, #0
    7004:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
    7008:	2102      	movs	r1, #2
    700a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    700e:	f013 ff03 	bl	1ae18 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
    7012:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7014:	2b00      	cmp	r3, #0
    7016:	d137      	bne.n	7088 <bt_att_disconnected+0xc4>
	att_reset(att);
    7018:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    701a:	9803      	ldr	r0, [sp, #12]
    701c:	2200      	movs	r2, #0
    701e:	2300      	movs	r3, #0
    7020:	300c      	adds	r0, #12
    7022:	f014 fd3e 	bl	1baa2 <net_buf_get>
    7026:	4605      	mov	r5, r0
    7028:	b9a0      	cbnz	r0, 7054 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
    702a:	9803      	ldr	r0, [sp, #12]
	return list->head;
    702c:	6845      	ldr	r5, [r0, #4]
    702e:	b9c5      	cbnz	r5, 7062 <bt_att_disconnected+0x9e>
	att->conn = NULL;
    7030:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    7032:	a903      	add	r1, sp, #12
    7034:	4816      	ldr	r0, [pc, #88]	; (7090 <bt_att_disconnected+0xcc>)
    7036:	f015 ff23 	bl	1ce80 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
    703a:	6820      	ldr	r0, [r4, #0]
}
    703c:	b004      	add	sp, #16
    703e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
    7042:	f000 bd8f 	b.w	7b64 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    7046:	69a8      	ldr	r0, [r5, #24]
    7048:	f7ff fa10 	bl	646c <tx_meta_data_free>
		net_buf_unref(buf);
    704c:	4628      	mov	r0, r5
    704e:	f00d fcd3 	bl	149f8 <net_buf_unref>
    7052:	e7c7      	b.n	6fe4 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
    7054:	69a8      	ldr	r0, [r5, #24]
    7056:	f7ff fa09 	bl	646c <tx_meta_data_free>
		net_buf_unref(buf);
    705a:	4628      	mov	r0, r5
    705c:	f00d fccc 	bl	149f8 <net_buf_unref>
    7060:	e7db      	b.n	701a <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7062:	6882      	ldr	r2, [r0, #8]
	return node->next;
    7064:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    7066:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7068:	4295      	cmp	r5, r2
	list->tail = node;
    706a:	bf08      	it	eq
    706c:	6083      	streq	r3, [r0, #8]
		if (req->func) {
    706e:	686e      	ldr	r6, [r5, #4]
    7070:	b136      	cbz	r6, 7080 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    7072:	68eb      	ldr	r3, [r5, #12]
    7074:	9300      	str	r3, [sp, #0]
    7076:	2300      	movs	r3, #0
    7078:	6800      	ldr	r0, [r0, #0]
    707a:	461a      	mov	r2, r3
    707c:	210e      	movs	r1, #14
    707e:	47b0      	blx	r6
		bt_att_req_free(req);
    7080:	4628      	mov	r0, r5
    7082:	f7ff ff51 	bl	6f28 <bt_att_req_free>
    7086:	e7d0      	b.n	702a <bt_att_disconnected+0x66>
}
    7088:	b004      	add	sp, #16
    708a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    708e:	bf00      	nop
    7090:	200008d0 	.word	0x200008d0

00007094 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    7094:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    7096:	b930      	cbnz	r0, 70a6 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    7098:	4907      	ldr	r1, [pc, #28]	; (70b8 <find_cf_cfg+0x24>)
    709a:	4808      	ldr	r0, [pc, #32]	; (70bc <find_cf_cfg+0x28>)
    709c:	f014 f9fa 	bl	1b494 <bt_addr_le_eq>
    70a0:	b138      	cbz	r0, 70b2 <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    70a2:	4807      	ldr	r0, [pc, #28]	; (70c0 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
    70a4:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    70a6:	4a05      	ldr	r2, [pc, #20]	; (70bc <find_cf_cfg+0x28>)
    70a8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    70ac:	f013 fb39 	bl	1a722 <bt_conn_is_peer_addr_le>
    70b0:	e7f6      	b.n	70a0 <find_cf_cfg+0xc>
	return NULL;
    70b2:	2000      	movs	r0, #0
    70b4:	e7f6      	b.n	70a4 <find_cf_cfg+0x10>
    70b6:	bf00      	nop
    70b8:	0001f869 	.word	0x0001f869
    70bc:	200012fd 	.word	0x200012fd
    70c0:	200012fc 	.word	0x200012fc

000070c4 <find_sc_cfg>:
{
    70c4:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    70c6:	4c06      	ldr	r4, [pc, #24]	; (70e0 <find_sc_cfg+0x1c>)
    70c8:	7823      	ldrb	r3, [r4, #0]
    70ca:	4283      	cmp	r3, r0
    70cc:	d103      	bne.n	70d6 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
    70ce:	1c60      	adds	r0, r4, #1
    70d0:	f014 f9e0 	bl	1b494 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
    70d4:	b908      	cbnz	r0, 70da <find_sc_cfg+0x16>
	return NULL;
    70d6:	2000      	movs	r0, #0
}
    70d8:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    70da:	4620      	mov	r0, r4
    70dc:	e7fc      	b.n	70d8 <find_sc_cfg+0x14>
    70de:	bf00      	nop
    70e0:	200026e6 	.word	0x200026e6

000070e4 <find_ccc_cfg>:
	return NULL;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
    70e4:	b510      	push	{r4, lr}
    70e6:	460c      	mov	r4, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
    70e8:	b128      	cbz	r0, 70f6 <find_ccc_cfg+0x12>
			if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
    70ea:	f014 f9ed 	bl	1b4c8 <bt_gatt_ccc_cfg_is_matching_conn>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    70ee:	b900      	cbnz	r0, 70f2 <find_ccc_cfg+0xe>
			return cfg;
		}
	}

	return NULL;
    70f0:	2400      	movs	r4, #0
}
    70f2:	4620      	mov	r0, r4
    70f4:	bd10      	pop	{r4, pc}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    70f6:	4902      	ldr	r1, [pc, #8]	; (7100 <find_ccc_cfg+0x1c>)
    70f8:	1c60      	adds	r0, r4, #1
    70fa:	f014 f9cb 	bl	1b494 <bt_addr_le_eq>
    70fe:	e7f6      	b.n	70ee <find_ccc_cfg+0xa>
    7100:	0001f869 	.word	0x0001f869

00007104 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
    7104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7108:	461e      	mov	r6, r3
    710a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    710e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
    7112:	4681      	mov	r9, r0
    7114:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
    7116:	2b00      	cmp	r3, #0
    7118:	d147      	bne.n	71aa <bt_gatt_attr_write_ccc+0xa6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
    711a:	1e73      	subs	r3, r6, #1
    711c:	2b01      	cmp	r3, #1
    711e:	d847      	bhi.n	71b0 <bt_gatt_attr_write_ccc+0xac>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
    7120:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
    7122:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
    7124:	7815      	ldrb	r5, [r2, #0]
    7126:	bf18      	it	ne
    7128:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
    712a:	f7ff ffdb 	bl	70e4 <find_ccc_cfg>
	if (!cfg) {
    712e:	4604      	mov	r4, r0
    7130:	b9c8      	cbnz	r0, 7166 <bt_gatt_attr_write_ccc+0x62>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
    7132:	b915      	cbnz	r5, 713a <bt_gatt_attr_write_ccc+0x36>
			return len;
    7134:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
    7136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    713a:	4641      	mov	r1, r8
    713c:	f7ff ffd2 	bl	70e4 <find_ccc_cfg>
		if (!cfg) {
    7140:	4604      	mov	r4, r0
    7142:	2800      	cmp	r0, #0
    7144:	d037      	beq.n	71b6 <bt_gatt_attr_write_ccc+0xb2>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7146:	f109 0188 	add.w	r1, r9, #136	; 0x88
    714a:	3001      	adds	r0, #1
    714c:	f014 f9b9 	bl	1b4c2 <bt_addr_le_copy>
		cfg->id = conn->id;
    7150:	f899 3008 	ldrb.w	r3, [r9, #8]
    7154:	7023      	strb	r3, [r4, #0]
		cfg->link_encrypted = (bt_conn_get_security(conn) >= BT_SECURITY_L2);
    7156:	4648      	mov	r0, r9
    7158:	f013 fae1 	bl	1a71e <bt_conn_get_security>
    715c:	2801      	cmp	r0, #1
    715e:	bf94      	ite	ls
    7160:	2000      	movls	r0, #0
    7162:	2001      	movhi	r0, #1
    7164:	7220      	strb	r0, [r4, #8]
	if (ccc->cfg_write) {
    7166:	f8d8 3014 	ldr.w	r3, [r8, #20]
    716a:	b993      	cbnz	r3, 7192 <bt_gatt_attr_write_ccc+0x8e>
	cfg->value = value;
    716c:	8165      	strh	r5, [r4, #10]
	if (cfg->value != ccc->value) {
    716e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    7172:	42ab      	cmp	r3, r5
    7174:	d003      	beq.n	717e <bt_gatt_attr_write_ccc+0x7a>
		gatt_ccc_changed(attr, ccc);
    7176:	4641      	mov	r1, r8
    7178:	4638      	mov	r0, r7
    717a:	f014 f917 	bl	1b3ac <gatt_ccc_changed>
	if (!value) {
    717e:	2d00      	cmp	r5, #0
    7180:	d1d8      	bne.n	7134 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    7182:	490e      	ldr	r1, [pc, #56]	; (71bc <bt_gatt_attr_write_ccc+0xb8>)
    7184:	1c60      	adds	r0, r4, #1
    7186:	f014 f99c 	bl	1b4c2 <bt_addr_le_copy>
	cfg->id = 0U;
    718a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    718c:	8165      	strh	r5, [r4, #10]
	cfg->link_encrypted = false;
    718e:	7225      	strb	r5, [r4, #8]
}
    7190:	e7d0      	b.n	7134 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    7192:	462a      	mov	r2, r5
    7194:	4639      	mov	r1, r7
    7196:	4648      	mov	r0, r9
    7198:	4798      	blx	r3
		if (write < 0) {
    719a:	2800      	cmp	r0, #0
    719c:	dbcb      	blt.n	7136 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
    719e:	3801      	subs	r0, #1
    71a0:	2801      	cmp	r0, #1
    71a2:	d9e3      	bls.n	716c <bt_gatt_attr_write_ccc+0x68>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    71a4:	f06f 000d 	mvn.w	r0, #13
    71a8:	e7c5      	b.n	7136 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    71aa:	f06f 0006 	mvn.w	r0, #6
    71ae:	e7c2      	b.n	7136 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    71b0:	f06f 000c 	mvn.w	r0, #12
    71b4:	e7bf      	b.n	7136 <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    71b6:	f06f 0010 	mvn.w	r0, #16
    71ba:	e7bc      	b.n	7136 <bt_gatt_attr_write_ccc+0x32>
    71bc:	0001f869 	.word	0x0001f869

000071c0 <clear_cf_cfg>:
{
    71c0:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    71c2:	490c      	ldr	r1, [pc, #48]	; (71f4 <clear_cf_cfg+0x34>)
{
    71c4:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    71c6:	3001      	adds	r0, #1
    71c8:	f014 f97b 	bl	1b4c2 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
    71cc:	f104 0008 	add.w	r0, r4, #8
    71d0:	2201      	movs	r2, #1
    71d2:	2100      	movs	r1, #0
    71d4:	f012 fd19 	bl	19c0a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    71d8:	f3bf 8f5b 	dmb	ish
    71dc:	340c      	adds	r4, #12
    71de:	2300      	movs	r3, #0
    71e0:	e854 2f00 	ldrex	r2, [r4]
    71e4:	e844 3100 	strex	r1, r3, [r4]
    71e8:	2900      	cmp	r1, #0
    71ea:	d1f9      	bne.n	71e0 <clear_cf_cfg+0x20>
    71ec:	f3bf 8f5b 	dmb	ish
}
    71f0:	bd10      	pop	{r4, pc}
    71f2:	bf00      	nop
    71f4:	0001f869 	.word	0x0001f869

000071f8 <sc_save>:
{
    71f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71fc:	4680      	mov	r8, r0
    71fe:	460f      	mov	r7, r1
    7200:	4616      	mov	r6, r2
    7202:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    7204:	f7ff ff5e 	bl	70c4 <find_sc_cfg>
	if (!cfg) {
    7208:	4604      	mov	r4, r0
    720a:	b948      	cbnz	r0, 7220 <sc_save+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    720c:	490b      	ldr	r1, [pc, #44]	; (723c <sc_save+0x44>)
    720e:	f7ff ff59 	bl	70c4 <find_sc_cfg>
		if (!cfg) {
    7212:	4604      	mov	r4, r0
    7214:	b180      	cbz	r0, 7238 <sc_save+0x40>
		cfg->id = id;
    7216:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    721a:	4639      	mov	r1, r7
    721c:	f014 f951 	bl	1b4c2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    7220:	8922      	ldrh	r2, [r4, #8]
    7222:	8963      	ldrh	r3, [r4, #10]
    7224:	b91a      	cbnz	r2, 722e <sc_save+0x36>
    7226:	b92b      	cbnz	r3, 7234 <sc_save+0x3c>
		cfg->data.start = start;
    7228:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    722a:	8165      	strh	r5, [r4, #10]
    722c:	e004      	b.n	7238 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
    722e:	4296      	cmp	r6, r2
		*start = new_start;
    7230:	bf38      	it	cc
    7232:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
    7234:	429d      	cmp	r5, r3
    7236:	d8f8      	bhi.n	722a <sc_save+0x32>
}
    7238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    723c:	0001f869 	.word	0x0001f869

00007240 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    7240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    7244:	4b27      	ldr	r3, [pc, #156]	; (72e4 <disconnected_cb+0xa4>)
{
    7246:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7248:	6882      	ldr	r2, [r0, #8]
    724a:	429a      	cmp	r2, r3
{
    724c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    724e:	d102      	bne.n	7256 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    7250:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    7252:	89a3      	ldrh	r3, [r4, #12]
    7254:	bb43      	cbnz	r3, 72a8 <disconnected_cb+0x68>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    7256:	2001      	movs	r0, #1
    7258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
    725c:	4628      	mov	r0, r5
    725e:	f013 fa17 	bl	1a690 <bt_conn_unref>
		if (ccc->cfg_changed) {
    7262:	6923      	ldr	r3, [r4, #16]
		ccc->value = 0U;
    7264:	2100      	movs	r1, #0
    7266:	81a1      	strh	r1, [r4, #12]
		if (ccc->cfg_changed) {
    7268:	2b00      	cmp	r3, #0
    726a:	d0f4      	beq.n	7256 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    726c:	4630      	mov	r0, r6
    726e:	4798      	blx	r3
    7270:	e7f1      	b.n	7256 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7272:	f105 0888 	add.w	r8, r5, #136	; 0x88
    7276:	7a28      	ldrb	r0, [r5, #8]
    7278:	4641      	mov	r1, r8
    727a:	f012 ffbd 	bl	1a1f8 <bt_addr_le_is_bonded>
    727e:	b970      	cbnz	r0, 729e <disconnected_cb+0x5e>
				if (ccc == &sc_ccc) {
    7280:	4b19      	ldr	r3, [pc, #100]	; (72e8 <disconnected_cb+0xa8>)
    7282:	429c      	cmp	r4, r3
    7284:	d102      	bne.n	728c <disconnected_cb+0x4c>
					sc_clear(conn);
    7286:	4628      	mov	r0, r5
    7288:	f014 f931 	bl	1b4ee <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    728c:	4917      	ldr	r1, [pc, #92]	; (72ec <disconnected_cb+0xac>)
    728e:	4638      	mov	r0, r7
    7290:	f014 f917 	bl	1b4c2 <bt_addr_le_copy>
	cfg->id = 0U;
    7294:	2300      	movs	r3, #0
    7296:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
    7298:	8163      	strh	r3, [r4, #10]
	cfg->link_encrypted = false;
    729a:	7223      	strb	r3, [r4, #8]
}
    729c:	e7e1      	b.n	7262 <disconnected_cb+0x22>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    729e:	4641      	mov	r1, r8
    72a0:	4638      	mov	r0, r7
    72a2:	f014 f90e 	bl	1b4c2 <bt_addr_le_copy>
    72a6:	e7dc      	b.n	7262 <disconnected_cb+0x22>
		if (!cfg->value) {
    72a8:	8963      	ldrh	r3, [r4, #10]
    72aa:	2b00      	cmp	r3, #0
    72ac:	d0d9      	beq.n	7262 <disconnected_cb+0x22>
		if (!bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
    72ae:	4621      	mov	r1, r4
    72b0:	4628      	mov	r0, r5
    72b2:	f014 f909 	bl	1b4c8 <bt_gatt_ccc_cfg_is_matching_conn>
	conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    72b6:	1c67      	adds	r7, r4, #1
		if (!bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
    72b8:	2800      	cmp	r0, #0
    72ba:	d1da      	bne.n	7272 <disconnected_cb+0x32>
	conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    72bc:	7820      	ldrb	r0, [r4, #0]
    72be:	4639      	mov	r1, r7
    72c0:	f7fe fe5c 	bl	5f7c <bt_conn_lookup_addr_le>
    72c4:	4605      	mov	r5, r0
	if (conn) {
    72c6:	2800      	cmp	r0, #0
    72c8:	d0cb      	beq.n	7262 <disconnected_cb+0x22>
		if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
    72ca:	4621      	mov	r1, r4
    72cc:	f014 f8fc 	bl	1b4c8 <bt_gatt_ccc_cfg_is_matching_conn>
    72d0:	2800      	cmp	r0, #0
    72d2:	d0c3      	beq.n	725c <disconnected_cb+0x1c>
				if (tmp->state == BT_CONN_CONNECTED) {
    72d4:	7aab      	ldrb	r3, [r5, #10]
    72d6:	2b07      	cmp	r3, #7
    72d8:	d1c0      	bne.n	725c <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
    72da:	4628      	mov	r0, r5
    72dc:	f013 f9d8 	bl	1a690 <bt_conn_unref>
	if (!value_used) {
    72e0:	e7b9      	b.n	7256 <disconnected_cb+0x16>
    72e2:	bf00      	nop
    72e4:	00007105 	.word	0x00007105
    72e8:	20000230 	.word	0x20000230
    72ec:	0001f869 	.word	0x0001f869

000072f0 <read_ppcp>:
{
    72f0:	b513      	push	{r0, r1, r4, lr}
    72f2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    72f6:	4c0b      	ldr	r4, [pc, #44]	; (7324 <read_ppcp+0x34>)
{
    72f8:	4610      	mov	r0, r2
	if (offset > value_len) {
    72fa:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
    72fc:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    7300:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    7304:	d80b      	bhi.n	731e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    7306:	f1c1 0408 	rsb	r4, r1, #8
    730a:	429c      	cmp	r4, r3
    730c:	bfa8      	it	ge
    730e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    7310:	4622      	mov	r2, r4
    7312:	4469      	add	r1, sp
    7314:	f012 fc6e 	bl	19bf4 <memcpy>
}
    7318:	4620      	mov	r0, r4
    731a:	b002      	add	sp, #8
    731c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    731e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    7322:	e7f9      	b.n	7318 <read_ppcp+0x28>
    7324:	00280018 	.word	0x00280018

00007328 <sc_indicate_rsp>:
{
    7328:	b510      	push	{r4, lr}
    732a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    732c:	4814      	ldr	r0, [pc, #80]	; (7380 <sc_indicate_rsp+0x58>)
    732e:	f3bf 8f5b 	dmb	ish
    7332:	e850 3f00 	ldrex	r3, [r0]
    7336:	f023 0302 	bic.w	r3, r3, #2
    733a:	e840 3200 	strex	r2, r3, [r0]
    733e:	2a00      	cmp	r2, #0
    7340:	d1f7      	bne.n	7332 <sc_indicate_rsp+0xa>
    7342:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7346:	f3bf 8f5b 	dmb	ish
    734a:	6803      	ldr	r3, [r0, #0]
    734c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    7350:	07da      	lsls	r2, r3, #31
    7352:	d504      	bpl.n	735e <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
    7354:	2200      	movs	r2, #0
    7356:	2300      	movs	r3, #0
    7358:	3830      	subs	r0, #48	; 0x30
    735a:	f010 ff97 	bl	1828c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
    735e:	4620      	mov	r0, r4
    7360:	f013 fffb 	bl	1b35a <bt_att_fixed_chan_only>
    7364:	b150      	cbz	r0, 737c <sc_indicate_rsp+0x54>
		cfg = find_cf_cfg(conn);
    7366:	4620      	mov	r0, r4
    7368:	f7ff fe94 	bl	7094 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
    736c:	b130      	cbz	r0, 737c <sc_indicate_rsp+0x54>
    736e:	7a03      	ldrb	r3, [r0, #8]
    7370:	07db      	lsls	r3, r3, #31
    7372:	d503      	bpl.n	737c <sc_indicate_rsp+0x54>
}
    7374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
    7378:	f014 b984 	b.w	1b684 <set_change_aware_no_store.constprop.0.isra.0>
}
    737c:	bd10      	pop	{r4, pc}
    737e:	bf00      	nop
    7380:	20000cf8 	.word	0x20000cf8

00007384 <bt_gatt_init>:
{
    7384:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    7386:	4817      	ldr	r0, [pc, #92]	; (73e4 <bt_gatt_init+0x60>)
    7388:	2101      	movs	r1, #1
    738a:	f014 f88b 	bl	1b4a4 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
    738e:	07c3      	lsls	r3, r0, #31
    7390:	d427      	bmi.n	73e2 <bt_gatt_init+0x5e>
    7392:	2102      	movs	r1, #2
    7394:	4813      	ldr	r0, [pc, #76]	; (73e4 <bt_gatt_init+0x60>)
    7396:	f014 f885 	bl	1b4a4 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
    739a:	4008      	ands	r0, r1
    739c:	d107      	bne.n	73ae <bt_gatt_init+0x2a>
    739e:	4912      	ldr	r1, [pc, #72]	; (73e8 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    73a0:	4a12      	ldr	r2, [pc, #72]	; (73ec <bt_gatt_init+0x68>)
    73a2:	880b      	ldrh	r3, [r1, #0]
    73a4:	4c12      	ldr	r4, [pc, #72]	; (73f0 <bt_gatt_init+0x6c>)
    73a6:	42a2      	cmp	r2, r4
    73a8:	d315      	bcc.n	73d6 <bt_gatt_init+0x52>
    73aa:	b100      	cbz	r0, 73ae <bt_gatt_init+0x2a>
    73ac:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    73ae:	4b11      	ldr	r3, [pc, #68]	; (73f4 <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    73b0:	4911      	ldr	r1, [pc, #68]	; (73f8 <bt_gatt_init+0x74>)
    73b2:	4812      	ldr	r0, [pc, #72]	; (73fc <bt_gatt_init+0x78>)
    73b4:	2200      	movs	r2, #0
	list->tail = NULL;
    73b6:	e9c3 2200 	strd	r2, r2, [r3]
    73ba:	f015 ff29 	bl	1d210 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    73be:	480f      	ldr	r0, [pc, #60]	; (73fc <bt_gatt_init+0x78>)
    73c0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    73c4:	2300      	movs	r3, #0
    73c6:	f7fc fe6d 	bl	40a4 <bt_long_wq_schedule>
}
    73ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    73ce:	490c      	ldr	r1, [pc, #48]	; (7400 <bt_gatt_init+0x7c>)
    73d0:	480c      	ldr	r0, [pc, #48]	; (7404 <bt_gatt_init+0x80>)
    73d2:	f015 bf1d 	b.w	1d210 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    73d6:	6850      	ldr	r0, [r2, #4]
    73d8:	4403      	add	r3, r0
    73da:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    73dc:	3208      	adds	r2, #8
    73de:	2001      	movs	r0, #1
    73e0:	e7e1      	b.n	73a6 <bt_gatt_init+0x22>
}
    73e2:	bd10      	pop	{r4, pc}
    73e4:	2000130c 	.word	0x2000130c
    73e8:	200026f2 	.word	0x200026f2
    73ec:	0001dbd0 	.word	0x0001dbd0
    73f0:	0001dbe8 	.word	0x0001dbe8
    73f4:	20001310 	.word	0x20001310
    73f8:	00007605 	.word	0x00007605
    73fc:	20000c50 	.word	0x20000c50
    7400:	00007821 	.word	0x00007821
    7404:	20000cc8 	.word	0x20000cc8

00007408 <bt_gatt_attr_get_handle>:
{
    7408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    740c:	4603      	mov	r3, r0
    740e:	b148      	cbz	r0, 7424 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    7410:	8a00      	ldrh	r0, [r0, #16]
    7412:	b938      	cbnz	r0, 7424 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7414:	4912      	ldr	r1, [pc, #72]	; (7460 <bt_gatt_attr_get_handle+0x58>)
    7416:	f8df e04c 	ldr.w	lr, [pc, #76]	; 7464 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    741a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    741c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7420:	4571      	cmp	r1, lr
    7422:	d301      	bcc.n	7428 <bt_gatt_attr_get_handle+0x20>
}
    7424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    7428:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    742c:	42bb      	cmp	r3, r7
    742e:	d304      	bcc.n	743a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    7430:	fb0c 7206 	mla	r2, ip, r6, r7
    7434:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    7436:	4293      	cmp	r3, r2
    7438:	d90e      	bls.n	7458 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    743a:	4434      	add	r4, r6
    743c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    743e:	3108      	adds	r1, #8
    7440:	4614      	mov	r4, r2
    7442:	e7ed      	b.n	7420 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    7444:	fb0c 7805 	mla	r8, ip, r5, r7
    7448:	4543      	cmp	r3, r8
    744a:	d007      	beq.n	745c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    744c:	3501      	adds	r5, #1
    744e:	1962      	adds	r2, r4, r5
    7450:	42b5      	cmp	r5, r6
    7452:	b292      	uxth	r2, r2
    7454:	d1f6      	bne.n	7444 <bt_gatt_attr_get_handle+0x3c>
    7456:	e7f2      	b.n	743e <bt_gatt_attr_get_handle+0x36>
    7458:	2500      	movs	r5, #0
    745a:	e7f8      	b.n	744e <bt_gatt_attr_get_handle+0x46>
    745c:	4610      	mov	r0, r2
    745e:	e7e1      	b.n	7424 <bt_gatt_attr_get_handle+0x1c>
    7460:	0001dbd0 	.word	0x0001dbd0
    7464:	0001dbe8 	.word	0x0001dbe8

00007468 <bt_gatt_foreach_attr_type>:
{
    7468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    746c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    7470:	9100      	str	r1, [sp, #0]
    7472:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    7474:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7478:	2d00      	cmp	r5, #0
    747a:	bf08      	it	eq
    747c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    747e:	4b24      	ldr	r3, [pc, #144]	; (7510 <bt_gatt_foreach_attr_type+0xa8>)
    7480:	881b      	ldrh	r3, [r3, #0]
    7482:	4283      	cmp	r3, r0
{
    7484:	4607      	mov	r7, r0
    7486:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    7488:	d23c      	bcs.n	7504 <bt_gatt_foreach_attr_type+0x9c>
}
    748a:	b003      	add	sp, #12
    748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    7490:	6873      	ldr	r3, [r6, #4]
    7492:	4423      	add	r3, r4
    7494:	42bb      	cmp	r3, r7
    7496:	d232      	bcs.n	74fe <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    7498:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    749a:	3608      	adds	r6, #8
    749c:	4b1d      	ldr	r3, [pc, #116]	; (7514 <bt_gatt_foreach_attr_type+0xac>)
    749e:	429e      	cmp	r6, r3
    74a0:	d3f6      	bcc.n	7490 <bt_gatt_foreach_attr_type+0x28>
    74a2:	e7f2      	b.n	748a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    74a4:	5889      	ldr	r1, [r1, r2]
    74a6:	9301      	str	r3, [sp, #4]
    74a8:	4640      	mov	r0, r8
    74aa:	f012 fbd5 	bl	19c58 <bt_uuid_cmp>
    74ae:	9b01      	ldr	r3, [sp, #4]
    74b0:	b190      	cbz	r0, 74d8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    74b2:	3401      	adds	r4, #1
    74b4:	f10a 0a01 	add.w	sl, sl, #1
    74b8:	b2a4      	uxth	r4, r4
    74ba:	6873      	ldr	r3, [r6, #4]
    74bc:	4553      	cmp	r3, sl
    74be:	d9ec      	bls.n	749a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    74c0:	9b00      	ldr	r3, [sp, #0]
    74c2:	429c      	cmp	r4, r3
    74c4:	d8e1      	bhi.n	748a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    74c6:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
    74c8:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
    74ca:	d3f2      	bcc.n	74b2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    74cc:	fb0b f20a 	mul.w	r2, fp, sl
    74d0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    74d2:	f1b8 0f00 	cmp.w	r8, #0
    74d6:	d1e5      	bne.n	74a4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    74d8:	f1b9 0f00 	cmp.w	r9, #0
    74dc:	d10b      	bne.n	74f6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    74de:	3d01      	subs	r5, #1
    74e0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    74e2:	4618      	mov	r0, r3
    74e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    74e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    74e8:	4621      	mov	r1, r4
    74ea:	4798      	blx	r3
	if (!*num_matches) {
    74ec:	2d00      	cmp	r5, #0
    74ee:	d0cc      	beq.n	748a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    74f0:	2800      	cmp	r0, #0
    74f2:	d1de      	bne.n	74b2 <bt_gatt_foreach_attr_type+0x4a>
    74f4:	e7c9      	b.n	748a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    74f6:	68da      	ldr	r2, [r3, #12]
    74f8:	4591      	cmp	r9, r2
    74fa:	d1da      	bne.n	74b2 <bt_gatt_foreach_attr_type+0x4a>
    74fc:	e7ef      	b.n	74de <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    74fe:	f04f 0a00 	mov.w	sl, #0
    7502:	e7da      	b.n	74ba <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    7504:	4e04      	ldr	r6, [pc, #16]	; (7518 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    7506:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    7508:	f04f 0b14 	mov.w	fp, #20
    750c:	e7c6      	b.n	749c <bt_gatt_foreach_attr_type+0x34>
    750e:	bf00      	nop
    7510:	200026f2 	.word	0x200026f2
    7514:	0001dbe8 	.word	0x0001dbe8
    7518:	0001dbd0 	.word	0x0001dbd0

0000751c <db_hash_gen>:
{
    751c:	b510      	push	{r4, lr}
    751e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    7520:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    7522:	aa1c      	add	r2, sp, #112	; 0x70
    7524:	4669      	mov	r1, sp
    7526:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    7528:	e9cd 3300 	strd	r3, r3, [sp]
    752c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    7530:	f012 fa62 	bl	199f8 <tc_cmac_setup>
    7534:	b1d8      	cbz	r0, 756e <db_hash_gen+0x52>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    7536:	f64f 71ff 	movw	r1, #65535	; 0xffff
    753a:	2001      	movs	r0, #1
    753c:	4a0d      	ldr	r2, [pc, #52]	; (7574 <db_hash_gen+0x58>)
    753e:	ab04      	add	r3, sp, #16
    7540:	f014 f952 	bl	1b7e8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    7544:	480c      	ldr	r0, [pc, #48]	; (7578 <db_hash_gen+0x5c>)
    7546:	a904      	add	r1, sp, #16
    7548:	f012 faeb 	bl	19b22 <tc_cmac_final>
    754c:	b178      	cbz	r0, 756e <db_hash_gen+0x52>
    754e:	4b0a      	ldr	r3, [pc, #40]	; (7578 <db_hash_gen+0x5c>)
    7550:	2208      	movs	r2, #8
    7552:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    7556:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    7558:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    755c:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    7560:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    7562:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    7564:	d1f7      	bne.n	7556 <db_hash_gen+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7566:	4805      	ldr	r0, [pc, #20]	; (757c <db_hash_gen+0x60>)
    7568:	2108      	movs	r1, #8
    756a:	f013 ff9b 	bl	1b4a4 <atomic_or>
}
    756e:	b048      	add	sp, #288	; 0x120
    7570:	bd10      	pop	{r4, pc}
    7572:	bf00      	nop
    7574:	0001b3ef 	.word	0x0001b3ef
    7578:	20000c40 	.word	0x20000c40
    757c:	20000cf8 	.word	0x20000cf8

00007580 <db_hash_read>:
{
    7580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7582:	491d      	ldr	r1, [pc, #116]	; (75f8 <db_hash_read+0x78>)
{
    7584:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    7588:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    758a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    758e:	461f      	mov	r7, r3
    7590:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    7592:	f015 fe5f 	bl	1d254 <k_work_cancel_delayable_sync>
    7596:	f3bf 8f5b 	dmb	ish
    759a:	4b18      	ldr	r3, [pc, #96]	; (75fc <db_hash_read+0x7c>)
    759c:	681b      	ldr	r3, [r3, #0]
    759e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    75a2:	0719      	lsls	r1, r3, #28
    75a4:	d401      	bmi.n	75aa <db_hash_read+0x2a>
		db_hash_gen();
    75a6:	f7ff ffb9 	bl	751c <db_hash_gen>
	cfg = find_cf_cfg(conn);
    75aa:	4620      	mov	r0, r4
    75ac:	f7ff fd72 	bl	7094 <find_cf_cfg>
	if (cfg &&
    75b0:	4601      	mov	r1, r0
    75b2:	b170      	cbz	r0, 75d2 <db_hash_read+0x52>
    75b4:	7a03      	ldrb	r3, [r0, #8]
    75b6:	07da      	lsls	r2, r3, #31
    75b8:	d50b      	bpl.n	75d2 <db_hash_read+0x52>
    75ba:	f3bf 8f5b 	dmb	ish
    75be:	68cb      	ldr	r3, [r1, #12]
    75c0:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
    75c4:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
    75c6:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
    75ca:	d402      	bmi.n	75d2 <db_hash_read+0x52>
    75cc:	2102      	movs	r1, #2
    75ce:	f013 ff69 	bl	1b4a4 <atomic_or>
	if (offset > value_len) {
    75d2:	2e10      	cmp	r6, #16
    75d4:	d80c      	bhi.n	75f0 <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
    75d6:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    75da:	4909      	ldr	r1, [pc, #36]	; (7600 <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
    75dc:	42bc      	cmp	r4, r7
    75de:	bfa8      	it	ge
    75e0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    75e2:	4622      	mov	r2, r4
    75e4:	4431      	add	r1, r6
    75e6:	4628      	mov	r0, r5
    75e8:	f012 fb04 	bl	19bf4 <memcpy>
}
    75ec:	4620      	mov	r0, r4
    75ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    75f0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    75f4:	e7fa      	b.n	75ec <db_hash_read+0x6c>
    75f6:	bf00      	nop
    75f8:	20000c80 	.word	0x20000c80
    75fc:	20000cf8 	.word	0x20000cf8
    7600:	20000c40 	.word	0x20000c40

00007604 <db_hash_process>:
    7604:	4b05      	ldr	r3, [pc, #20]	; (761c <db_hash_process+0x18>)
    7606:	f3bf 8f5b 	dmb	ish
    760a:	681b      	ldr	r3, [r3, #0]
    760c:	f3bf 8f5b 	dmb	ish
	if (new_hash) {
    7610:	071b      	lsls	r3, r3, #28
    7612:	d401      	bmi.n	7618 <db_hash_process+0x14>
		db_hash_gen();
    7614:	f7ff bf82 	b.w	751c <db_hash_gen>
}
    7618:	4770      	bx	lr
    761a:	bf00      	nop
    761c:	20000cf8 	.word	0x20000cf8

00007620 <bt_gatt_attr_next>:
{
    7620:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    7622:	2300      	movs	r3, #0
    7624:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
    7626:	f7ff feef 	bl	7408 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
    762a:	1c41      	adds	r1, r0, #1
    762c:	b289      	uxth	r1, r1
    762e:	4608      	mov	r0, r1
    7630:	4a03      	ldr	r2, [pc, #12]	; (7640 <bt_gatt_attr_next+0x20>)
    7632:	ab01      	add	r3, sp, #4
    7634:	f014 f8d8 	bl	1b7e8 <bt_gatt_foreach_attr>
}
    7638:	9801      	ldr	r0, [sp, #4]
    763a:	b003      	add	sp, #12
    763c:	f85d fb04 	ldr.w	pc, [sp], #4
    7640:	0001b3a7 	.word	0x0001b3a7

00007644 <bt_gatt_find_by_uuid>:
{
    7644:	b530      	push	{r4, r5, lr}
    7646:	b087      	sub	sp, #28
	struct bt_gatt_attr *found = NULL;
    7648:	2300      	movs	r3, #0
{
    764a:	460c      	mov	r4, r1
    764c:	4615      	mov	r5, r2
	struct bt_gatt_attr *found = NULL;
    764e:	9305      	str	r3, [sp, #20]
	uint16_t start_handle = bt_gatt_attr_value_handle(attr);
    7650:	f014 f87c 	bl	1b74c <bt_gatt_attr_value_handle>
	uint16_t end_handle = start_handle && attr_count ?
    7654:	b178      	cbz	r0, 7676 <bt_gatt_find_by_uuid+0x32>
    7656:	b174      	cbz	r4, 7676 <bt_gatt_find_by_uuid+0x32>
    7658:	1901      	adds	r1, r0, r4
    765a:	b289      	uxth	r1, r1
	bt_gatt_foreach_attr_type(start_handle, end_handle, uuid, NULL, 1,
    765c:	ab05      	add	r3, sp, #20
    765e:	9302      	str	r3, [sp, #8]
    7660:	4b06      	ldr	r3, [pc, #24]	; (767c <bt_gatt_find_by_uuid+0x38>)
    7662:	9301      	str	r3, [sp, #4]
    7664:	2301      	movs	r3, #1
    7666:	9300      	str	r3, [sp, #0]
    7668:	462a      	mov	r2, r5
    766a:	2300      	movs	r3, #0
    766c:	f7ff fefc 	bl	7468 <bt_gatt_foreach_attr_type>
}
    7670:	9805      	ldr	r0, [sp, #20]
    7672:	b007      	add	sp, #28
    7674:	bd30      	pop	{r4, r5, pc}
	uint16_t end_handle = start_handle && attr_count ?
    7676:	f64f 71ff 	movw	r1, #65535	; 0xffff
    767a:	e7ef      	b.n	765c <bt_gatt_find_by_uuid+0x18>
    767c:	0001b3a7 	.word	0x0001b3a7

00007680 <gatt_indicate>:
{
    7680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7684:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
    7686:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
    7688:	8a4f      	ldrh	r7, [r1, #18]
    768a:	f017 0714 	ands.w	r7, r7, #20
{
    768e:	4680      	mov	r8, r0
    7690:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
    7692:	d142      	bne.n	771a <gatt_indicate+0x9a>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
    7694:	2202      	movs	r2, #2
    7696:	f014 f8ce 	bl	1b836 <bt_gatt_is_subscribed>
    769a:	2800      	cmp	r0, #0
    769c:	d040      	beq.n	7720 <gatt_indicate+0xa0>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    769e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    76a2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    76a4:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    76a6:	f7ff fc1d 	bl	6ee4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    76aa:	3602      	adds	r6, #2
	if (!req) {
    76ac:	4604      	mov	r4, r0
    76ae:	b160      	cbz	r0, 76ca <gatt_indicate+0x4a>
	req->func = func;
    76b0:	4b1d      	ldr	r3, [pc, #116]	; (7728 <gatt_indicate+0xa8>)
    76b2:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    76b4:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    76b6:	4632      	mov	r2, r6
    76b8:	211d      	movs	r1, #29
    76ba:	4640      	mov	r0, r8
    76bc:	f013 fd95 	bl	1b1ea <bt_att_create_pdu>
	if (!buf) {
    76c0:	4606      	mov	r6, r0
    76c2:	b938      	cbnz	r0, 76d4 <gatt_indicate+0x54>
		bt_att_req_free(req);
    76c4:	4620      	mov	r0, r4
    76c6:	f7ff fc2f 	bl	6f28 <bt_att_req_free>
		return -ENOMEM;
    76ca:	f06f 050b 	mvn.w	r5, #11
}
    76ce:	4628      	mov	r0, r5
    76d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
    76d4:	2301      	movs	r3, #1
    76d6:	463a      	mov	r2, r7
    76d8:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
    76da:	f106 0a0c 	add.w	sl, r6, #12
    76de:	f013 fe5b 	bl	1b398 <bt_att_set_tx_meta_data>
    76e2:	2102      	movs	r1, #2
    76e4:	4650      	mov	r0, sl
    76e6:	f014 fa16 	bl	1bb16 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    76ea:	4607      	mov	r7, r0
    76ec:	4650      	mov	r0, sl
    76ee:	f827 9b02 	strh.w	r9, [r7], #2
    76f2:	8aa9      	ldrh	r1, [r5, #20]
    76f4:	f014 fa0f 	bl	1bb16 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    76f8:	8aaa      	ldrh	r2, [r5, #20]
    76fa:	6929      	ldr	r1, [r5, #16]
    76fc:	4638      	mov	r0, r7
    76fe:	f012 fa79 	bl	19bf4 <memcpy>
	req->buf = buf;
    7702:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    7704:	4621      	mov	r1, r4
    7706:	4640      	mov	r0, r8
    7708:	f013 fe12 	bl	1b330 <bt_att_req_send>
	if (err) {
    770c:	4605      	mov	r5, r0
    770e:	2800      	cmp	r0, #0
    7710:	d0dd      	beq.n	76ce <gatt_indicate+0x4e>
		bt_att_req_free(req);
    7712:	4620      	mov	r0, r4
    7714:	f7ff fc08 	bl	6f28 <bt_att_req_free>
    7718:	e7d9      	b.n	76ce <gatt_indicate+0x4e>
		return -EPERM;
    771a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    771e:	e7d6      	b.n	76ce <gatt_indicate+0x4e>
			return -EINVAL;
    7720:	f06f 0515 	mvn.w	r5, #21
    7724:	e7d3      	b.n	76ce <gatt_indicate+0x4e>
    7726:	bf00      	nop
    7728:	0001b3c1 	.word	0x0001b3c1

0000772c <bt_gatt_indicate>:
{
    772c:	b530      	push	{r4, r5, lr}
    772e:	4b39      	ldr	r3, [pc, #228]	; (7814 <bt_gatt_indicate+0xe8>)
    7730:	f3bf 8f5b 	dmb	ish
    7734:	681b      	ldr	r3, [r3, #0]
    7736:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    773a:	075a      	lsls	r2, r3, #29
{
    773c:	b08b      	sub	sp, #44	; 0x2c
    773e:	4604      	mov	r4, r0
    7740:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7742:	d561      	bpl.n	7808 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    7744:	b110      	cbz	r0, 774c <bt_gatt_indicate+0x20>
    7746:	7a83      	ldrb	r3, [r0, #10]
    7748:	2b07      	cmp	r3, #7
    774a:	d160      	bne.n	780e <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    774c:	6868      	ldr	r0, [r5, #4]
    774e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7750:	f7ff fe5a 	bl	7408 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    7754:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7756:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    775a:	b33a      	cbz	r2, 77ac <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    775c:	a905      	add	r1, sp, #20
    775e:	9102      	str	r1, [sp, #8]
    7760:	492d      	ldr	r1, [pc, #180]	; (7818 <bt_gatt_indicate+0xec>)
    7762:	9101      	str	r1, [sp, #4]
    7764:	2101      	movs	r1, #1
	found->attr = NULL;
    7766:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7768:	9100      	str	r1, [sp, #0]
    776a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    776e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7770:	f7ff fe7a 	bl	7468 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    7774:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    7776:	b91b      	cbnz	r3, 7780 <bt_gatt_indicate+0x54>
			return -ENOENT;
    7778:	f06f 0001 	mvn.w	r0, #1
}
    777c:	b00b      	add	sp, #44	; 0x2c
    777e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    7780:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    7782:	9b05      	ldr	r3, [sp, #20]
    7784:	6818      	ldr	r0, [r3, #0]
    7786:	2300      	movs	r3, #0
    7788:	f88d 3010 	strb.w	r3, [sp, #16]
    778c:	a904      	add	r1, sp, #16
    778e:	f642 0303 	movw	r3, #10243	; 0x2803
    7792:	f8ad 3012 	strh.w	r3, [sp, #18]
    7796:	f012 fa5f 	bl	19c58 <bt_uuid_cmp>
    779a:	b970      	cbnz	r0, 77ba <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    779c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    779e:	68c3      	ldr	r3, [r0, #12]
    77a0:	799b      	ldrb	r3, [r3, #6]
    77a2:	069b      	lsls	r3, r3, #26
    77a4:	d405      	bmi.n	77b2 <bt_gatt_indicate+0x86>
			return -EINVAL;
    77a6:	f06f 0015 	mvn.w	r0, #21
    77aa:	e7e7      	b.n	777c <bt_gatt_indicate+0x50>
		if (!data.handle) {
    77ac:	2800      	cmp	r0, #0
    77ae:	d1e8      	bne.n	7782 <bt_gatt_indicate+0x56>
    77b0:	e7e2      	b.n	7778 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    77b2:	f013 ffcb 	bl	1b74c <bt_gatt_attr_value_handle>
    77b6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    77ba:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    77be:	b13c      	cbz	r4, 77d0 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    77c0:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    77c2:	4601      	mov	r1, r0
		params->_ref = 1;
    77c4:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    77c6:	462a      	mov	r2, r5
    77c8:	4620      	mov	r0, r4
    77ca:	f7ff ff59 	bl	7680 <gatt_indicate>
    77ce:	e7d5      	b.n	777c <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    77d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    77d4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    77d6:	2302      	movs	r3, #2
    77d8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    77dc:	f642 1302 	movw	r3, #10498	; 0x2902
    77e0:	f8ad 3012 	strh.w	r3, [sp, #18]
    77e4:	ab05      	add	r3, sp, #20
	params->_ref = 0;
    77e6:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    77e8:	9302      	str	r3, [sp, #8]
    77ea:	4b0c      	ldr	r3, [pc, #48]	; (781c <bt_gatt_indicate+0xf0>)
    77ec:	9301      	str	r3, [sp, #4]
    77ee:	2301      	movs	r3, #1
    77f0:	9300      	str	r3, [sp, #0]
    77f2:	aa04      	add	r2, sp, #16
    77f4:	4623      	mov	r3, r4
    77f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    77fa:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    77fc:	f88d 4010 	strb.w	r4, [sp, #16]
    7800:	f7ff fe32 	bl	7468 <bt_gatt_foreach_attr_type>
	return data.err;
    7804:	9807      	ldr	r0, [sp, #28]
    7806:	e7b9      	b.n	777c <bt_gatt_indicate+0x50>
		return -EAGAIN;
    7808:	f06f 000a 	mvn.w	r0, #10
    780c:	e7b6      	b.n	777c <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    780e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7812:	e7b3      	b.n	777c <bt_gatt_indicate+0x50>
    7814:	200000dc 	.word	0x200000dc
    7818:	0001b3e7 	.word	0x0001b3e7
    781c:	00007a29 	.word	0x00007a29

00007820 <sc_process>:
{
    7820:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7822:	f850 2c08 	ldr.w	r2, [r0, #-8]
    7826:	9201      	str	r2, [sp, #4]
{
    7828:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    782a:	f1a0 0120 	sub.w	r1, r0, #32
    782e:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7832:	f3bf 8f5b 	dmb	ish
    7836:	e854 2f00 	ldrex	r2, [r4]
    783a:	f022 0201 	bic.w	r2, r2, #1
    783e:	e844 2000 	strex	r0, r2, [r4]
    7842:	2800      	cmp	r0, #0
    7844:	d1f7      	bne.n	7836 <sc_process+0x16>
    7846:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    784a:	4a0d      	ldr	r2, [pc, #52]	; (7880 <sc_process+0x60>)
    784c:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    7850:	4a0c      	ldr	r2, [pc, #48]	; (7884 <sc_process+0x64>)
    7852:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    7856:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    7858:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    785a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    785e:	2204      	movs	r2, #4
	sc->start = 0U;
    7860:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    7864:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    7868:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    786c:	f7ff ff5e 	bl	772c <bt_gatt_indicate>
    7870:	b918      	cbnz	r0, 787a <sc_process+0x5a>
    7872:	2102      	movs	r1, #2
    7874:	4620      	mov	r0, r4
    7876:	f013 fe15 	bl	1b4a4 <atomic_or>
}
    787a:	b002      	add	sp, #8
    787c:	bd10      	pop	{r4, pc}
    787e:	bf00      	nop
    7880:	0001dff0 	.word	0x0001dff0
    7884:	00007329 	.word	0x00007329

00007888 <update_ccc>:
{
    7888:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    788a:	4b26      	ldr	r3, [pc, #152]	; (7924 <update_ccc+0x9c>)
	struct bt_conn *conn = data->conn;
    788c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    788e:	6882      	ldr	r2, [r0, #8]
    7890:	429a      	cmp	r2, r3
{
    7892:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7894:	d143      	bne.n	791e <update_ccc+0x96>
	ccc = attr->user_data;
    7896:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value || !bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
    7898:	8973      	ldrh	r3, [r6, #10]
    789a:	2b00      	cmp	r3, #0
    789c:	d03f      	beq.n	791e <update_ccc+0x96>
    789e:	4631      	mov	r1, r6
    78a0:	4628      	mov	r0, r5
    78a2:	f013 fe11 	bl	1b4c8 <bt_gatt_ccc_cfg_is_matching_conn>
    78a6:	2800      	cmp	r0, #0
    78a8:	d039      	beq.n	791e <update_ccc+0x96>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    78aa:	f44f 7295 	mov.w	r2, #298	; 0x12a
    78ae:	4621      	mov	r1, r4
    78b0:	4628      	mov	r0, r5
    78b2:	f013 ffa4 	bl	1b7fe <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    78b6:	2803      	cmp	r0, #3
    78b8:	d031      	beq.n	791e <update_ccc+0x96>
		gatt_ccc_changed(attr, ccc);
    78ba:	4631      	mov	r1, r6
    78bc:	4620      	mov	r0, r4
    78be:	f013 fd75 	bl	1b3ac <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    78c2:	4b19      	ldr	r3, [pc, #100]	; (7928 <update_ccc+0xa0>)
    78c4:	429e      	cmp	r6, r3
    78c6:	d12a      	bne.n	791e <update_ccc+0x96>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    78c8:	7a28      	ldrb	r0, [r5, #8]
    78ca:	f105 0188 	add.w	r1, r5, #136	; 0x88
    78ce:	f7ff fbf9 	bl	70c4 <find_sc_cfg>
	if (!cfg) {
    78d2:	4604      	mov	r4, r0
    78d4:	b318      	cbz	r0, 791e <update_ccc+0x96>
	if (!(cfg->data.start || cfg->data.end)) {
    78d6:	8903      	ldrh	r3, [r0, #8]
    78d8:	b90b      	cbnz	r3, 78de <update_ccc+0x56>
    78da:	8943      	ldrh	r3, [r0, #10]
    78dc:	b1fb      	cbz	r3, 791e <update_ccc+0x96>
	index = bt_conn_index(conn);
    78de:	4628      	mov	r0, r5
    78e0:	f7fe fa8e 	bl	5e00 <bt_conn_index>
	sc_range[index][0] = sys_cpu_to_le16(cfg->data.start);
    78e4:	4a11      	ldr	r2, [pc, #68]	; (792c <update_ccc+0xa4>)
    78e6:	8923      	ldrh	r3, [r4, #8]
    78e8:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
	sc_range[index][1] = sys_cpu_to_le16(cfg->data.end);
    78ec:	eb02 0380 	add.w	r3, r2, r0, lsl #2
    78f0:	8961      	ldrh	r1, [r4, #10]
    78f2:	8059      	strh	r1, [r3, #2]
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    78f4:	490e      	ldr	r1, [pc, #56]	; (7930 <update_ccc+0xa8>)
    78f6:	4c0f      	ldr	r4, [pc, #60]	; (7934 <update_ccc+0xac>)
    78f8:	2318      	movs	r3, #24
    78fa:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].data = &sc_range[index][0];
    78fe:	b200      	sxth	r0, r0
    7900:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7904:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    7908:	605c      	str	r4, [r3, #4]
	sc_restore_params[index].data = &sc_range[index][0];
    790a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].func = sc_restore_rsp;
    790c:	4c0a      	ldr	r4, [pc, #40]	; (7938 <update_ccc+0xb0>)
    790e:	609c      	str	r4, [r3, #8]
	sc_restore_params[index].len = sizeof(sc_range[index]);
    7910:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    7912:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7916:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range[index]);
    7918:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    791a:	f7ff ff07 	bl	772c <bt_gatt_indicate>
}
    791e:	2001      	movs	r0, #1
    7920:	bd70      	pop	{r4, r5, r6, pc}
    7922:	bf00      	nop
    7924:	00007105 	.word	0x00007105
    7928:	20000230 	.word	0x20000230
    792c:	200026e2 	.word	0x200026e2
    7930:	200012e4 	.word	0x200012e4
    7934:	0001dff0 	.word	0x0001dff0
    7938:	0001b711 	.word	0x0001b711

0000793c <bt_gatt_notify_cb>:
{
    793c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    793e:	4b37      	ldr	r3, [pc, #220]	; (7a1c <bt_gatt_notify_cb+0xe0>)
    7940:	f3bf 8f5b 	dmb	ish
    7944:	681b      	ldr	r3, [r3, #0]
    7946:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    794a:	075a      	lsls	r2, r3, #29
{
    794c:	b08b      	sub	sp, #44	; 0x2c
    794e:	4604      	mov	r4, r0
    7950:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7952:	d55d      	bpl.n	7a10 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    7954:	b110      	cbz	r0, 795c <bt_gatt_notify_cb+0x20>
    7956:	7a83      	ldrb	r3, [r0, #10]
    7958:	2b07      	cmp	r3, #7
    795a:	d15c      	bne.n	7a16 <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
    795c:	6868      	ldr	r0, [r5, #4]
    795e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7960:	f7ff fd52 	bl	7408 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    7964:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    7966:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    796a:	b33a      	cbz	r2, 79bc <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    796c:	a905      	add	r1, sp, #20
    796e:	9102      	str	r1, [sp, #8]
    7970:	492b      	ldr	r1, [pc, #172]	; (7a20 <bt_gatt_notify_cb+0xe4>)
    7972:	9101      	str	r1, [sp, #4]
    7974:	2101      	movs	r1, #1
	found->attr = NULL;
    7976:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7978:	9100      	str	r1, [sp, #0]
    797a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    797e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    7980:	f7ff fd72 	bl	7468 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    7984:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    7986:	b91b      	cbnz	r3, 7990 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
    7988:	f06f 0001 	mvn.w	r0, #1
}
    798c:	b00b      	add	sp, #44	; 0x2c
    798e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    7990:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    7992:	9b05      	ldr	r3, [sp, #20]
    7994:	6818      	ldr	r0, [r3, #0]
    7996:	2300      	movs	r3, #0
    7998:	f88d 3010 	strb.w	r3, [sp, #16]
    799c:	a904      	add	r1, sp, #16
    799e:	f642 0303 	movw	r3, #10243	; 0x2803
    79a2:	f8ad 3012 	strh.w	r3, [sp, #18]
    79a6:	f012 f957 	bl	19c58 <bt_uuid_cmp>
    79aa:	b970      	cbnz	r0, 79ca <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    79ac:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    79ae:	68c3      	ldr	r3, [r0, #12]
    79b0:	799b      	ldrb	r3, [r3, #6]
    79b2:	06db      	lsls	r3, r3, #27
    79b4:	d405      	bmi.n	79c2 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
    79b6:	f06f 0015 	mvn.w	r0, #21
    79ba:	e7e7      	b.n	798c <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
    79bc:	2800      	cmp	r0, #0
    79be:	d1e8      	bne.n	7992 <bt_gatt_notify_cb+0x56>
    79c0:	e7e2      	b.n	7988 <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    79c2:	f013 fec3 	bl	1b74c <bt_gatt_attr_value_handle>
    79c6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
    79ca:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    79ce:	b12c      	cbz	r4, 79dc <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    79d0:	4601      	mov	r1, r0
    79d2:	462a      	mov	r2, r5
    79d4:	4620      	mov	r0, r4
    79d6:	f013 ffb0 	bl	1b93a <gatt_notify>
    79da:	e7d7      	b.n	798c <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    79dc:	f642 1202 	movw	r2, #10498	; 0x2902
    79e0:	f8ad 2012 	strh.w	r2, [sp, #18]
    79e4:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    79e6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    79ea:	9202      	str	r2, [sp, #8]
    79ec:	4a0d      	ldr	r2, [pc, #52]	; (7a24 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    79ee:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    79f0:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    79f2:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    79f6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    79fa:	aa04      	add	r2, sp, #16
    79fc:	4623      	mov	r3, r4
    79fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    7a02:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    7a04:	f88d 4010 	strb.w	r4, [sp, #16]
    7a08:	f7ff fd2e 	bl	7468 <bt_gatt_foreach_attr_type>
	return data.err;
    7a0c:	9807      	ldr	r0, [sp, #28]
    7a0e:	e7bd      	b.n	798c <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
    7a10:	f06f 000a 	mvn.w	r0, #10
    7a14:	e7ba      	b.n	798c <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
    7a16:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7a1a:	e7b7      	b.n	798c <bt_gatt_notify_cb+0x50>
    7a1c:	200000dc 	.word	0x200000dc
    7a20:	0001b3e7 	.word	0x0001b3e7
    7a24:	00007a29 	.word	0x00007a29

00007a28 <notify_cb>:
{
    7a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a2a:	4b38      	ldr	r3, [pc, #224]	; (7b0c <notify_cb+0xe4>)
{
    7a2c:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a2e:	6882      	ldr	r2, [r0, #8]
    7a30:	429a      	cmp	r2, r3
{
    7a32:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a34:	d001      	beq.n	7a3a <notify_cb+0x12>
		return BT_GATT_ITER_CONTINUE;
    7a36:	2001      	movs	r0, #1
}
    7a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ccc = attr->user_data;
    7a3a:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    7a3c:	4b34      	ldr	r3, [pc, #208]	; (7b10 <notify_cb+0xe8>)
    7a3e:	429e      	cmp	r6, r3
    7a40:	d04a      	beq.n	7ad8 <notify_cb+0xb0>
		if (cfg->value != data->type) {
    7a42:	8972      	ldrh	r2, [r6, #10]
    7a44:	89ab      	ldrh	r3, [r5, #12]
    7a46:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7a48:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
    7a4c:	d1f3      	bne.n	7a36 <notify_cb+0xe>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    7a4e:	7830      	ldrb	r0, [r6, #0]
    7a50:	f7fe fa94 	bl	5f7c <bt_conn_lookup_addr_le>
		if (!conn) {
    7a54:	4604      	mov	r4, r0
    7a56:	2800      	cmp	r0, #0
    7a58:	d0ed      	beq.n	7a36 <notify_cb+0xe>
		if (conn->state != BT_CONN_CONNECTED) {
    7a5a:	7a83      	ldrb	r3, [r0, #10]
    7a5c:	2b07      	cmp	r3, #7
    7a5e:	d005      	beq.n	7a6c <notify_cb+0x44>
			bt_conn_unref(conn);
    7a60:	f012 fe16 	bl	1a690 <bt_conn_unref>
			continue;
    7a64:	e7e7      	b.n	7a36 <notify_cb+0xe>
			bt_conn_unref(conn);
    7a66:	f012 fe13 	bl	1a690 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    7a6a:	e7ea      	b.n	7a42 <notify_cb+0x1a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    7a6c:	69b3      	ldr	r3, [r6, #24]
    7a6e:	b123      	cbz	r3, 7a7a <notify_cb+0x52>
    7a70:	4639      	mov	r1, r7
    7a72:	4798      	blx	r3
    7a74:	b908      	cbnz	r0, 7a7a <notify_cb+0x52>
			bt_conn_unref(conn);
    7a76:	4620      	mov	r0, r4
    7a78:	e7f2      	b.n	7a60 <notify_cb+0x38>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
    7a7a:	8a7b      	ldrh	r3, [r7, #18]
    7a7c:	f003 0314 	and.w	r3, r3, #20
    7a80:	2b00      	cmp	r3, #0
    7a82:	d1f8      	bne.n	7a76 <notify_cb+0x4e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
    7a84:	89ab      	ldrh	r3, [r5, #12]
    7a86:	2b02      	cmp	r3, #2
    7a88:	d114      	bne.n	7ab4 <notify_cb+0x8c>
    7a8a:	8973      	ldrh	r3, [r6, #10]
    7a8c:	079a      	lsls	r2, r3, #30
    7a8e:	d405      	bmi.n	7a9c <notify_cb+0x74>
		bt_conn_unref(conn);
    7a90:	4620      	mov	r0, r4
    7a92:	f012 fdfd 	bl	1a690 <bt_conn_unref>
		data->err = 0;
    7a96:	2300      	movs	r3, #0
    7a98:	60ab      	str	r3, [r5, #8]
    7a9a:	e7cc      	b.n	7a36 <notify_cb+0xe>
			err = gatt_indicate(conn, data->handle, data->ind_params);
    7a9c:	692a      	ldr	r2, [r5, #16]
    7a9e:	88a9      	ldrh	r1, [r5, #4]
    7aa0:	4620      	mov	r0, r4
    7aa2:	f7ff fded 	bl	7680 <gatt_indicate>
			if (err == 0) {
    7aa6:	4606      	mov	r6, r0
    7aa8:	b978      	cbnz	r0, 7aca <notify_cb+0xa2>
				data->ind_params->_ref++;
    7aaa:	692a      	ldr	r2, [r5, #16]
    7aac:	7d93      	ldrb	r3, [r2, #22]
    7aae:	3301      	adds	r3, #1
    7ab0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    7ab2:	e7ed      	b.n	7a90 <notify_cb+0x68>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
    7ab4:	2b01      	cmp	r3, #1
    7ab6:	d1eb      	bne.n	7a90 <notify_cb+0x68>
    7ab8:	8973      	ldrh	r3, [r6, #10]
    7aba:	07db      	lsls	r3, r3, #31
    7abc:	d5e8      	bpl.n	7a90 <notify_cb+0x68>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    7abe:	692a      	ldr	r2, [r5, #16]
    7ac0:	88a9      	ldrh	r1, [r5, #4]
    7ac2:	4620      	mov	r0, r4
    7ac4:	f013 ff39 	bl	1b93a <gatt_notify>
    7ac8:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    7aca:	4620      	mov	r0, r4
    7acc:	f012 fde0 	bl	1a690 <bt_conn_unref>
		if (err < 0) {
    7ad0:	2e00      	cmp	r6, #0
    7ad2:	dae0      	bge.n	7a96 <notify_cb+0x6e>
			return BT_GATT_ITER_STOP;
    7ad4:	2000      	movs	r0, #0
    7ad6:	e7af      	b.n	7a38 <notify_cb+0x10>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
    7ad8:	4c0e      	ldr	r4, [pc, #56]	; (7b14 <notify_cb+0xec>)
    7ada:	490f      	ldr	r1, [pc, #60]	; (7b18 <notify_cb+0xf0>)
    7adc:	4620      	mov	r0, r4
    7ade:	f013 fcd9 	bl	1b494 <bt_addr_le_eq>
    7ae2:	2800      	cmp	r0, #0
    7ae4:	d1ad      	bne.n	7a42 <notify_cb+0x1a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    7ae6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    7aea:	2207      	movs	r2, #7
    7aec:	4621      	mov	r1, r4
    7aee:	f7fe fa5f 	bl	5fb0 <bt_conn_lookup_state_le>
			if (!conn) {
    7af2:	2800      	cmp	r0, #0
    7af4:	d1b7      	bne.n	7a66 <notify_cb+0x3e>
				sc = (struct sc_data *)data->ind_params->data;
    7af6:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
    7af8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    7afc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    7afe:	4621      	mov	r1, r4
    7b00:	8853      	ldrh	r3, [r2, #2]
    7b02:	8812      	ldrh	r2, [r2, #0]
    7b04:	f7ff fb78 	bl	71f8 <sc_save>
				continue;
    7b08:	e79b      	b.n	7a42 <notify_cb+0x1a>
    7b0a:	bf00      	nop
    7b0c:	00007105 	.word	0x00007105
    7b10:	20000230 	.word	0x20000230
    7b14:	200026e7 	.word	0x200026e7
    7b18:	0001f869 	.word	0x0001f869

00007b1c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    7b1c:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7b1e:	4a06      	ldr	r2, [pc, #24]	; (7b38 <bt_gatt_connected+0x1c>)
	data.conn = conn;
    7b20:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7b22:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    7b24:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7b26:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    7b2a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    7b2e:	f013 fe5b 	bl	1b7e8 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
    7b32:	b003      	add	sp, #12
    7b34:	f85d fb04 	ldr.w	pc, [sp], #4
    7b38:	00007889 	.word	0x00007889

00007b3c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    7b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    7b3e:	4b08      	ldr	r3, [pc, #32]	; (7b60 <bt_gatt_att_max_mtu_changed+0x24>)
    7b40:	681c      	ldr	r4, [r3, #0]
    7b42:	4605      	mov	r5, r0
    7b44:	460e      	mov	r6, r1
    7b46:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7b48:	b14c      	cbz	r4, 7b5e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    7b4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    7b4e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    7b50:	b11b      	cbz	r3, 7b5a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    7b52:	463a      	mov	r2, r7
    7b54:	4631      	mov	r1, r6
    7b56:	4628      	mov	r0, r5
    7b58:	4798      	blx	r3
	return node->next;
    7b5a:	6864      	ldr	r4, [r4, #4]
    7b5c:	e7f4      	b.n	7b48 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    7b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b60:	20001310 	.word	0x20001310

00007b64 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    7b64:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7b66:	4603      	mov	r3, r0
    7b68:	4a0f      	ldr	r2, [pc, #60]	; (7ba8 <bt_gatt_disconnected+0x44>)
{
    7b6a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    7b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7b70:	2001      	movs	r0, #1
    7b72:	f013 fe39 	bl	1b7e8 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    7b76:	4620      	mov	r0, r4
    7b78:	f7ff fa8c 	bl	7094 <find_cf_cfg>
	if (!cfg) {
    7b7c:	4605      	mov	r5, r0
    7b7e:	b188      	cbz	r0, 7ba4 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    7b80:	f104 0688 	add.w	r6, r4, #136	; 0x88
    7b84:	7a20      	ldrb	r0, [r4, #8]
    7b86:	4631      	mov	r1, r6
    7b88:	f012 fb36 	bl	1a1f8 <bt_addr_le_is_bonded>
    7b8c:	b920      	cbnz	r0, 7b98 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    7b8e:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    7b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    7b94:	f7ff bb14 	b.w	71c0 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7b98:	4631      	mov	r1, r6
    7b9a:	1c68      	adds	r0, r5, #1
}
    7b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    7ba0:	f013 bc8f 	b.w	1b4c2 <bt_addr_le_copy>
}
    7ba4:	bd70      	pop	{r4, r5, r6, pc}
    7ba6:	bf00      	nop
    7ba8:	00007241 	.word	0x00007241

00007bac <bt_smp_accept>:
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    7bac:	4b04      	ldr	r3, [pc, #16]	; (7bc0 <bt_smp_accept+0x14>)
    7bae:	6818      	ldr	r0, [r3, #0]
    7bb0:	b918      	cbnz	r0, 7bba <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    7bb2:	4a04      	ldr	r2, [pc, #16]	; (7bc4 <bt_smp_accept+0x18>)
    7bb4:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    7bb6:	600b      	str	r3, [r1, #0]

		return 0;
    7bb8:	4770      	bx	lr
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    7bba:	f06f 000b 	mvn.w	r0, #11
}
    7bbe:	4770      	bx	lr
    7bc0:	20001318 	.word	0x20001318
    7bc4:	0001e0f4 	.word	0x0001e0f4

00007bc8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    7bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bcc:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7bce:	1dc2      	adds	r2, r0, #7
    7bd0:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7bd4:	1e75      	subs	r5, r6, #1
{
    7bd6:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7bd8:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    7bda:	6018      	str	r0, [r3, #0]
{
    7bdc:	b082      	sub	sp, #8
    7bde:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7be0:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7be2:	2100      	movs	r1, #0
    7be4:	2204      	movs	r2, #4
    7be6:	fb07 0005 	mla	r0, r7, r5, r0
    7bea:	f012 f80e 	bl	19c0a <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    7bee:	b1bd      	cbz	r5, 7c20 <mem_init+0x58>
    7bf0:	3e02      	subs	r6, #2
    7bf2:	b2b6      	uxth	r6, r6
    7bf4:	fb06 7307 	mla	r3, r6, r7, r7
    7bf8:	fb06 f807 	mul.w	r8, r6, r7
    7bfc:	441c      	add	r4, r3
    7bfe:	eba8 0803 	sub.w	r8, r8, r3
    7c02:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    7c04:	2204      	movs	r2, #4
    7c06:	eb04 0008 	add.w	r0, r4, r8
    7c0a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    7c0e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    7c10:	f011 fff0 	bl	19bf4 <memcpy>
	while (mem_count--) {
    7c14:	42b5      	cmp	r5, r6
    7c16:	eba4 0407 	sub.w	r4, r4, r7
    7c1a:	f105 0501 	add.w	r5, r5, #1
    7c1e:	d1f1      	bne.n	7c04 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    7c20:	b002      	add	sp, #8
    7c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c26:	bf00      	nop

00007c28 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    7c28:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    7c2a:	6805      	ldr	r5, [r0, #0]
{
    7c2c:	b082      	sub	sp, #8
	if (*mem_head) {
    7c2e:	b19d      	cbz	r5, 7c58 <mem_acquire+0x30>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    7c30:	1deb      	adds	r3, r5, #7
    7c32:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7c36:	2204      	movs	r2, #4
    7c38:	4604      	mov	r4, r0
    7c3a:	4629      	mov	r1, r5
    7c3c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    7c40:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7c42:	f011 ffd7 	bl	19bf4 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	b12b      	cbz	r3, 7c56 <mem_acquire+0x2e>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    7c4a:	3307      	adds	r3, #7
    7c4c:	f023 0303 	bic.w	r3, r3, #3
		free_count--;
    7c50:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    7c52:	801e      	strh	r6, [r3, #0]
				free_count;
		}

		*mem_head = head;
    7c54:	9b01      	ldr	r3, [sp, #4]
    7c56:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    7c58:	4628      	mov	r0, r5
    7c5a:	b002      	add	sp, #8
    7c5c:	bd70      	pop	{r4, r5, r6, pc}
    7c5e:	bf00      	nop

00007c60 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    7c60:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    7c62:	680b      	ldr	r3, [r1, #0]
{
    7c64:	460c      	mov	r4, r1
    7c66:	4605      	mov	r5, r0
	if (*mem_head) {
    7c68:	b183      	cbz	r3, 7c8c <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    7c6a:	3307      	adds	r3, #7
    7c6c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    7c70:	881e      	ldrh	r6, [r3, #0]
    7c72:	3601      	adds	r6, #1
    7c74:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    7c76:	2204      	movs	r2, #4
    7c78:	4621      	mov	r1, r4
    7c7a:	4628      	mov	r0, r5
    7c7c:	f011 ffba 	bl	19bf4 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    7c80:	1deb      	adds	r3, r5, #7
    7c82:	f023 0303 	bic.w	r3, r3, #3
    7c86:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    7c88:	6025      	str	r5, [r4, #0]
}
    7c8a:	bd70      	pop	{r4, r5, r6, pc}
    7c8c:	2601      	movs	r6, #1
    7c8e:	e7f2      	b.n	7c76 <mem_release+0x16>

00007c90 <mem_get>:
}

void *mem_get(const void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    7c90:	fb02 0001 	mla	r0, r2, r1, r0
    7c94:	4770      	bx	lr
    7c96:	bf00      	nop

00007c98 <mem_index_get>:

uint16_t mem_index_get(const void *mem, const void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
    7c98:	1a40      	subs	r0, r0, r1
    7c9a:	fb90 f0f2 	sdiv	r0, r0, r2
}
    7c9e:	b280      	uxth	r0, r0
    7ca0:	4770      	bx	lr
    7ca2:	bf00      	nop

00007ca4 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    7ca4:	1e53      	subs	r3, r2, #1
	src += len;
    7ca6:	4411      	add	r1, r2
	while (len--) {
    7ca8:	b29b      	uxth	r3, r3
    7caa:	b142      	cbz	r2, 7cbe <mem_rcopy+0x1a>
    7cac:	43db      	mvns	r3, r3
    7cae:	3801      	subs	r0, #1
    7cb0:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    7cb2:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    7cb6:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    7cba:	4291      	cmp	r1, r2
    7cbc:	d1f9      	bne.n	7cb2 <mem_rcopy+0xe>
	}
}
    7cbe:	4770      	bx	lr

00007cc0 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    7cc0:	4401      	add	r1, r0
    7cc2:	e002      	b.n	7cca <mem_nz+0xa>
		if (*src++) {
    7cc4:	f810 3b01 	ldrb.w	r3, [r0], #1
    7cc8:	b91b      	cbnz	r3, 7cd2 <mem_nz+0x12>
	while (len--) {
    7cca:	4288      	cmp	r0, r1
    7ccc:	d1fa      	bne.n	7cc4 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    7cce:	2000      	movs	r0, #0
    7cd0:	4770      	bx	lr
			return 1;
    7cd2:	2001      	movs	r0, #1
}
    7cd4:	4770      	bx	lr
    7cd6:	bf00      	nop

00007cd8 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    7cd8:	6010      	str	r0, [r2, #0]
    7cda:	6008      	str	r0, [r1, #0]

	return link;
}
    7cdc:	4770      	bx	lr
    7cde:	bf00      	nop

00007ce0 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    7ce0:	680a      	ldr	r2, [r1, #0]
{
    7ce2:	4603      	mov	r3, r0
	if (*head != *tail) {
    7ce4:	6800      	ldr	r0, [r0, #0]
    7ce6:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    7ce8:	bf05      	ittet	eq
    7cea:	2200      	moveq	r2, #0
    7cec:	600a      	streq	r2, [r1, #0]
		return NULL;
    7cee:	2000      	movne	r0, #0
	*head = *tail = NULL;
    7cf0:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    7cf2:	4770      	bx	lr

00007cf4 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    7cf4:	f8d2 c000 	ldr.w	ip, [r2]
    7cf8:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    7cfc:	f8d2 c000 	ldr.w	ip, [r2]
    7d00:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    7d04:	6010      	str	r0, [r2, #0]

	return link;
}
    7d06:	4770      	bx	lr

00007d08 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    7d08:	4288      	cmp	r0, r1
    7d0a:	d003      	beq.n	7d14 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    7d0c:	b11a      	cbz	r2, 7d16 <memq_peek+0xe>
		*mem = head->mem;
    7d0e:	6843      	ldr	r3, [r0, #4]
    7d10:	6013      	str	r3, [r2, #0]
    7d12:	4770      	bx	lr
		return NULL;
    7d14:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    7d16:	4770      	bx	lr

00007d18 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    7d18:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    7d1a:	4283      	cmp	r3, r0
    7d1c:	d009      	beq.n	7d32 <memq_dequeue+0x1a>
	if (mem) {
    7d1e:	b12a      	cbz	r2, 7d2c <memq_dequeue+0x14>
		*mem = head->mem;
    7d20:	6858      	ldr	r0, [r3, #4]
    7d22:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    7d24:	681a      	ldr	r2, [r3, #0]
    7d26:	600a      	str	r2, [r1, #0]

	return old_head;
}
    7d28:	4618      	mov	r0, r3
    7d2a:	4770      	bx	lr
	if (old_head == NULL) {
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	d1f9      	bne.n	7d24 <memq_dequeue+0xc>
    7d30:	e7fa      	b.n	7d28 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    7d32:	2300      	movs	r3, #0
    7d34:	e7f8      	b.n	7d28 <memq_dequeue+0x10>
    7d36:	bf00      	nop

00007d38 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    7d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d3c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 7d70 <mayfly_init+0x38>
    7d40:	4e0c      	ldr	r6, [pc, #48]	; (7d74 <mayfly_init+0x3c>)
    7d42:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    7d44:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    7d48:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    7d4a:	1d22      	adds	r2, r4, #4
    7d4c:	4621      	mov	r1, r4
    7d4e:	4628      	mov	r0, r5
		while (caller_id--) {
    7d50:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    7d52:	f7ff ffc1 	bl	7cd8 <memq_init>
		while (caller_id--) {
    7d56:	42a6      	cmp	r6, r4
    7d58:	f1a5 0508 	sub.w	r5, r5, #8
    7d5c:	d1f5      	bne.n	7d4a <mayfly_init+0x12>
	while (callee_id--) {
    7d5e:	3f04      	subs	r7, #4
    7d60:	1d3b      	adds	r3, r7, #4
    7d62:	f1a8 0820 	sub.w	r8, r8, #32
    7d66:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
    7d6a:	d1eb      	bne.n	7d44 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    7d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d70:	200013c4 	.word	0x200013c4
    7d74:	20001450 	.word	0x20001450

00007d78 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    7d78:	b410      	push	{r4}
    7d7a:	4603      	mov	r3, r0
    7d7c:	468c      	mov	ip, r1
	if (enable) {
    7d7e:	b19a      	cbz	r2, 7da8 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    7d80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7d84:	4814      	ldr	r0, [pc, #80]	; (7dd8 <mayfly_enable+0x60>)
    7d86:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    7d8a:	0109      	lsls	r1, r1, #4
    7d8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7d90:	4401      	add	r1, r0
    7d92:	7a48      	ldrb	r0, [r1, #9]
    7d94:	7a0c      	ldrb	r4, [r1, #8]
    7d96:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    7d98:	bf04      	itt	eq
    7d9a:	3001      	addeq	r0, #1
    7d9c:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    7d9e:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    7da0:	4661      	mov	r1, ip
    7da2:	4618      	mov	r0, r3
    7da4:	f00c bba0 	b.w	144e8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    7da8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    7dac:	4c0a      	ldr	r4, [pc, #40]	; (7dd8 <mayfly_enable+0x60>)
    7dae:	0112      	lsls	r2, r2, #4
    7db0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    7db4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7db8:	4423      	add	r3, r4
    7dba:	7a9c      	ldrb	r4, [r3, #10]
    7dbc:	7ada      	ldrb	r2, [r3, #11]
    7dbe:	42a2      	cmp	r2, r4
    7dc0:	d001      	beq.n	7dc6 <mayfly_enable+0x4e>
}
    7dc2:	bc10      	pop	{r4}
    7dc4:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    7dc6:	3201      	adds	r2, #1
    7dc8:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    7dca:	4b04      	ldr	r3, [pc, #16]	; (7ddc <mayfly_enable+0x64>)
    7dcc:	2201      	movs	r2, #1
    7dce:	545a      	strb	r2, [r3, r1]
}
    7dd0:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    7dd2:	f00c bbdd 	b.w	14590 <mayfly_pend>
    7dd6:	bf00      	nop
    7dd8:	200013cc 	.word	0x200013cc
    7ddc:	20001348 	.word	0x20001348

00007de0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    7de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7de2:	4606      	mov	r6, r0
    7de4:	461c      	mov	r4, r3
    7de6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7de8:	b302      	cbz	r2, 7e2c <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    7dea:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    7dec:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    7dee:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    7df0:	f012 0203 	ands.w	r2, r2, #3
    7df4:	d13a      	bne.n	7e6c <mayfly_enqueue+0x8c>
    7df6:	4f27      	ldr	r7, [pc, #156]	; (7e94 <mayfly_enqueue+0xb4>)
    7df8:	0071      	lsls	r1, r6, #1
    7dfa:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7dfe:	4431      	add	r1, r6
    7e00:	44ac      	add	ip, r5
    7e02:	0089      	lsls	r1, r1, #2
    7e04:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
    7e08:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7e0a:	3104      	adds	r1, #4
	m->_req = ack + 1;
    7e0c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7e0e:	187a      	adds	r2, r7, r1
    7e10:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    7e12:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7e14:	4621      	mov	r1, r4
    7e16:	f7ff ff6d 	bl	7cf4 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    7e1a:	4b1f      	ldr	r3, [pc, #124]	; (7e98 <mayfly_enqueue+0xb8>)
    7e1c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7e1e:	4629      	mov	r1, r5
    7e20:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    7e22:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    7e24:	f00c fbb4 	bl	14590 <mayfly_pend>
		return 0;
    7e28:	2000      	movs	r0, #0

	return 0;
}
    7e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7e2c:	f00c fb9a 	bl	14564 <mayfly_prio_is_equal>
    7e30:	2800      	cmp	r0, #0
    7e32:	d0da      	beq.n	7dea <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7e34:	4629      	mov	r1, r5
    7e36:	4630      	mov	r0, r6
    7e38:	f00c fb74 	bl	14524 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    7e3c:	2800      	cmp	r0, #0
    7e3e:	d0d4      	beq.n	7dea <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    7e40:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    7e44:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    7e48:	4f12      	ldr	r7, [pc, #72]	; (7e94 <mayfly_enqueue+0xb4>)
	ack = m->_ack;
    7e4a:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
    7e4c:	0112      	lsls	r2, r2, #4
    7e4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7e52:	443a      	add	r2, r7
    7e54:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
    7e56:	7a90      	ldrb	r0, [r2, #10]
    7e58:	7ad2      	ldrb	r2, [r2, #11]
    7e5a:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
    7e5c:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
    7e60:	d00c      	beq.n	7e7c <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
    7e62:	7820      	ldrb	r0, [r4, #0]
    7e64:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
    7e66:	f010 0203 	ands.w	r2, r0, #3
    7e6a:	d0c8      	beq.n	7dfe <mayfly_enqueue+0x1e>
			if (state != 1U) {
    7e6c:	2a01      	cmp	r2, #1
    7e6e:	d003      	beq.n	7e78 <mayfly_enqueue+0x98>
				m->_req = ack + 1;
    7e70:	3301      	adds	r3, #1
    7e72:	b2db      	uxtb	r3, r3
    7e74:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
    7e76:	e7d0      	b.n	7e1a <mayfly_enqueue+0x3a>
			return 1;
    7e78:	4610      	mov	r0, r2
}
    7e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
    7e7c:	7822      	ldrb	r2, [r4, #0]
    7e7e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    7e80:	0792      	lsls	r2, r2, #30
    7e82:	d002      	beq.n	7e8a <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
    7e84:	3302      	adds	r3, #2
    7e86:	b2db      	uxtb	r3, r3
    7e88:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    7e8a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    7e8e:	4798      	blx	r3
		return 0;
    7e90:	e7ca      	b.n	7e28 <mayfly_enqueue+0x48>
    7e92:	bf00      	nop
    7e94:	200013cc 	.word	0x200013cc
    7e98:	20001348 	.word	0x20001348

00007e9c <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
    7e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    7ea0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 7fe4 <mayfly_run+0x148>
    7ea4:	f819 3000 	ldrb.w	r3, [r9, r0]
{
    7ea8:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
    7eaa:	2b00      	cmp	r3, #0
    7eac:	d060      	beq.n	7f70 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
    7eae:	f8df a138 	ldr.w	sl, [pc, #312]	; 7fe8 <mayfly_run+0x14c>
    7eb2:	9003      	str	r0, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    7eb4:	223c      	movs	r2, #60	; 0x3c
    7eb6:	2304      	movs	r3, #4
	mfp[callee_id] = 0U;
    7eb8:	2500      	movs	r5, #0
    7eba:	eb00 0b40 	add.w	fp, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    7ebe:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    7ec2:	2403      	movs	r4, #3
    7ec4:	e9cd 5504 	strd	r5, r5, [sp, #16]
	mfp[callee_id] = 0U;
    7ec8:	f809 5000 	strb.w	r5, [r9, r0]
	while (caller_id--) {
    7ecc:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    7ed0:	9302      	str	r3, [sp, #8]
    7ed2:	4625      	mov	r5, r4
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7ed4:	465c      	mov	r4, fp
		struct mayfly *m = 0;
    7ed6:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    7ed8:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
    7edc:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
    7ee0:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
    7ee2:	aa07      	add	r2, sp, #28
    7ee4:	f7ff ff10 	bl	7d08 <memq_peek>
    7ee8:	9501      	str	r5, [sp, #4]
    7eea:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    7eec:	2f00      	cmp	r7, #0
    7eee:	d04b      	beq.n	7f88 <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    7ef0:	9d07      	ldr	r5, [sp, #28]
    7ef2:	7868      	ldrb	r0, [r5, #1]
    7ef4:	782e      	ldrb	r6, [r5, #0]
    7ef6:	1a36      	subs	r6, r6, r0
    7ef8:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
    7efc:	2e01      	cmp	r6, #1
    7efe:	d107      	bne.n	7f10 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    7f00:	3801      	subs	r0, #1
    7f02:	7068      	strb	r0, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
    7f04:	9b07      	ldr	r3, [sp, #28]
    7f06:	e9d3 0302 	ldrd	r0, r3, [r3, #8]
    7f0a:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    7f0c:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
    7f0e:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
    7f10:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
    7f12:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    7f16:	1a18      	subs	r0, r3, r0
    7f18:	f000 0003 	and.w	r0, r0, #3
    7f1c:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    7f1e:	f04f 0200 	mov.w	r2, #0
    7f22:	4621      	mov	r1, r4
	req = m->_req;
    7f24:	fa5f f883 	uxtb.w	r8, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
    7f28:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    7f2a:	d00d      	beq.n	7f48 <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
    7f2c:	f7ff fef4 	bl	7d18 <memq_dequeue>
		ack = m->_ack;
    7f30:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    7f32:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
    7f34:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    7f36:	1a52      	subs	r2, r2, r1
    7f38:	f002 0203 	and.w	r2, r2, #3
    7f3c:	2a01      	cmp	r2, #1
		m->_ack = req;
    7f3e:	f885 8001 	strb.w	r8, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    7f42:	d018      	beq.n	7f76 <mayfly_run+0xda>
    7f44:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    7f48:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    7f4c:	aa07      	add	r2, sp, #28
    7f4e:	4661      	mov	r1, ip
    7f50:	f7ff feda 	bl	7d08 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    7f54:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    7f56:	4607      	mov	r7, r0
			if (state == 1U) {
    7f58:	d1c8      	bne.n	7eec <mayfly_run+0x50>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    7f5a:	9d01      	ldr	r5, [sp, #4]
    7f5c:	2d00      	cmp	r5, #0
    7f5e:	d03d      	beq.n	7fdc <mayfly_run+0x140>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
    7f60:	9f03      	ldr	r7, [sp, #12]
    7f62:	2301      	movs	r3, #1

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
    7f64:	4639      	mov	r1, r7
    7f66:	4638      	mov	r0, r7
					mfp[callee_id] = 1U;
    7f68:	f809 3007 	strb.w	r3, [r9, r7]
					mayfly_pend(callee_id, callee_id);
    7f6c:	f00c fb10 	bl	14590 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    7f70:	b009      	add	sp, #36	; 0x24
    7f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    7f76:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
    7f78:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    7f7a:	4638      	mov	r0, r7
    7f7c:	4629      	mov	r1, r5
    7f7e:	eb0a 0203 	add.w	r2, sl, r3
    7f82:	f7ff feb7 	bl	7cf4 <memq_enqueue>
    7f86:	e7dd      	b.n	7f44 <mayfly_run+0xa8>
    7f88:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
    7f8a:	f89b 302e 	ldrb.w	r3, [fp, #46]	; 0x2e
    7f8e:	f89b 202f 	ldrb.w	r2, [fp, #47]	; 0x2f
    7f92:	429a      	cmp	r2, r3
    7f94:	d003      	beq.n	7f9e <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
    7f96:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
			disable = 1U;
    7f9a:	2301      	movs	r3, #1
    7f9c:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
    7f9e:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
    7fa2:	f89b 202d 	ldrb.w	r2, [fp, #45]	; 0x2d
    7fa6:	429a      	cmp	r2, r3
    7fa8:	d003      	beq.n	7fb2 <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
    7faa:	f88b 302d 	strb.w	r3, [fp, #45]	; 0x2d
			enable = 1U;
    7fae:	2301      	movs	r3, #1
    7fb0:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
    7fb2:	3d01      	subs	r5, #1
    7fb4:	b2ed      	uxtb	r5, r5
    7fb6:	2dff      	cmp	r5, #255	; 0xff
    7fb8:	f1ab 0b0c 	sub.w	fp, fp, #12
    7fbc:	d18a      	bne.n	7ed4 <mayfly_run+0x38>
	if (disable && !enable) {
    7fbe:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
    7fc2:	9f03      	ldr	r7, [sp, #12]
    7fc4:	2a00      	cmp	r2, #0
    7fc6:	d0d3      	beq.n	7f70 <mayfly_run+0xd4>
    7fc8:	2d00      	cmp	r5, #0
    7fca:	d1d1      	bne.n	7f70 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
    7fcc:	462a      	mov	r2, r5
    7fce:	4639      	mov	r1, r7
    7fd0:	4638      	mov	r0, r7
}
    7fd2:	b009      	add	sp, #36	; 0x24
    7fd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    7fd8:	f00c ba86 	b.w	144e8 <mayfly_enable_cb>
				if (caller_id || link) {
    7fdc:	2800      	cmp	r0, #0
    7fde:	d0d4      	beq.n	7f8a <mayfly_run+0xee>
    7fe0:	e7be      	b.n	7f60 <mayfly_run+0xc4>
    7fe2:	bf00      	nop
    7fe4:	20001348 	.word	0x20001348
    7fe8:	200013cc 	.word	0x200013cc

00007fec <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    7fec:	1e4b      	subs	r3, r1, #1
    7fee:	b2db      	uxtb	r3, r3
    7ff0:	b171      	cbz	r1, 8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
    7ff2:	1e41      	subs	r1, r0, #1
    7ff4:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    7ff8:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    7ffa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    7ffe:	b123      	cbz	r3, 800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
			bite &= (bite - 1);
    8000:	1e5a      	subs	r2, r3, #1
			one_count++;
    8002:	3001      	adds	r0, #1
		while (bite) {
    8004:	4013      	ands	r3, r2
			one_count++;
    8006:	b2c0      	uxtb	r0, r0
		while (bite) {
    8008:	d1fa      	bne.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
	while (octets_len--) {
    800a:	4561      	cmp	r1, ip
    800c:	d1f5      	bne.n	7ffa <util_ones_count_get+0xe>
    800e:	4770      	bx	lr
	uint8_t one_count = 0U;
    8010:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    8012:	4770      	bx	lr

00008014 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    8014:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    8016:	7e03      	ldrb	r3, [r0, #24]
	node = &instance->nodes[0];
    8018:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    801a:	2bff      	cmp	r3, #255	; 0xff
    801c:	d014      	beq.n	8048 <ticker_dequeue+0x34>
		ticker_current = &node[current];
    801e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    8022:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    8024:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    8028:	d027      	beq.n	807a <ticker_dequeue+0x66>
	total = 0U;
    802a:	f04f 0c00 	mov.w	ip, #0
    802e:	e001      	b.n	8034 <ticker_dequeue+0x20>
		if (current == id) {
    8030:	4299      	cmp	r1, r3
    8032:	d00b      	beq.n	804c <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    8034:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    8036:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    8038:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    803a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    803c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    8040:	44a4      	add	ip, r4
		ticker_current = &node[current];
    8042:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    8046:	d1f3      	bne.n	8030 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    8048:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    804a:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    804c:	4571      	cmp	r1, lr
    804e:	d017      	beq.n	8080 <ticker_dequeue+0x6c>
	node[previous].next = ticker_current->next;
    8050:	fa0f fe8e 	sxth.w	lr, lr
    8054:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    8056:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    8058:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    805c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
    8060:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
    8062:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    8066:	d006      	beq.n	8076 <ticker_dequeue+0x62>
		node[ticker_current->next].ticks_to_expire += timeout;
    8068:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    806c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    8070:	689a      	ldr	r2, [r3, #8]
    8072:	4402      	add	r2, r0
    8074:	609a      	str	r2, [r3, #8]
	return (total + timeout);
    8076:	4460      	add	r0, ip
}
    8078:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
    807a:	469e      	mov	lr, r3
	total = 0U;
    807c:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    8080:	7813      	ldrb	r3, [r2, #0]
    8082:	7603      	strb	r3, [r0, #24]
    8084:	e7e4      	b.n	8050 <ticker_dequeue+0x3c>
    8086:	bf00      	nop

00008088 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    8088:	eba2 0c01 	sub.w	ip, r2, r1
    808c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    8090:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    8092:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    8094:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    8096:	d10a      	bne.n	80ae <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8098:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    809c:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
    809e:	42a3      	cmp	r3, r4
    80a0:	d80d      	bhi.n	80be <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
    80a2:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
    80a4:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    80a6:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    80a8:	6083      	str	r3, [r0, #8]
}
    80aa:	bc10      	pop	{r4}
    80ac:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    80ae:	1a89      	subs	r1, r1, r2
    80b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    80b4:	428b      	cmp	r3, r1
    80b6:	d908      	bls.n	80ca <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
    80b8:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    80ba:	42a3      	cmp	r3, r4
    80bc:	d9f1      	bls.n	80a2 <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
    80be:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    80c0:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    80c2:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
    80c4:	6083      	str	r3, [r0, #8]
}
    80c6:	bc10      	pop	{r4}
    80c8:	4770      	bx	lr
			ticks_to_expire_minus +=
    80ca:	440c      	add	r4, r1
    80cc:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    80ce:	e7e9      	b.n	80a4 <ticks_to_expire_prep+0x1c>

000080d0 <start_us.constprop.0>:
static uint8_t start_us(uint8_t instance_index, uint8_t user_id,
    80d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    80d4:	4d28      	ldr	r5, [pc, #160]	; (8178 <start_us.constprop.0+0xa8>)
static uint8_t start_us(uint8_t instance_index, uint8_t user_id,
    80d6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    80da:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    80dc:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
    80e0:	fb0e 5e04 	mla	lr, lr, r4, r5
static uint8_t start_us(uint8_t instance_index, uint8_t user_id,
    80e4:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    80e6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    80ea:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    80ee:	f8de 1004 	ldr.w	r1, [lr, #4]
    80f2:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    80f6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
    80fa:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
    80fc:	f811 8030 	ldrb.w	r8, [r1, r0, lsl #3]
	if (last == user->first) {
    8100:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
    8102:	f104 0c01 	add.w	ip, r4, #1
    8106:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    810a:	45e0      	cmp	r8, ip
    810c:	bf98      	it	ls
    810e:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    8112:	4561      	cmp	r1, ip
    8114:	d02d      	beq.n	8172 <start_us.constprop.0+0xa2>
	user_op = &user->user_op[user->last];
    8116:	6871      	ldr	r1, [r6, #4]
    8118:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    811c:	ea4f 1904 	mov.w	r9, r4, lsl #4
    8120:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_START;
    8124:	f04f 0804 	mov.w	r8, #4
    8128:	f801 8009 	strb.w	r8, [r1, r9]
	user_op->params.start.ticks_at_start = ticks_anchor;
    812c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    812e:	9b08      	ldr	r3, [sp, #32]
    8130:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    8132:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8134:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    8136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8138:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    813a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    813c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    813e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8140:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    8142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8144:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    8146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8148:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    814a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    814c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    814e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8150:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    8152:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    8154:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    8156:	82a7      	strh	r7, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
    8158:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    815a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    815e:	e9de 3608 	ldrd	r3, r6, [lr, #32]
    8162:	4798      	blx	r3
    8164:	462b      	mov	r3, r5
    8166:	4641      	mov	r1, r8
    8168:	2200      	movs	r2, #0
    816a:	47b0      	blx	r6
	return user_op->status;
    816c:	78a0      	ldrb	r0, [r4, #2]
}
    816e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    8172:	2001      	movs	r0, #1
}
    8174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8178:	2000148c 	.word	0x2000148c

0000817c <ticker_job_list_insert>:
{
    817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8180:	4603      	mov	r3, r0
	count_user = instance->count_user;
    8182:	7a40      	ldrb	r0, [r0, #9]
	users = &instance->users[0];
    8184:	e9d3 4500 	ldrd	r4, r5, [r3]
{
    8188:	b087      	sub	sp, #28
	while (count_user--) {
    818a:	2800      	cmp	r0, #0
    818c:	f000 80fa 	beq.w	8384 <ticker_job_list_insert+0x208>
    8190:	1e42      	subs	r2, r0, #1
    8192:	b2d2      	uxtb	r2, r2
    8194:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    8198:	469a      	mov	sl, r3
    819a:	468b      	mov	fp, r1
    819c:	9203      	str	r2, [sp, #12]
    819e:	9505      	str	r5, [sp, #20]
    81a0:	4623      	mov	r3, r4
		user_ops = (void *)&user->user_op[0];
    81a2:	9a03      	ldr	r2, [sp, #12]
    81a4:	6851      	ldr	r1, [r2, #4]
		user_ops_first = user->first;
    81a6:	7856      	ldrb	r6, [r2, #1]
		user_ops = (void *)&user->user_op[0];
    81a8:	9104      	str	r1, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    81aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    81ae:	d066      	beq.n	827e <ticker_job_list_insert+0x102>
				ticker = &node[id_insert];
    81b0:	eb0b 044b 	add.w	r4, fp, fp, lsl #1
    81b4:	ea4f 1804 	mov.w	r8, r4, lsl #4
    81b8:	f8cd b004 	str.w	fp, [sp, #4]
				insert_head = ticker->next;
    81bc:	f813 b008 	ldrb.w	fp, [r3, r8]
				ticker = &node[id_insert];
    81c0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    81c4:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    81c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    81ca:	f884 c000 	strb.w	ip, [r4]
	node = &instance->nodes[0];
    81ce:	f8da 7000 	ldr.w	r7, [sl]
	current = instance->ticker_id_head;
    81d2:	f89a 2018 	ldrb.w	r2, [sl, #24]
	ticker_new = &node[id];
    81d6:	eb07 0908 	add.w	r9, r7, r8
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    81da:	4562      	cmp	r2, ip
	ticks_to_expire = ticker_new->ticks_to_expire;
    81dc:	f8d9 1008 	ldr.w	r1, [r9, #8]
	previous = TICKER_NULL;
    81e0:	bf18      	it	ne
    81e2:	9602      	strne	r6, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    81e4:	d10e      	bne.n	8204 <ticker_job_list_insert+0x88>
    81e6:	e0c7      	b.n	8378 <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    81e8:	1a09      	subs	r1, r1, r0
    81ea:	d106      	bne.n	81fa <ticker_job_list_insert+0x7e>
    81ec:	f8b9 801e 	ldrh.w	r8, [r9, #30]
    81f0:	f8be e01e 	ldrh.w	lr, [lr, #30]
    81f4:	45f0      	cmp	r8, lr
    81f6:	f200 80b3 	bhi.w	8360 <ticker_job_list_insert+0x1e4>
		current = ticker_current->next;
    81fa:	5db8      	ldrb	r0, [r7, r6]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    81fc:	28ff      	cmp	r0, #255	; 0xff
    81fe:	4694      	mov	ip, r2
    8200:	d06d      	beq.n	82de <ticker_job_list_insert+0x162>
		current = ticker_current->next;
    8202:	4602      	mov	r2, r0
		(ticker_current = &node[current])->ticks_to_expire))) {
    8204:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    8208:	eb07 1e06 	add.w	lr, r7, r6, lsl #4
    820c:	0136      	lsls	r6, r6, #4
		(ticks_to_expire_current =
    820e:	f8de 0008 	ldr.w	r0, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    8212:	4288      	cmp	r0, r1
    8214:	d9e8      	bls.n	81e8 <ticker_job_list_insert+0x6c>
    8216:	9e02      	ldr	r6, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    8218:	f8c9 1008 	str.w	r1, [r9, #8]
	if (previous == TICKER_NULL) {
    821c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
	ticker_new->next = current;
    8220:	f889 2000 	strb.w	r2, [r9]
	if (previous == TICKER_NULL) {
    8224:	d064      	beq.n	82f0 <ticker_job_list_insert+0x174>
		node[previous].next = id;
    8226:	fa0f fc8c 	sxth.w	ip, ip
    822a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    822e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    8232:	9801      	ldr	r0, [sp, #4]
    8234:	f807 000c 	strb.w	r0, [r7, ip]
	if (current != TICKER_NULL) {
    8238:	2aff      	cmp	r2, #255	; 0xff
    823a:	d006      	beq.n	824a <ticker_job_list_insert+0xce>
		node[current].ticks_to_expire -= ticks_to_expire;
    823c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8240:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    8244:	68ba      	ldr	r2, [r7, #8]
    8246:	1a52      	subs	r2, r2, r1
    8248:	60ba      	str	r2, [r7, #8]
	ticker->req = ticker->ack + 1;
    824a:	78a2      	ldrb	r2, [r4, #2]
    824c:	3201      	adds	r2, #1
    824e:	7062      	strb	r2, [r4, #1]
			if (user_op) {
    8250:	2d00      	cmp	r5, #0
    8252:	d0aa      	beq.n	81aa <ticker_job_list_insert+0x2e>
	if (user_op->fp_op_func) {
    8254:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8256:	f04f 0100 	mov.w	r1, #0
    825a:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    825c:	70a9      	strb	r1, [r5, #2]
	if (user_op->fp_op_func) {
    825e:	b122      	cbz	r2, 826a <ticker_job_list_insert+0xee>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8260:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    8262:	9301      	str	r3, [sp, #4]
    8264:	2000      	movs	r0, #0
    8266:	4790      	blx	r2
    8268:	9b01      	ldr	r3, [sp, #4]
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    826a:	6862      	ldr	r2, [r4, #4]
    826c:	2a00      	cmp	r2, #0
    826e:	d19c      	bne.n	81aa <ticker_job_list_insert+0x2e>
						user_op->fp_op_func;
    8270:	6aaa      	ldr	r2, [r5, #40]	; 0x28
					ticker->fp_op_func =
    8272:	6222      	str	r2, [r4, #32]
						user_op->op_context;
    8274:	6aea      	ldr	r2, [r5, #44]	; 0x2c
					ticker->op_context =
    8276:	6262      	str	r2, [r4, #36]	; 0x24
		while ((insert_head != TICKER_NULL) ||
    8278:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    827c:	d198      	bne.n	81b0 <ticker_job_list_insert+0x34>
    827e:	9a03      	ldr	r2, [sp, #12]
    8280:	9f04      	ldr	r7, [sp, #16]
    8282:	7892      	ldrb	r2, [r2, #2]
    8284:	4699      	mov	r9, r3
				user_op = &user_ops[user_ops_first];
    8286:	eb06 0146 	add.w	r1, r6, r6, lsl #1
				first = user_ops_first + 1;
    828a:	1c70      	adds	r0, r6, #1
		while ((insert_head != TICKER_NULL) ||
    828c:	42b2      	cmp	r2, r6
				user_op = &user_ops[user_ops_first];
    828e:	ea4f 1c01 	mov.w	ip, r1, lsl #4
				first = user_ops_first + 1;
    8292:	b2c6      	uxtb	r6, r0
				user_op = &user_ops[user_ops_first];
    8294:	eb07 1501 	add.w	r5, r7, r1, lsl #4
		while ((insert_head != TICKER_NULL) ||
    8298:	d065      	beq.n	8366 <ticker_job_list_insert+0x1ea>
				if (first == user->count_user_op) {
    829a:	9b03      	ldr	r3, [sp, #12]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    829c:	f817 100c 	ldrb.w	r1, [r7, ip]
				if (first == user->count_user_op) {
    82a0:	7818      	ldrb	r0, [r3, #0]
					first = 0U;
    82a2:	42b0      	cmp	r0, r6
    82a4:	bf08      	it	eq
    82a6:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    82a8:	2904      	cmp	r1, #4
    82aa:	d1ec      	bne.n	8286 <ticker_job_list_insert+0x10a>
				id_insert = user_op->id;
    82ac:	786a      	ldrb	r2, [r5, #1]
				ticker = &node[id_insert];
    82ae:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    82b2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
	user_op->status = status;
    82b6:	2001      	movs	r0, #1
				if (((ticker->req -
    82b8:	f894 e001 	ldrb.w	lr, [r4, #1]
    82bc:	78a1      	ldrb	r1, [r4, #2]
    82be:	458e      	cmp	lr, r1
				ticker = &node[id_insert];
    82c0:	ea4f 1808 	mov.w	r8, r8, lsl #4
				if (((ticker->req -
    82c4:	d018      	beq.n	82f8 <ticker_job_list_insert+0x17c>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    82c6:	f04f 0300 	mov.w	r3, #0
    82ca:	f807 300c 	strb.w	r3, [r7, ip]
	if (user_op->fp_op_func) {
    82ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	user_op->status = status;
    82d0:	70a8      	strb	r0, [r5, #2]
	if (user_op->fp_op_func) {
    82d2:	b10a      	cbz	r2, 82d8 <ticker_job_list_insert+0x15c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    82d4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    82d6:	4790      	blx	r2
    82d8:	9b03      	ldr	r3, [sp, #12]
    82da:	789a      	ldrb	r2, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
    82dc:	e7d3      	b.n	8286 <ticker_job_list_insert+0x10a>
    82de:	4602      	mov	r2, r0
	if (previous == TICKER_NULL) {
    82e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    82e4:	9e02      	ldr	r6, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    82e6:	f8c9 1008 	str.w	r1, [r9, #8]
	ticker_new->next = current;
    82ea:	f889 2000 	strb.w	r2, [r9]
	if (previous == TICKER_NULL) {
    82ee:	d19a      	bne.n	8226 <ticker_job_list_insert+0xaa>
		instance->ticker_id_head = id;
    82f0:	9801      	ldr	r0, [sp, #4]
    82f2:	f88a 0018 	strb.w	r0, [sl, #24]
    82f6:	e79f      	b.n	8238 <ticker_job_list_insert+0xbc>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    82f8:	9201      	str	r2, [sp, #4]
    82fa:	8aaa      	ldrh	r2, [r5, #20]
				status = ticker_job_op_start(instance, ticker, user_op,
    82fc:	f8da 1014 	ldr.w	r1, [sl, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    8300:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    8304:	4282      	cmp	r2, r0
    8306:	464b      	mov	r3, r9
    8308:	d007      	beq.n	831a <ticker_job_list_insert+0x19e>
		ticker->must_expire =
    830a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    830e:	1a12      	subs	r2, r2, r0
    8310:	fab2 f282 	clz	r2, r2
    8314:	0952      	lsrs	r2, r2, #5
    8316:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    831a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    831c:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    831e:	68ea      	ldr	r2, [r5, #12]
    8320:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    8322:	692a      	ldr	r2, [r5, #16]
    8324:	6222      	str	r2, [r4, #32]
		(start->lazy < TICKER_LAZY_MUST_EXPIRE_KEEP) ? start->lazy :
    8326:	8aaa      	ldrh	r2, [r5, #20]
    8328:	9302      	str	r3, [sp, #8]
	ticker->lazy_periodic =
    832a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    832e:	429a      	cmp	r2, r3
    8330:	bf88      	it	hi
    8332:	2200      	movhi	r2, #0
    8334:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    8336:	69aa      	ldr	r2, [r5, #24]
    8338:	61a2      	str	r2, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    833a:	69ea      	ldr	r2, [r5, #28]
    833c:	60e2      	str	r2, [r4, #12]
	ticker->context = start->context;
    833e:	6a2a      	ldr	r2, [r5, #32]
    8340:	6122      	str	r2, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    8342:	68aa      	ldr	r2, [r5, #8]
    8344:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    8346:	2300      	movs	r3, #0
    8348:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    834a:	686a      	ldr	r2, [r5, #4]
    834c:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    834e:	461f      	mov	r7, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8350:	f7ff fe9a 	bl	8088 <ticks_to_expire_prep>
	ticker->force = 1U;
    8354:	2201      	movs	r2, #1
    8356:	9b02      	ldr	r3, [sp, #8]
	ticker->remainder_current = 0U;
    8358:	6267      	str	r7, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    835a:	83e7      	strh	r7, [r4, #30]
	ticker->force = 1U;
    835c:	70e2      	strb	r2, [r4, #3]
    835e:	e732      	b.n	81c6 <ticker_job_list_insert+0x4a>
		(ticks_to_expire_current =
    8360:	9e02      	ldr	r6, [sp, #8]
    8362:	4601      	mov	r1, r0
    8364:	e758      	b.n	8218 <ticker_job_list_insert+0x9c>
	while (count_user--) {
    8366:	9903      	ldr	r1, [sp, #12]
    8368:	9805      	ldr	r0, [sp, #20]
    836a:	4281      	cmp	r1, r0
    836c:	464b      	mov	r3, r9
    836e:	f1a1 0208 	sub.w	r2, r1, #8
    8372:	d007      	beq.n	8384 <ticker_job_list_insert+0x208>
    8374:	9203      	str	r2, [sp, #12]
    8376:	e714      	b.n	81a2 <ticker_job_list_insert+0x26>
	ticker_new->next = current;
    8378:	f807 2008 	strb.w	r2, [r7, r8]
		instance->ticker_id_head = id;
    837c:	9a01      	ldr	r2, [sp, #4]
    837e:	f88a 2018 	strb.w	r2, [sl, #24]
	if (current != TICKER_NULL) {
    8382:	e762      	b.n	824a <ticker_job_list_insert+0xce>
}
    8384:	b007      	add	sp, #28
    8386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    838a:	bf00      	nop

0000838c <ticker_worker>:
{
    838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    8390:	7e44      	ldrb	r4, [r0, #25]
	instance->worker_trigger = 1U;
    8392:	2301      	movs	r3, #1
{
    8394:	b08b      	sub	sp, #44	; 0x2c
	instance->worker_trigger = 1U;
    8396:	7683      	strb	r3, [r0, #26]
	if (instance->job_guard) {
    8398:	2c00      	cmp	r4, #0
    839a:	f040 809f 	bne.w	84dc <ticker_worker+0x150>
	if (instance->ticker_id_head == TICKER_NULL) {
    839e:	7e03      	ldrb	r3, [r0, #24]
    83a0:	2bff      	cmp	r3, #255	; 0xff
    83a2:	4606      	mov	r6, r0
    83a4:	f000 8099 	beq.w	84da <ticker_worker+0x14e>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    83a8:	f00b fc48 	bl	13c3c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    83ac:	6972      	ldr	r2, [r6, #20]
	if (instance->ticks_slot_previous > ticks_elapsed) {
    83ae:	69f3      	ldr	r3, [r6, #28]
	ticker_id_head = instance->ticker_id_head;
    83b0:	7e35      	ldrb	r5, [r6, #24]
	node = &instance->nodes[0];
    83b2:	f8d6 a000 	ldr.w	sl, [r6]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    83b6:	1a80      	subs	r0, r0, r2
    83b8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (instance->ticks_slot_previous > ticks_elapsed) {
    83bc:	42bb      	cmp	r3, r7
    83be:	bf94      	ite	ls
    83c0:	2300      	movls	r3, #0
    83c2:	2301      	movhi	r3, #1
	while (ticker_id_head != TICKER_NULL) {
    83c4:	2dff      	cmp	r5, #255	; 0xff
	if (instance->ticks_slot_previous > ticks_elapsed) {
    83c6:	9303      	str	r3, [sp, #12]
	ticks_expired = 0U;
    83c8:	46a3      	mov	fp, r4
	while (ticker_id_head != TICKER_NULL) {
    83ca:	d06a      	beq.n	84a2 <ticker_worker+0x116>
			ticker->ext_data->ticks_drift = 0U;
    83cc:	9404      	str	r4, [sp, #16]
    83ce:	46b1      	mov	r9, r6
		ticker = &node[ticker_id_head];
    83d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    83d4:	eb0a 1405 	add.w	r4, sl, r5, lsl #4
    83d8:	012d      	lsls	r5, r5, #4
		ticks_to_expire = ticker->ticks_to_expire;
    83da:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    83dc:	42bb      	cmp	r3, r7
    83de:	d85e      	bhi.n	849e <ticker_worker+0x112>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    83e0:	78a0      	ldrb	r0, [r4, #2]
		ticker_id_head = ticker->next;
    83e2:	f81a 5005 	ldrb.w	r5, [sl, r5]
		ticks_elapsed -= ticks_to_expire;
    83e6:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    83e8:	449b      	add	fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    83ea:	7863      	ldrb	r3, [r4, #1]
    83ec:	1a1b      	subs	r3, r3, r0
    83ee:	b2db      	uxtb	r3, r3
    83f0:	2b01      	cmp	r3, #1
    83f2:	d152      	bne.n	849a <ticker_worker+0x10e>
		if (((ticker->ticks_slot != 0U) ||
    83f4:	69a3      	ldr	r3, [r4, #24]
		      TICKER_HAS_SLOT_WINDOW(ticker)) &&
    83f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (((ticker->ticks_slot != 0U) ||
    83f8:	9302      	str	r3, [sp, #8]
    83fa:	2b00      	cmp	r3, #0
    83fc:	d171      	bne.n	84e2 <ticker_worker+0x156>
    83fe:	2a00      	cmp	r2, #0
    8400:	f000 8088 	beq.w	8514 <ticker_worker+0x188>
		      TICKER_HAS_SLOT_WINDOW(ticker)) &&
    8404:	6816      	ldr	r6, [r2, #0]
    8406:	b1ee      	cbz	r6, 8444 <ticker_worker+0xb8>
    8408:	9b03      	ldr	r3, [sp, #12]
    840a:	2b00      	cmp	r3, #0
    840c:	f000 808d 	beq.w	852a <ticker_worker+0x19e>
			    ext_data->ticks_slot_window != 0U &&
    8410:	7a13      	ldrb	r3, [r2, #8]
    8412:	2b00      	cmp	r3, #0
    8414:	f000 8081 	beq.w	851a <ticker_worker+0x18e>
				ext_data->reschedule_state =
    8418:	f04f 0300 	mov.w	r3, #0
    841c:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
    841e:	8be3      	ldrh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    8420:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    8424:	3301      	adds	r3, #1
    8426:	b29b      	uxth	r3, r3
    8428:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    842a:	2a00      	cmp	r2, #0
    842c:	d068      	beq.n	8500 <ticker_worker+0x174>
    842e:	8ba2      	ldrh	r2, [r4, #28]
    8430:	429a      	cmp	r2, r3
    8432:	d265      	bcs.n	8500 <ticker_worker+0x174>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    8434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    8436:	2a00      	cmp	r2, #0
    8438:	f000 80f4 	beq.w	8624 <ticker_worker+0x298>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    843c:	7a13      	ldrb	r3, [r2, #8]
    843e:	2b01      	cmp	r3, #1
    8440:	d05e      	beq.n	8500 <ticker_worker+0x174>
			must_expire_skip = 1U;
    8442:	2601      	movs	r6, #1
			ticker->ext_data->ticks_drift = 0U;
    8444:	2300      	movs	r3, #0
			ticks_drift = ticker->ext_data->ticks_drift;
    8446:	6851      	ldr	r1, [r2, #4]
			ticker->ext_data->ticks_drift = 0U;
    8448:	6053      	str	r3, [r2, #4]
			ticker->ext_data->reschedule_state =
    844a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    844c:	f04f 0200 	mov.w	r2, #0
    8450:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
    8452:	78a0      	ldrb	r0, [r4, #2]
		if (ticker->timeout_func) {
    8454:	f8d4 800c 	ldr.w	r8, [r4, #12]
		ticker->ack--;
    8458:	3801      	subs	r0, #1
    845a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    845c:	f1b8 0f00 	cmp.w	r8, #0
    8460:	d01b      	beq.n	849a <ticker_worker+0x10e>
					   ticks_expired -
    8462:	6960      	ldr	r0, [r4, #20]
    8464:	f8d9 3014 	ldr.w	r3, [r9, #20]
				ticker->timeout_func(ticks_at_expire,
    8468:	6a62      	ldr	r2, [r4, #36]	; 0x24
    846a:	f8d4 c010 	ldr.w	ip, [r4, #16]
					   ticks_expired -
    846e:	ebab 0000 	sub.w	r0, fp, r0
    8472:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    8474:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				ticker->timeout_func(ticks_at_expire,
    8478:	78e3      	ldrb	r3, [r4, #3]
    847a:	2e00      	cmp	r6, #0
    847c:	d144      	bne.n	8508 <ticker_worker+0x17c>
    847e:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    8482:	e9cd 3c00 	strd	r3, ip, [sp]
    8486:	4673      	mov	r3, lr
    8488:	47c0      	blx	r8
				if (ticker->ticks_slot != 0U) {
    848a:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
    848c:	83e6      	strh	r6, [r4, #30]
					slot_reserved = 1U;
    848e:	2b00      	cmp	r3, #0
    8490:	9b03      	ldr	r3, [sp, #12]
				ticker->force = 0U;
    8492:	70e6      	strb	r6, [r4, #3]
					slot_reserved = 1U;
    8494:	bf18      	it	ne
    8496:	2301      	movne	r3, #1
    8498:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    849a:	2dff      	cmp	r5, #255	; 0xff
    849c:	d198      	bne.n	83d0 <ticker_worker+0x44>
    849e:	9c04      	ldr	r4, [sp, #16]
    84a0:	464e      	mov	r6, r9
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    84a2:	7af3      	ldrb	r3, [r6, #11]
    84a4:	7ab2      	ldrb	r2, [r6, #10]
    84a6:	429a      	cmp	r2, r3
    84a8:	d107      	bne.n	84ba <ticker_worker+0x12e>
	uint8_t idx = *ticks_elapsed_index + 1;
    84aa:	3201      	adds	r2, #1
    84ac:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    84ae:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    84b0:	bf1a      	itte	ne
    84b2:	4614      	movne	r4, r2
    84b4:	4623      	movne	r3, r4
    84b6:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
    84b8:	72f4      	strb	r4, [r6, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    84ba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	instance->worker_trigger = 0U;
    84be:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    84c0:	f8c3 b00c 	str.w	fp, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    84c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
	instance->worker_trigger = 0U;
    84c6:	76b2      	strb	r2, [r6, #26]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    84c8:	4633      	mov	r3, r6
    84ca:	2201      	movs	r2, #1
    84cc:	2104      	movs	r1, #4
    84ce:	2003      	movs	r0, #3
    84d0:	46a4      	mov	ip, r4
}
    84d2:	b00b      	add	sp, #44	; 0x2c
    84d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    84d8:	4760      	bx	ip
		instance->worker_trigger = 0U;
    84da:	7684      	strb	r4, [r0, #26]
}
    84dc:	b00b      	add	sp, #44	; 0x2c
    84de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		      TICKER_HAS_SLOT_WINDOW(ticker)) &&
    84e2:	9b03      	ldr	r3, [sp, #12]
    84e4:	b91b      	cbnz	r3, 84ee <ticker_worker+0x162>
		    (slot_reserved ||
    84e6:	f8d9 301c 	ldr.w	r3, [r9, #28]
    84ea:	455b      	cmp	r3, fp
    84ec:	d928      	bls.n	8540 <ticker_worker+0x1b4>
			if (ext_data &&
    84ee:	2a00      	cmp	r2, #0
    84f0:	d095      	beq.n	841e <ticker_worker+0x92>
    84f2:	6816      	ldr	r6, [r2, #0]
    84f4:	2e00      	cmp	r6, #0
    84f6:	d08f      	beq.n	8418 <ticker_worker+0x8c>
			    ext_data->ticks_slot_window != 0U &&
    84f8:	7a13      	ldrb	r3, [r2, #8]
    84fa:	2b00      	cmp	r3, #0
    84fc:	d18c      	bne.n	8418 <ticker_worker+0x8c>
    84fe:	e00c      	b.n	851a <ticker_worker+0x18e>
				ticker->ack--;
    8500:	78a3      	ldrb	r3, [r4, #2]
    8502:	3b01      	subs	r3, #1
    8504:	70a3      	strb	r3, [r4, #2]
				continue;
    8506:	e7c8      	b.n	849a <ticker_worker+0x10e>
				ticker->timeout_func(ticks_at_expire,
    8508:	e9cd 3c00 	strd	r3, ip, [sp]
    850c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8510:	47c0      	blx	r8
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8512:	e7c2      	b.n	849a <ticker_worker+0x10e>
		must_expire_skip = 0U;
    8514:	4616      	mov	r6, r2
			ticks_drift = 0U;
    8516:	2100      	movs	r1, #0
    8518:	e79c      	b.n	8454 <ticker_worker+0xc8>
			    TICKER_RESCHEDULE_STATE_NONE &&
    851a:	8ba1      	ldrh	r1, [r4, #28]
    851c:	8be3      	ldrh	r3, [r4, #30]
    851e:	4299      	cmp	r1, r3
    8520:	f63f af7a 	bhi.w	8418 <ticker_worker+0x8c>
				ext_data->reschedule_state =
    8524:	2301      	movs	r3, #1
    8526:	7213      	strb	r3, [r2, #8]
    8528:	e779      	b.n	841e <ticker_worker+0x92>
		    (slot_reserved ||
    852a:	f8d9 301c 	ldr.w	r3, [r9, #28]
    852e:	459b      	cmp	fp, r3
    8530:	f4ff af6e 	bcc.w	8410 <ticker_worker+0x84>
	if (ticker->next != TICKER_NULL) {
    8534:	2dff      	cmp	r5, #255	; 0xff
    8536:	d078      	beq.n	862a <ticker_worker+0x29e>
			ticker_ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    8538:	2304      	movs	r3, #4
		uint16_t lazy_current = ticker->lazy_current;
    853a:	8be1      	ldrh	r1, [r4, #30]
			ticker_ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    853c:	461e      	mov	r6, r3
    853e:	e004      	b.n	854a <ticker_worker+0x1be>
	if (ticker->next != TICKER_NULL) {
    8540:	2dff      	cmp	r5, #255	; 0xff
    8542:	d06c      	beq.n	861e <ticker_worker+0x292>
		if (((ticker->ticks_slot != 0U) ||
    8544:	9b02      	ldr	r3, [sp, #8]
		uint16_t lazy_current = ticker->lazy_current;
    8546:	8be1      	ldrh	r1, [r4, #30]
		if (((ticker->ticks_slot != 0U) ||
    8548:	461e      	mov	r6, r3
		if (lazy_current >= ticker->lazy_periodic) {
    854a:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    854c:	f8d4 e004 	ldr.w	lr, [r4, #4]
		if (lazy_current >= ticker->lazy_periodic) {
    8550:	4299      	cmp	r1, r3
			lazy_current -= ticker->lazy_periodic;
    8552:	bf24      	itt	cs
    8554:	1acb      	subcs	r3, r1, r3
    8556:	b299      	uxthcs	r1, r3
			struct ticker_node *ticker_next = &nodes[id_head];
    8558:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    855c:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
		uint32_t current_age = ticker->ticks_periodic +
    8560:	fb01 e10e 	mla	r1, r1, lr, lr
    8564:	9105      	str	r1, [sp, #20]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    8566:	6899      	ldr	r1, [r3, #8]
			if (acc_ticks_to_expire > ticker_ticks_slot) {
    8568:	428e      	cmp	r6, r1
    856a:	46b4      	mov	ip, r6
    856c:	d357      	bcc.n	861e <ticker_worker+0x292>
    856e:	e9cd 7b06 	strd	r7, fp, [sp, #24]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    8572:	4688      	mov	r8, r1
    8574:	46a3      	mov	fp, r4
    8576:	9508      	str	r5, [sp, #32]
    8578:	4614      	mov	r4, r2
    857a:	9009      	str	r0, [sp, #36]	; 0x24
    857c:	e01c      	b.n	85b8 <ticker_worker+0x22c>
					  0U :
    857e:	2a00      	cmp	r2, #0
    8580:	d13b      	bne.n	85fa <ticker_worker+0x26e>
				 !ticker->ticks_slot &&
    8582:	b174      	cbz	r4, 85a2 <ticker_worker+0x216>
				(TICKER_HAS_SLOT_WINDOW(ticker) &&
    8584:	6826      	ldr	r6, [r4, #0]
    8586:	b126      	cbz	r6, 8592 <ticker_worker+0x206>
    8588:	9902      	ldr	r1, [sp, #8]
    858a:	b911      	cbnz	r1, 8592 <ticker_worker+0x206>
				 ((acc_ticks_to_expire +
    858c:	4440      	add	r0, r8
				 !ticker->ticks_slot &&
    858e:	4286      	cmp	r6, r0
    8590:	d84d      	bhi.n	862e <ticker_worker+0x2a2>
			if (curr_has_ticks_slot_window ||
    8592:	42bd      	cmp	r5, r7
    8594:	d305      	bcc.n	85a2 <ticker_worker+0x216>
				(ticker->force == ticker_next->force);
    8596:	f89b 0003 	ldrb.w	r0, [fp, #3]
    859a:	78d9      	ldrb	r1, [r3, #3]
			     (next_is_critical ||
    859c:	4288      	cmp	r0, r1
    859e:	d330      	bcc.n	8602 <ticker_worker+0x276>
			      (equal_priority && equal_force && next_is_older &&
    85a0:	d02d      	beq.n	85fe <ticker_worker+0x272>
			id_head = ticker_next->next;
    85a2:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
    85a4:	2bff      	cmp	r3, #255	; 0xff
    85a6:	d033      	beq.n	8610 <ticker_worker+0x284>
			struct ticker_node *ticker_next = &nodes[id_head];
    85a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    85ac:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    85b0:	6899      	ldr	r1, [r3, #8]
    85b2:	4488      	add	r8, r1
			if (acc_ticks_to_expire > ticker_ticks_slot) {
    85b4:	45e0      	cmp	r8, ip
    85b6:	d82b      	bhi.n	8610 <ticker_worker+0x284>
			if (ticker_next->ticks_slot == 0U) {
    85b8:	6998      	ldr	r0, [r3, #24]
    85ba:	2800      	cmp	r0, #0
    85bc:	d0f1      	beq.n	85a2 <ticker_worker+0x216>
			uint16_t lazy_next = ticker_next->lazy_current;
    85be:	8bdd      	ldrh	r5, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
    85c0:	8b9f      	ldrh	r7, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    85c2:	685a      	ldr	r2, [r3, #4]
			if (!lazy_next_periodic_skip) {
    85c4:	42bd      	cmp	r5, r7
    85c6:	d3da      	bcc.n	857e <ticker_worker+0x1f2>
					  0U :
    85c8:	b19a      	cbz	r2, 85f2 <ticker_worker+0x266>
				lazy_next -= ticker_next->lazy_periodic;
    85ca:	1bee      	subs	r6, r5, r7
    85cc:	b2b6      	uxth	r6, r6
				(ticker->ticks_periodic != 0U) &&
    85ce:	f1be 0f00 	cmp.w	lr, #0
    85d2:	d00a      	beq.n	85ea <ticker_worker+0x25e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    85d4:	fb06 2602 	mla	r6, r6, r2, r2
				(ticker->ticks_periodic != 0U) &&
    85d8:	9a05      	ldr	r2, [sp, #20]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    85da:	1a76      	subs	r6, r6, r1
				(ticker->ticks_periodic != 0U) &&
    85dc:	42b2      	cmp	r2, r6
    85de:	bf2c      	ite	cs
    85e0:	2200      	movcs	r2, #0
    85e2:	2201      	movcc	r2, #1
				 !ticker->ticks_slot &&
    85e4:	2c00      	cmp	r4, #0
    85e6:	d1cd      	bne.n	8584 <ticker_worker+0x1f8>
    85e8:	e7d3      	b.n	8592 <ticker_worker+0x206>
				(ticker->ticks_periodic != 0U) &&
    85ea:	4672      	mov	r2, lr
				 !ticker->ticks_slot &&
    85ec:	2c00      	cmp	r4, #0
    85ee:	d1c9      	bne.n	8584 <ticker_worker+0x1f8>
    85f0:	e7cf      	b.n	8592 <ticker_worker+0x206>
    85f2:	2c00      	cmp	r4, #0
    85f4:	d1c6      	bne.n	8584 <ticker_worker+0x1f8>
				(ticker->ticks_periodic != 0U) &&
    85f6:	4622      	mov	r2, r4
    85f8:	e7cd      	b.n	8596 <ticker_worker+0x20a>
					  0U :
    85fa:	462e      	mov	r6, r5
    85fc:	e7e7      	b.n	85ce <ticker_worker+0x242>
			      (equal_priority && equal_force && next_is_older &&
    85fe:	2a00      	cmp	r2, #0
    8600:	d0cf      	beq.n	85a2 <ticker_worker+0x216>
    8602:	4622      	mov	r2, r4
    8604:	9f06      	ldr	r7, [sp, #24]
    8606:	9d08      	ldr	r5, [sp, #32]
    8608:	465c      	mov	r4, fp
    860a:	f8dd b01c 	ldr.w	fp, [sp, #28]
    860e:	e76e      	b.n	84ee <ticker_worker+0x162>
    8610:	4622      	mov	r2, r4
    8612:	9f06      	ldr	r7, [sp, #24]
    8614:	9d08      	ldr	r5, [sp, #32]
    8616:	9809      	ldr	r0, [sp, #36]	; 0x24
    8618:	465c      	mov	r4, fp
    861a:	f8dd b01c 	ldr.w	fp, [sp, #28]
		if (ticker->ext_data) {
    861e:	b182      	cbz	r2, 8642 <ticker_worker+0x2b6>
    8620:	2600      	movs	r6, #0
    8622:	e70f      	b.n	8444 <ticker_worker+0xb8>
				ticker->ack--;
    8624:	78a0      	ldrb	r0, [r4, #2]
			must_expire_skip = 1U;
    8626:	2601      	movs	r6, #1
    8628:	e775      	b.n	8516 <ticker_worker+0x18a>
	if (ticker->next != TICKER_NULL) {
    862a:	9e03      	ldr	r6, [sp, #12]
    862c:	e70a      	b.n	8444 <ticker_worker+0xb8>
    862e:	4622      	mov	r2, r4
    8630:	9f06      	ldr	r7, [sp, #24]
    8632:	9d08      	ldr	r5, [sp, #32]
    8634:	465c      	mov	r4, fp
    8636:	f8dd b01c 	ldr.w	fp, [sp, #28]
			if (ext_data &&
    863a:	2e00      	cmp	r6, #0
    863c:	f43f aeec 	beq.w	8418 <ticker_worker+0x8c>
    8640:	e75a      	b.n	84f8 <ticker_worker+0x16c>
    8642:	4616      	mov	r6, r2
			ticks_drift = 0U;
    8644:	4611      	mov	r1, r2
    8646:	e705      	b.n	8454 <ticker_worker+0xc8>

00008648 <ticker_job>:
{
    8648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    864c:	b08f      	sub	sp, #60	; 0x3c
	if (instance->worker_trigger) {
    864e:	7e83      	ldrb	r3, [r0, #26]
{
    8650:	9001      	str	r0, [sp, #4]
	if (instance->worker_trigger) {
    8652:	2b00      	cmp	r3, #0
    8654:	f040 828c 	bne.w	8b70 <ticker_job+0x528>
	if (instance->job_guard) {
    8658:	7e46      	ldrb	r6, [r0, #25]
    865a:	2e00      	cmp	r6, #0
    865c:	d176      	bne.n	874c <ticker_job+0x104>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    865e:	9a01      	ldr	r2, [sp, #4]
    8660:	7a93      	ldrb	r3, [r2, #10]
    8662:	7ad1      	ldrb	r1, [r2, #11]
	instance->job_guard = 1U;
    8664:	2001      	movs	r0, #1
    8666:	7650      	strb	r0, [r2, #25]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    8668:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    866a:	6952      	ldr	r2, [r2, #20]
    866c:	9208      	str	r2, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    866e:	f000 83e6 	beq.w	8e3e <ticker_job+0x7f6>
	uint8_t idx = *ticks_elapsed_index + 1;
    8672:	4403      	add	r3, r0
    8674:	b2db      	uxtb	r3, r3
		ticks_elapsed =
    8676:	9901      	ldr	r1, [sp, #4]
	if (idx == DOUBLE_BUFFER_SIZE) {
    8678:	2b02      	cmp	r3, #2
		idx = 0U;
    867a:	bf08      	it	eq
    867c:	4633      	moveq	r3, r6
		ticks_elapsed =
    867e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
	*ticks_elapsed_index = idx;
    8682:	728b      	strb	r3, [r1, #10]
		ticks_elapsed =
    8684:	68d2      	ldr	r2, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    8686:	9b08      	ldr	r3, [sp, #32]
		ticks_elapsed =
    8688:	9206      	str	r2, [sp, #24]
		instance->ticks_current += ticks_elapsed;
    868a:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    868c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		flag_elapsed = 1U;
    8690:	2601      	movs	r6, #1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    8692:	614b      	str	r3, [r1, #20]
	ticker_id_old_head = instance->ticker_id_head;
    8694:	9c01      	ldr	r4, [sp, #4]
    8696:	7e23      	ldrb	r3, [r4, #24]
    8698:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
    869a:	f00b facf 	bl	13c3c <cntr_cnt_get>
	count_user = instance->count_user;
    869e:	7a67      	ldrb	r7, [r4, #9]
	node = &instance->nodes[0];
    86a0:	6823      	ldr	r3, [r4, #0]
    86a2:	9302      	str	r3, [sp, #8]
	while (count_user--) {
    86a4:	1e7b      	subs	r3, r7, #1
	users = &instance->users[0];
    86a6:	6865      	ldr	r5, [r4, #4]
	ticks_now = cntr_cnt_get();
    86a8:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    86aa:	b2db      	uxtb	r3, r3
    86ac:	2f00      	cmp	r7, #0
    86ae:	f000 84c9 	beq.w	9044 <ticker_job+0x9fc>
    86b2:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
	pending = 0U;
    86b6:	2700      	movs	r7, #0
	insert_head = TICKER_NULL;
    86b8:	23ff      	movs	r3, #255	; 0xff
    86ba:	9304      	str	r3, [sp, #16]
    86bc:	960d      	str	r6, [sp, #52]	; 0x34
    86be:	970a      	str	r7, [sp, #40]	; 0x28
		user_ops = &user->user_op[0];
    86c0:	f8da b004 	ldr.w	fp, [sl, #4]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    86c4:	2400      	movs	r4, #0
    86c6:	46a9      	mov	r9, r5
		while (user->middle != user->last) {
    86c8:	f89a 0003 	ldrb.w	r0, [sl, #3]
    86cc:	f89a 8002 	ldrb.w	r8, [sl, #2]
			user_op = &user_ops[user->middle];
    86d0:	fa0f f588 	sxth.w	r5, r8
    86d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
			middle = user->middle + 1;
    86d8:	f108 0301 	add.w	r3, r8, #1
		while (user->middle != user->last) {
    86dc:	4540      	cmp	r0, r8
			user_op = &user_ops[user->middle];
    86de:	ea4f 1705 	mov.w	r7, r5, lsl #4
			middle = user->middle + 1;
    86e2:	b2db      	uxtb	r3, r3
			user_op = &user_ops[user->middle];
    86e4:	eb0b 1505 	add.w	r5, fp, r5, lsl #4
		while (user->middle != user->last) {
    86e8:	f000 8114 	beq.w	8914 <ticker_job+0x2cc>
			if (middle == user->count_user_op) {
    86ec:	f89a 2000 	ldrb.w	r2, [sl]
				middle = 0U;
    86f0:	429a      	cmp	r2, r3
    86f2:	bf08      	it	eq
    86f4:	2300      	moveq	r3, #0
			user->middle = middle;
    86f6:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    86fa:	f81b 2007 	ldrb.w	r2, [fp, r7]
			ticker = &node[user_op->id];
    86fe:	7869      	ldrb	r1, [r5, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    8700:	2a04      	cmp	r2, #4
    8702:	d939      	bls.n	8778 <ticker_job+0x130>
			ticker = &node[user_op->id];
    8704:	9802      	ldr	r0, [sp, #8]
    8706:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    870a:	eb00 1603 	add.w	r6, r0, r3, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    870e:	2a08      	cmp	r2, #8
			ticker = &node[user_op->id];
    8710:	ea4f 1303 	mov.w	r3, r3, lsl #4
    8714:	9303      	str	r3, [sp, #12]
			state = (ticker->req - ticker->ack) & 0xff;
    8716:	78b0      	ldrb	r0, [r6, #2]
    8718:	7873      	ldrb	r3, [r6, #1]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    871a:	d821      	bhi.n	8760 <ticker_job+0x118>
			state = (ticker->req - ticker->ack) & 0xff;
    871c:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    871e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8722:	d12b      	bne.n	877c <ticker_job+0x134>
			    ((state == 0U) &&
    8724:	2a06      	cmp	r2, #6
    8726:	d11b      	bne.n	8760 <ticker_job+0x118>
		if (instance->ticker_id_slot_previous == user_op->id) {
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	7edb      	ldrb	r3, [r3, #27]
    872c:	428b      	cmp	r3, r1
    872e:	d050      	beq.n	87d2 <ticker_job+0x18a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8730:	f80b 4007 	strb.w	r4, [fp, r7]
	if (user_op->fp_op_func) {
    8734:	6aab      	ldr	r3, [r5, #40]	; 0x28
	user_op->status = status;
    8736:	70ac      	strb	r4, [r5, #2]
	if (user_op->fp_op_func) {
    8738:	2b00      	cmp	r3, #0
    873a:	d0c5      	beq.n	86c8 <ticker_job+0x80>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    873c:	2000      	movs	r0, #0
    873e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    8740:	4798      	blx	r3
		while (user->middle != user->last) {
    8742:	f89a 0003 	ldrb.w	r0, [sl, #3]
    8746:	f89a 8002 	ldrb.w	r8, [sl, #2]
    874a:	e7c1      	b.n	86d0 <ticker_job+0x88>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    874c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    874e:	2104      	movs	r1, #4
    8750:	4603      	mov	r3, r0
    8752:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8754:	2004      	movs	r0, #4
    8756:	46a4      	mov	ip, r4
}
    8758:	b00f      	add	sp, #60	; 0x3c
    875a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    875e:	4760      	bx	ip
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    8760:	f80b 4007 	strb.w	r4, [fp, r7]
	user_op->status = status;
    8764:	f04f 0301 	mov.w	r3, #1
    8768:	70ab      	strb	r3, [r5, #2]
	if (user_op->fp_op_func) {
    876a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    876c:	2b00      	cmp	r3, #0
    876e:	d0ab      	beq.n	86c8 <ticker_job+0x80>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    8770:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    8772:	2001      	movs	r0, #1
    8774:	4798      	blx	r3
    8776:	e7a7      	b.n	86c8 <ticker_job+0x80>
    8778:	4698      	mov	r8, r3
    877a:	e7a9      	b.n	86d0 <ticker_job+0x88>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
    877c:	2a05      	cmp	r2, #5
    877e:	d11f      	bne.n	87c0 <ticker_job+0x178>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    8780:	686a      	ldr	r2, [r5, #4]
    8782:	b94a      	cbnz	r2, 8798 <ticker_job+0x150>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    8784:	68aa      	ldr	r2, [r5, #8]
    8786:	b93a      	cbnz	r2, 8798 <ticker_job+0x150>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    8788:	68ea      	ldr	r2, [r5, #12]
    878a:	b92a      	cbnz	r2, 8798 <ticker_job+0x150>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    878c:	692a      	ldr	r2, [r5, #16]
    878e:	b91a      	cbnz	r2, 8798 <ticker_job+0x150>
			     (user_op->params.update.lazy == 0U) &&
    8790:	696a      	ldr	r2, [r5, #20]
    8792:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8796:	d0e3      	beq.n	8760 <ticker_job+0x118>
			if ((state == 1U) ||
    8798:	2b01      	cmp	r3, #1
    879a:	d01c      	beq.n	87d6 <ticker_job+0x18e>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    879c:	9b01      	ldr	r3, [sp, #4]
    879e:	2104      	movs	r1, #4
    87a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    87a2:	464d      	mov	r5, r9
    87a4:	2201      	movs	r2, #1
    87a6:	4608      	mov	r0, r1
    87a8:	47a0      	blx	r4
				pending = 1U;
    87aa:	2301      	movs	r3, #1
	while (count_user--) {
    87ac:	4555      	cmp	r5, sl
				pending = 1U;
    87ae:	930a      	str	r3, [sp, #40]	; 0x28
				user->middle = prev;
    87b0:	f88a 8002 	strb.w	r8, [sl, #2]
	while (count_user--) {
    87b4:	f1aa 0308 	sub.w	r3, sl, #8
    87b8:	f000 80b2 	beq.w	8920 <ticker_job+0x2d8>
    87bc:	469a      	mov	sl, r3
    87be:	e77f      	b.n	86c0 <ticker_job+0x78>
			if ((state == 1U) ||
    87c0:	2b01      	cmp	r3, #1
    87c2:	f000 818e 	beq.w	8ae2 <ticker_job+0x49a>
    87c6:	2a06      	cmp	r2, #6
    87c8:	d1e8      	bne.n	879c <ticker_job+0x154>
		if (instance->ticker_id_slot_previous == user_op->id) {
    87ca:	9b01      	ldr	r3, [sp, #4]
    87cc:	7edb      	ldrb	r3, [r3, #27]
    87ce:	428b      	cmp	r3, r1
    87d0:	d1ae      	bne.n	8730 <ticker_job+0xe8>
				ticks_at_yield =
    87d2:	6869      	ldr	r1, [r5, #4]
    87d4:	e1a7      	b.n	8b26 <ticker_job+0x4de>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    87d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
    87da:	4640      	mov	r0, r8
    87dc:	f7ff fc1a 	bl	8014 <ticker_dequeue>
    87e0:	60b0      	str	r0, [r6, #8]
		ticker_job_node_update(instance, ticker, user_op, ticks_now,
    87e2:	f8d8 c014 	ldr.w	ip, [r8, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    87e6:	9b05      	ldr	r3, [sp, #20]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    87e8:	9a06      	ldr	r2, [sp, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    87ea:	eba3 030c 	sub.w	r3, r3, ip
    87ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    87f2:	4413      	add	r3, r2
	if (ticks_to_expire > ticks_elapsed) {
    87f4:	4298      	cmp	r0, r3
    87f6:	f240 81ae 	bls.w	8b56 <ticker_job+0x50e>
		ticks_to_expire -= ticks_elapsed;
    87fa:	1ac0      	subs	r0, r0, r3
	if ((ticker->ticks_periodic != 0U) &&
    87fc:	6873      	ldr	r3, [r6, #4]
    87fe:	2b00      	cmp	r3, #0
    8800:	d054      	beq.n	88ac <ticker_job+0x264>
	    (user_op->params.update.lazy != 0U)) {
    8802:	8aab      	ldrh	r3, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    8804:	2b00      	cmp	r3, #0
    8806:	d051      	beq.n	88ac <ticker_job+0x264>
		user_op->params.update.lazy--;
    8808:	3b01      	subs	r3, #1
    880a:	b29a      	uxth	r2, r3
    880c:	82aa      	strh	r2, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    880e:	6871      	ldr	r1, [r6, #4]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8810:	8bf3      	ldrh	r3, [r6, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8812:	4288      	cmp	r0, r1
    8814:	d926      	bls.n	8864 <ticker_job+0x21c>
			ticks_to_expire += ticker->ticks_periodic +
    8816:	f101 0801 	add.w	r8, r1, #1
    881a:	f8cd 901c 	str.w	r9, [sp, #28]
    881e:	970b      	str	r7, [sp, #44]	; 0x2c
    8820:	e01b      	b.n	885a <ticker_job+0x212>
	if ((ticker->remainder_current >= BIT(31)) ||
    8822:	6a72      	ldr	r2, [r6, #36]	; 0x24
    8824:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 890c <ticker_job+0x2c4>
    8828:	4f39      	ldr	r7, [pc, #228]	; (8910 <ticker_job+0x2c8>)
    882a:	4491      	add	r9, r2
    882c:	45b9      	cmp	r9, r7
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    882e:	bf84      	itt	hi
    8830:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    8834:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    8838:	46c6      	mov	lr, r8
	ticker->remainder_current -= ticker->remainder_periodic;
    883a:	6a37      	ldr	r7, [r6, #32]
    883c:	bf94      	ite	ls
    883e:	468e      	movls	lr, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    8840:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
    8844:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    8846:	eba0 000e 	sub.w	r0, r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    884a:	1bd2      	subs	r2, r2, r7
			ticker->lazy_current--;
    884c:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    884e:	4288      	cmp	r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    8850:	6272      	str	r2, [r6, #36]	; 0x24
			ticker->lazy_current--;
    8852:	83f3      	strh	r3, [r6, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8854:	f240 81e2 	bls.w	8c1c <ticker_job+0x5d4>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8858:	8aaa      	ldrh	r2, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    885a:	4293      	cmp	r3, r2
    885c:	d8e1      	bhi.n	8822 <ticker_job+0x1da>
    885e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    8862:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8864:	429a      	cmp	r2, r3
    8866:	d920      	bls.n	88aa <ticker_job+0x262>
			ticks_to_expire += ticker->ticks_periodic +
    8868:	e9cd 970b 	strd	r9, r7, [sp, #44]	; 0x2c
    886c:	1c4a      	adds	r2, r1, #1
	return ticker_add_to_remainder(&ticker->remainder_current, ticker->remainder_periodic);
    886e:	f8d6 e020 	ldr.w	lr, [r6, #32]
			ticks_to_expire += ticker->ticks_periodic +
    8872:	9207      	str	r2, [sp, #28]
	*remainder += to_add;
    8874:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if ((*remainder < BIT(31)) &&
    8876:	f8df 9094 	ldr.w	r9, [pc, #148]	; 890c <ticker_job+0x2c4>
    887a:	4f25      	ldr	r7, [pc, #148]	; (8910 <ticker_job+0x2c8>)
	*remainder += to_add;
    887c:	4472      	add	r2, lr
	if ((*remainder < BIT(31)) &&
    887e:	4491      	add	r9, r2
    8880:	45b9      	cmp	r9, r7
    8882:	4688      	mov	r8, r1
    8884:	d807      	bhi.n	8896 <ticker_job+0x24e>
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8886:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
    888a:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
    888e:	f8dd 801c 	ldr.w	r8, [sp, #28]
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8892:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticker->lazy_current++;
    8896:	3301      	adds	r3, #1
    8898:	b29b      	uxth	r3, r3
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    889a:	6272      	str	r2, [r6, #36]	; 0x24
			ticker->lazy_current++;
    889c:	83f3      	strh	r3, [r6, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    889e:	8aaa      	ldrh	r2, [r5, #20]
    88a0:	429a      	cmp	r2, r3
			ticks_to_expire += ticker->ticks_periodic +
    88a2:	4440      	add	r0, r8
		while (ticker->lazy_current < user_op->params.update.lazy) {
    88a4:	d8e6      	bhi.n	8874 <ticker_job+0x22c>
    88a6:	e9dd 970b 	ldrd	r9, r7, [sp, #44]	; 0x2c
		ticker->lazy_periodic = user_op->params.update.lazy;
    88aa:	83b2      	strh	r2, [r6, #28]
	ticker->ticks_to_expire = ticks_to_expire +
    88ac:	686b      	ldr	r3, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    88ae:	6ab1      	ldr	r1, [r6, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    88b0:	4403      	add	r3, r0
    88b2:	60b3      	str	r3, [r6, #8]
	ticker->ticks_to_expire_minus +=
    88b4:	68aa      	ldr	r2, [r5, #8]
    88b6:	6973      	ldr	r3, [r6, #20]
    88b8:	4413      	add	r3, r2
    88ba:	6173      	str	r3, [r6, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    88bc:	b129      	cbz	r1, 88ca <ticker_job+0x282>
    88be:	680b      	ldr	r3, [r1, #0]
    88c0:	b11b      	cbz	r3, 88ca <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
    88c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
    88c6:	1a9b      	subs	r3, r3, r2
		ext_data->ticks_drift =
    88c8:	604b      	str	r3, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    88ca:	9a05      	ldr	r2, [sp, #20]
    88cc:	4661      	mov	r1, ip
    88ce:	4630      	mov	r0, r6
    88d0:	f7ff fbda 	bl	8088 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    88d4:	68ea      	ldr	r2, [r5, #12]
    88d6:	69b3      	ldr	r3, [r6, #24]
    88d8:	4413      	add	r3, r2
    88da:	61b3      	str	r3, [r6, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    88dc:	692a      	ldr	r2, [r5, #16]
    88de:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    88e0:	bf8c      	ite	hi
    88e2:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    88e4:	2300      	movls	r3, #0
    88e6:	61b3      	str	r3, [r6, #24]
	if (user_op->params.update.force != 0U) {
    88e8:	7dab      	ldrb	r3, [r5, #22]
    88ea:	b103      	cbz	r3, 88ee <ticker_job+0x2a6>
		ticker->force = user_op->params.update.force;
    88ec:	70f3      	strb	r3, [r6, #3]
	if (user_op->params.update.must_expire) {
    88ee:	7deb      	ldrb	r3, [r5, #23]
    88f0:	b113      	cbz	r3, 88f8 <ticker_job+0x2b0>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    88f2:	3b01      	subs	r3, #1
    88f4:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
	ticker->next = *insert_head;
    88f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    88fc:	9b04      	ldr	r3, [sp, #16]
    88fe:	5453      	strb	r3, [r2, r1]
		ticker->req++;
    8900:	7873      	ldrb	r3, [r6, #1]
	*insert_head = user_op->id;
    8902:	786a      	ldrb	r2, [r5, #1]
    8904:	9204      	str	r2, [sp, #16]
		ticker->req++;
    8906:	3301      	adds	r3, #1
    8908:	7073      	strb	r3, [r6, #1]
    890a:	e711      	b.n	8730 <ticker_job+0xe8>
    890c:	ff172b5a 	.word	0xff172b5a
    8910:	7f172b59 	.word	0x7f172b59
    8914:	464d      	mov	r5, r9
	while (count_user--) {
    8916:	4555      	cmp	r5, sl
    8918:	f1aa 0308 	sub.w	r3, sl, #8
    891c:	f47f af4e 	bne.w	87bc <ticker_job+0x174>
    8920:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    8922:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	if (instance->ticker_id_head != ticker_id_old_head) {
    8924:	9901      	ldr	r1, [sp, #4]
    8926:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8928:	f891 b018 	ldrb.w	fp, [r1, #24]
    892c:	ebbb 0503 	subs.w	r5, fp, r3
    8930:	bf18      	it	ne
    8932:	2501      	movne	r5, #1
	if (flag_elapsed) {
    8934:	2e00      	cmp	r6, #0
    8936:	f000 8189 	beq.w	8c4c <ticker_job+0x604>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    893a:	9a08      	ldr	r2, [sp, #32]
    893c:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    893e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8942:	eba3 0302 	sub.w	r3, r3, r2
	node = &instance->nodes[0];
    8946:	680a      	ldr	r2, [r1, #0]
    8948:	9202      	str	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    894a:	f023 487f 	bic.w	r8, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    894e:	d04e      	beq.n	89ee <ticker_job+0x3a6>
    8950:	f8dd a018 	ldr.w	sl, [sp, #24]
			instance->ticks_slot_previous = 0U;
    8954:	9507      	str	r5, [sp, #28]
    8956:	960a      	str	r6, [sp, #40]	; 0x28
	ticks_expired = 0U;
    8958:	f04f 0900 	mov.w	r9, #0
			instance->ticks_slot_previous = 0U;
    895c:	4656      	mov	r6, sl
    895e:	970b      	str	r7, [sp, #44]	; 0x2c
    8960:	460d      	mov	r5, r1
		ticker = &node[id_expired];
    8962:	9a02      	ldr	r2, [sp, #8]
    8964:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    8968:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    896c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    8970:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    8972:	42b2      	cmp	r2, r6
    8974:	f200 8327 	bhi.w	8fc6 <ticker_job+0x97e>
		state = (ticker->req - ticker->ack) & 0xff;
    8978:	78a1      	ldrb	r1, [r4, #2]
    897a:	7863      	ldrb	r3, [r4, #1]
		skip_collision = (ticker->lazy_current != 0U);
    897c:	8be0      	ldrh	r0, [r4, #30]
		state = (ticker->req - ticker->ack) & 0xff;
    897e:	1a5b      	subs	r3, r3, r1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    8980:	69e9      	ldr	r1, [r5, #28]
    8982:	428a      	cmp	r2, r1
		ticks_elapsed -= ticks_to_expire;
    8984:	eba6 0602 	sub.w	r6, r6, r2
		ticks_expired += ticks_to_expire;
    8988:	4491      	add	r9, r2
		ticks_latency -= ticks_to_expire;
    898a:	eba8 0802 	sub.w	r8, r8, r2
			instance->ticks_slot_previous -= ticks_to_expire;
    898e:	bf31      	iteee	cc
    8990:	1a89      	subcc	r1, r1, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
    8992:	f04f 32ff 	movcs.w	r2, #4294967295	; 0xffffffff
			instance->ticks_slot_previous = 0U;
    8996:	2100      	movcs	r1, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
    8998:	76ea      	strbcs	r2, [r5, #27]
    899a:	61e9      	str	r1, [r5, #28]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    899c:	69a2      	ldr	r2, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    899e:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    89a0:	b112      	cbz	r2, 89a8 <ticker_job+0x360>
    89a2:	2b02      	cmp	r3, #2
    89a4:	f000 813f 	beq.w	8c26 <ticker_job+0x5de>
		ticker->ticks_to_expire = 0U;
    89a8:	2200      	movs	r2, #0
    89aa:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    89ac:	9a02      	ldr	r2, [sp, #8]
    89ae:	f812 200a 	ldrb.w	r2, [r2, sl]
    89b2:	762a      	strb	r2, [r5, #24]
		if ((ticker->ticks_periodic != 0U) ||
    89b4:	6861      	ldr	r1, [r4, #4]
    89b6:	2900      	cmp	r1, #0
    89b8:	f040 80f8 	bne.w	8bac <ticker_job+0x564>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    89bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    89be:	b11a      	cbz	r2, 89c8 <ticker_job+0x380>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    89c0:	7a12      	ldrb	r2, [r2, #8]
    89c2:	2a01      	cmp	r2, #1
    89c4:	f000 80d7 	beq.w	8b76 <ticker_job+0x52e>
			if (state && ((state == 1U) || skip_collision) &&
    89c8:	b13b      	cbz	r3, 89da <ticker_job+0x392>
    89ca:	2b01      	cmp	r3, #1
    89cc:	d000      	beq.n	89d0 <ticker_job+0x388>
    89ce:	b120      	cbz	r0, 89da <ticker_job+0x392>
			    ticker->fp_op_func) {
    89d0:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    89d2:	b113      	cbz	r3, 89da <ticker_job+0x392>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    89d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    89d6:	2001      	movs	r0, #1
    89d8:	4798      	blx	r3
			ticker->req = ticker->ack;
    89da:	78a3      	ldrb	r3, [r4, #2]
    89dc:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    89de:	f895 b018 	ldrb.w	fp, [r5, #24]
    89e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    89e6:	d1bc      	bne.n	8962 <ticker_job+0x31a>
    89e8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    89ec:	9d07      	ldr	r5, [sp, #28]
		ticker_job_list_insert(instance, insert_head);
    89ee:	9c01      	ldr	r4, [sp, #4]
			flag_compare_update = 1U;
    89f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    89f2:	9904      	ldr	r1, [sp, #16]
    89f4:	4620      	mov	r0, r4
			flag_compare_update = 1U;
    89f6:	455b      	cmp	r3, fp
    89f8:	bf18      	it	ne
    89fa:	4635      	movne	r5, r6
		ticker_job_list_insert(instance, insert_head);
    89fc:	f7ff fbbe 	bl	817c <ticker_job_list_insert>
	uint8_t rescheduled = 0U;
    8a00:	2600      	movs	r6, #0
	nodes = &instance->nodes[0];
    8a02:	f8d4 b000 	ldr.w	fp, [r4]
	while (rescheduling) {
    8a06:	46b4      	mov	ip, r6
    8a08:	462e      	mov	r6, r5
		ticker_id_head = instance->ticker_id_head;
    8a0a:	9b01      	ldr	r3, [sp, #4]
    8a0c:	7e1a      	ldrb	r2, [r3, #24]
		while (ticker_id_head != TICKER_NULL) {
    8a0e:	2aff      	cmp	r2, #255	; 0xff
		ticker_id_head = instance->ticker_id_head;
    8a10:	4610      	mov	r0, r2
		while (ticker_id_head != TICKER_NULL) {
    8a12:	f000 8327 	beq.w	9064 <ticker_job+0xa1c>
		ticker_id_head = instance->ticker_id_head;
    8a16:	4611      	mov	r1, r2
			ticker = &nodes[ticker_id_head];
    8a18:	b20b      	sxth	r3, r1
    8a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8a1e:	eb0b 1503 	add.w	r5, fp, r3, lsl #4
    8a22:	011b      	lsls	r3, r3, #4
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    8a24:	6aac      	ldr	r4, [r5, #40]	; 0x28
    8a26:	b12c      	cbz	r4, 8a34 <ticker_job+0x3ec>
    8a28:	f894 e008 	ldrb.w	lr, [r4, #8]
    8a2c:	f1be 0f01 	cmp.w	lr, #1
    8a30:	f000 8207 	beq.w	8e42 <ticker_job+0x7fa>
			ticker_id_head = ticker->next;
    8a34:	f81b 1003 	ldrb.w	r1, [fp, r3]
		while (ticker_id_head != TICKER_NULL) {
    8a38:	29ff      	cmp	r1, #255	; 0xff
    8a3a:	d1ed      	bne.n	8a18 <ticker_job+0x3d0>
	return rescheduled;
    8a3c:	4635      	mov	r5, r6
    8a3e:	4666      	mov	r6, ip
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    8a40:	2e00      	cmp	r6, #0
    8a42:	f000 8109 	beq.w	8c58 <ticker_job+0x610>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a48:	4293      	cmp	r3, r2
    8a4a:	f000 82de 	beq.w	900a <ticker_job+0x9c2>
	if (!pending) {
    8a4e:	2f00      	cmp	r7, #0
    8a50:	f000 8126 	beq.w	8ca0 <ticker_job+0x658>
	if (instance->ticker_id_head == TICKER_NULL) {
    8a54:	4610      	mov	r0, r2
    8a56:	28ff      	cmp	r0, #255	; 0xff
    8a58:	f000 830f 	beq.w	907a <ticker_job+0xa32>
	if (ticker_id_old_head == TICKER_NULL) {
    8a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a5e:	2bff      	cmp	r3, #255	; 0xff
    8a60:	f000 82f7 	beq.w	9052 <ticker_job+0xa0a>
	ticks_to_expire = ticker->ticks_to_expire;
    8a64:	f8dd 9004 	ldr.w	r9, [sp, #4]
    8a68:	f8d9 3000 	ldr.w	r3, [r9]
	ticker = &instance->nodes[instance->ticker_id_head];
    8a6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    8a70:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    8a74:	f8d3 a008 	ldr.w	sl, [r3, #8]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) && !ticks_to_expire) {
    8a78:	f1ba 0f00 	cmp.w	sl, #0
    8a7c:	f000 82b8 	beq.w	8ff0 <ticker_job+0x9a8>
	ctr_curr = cntr_cnt_get();
    8a80:	f00b f8dc 	bl	13c3c <cntr_cnt_get>
		LL_ASSERT(i);
    8a84:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8d30 <ticker_job+0x6e8>
    8a88:	4faa      	ldr	r7, [pc, #680]	; (8d34 <ticker_job+0x6ec>)
    8a8a:	4eab      	ldr	r6, [pc, #684]	; (8d38 <ticker_job+0x6f0>)
	i = 10U;
    8a8c:	250a      	movs	r5, #10
    8a8e:	4602      	mov	r2, r0
		cc = instance->ticks_current;
    8a90:	f8d9 3014 	ldr.w	r3, [r9, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8a94:	9202      	str	r2, [sp, #8]
    8a96:	1ad1      	subs	r1, r2, r3
    8a98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8a9c:	458a      	cmp	sl, r1
		i--;
    8a9e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		ticks_elapsed = ticks_diff + HAL_TICKER_CNTR_CMP_OFFSET_MIN +
    8aa2:	f101 0103 	add.w	r1, r1, #3
		if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    8aa6:	f240 82d0 	bls.w	904a <ticker_job+0xa02>
		cc += MAX(ticks_elapsed, ticks_to_expire);
    8aaa:	4551      	cmp	r1, sl
    8aac:	bf2c      	ite	cs
    8aae:	185b      	addcs	r3, r3, r1
    8ab0:	4453      	addcc	r3, sl
		cc &= HAL_TICKER_CNTR_MASK;
    8ab2:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    8ab6:	4620      	mov	r0, r4
    8ab8:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    8abc:	4798      	blx	r3
		ctr_curr = cntr_cnt_get();
    8abe:	f00b f8bd 	bl	13c3c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8ac2:	9a02      	ldr	r2, [sp, #8]
    8ac4:	1aa3      	subs	r3, r4, r2
    8ac6:	1a82      	subs	r2, r0, r2
    8ac8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_curr, ctr_prev) +
    8acc:	3203      	adds	r2, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8ace:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
    8ad2:	429a      	cmp	r2, r3
		ctr_curr = cntr_cnt_get();
    8ad4:	4683      	mov	fp, r0
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
    8ad6:	d944      	bls.n	8b62 <ticker_job+0x51a>
		LL_ASSERT(i);
    8ad8:	2d00      	cmp	r5, #0
    8ada:	f000 80d2 	beq.w	8c82 <ticker_job+0x63a>
		ctr_curr = cntr_cnt_get();
    8ade:	465a      	mov	r2, fp
    8ae0:	e7d6      	b.n	8a90 <ticker_job+0x448>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    8ae2:	2a06      	cmp	r2, #6
    8ae4:	f43f ae20 	beq.w	8728 <ticker_job+0xe0>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    8ae8:	f8dd 8004 	ldr.w	r8, [sp, #4]
    8aec:	4640      	mov	r0, r8
    8aee:	f7ff fa91 	bl	8014 <ticker_dequeue>
			ticker->req = ticker->ack;
    8af2:	78b3      	ldrb	r3, [r6, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    8af4:	60b0      	str	r0, [r6, #8]
			ticker->req = ticker->ack;
    8af6:	7073      	strb	r3, [r6, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    8af8:	f898 201b 	ldrb.w	r2, [r8, #27]
    8afc:	786b      	ldrb	r3, [r5, #1]
    8afe:	429a      	cmp	r2, r3
    8b00:	f47f ae16 	bne.w	8730 <ticker_job+0xe8>
			if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    8b04:	f81b 3007 	ldrb.w	r3, [fp, r7]
    8b08:	2b06      	cmp	r3, #6
    8b0a:	f43f ae62 	beq.w	87d2 <ticker_job+0x18a>
				instance->ticker_id_slot_previous = TICKER_NULL;
    8b0e:	9a01      	ldr	r2, [sp, #4]
    8b10:	23ff      	movs	r3, #255	; 0xff
    8b12:	76d3      	strb	r3, [r2, #27]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    8b14:	f81b 3007 	ldrb.w	r3, [fp, r7]
    8b18:	2b06      	cmp	r3, #6
    8b1a:	f43f ae5a 	beq.w	87d2 <ticker_job+0x18a>
    8b1e:	2b08      	cmp	r3, #8
    8b20:	f43f ae57 	beq.w	87d2 <ticker_job+0x18a>
				ticks_at_yield = ticks_now;
    8b24:	9905      	ldr	r1, [sp, #20]
			ticks_current = instance->ticks_current;
    8b26:	9b01      	ldr	r3, [sp, #4]
    8b28:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
    8b2a:	1a8b      	subs	r3, r1, r2
    8b2c:	021e      	lsls	r6, r3, #8
    8b2e:	d409      	bmi.n	8b44 <ticker_job+0x4fc>
				ticks_used = ticks_elapsed +
    8b30:	9a06      	ldr	r2, [sp, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8b32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    8b36:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    8b38:	9901      	ldr	r1, [sp, #4]
    8b3a:	69ca      	ldr	r2, [r1, #28]
    8b3c:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    8b3e:	bf88      	it	hi
    8b40:	61cb      	strhi	r3, [r1, #28]
    8b42:	e5f5      	b.n	8730 <ticker_job+0xe8>
				if (ticks_elapsed > ticks_used) {
    8b44:	9b06      	ldr	r3, [sp, #24]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    8b46:	1a52      	subs	r2, r2, r1
    8b48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    8b4c:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    8b4e:	bf8c      	ite	hi
    8b50:	1a9b      	subhi	r3, r3, r2
					ticks_used = 0;
    8b52:	2300      	movls	r3, #0
    8b54:	e7f0      	b.n	8b38 <ticker_job+0x4f0>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    8b56:	6972      	ldr	r2, [r6, #20]
    8b58:	4413      	add	r3, r2
    8b5a:	1a1b      	subs	r3, r3, r0
    8b5c:	6173      	str	r3, [r6, #20]
		ticks_to_expire = 0U;
    8b5e:	2000      	movs	r0, #0
    8b60:	e64c      	b.n	87fc <ticker_job+0x1b4>
	if (instance->worker_trigger || compare_trigger) {
    8b62:	9901      	ldr	r1, [sp, #4]
    8b64:	7e8b      	ldrb	r3, [r1, #26]
	instance->job_guard = 0U;
    8b66:	2200      	movs	r2, #0
    8b68:	764a      	strb	r2, [r1, #25]
	if (instance->worker_trigger || compare_trigger) {
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	f040 8084 	bne.w	8c78 <ticker_job+0x630>
}
    8b70:	b00f      	add	sp, #60	; 0x3c
    8b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->req = ticker->ack;
    8b76:	78a3      	ldrb	r3, [r4, #2]
				ticker->ticks_to_expire = ticks_elapsed;
    8b78:	60a6      	str	r6, [r4, #8]
				ticker->req = ticker->ack;
    8b7a:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    8b7c:	9b08      	ldr	r3, [sp, #32]
    8b7e:	6969      	ldr	r1, [r5, #20]
    8b80:	eb03 0209 	add.w	r2, r3, r9
    8b84:	4620      	mov	r0, r4
    8b86:	f7ff fa7f 	bl	8088 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    8b8a:	9a02      	ldr	r2, [sp, #8]
    8b8c:	9b04      	ldr	r3, [sp, #16]
    8b8e:	f802 300a 	strb.w	r3, [r2, sl]
			ticker->req++;
    8b92:	7863      	ldrb	r3, [r4, #1]
    8b94:	f8cd b010 	str.w	fp, [sp, #16]
    8b98:	3301      	adds	r3, #1
    8b9a:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
    8b9c:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    8b9e:	f895 b018 	ldrb.w	fp, [r5, #24]
    8ba2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    8ba6:	f47f aedc 	bne.w	8962 <ticker_job+0x31a>
    8baa:	e71d      	b.n	89e8 <ticker_job+0x3a0>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    8bac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8bae:	b113      	cbz	r3, 8bb6 <ticker_job+0x56e>
    8bb0:	7a1b      	ldrb	r3, [r3, #8]
    8bb2:	2b01      	cmp	r3, #1
    8bb4:	d0df      	beq.n	8b76 <ticker_job+0x52e>
				if (!ticker->lazy_current) {
    8bb6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    8bba:	f1bc 0f00 	cmp.w	ip, #0
    8bbe:	d140      	bne.n	8c42 <ticker_job+0x5fa>
					lazy_periodic = ticker->lazy_periodic;
    8bc0:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
				while (count--) {
    8bc4:	46e6      	mov	lr, ip
    8bc6:	1c48      	adds	r0, r1, #1
    8bc8:	9003      	str	r0, [sp, #12]
    8bca:	e9d4 7308 	ldrd	r7, r3, [r4, #32]
				ticks_to_expire = 0U;
    8bce:	2200      	movs	r2, #0
    8bd0:	9405      	str	r4, [sp, #20]
    8bd2:	4670      	mov	r0, lr
    8bd4:	e004      	b.n	8be0 <ticker_job+0x598>
				while (count--) {
    8bd6:	3801      	subs	r0, #1
	if ((*remainder < BIT(31)) &&
    8bd8:	468e      	mov	lr, r1
				while (count--) {
    8bda:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
    8bdc:	4472      	add	r2, lr
				while (count--) {
    8bde:	d012      	beq.n	8c06 <ticker_job+0x5be>
	if ((*remainder < BIT(31)) &&
    8be0:	f8df e158 	ldr.w	lr, [pc, #344]	; 8d3c <ticker_job+0x6f4>
    8be4:	4c56      	ldr	r4, [pc, #344]	; (8d40 <ticker_job+0x6f8>)
	*remainder += to_add;
    8be6:	443b      	add	r3, r7
	if ((*remainder < BIT(31)) &&
    8be8:	449e      	add	lr, r3
    8bea:	45a6      	cmp	lr, r4
    8bec:	d8f3      	bhi.n	8bd6 <ticker_job+0x58e>
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8bee:	f8dd e00c 	ldr.w	lr, [sp, #12]
    8bf2:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    8bf6:	3801      	subs	r0, #1
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8bf8:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
				while (count--) {
    8bfc:	1c44      	adds	r4, r0, #1
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8bfe:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
    8c02:	4472      	add	r2, lr
				while (count--) {
    8c04:	d1ec      	bne.n	8be0 <ticker_job+0x598>
    8c06:	9c05      	ldr	r4, [sp, #20]
				} else if (!ticker->must_expire) {
    8c08:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    8c0c:	6263      	str	r3, [r4, #36]	; 0x24
    8c0e:	2800      	cmp	r0, #0
    8c10:	f000 80eb 	beq.w	8dea <ticker_job+0x7a2>
				ticker->ticks_to_expire = ticks_to_expire;
    8c14:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    8c16:	f8a4 c01e 	strh.w	ip, [r4, #30]
    8c1a:	e7af      	b.n	8b7c <ticker_job+0x534>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    8c1c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    8c20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    8c22:	8aaa      	ldrh	r2, [r5, #20]
    8c24:	e61e      	b.n	8864 <ticker_job+0x21c>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    8c26:	2800      	cmp	r0, #0
    8c28:	f47f aebe 	bne.w	89a8 <ticker_job+0x360>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    8c2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    8c2e:	b11a      	cbz	r2, 8c38 <ticker_job+0x5f0>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    8c30:	7a12      	ldrb	r2, [r2, #8]
    8c32:	2a01      	cmp	r2, #1
    8c34:	f43f aeb8 	beq.w	89a8 <ticker_job+0x360>
			instance->ticker_id_slot_previous = id_expired;
    8c38:	f885 b01b 	strb.w	fp, [r5, #27]
			instance->ticks_slot_previous = ticker->ticks_slot;
    8c3c:	69a2      	ldr	r2, [r4, #24]
    8c3e:	61ea      	str	r2, [r5, #28]
    8c40:	e6b2      	b.n	89a8 <ticker_job+0x360>
					ticker->req = ticker->ack;
    8c42:	78a3      	ldrb	r3, [r4, #2]
    8c44:	7063      	strb	r3, [r4, #1]
				while (count--) {
    8c46:	f04f 0e00 	mov.w	lr, #0
    8c4a:	e7bc      	b.n	8bc6 <ticker_job+0x57e>
		ticker_job_list_insert(instance, insert_head);
    8c4c:	9c01      	ldr	r4, [sp, #4]
    8c4e:	9904      	ldr	r1, [sp, #16]
    8c50:	4620      	mov	r0, r4
    8c52:	f7ff fa93 	bl	817c <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    8c56:	7e22      	ldrb	r2, [r4, #24]
    8c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c5a:	4293      	cmp	r3, r2
    8c5c:	f47f aef7 	bne.w	8a4e <ticker_job+0x406>
	if (!pending) {
    8c60:	2f00      	cmp	r7, #0
    8c62:	f000 81c9 	beq.w	8ff8 <ticker_job+0x9b0>
	if (flag_compare_update) {
    8c66:	2d00      	cmp	r5, #0
    8c68:	f040 8242 	bne.w	90f0 <ticker_job+0xaa8>
	if (instance->worker_trigger || compare_trigger) {
    8c6c:	9a01      	ldr	r2, [sp, #4]
    8c6e:	7e93      	ldrb	r3, [r2, #26]
	instance->job_guard = 0U;
    8c70:	7655      	strb	r5, [r2, #25]
	if (instance->worker_trigger || compare_trigger) {
    8c72:	2b00      	cmp	r3, #0
    8c74:	f43f af7c 	beq.w	8b70 <ticker_job+0x528>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    8c78:	9b01      	ldr	r3, [sp, #4]
    8c7a:	2201      	movs	r2, #1
    8c7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8c7e:	2103      	movs	r1, #3
    8c80:	e568      	b.n	8754 <ticker_job+0x10c>
		LL_ASSERT(i);
    8c82:	f640 3396 	movw	r3, #2966	; 0xb96
    8c86:	4642      	mov	r2, r8
    8c88:	4639      	mov	r1, r7
    8c8a:	4630      	mov	r0, r6
    8c8c:	f010 fcd7 	bl	1963e <assert_print>
    8c90:	4040      	eors	r0, r0
    8c92:	f380 8811 	msr	BASEPRI, r0
    8c96:	f04f 0003 	mov.w	r0, #3
    8c9a:	df02      	svc	2
		ctr_curr = cntr_cnt_get();
    8c9c:	465a      	mov	r2, fp
    8c9e:	e6f7      	b.n	8a90 <ticker_job+0x448>
	count_user = instance->count_user;
    8ca0:	9b01      	ldr	r3, [sp, #4]
    8ca2:	7a59      	ldrb	r1, [r3, #9]
	users = &instance->users[0];
    8ca4:	685c      	ldr	r4, [r3, #4]
	while (count_user--) {
    8ca6:	1e4b      	subs	r3, r1, #1
    8ca8:	b2db      	uxtb	r3, r3
		flag_compare_update = 1U;
    8caa:	2501      	movs	r5, #1
	while (count_user--) {
    8cac:	2900      	cmp	r1, #0
    8cae:	f43f aed1 	beq.w	8a54 <ticker_job+0x40c>
    8cb2:	e9cd 4507 	strd	r4, r5, [sp, #28]
    8cb6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    8cba:	9302      	str	r3, [sp, #8]
		user_op = &user->user_op[0];
    8cbc:	9b02      	ldr	r3, [sp, #8]
    8cbe:	685a      	ldr	r2, [r3, #4]
		while (user->first != user->last) {
    8cc0:	785e      	ldrb	r6, [r3, #1]
		user_op = &user->user_op[0];
    8cc2:	4611      	mov	r1, r2
		while (user->first != user->last) {
    8cc4:	78da      	ldrb	r2, [r3, #3]
    8cc6:	42b2      	cmp	r2, r6
    8cc8:	bf18      	it	ne
    8cca:	460d      	movne	r5, r1
    8ccc:	d078      	beq.n	8dc0 <ticker_job+0x778>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    8cce:	b236      	sxth	r6, r6
    8cd0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    8cd4:	0133      	lsls	r3, r6, #4
    8cd6:	eb05 1606 	add.w	r6, r5, r6, lsl #4
	switch (uop->op) {
    8cda:	5ceb      	ldrb	r3, [r5, r3]
    8cdc:	2b01      	cmp	r3, #1
    8cde:	d05a      	beq.n	8d96 <ticker_job+0x74e>
    8ce0:	2b02      	cmp	r3, #2
    8ce2:	d162      	bne.n	8daa <ticker_job+0x762>
		ticker_by_next_slot_get(instance,
    8ce4:	f8d6 c004 	ldr.w	ip, [r6, #4]
	node = instance->nodes;
    8ce8:	9a01      	ldr	r2, [sp, #4]
	_ticker_id_head = *ticker_id_head;
    8cea:	f89c 4000 	ldrb.w	r4, [ip]
		ticker_by_next_slot_get(instance,
    8cee:	f8d6 e010 	ldr.w	lr, [r6, #16]
	node = instance->nodes;
    8cf2:	f8d2 9000 	ldr.w	r9, [r2]
	    (*ticks_current != instance->ticks_current)) {
    8cf6:	6950      	ldr	r0, [r2, #20]
		ticker_by_next_slot_get(instance,
    8cf8:	e9d6 1302 	ldrd	r1, r3, [r6, #8]
	if ((_ticker_id_head == TICKER_NULL) ||
    8cfc:	2cff      	cmp	r4, #255	; 0xff
		ticker_by_next_slot_get(instance,
    8cfe:	e9d6 ab05 	ldrd	sl, fp, [r6, #20]
	_ticks_to_expire = *ticks_to_expire;
    8d02:	f8d3 8000 	ldr.w	r8, [r3]
	if ((_ticker_id_head == TICKER_NULL) ||
    8d06:	d002      	beq.n	8d0e <ticker_job+0x6c6>
    8d08:	680a      	ldr	r2, [r1, #0]
    8d0a:	4282      	cmp	r2, r0
    8d0c:	d067      	beq.n	8dde <ticker_job+0x796>
		_ticker_id_head = instance->ticker_id_head;
    8d0e:	9a01      	ldr	r2, [sp, #4]
		_ticks_to_expire = 0U;
    8d10:	f04f 0800 	mov.w	r8, #0
		_ticker_id_head = instance->ticker_id_head;
    8d14:	7e14      	ldrb	r4, [r2, #24]
		*ticks_current = instance->ticks_current;
    8d16:	6008      	str	r0, [r1, #0]
	while (_ticker_id_head != TICKER_NULL) {
    8d18:	2cff      	cmp	r4, #255	; 0xff
    8d1a:	d038      	beq.n	8d8e <ticker_job+0x746>
    8d1c:	e9cd 5603 	strd	r5, r6, [sp, #12]
    8d20:	f8cd c014 	str.w	ip, [sp, #20]
    8d24:	4656      	mov	r6, sl
    8d26:	f8cd e018 	str.w	lr, [sp, #24]
    8d2a:	469a      	mov	sl, r3
    8d2c:	e014      	b.n	8d58 <ticker_job+0x710>
    8d2e:	bf00      	nop
    8d30:	0001e11c 	.word	0x0001e11c
    8d34:	0001e3d4 	.word	0x0001e3d4
    8d38:	0001e1a4 	.word	0x0001e1a4
    8d3c:	ff172b5a 	.word	0xff172b5a
    8d40:	7f172b59 	.word	0x7f172b59
			if (fp_match_op_func(_ticker_id_head, ticks_slot,
    8d44:	68ba      	ldr	r2, [r7, #8]
    8d46:	4442      	add	r2, r8
    8d48:	47b0      	blx	r6
    8d4a:	b988      	cbnz	r0, 8d70 <ticker_job+0x728>
		_ticker_id_head = ticker->next;
    8d4c:	f819 4005 	ldrb.w	r4, [r9, r5]
		_ticks_to_expire += ticker->ticks_to_expire;
    8d50:	68bb      	ldr	r3, [r7, #8]
	while (_ticker_id_head != TICKER_NULL) {
    8d52:	2cff      	cmp	r4, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
    8d54:	4498      	add	r8, r3
	while (_ticker_id_head != TICKER_NULL) {
    8d56:	d03c      	beq.n	8dd2 <ticker_job+0x78a>
		ticker = &node[_ticker_id_head];
    8d58:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    8d5c:	eb09 1705 	add.w	r7, r9, r5, lsl #4
			if (fp_match_op_func(_ticker_id_head, ticks_slot,
    8d60:	4620      	mov	r0, r4
			ticks_slot += ticker->ticks_slot;
    8d62:	69b9      	ldr	r1, [r7, #24]
			if (fp_match_op_func(_ticker_id_head, ticks_slot,
    8d64:	465b      	mov	r3, fp
		ticker = &node[_ticker_id_head];
    8d66:	012d      	lsls	r5, r5, #4
		if (fp_match_op_func) {
    8d68:	2e00      	cmp	r6, #0
    8d6a:	d1eb      	bne.n	8d44 <ticker_job+0x6fc>
			if (ticker->ticks_slot) {
    8d6c:	2900      	cmp	r1, #0
    8d6e:	d0ed      	beq.n	8d4c <ticker_job+0x704>
		_ticks_to_expire += ticker->ticks_to_expire;
    8d70:	f8dd e018 	ldr.w	lr, [sp, #24]
    8d74:	f8dd c014 	ldr.w	ip, [sp, #20]
    8d78:	68ba      	ldr	r2, [r7, #8]
		if (remainder) {
    8d7a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
    8d7e:	4653      	mov	r3, sl
    8d80:	f1be 0f00 	cmp.w	lr, #0
    8d84:	d002      	beq.n	8d8c <ticker_job+0x744>
			*remainder = ticker->remainder_current;
    8d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8d88:	f8ce 1000 	str.w	r1, [lr]
		_ticks_to_expire += ticker->ticks_to_expire;
    8d8c:	4490      	add	r8, r2
	*ticker_id_head = _ticker_id_head;
    8d8e:	f88c 4000 	strb.w	r4, [ip]
	*ticks_to_expire = _ticks_to_expire;
    8d92:	f8c3 8000 	str.w	r8, [r3]
		fp_op_func = uop->fp_op_func;
    8d96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    8d98:	f04f 0200 	mov.w	r2, #0
    8d9c:	70b2      	strb	r2, [r6, #2]
	if (fp_op_func) {
    8d9e:	b113      	cbz	r3, 8da6 <ticker_job+0x75e>
		fp_op_func(uop->status, uop->op_context);
    8da0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    8da2:	2000      	movs	r0, #0
    8da4:	4798      	blx	r3
    8da6:	9b02      	ldr	r3, [sp, #8]
    8da8:	78da      	ldrb	r2, [r3, #3]
			first = user->first + 1;
    8daa:	9902      	ldr	r1, [sp, #8]
    8dac:	784e      	ldrb	r6, [r1, #1]
			if (first == user->count_user_op) {
    8dae:	780b      	ldrb	r3, [r1, #0]
			first = user->first + 1;
    8db0:	3601      	adds	r6, #1
    8db2:	b2f6      	uxtb	r6, r6
				first = 0U;
    8db4:	42b3      	cmp	r3, r6
    8db6:	bf08      	it	eq
    8db8:	2600      	moveq	r6, #0
		while (user->first != user->last) {
    8dba:	42b2      	cmp	r2, r6
			user->first = first;
    8dbc:	704e      	strb	r6, [r1, #1]
		while (user->first != user->last) {
    8dbe:	d186      	bne.n	8cce <ticker_job+0x686>
	while (count_user--) {
    8dc0:	9a02      	ldr	r2, [sp, #8]
    8dc2:	9907      	ldr	r1, [sp, #28]
    8dc4:	428a      	cmp	r2, r1
    8dc6:	f1a2 0308 	sub.w	r3, r2, #8
    8dca:	f000 80fa 	beq.w	8fc2 <ticker_job+0x97a>
    8dce:	9302      	str	r3, [sp, #8]
    8dd0:	e774      	b.n	8cbc <ticker_job+0x674>
    8dd2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
    8dd6:	f8dd c014 	ldr.w	ip, [sp, #20]
    8dda:	4653      	mov	r3, sl
    8ddc:	e7d7      	b.n	8d8e <ticker_job+0x746>
		ticker = &node[_ticker_id_head];
    8dde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8de2:	0122      	lsls	r2, r4, #4
		_ticker_id_head = ticker->next;
    8de4:	f819 4002 	ldrb.w	r4, [r9, r2]
    8de8:	e796      	b.n	8d18 <ticker_job+0x6d0>
					while (ticks_to_expire <
    8dea:	4590      	cmp	r8, r2
    8dec:	f67f af12 	bls.w	8c14 <ticker_job+0x5cc>
				lazy = 0U;
    8df0:	4686      	mov	lr, r0
    8df2:	1c48      	adds	r0, r1, #1
    8df4:	9003      	str	r0, [sp, #12]
    8df6:	9c03      	ldr	r4, [sp, #12]
    8df8:	950c      	str	r5, [sp, #48]	; 0x30
    8dfa:	4670      	mov	r0, lr
    8dfc:	e005      	b.n	8e0a <ticker_job+0x7c2>
	if ((*remainder < BIT(31)) &&
    8dfe:	468e      	mov	lr, r1
						ticks_to_expire +=
    8e00:	4472      	add	r2, lr
						lazy++;
    8e02:	3001      	adds	r0, #1
					while (ticks_to_expire <
    8e04:	4590      	cmp	r8, r2
						lazy++;
    8e06:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    8e08:	d912      	bls.n	8e30 <ticker_job+0x7e8>
	if ((*remainder < BIT(31)) &&
    8e0a:	f8df e2c0 	ldr.w	lr, [pc, #704]	; 90cc <ticker_job+0xa84>
    8e0e:	4db0      	ldr	r5, [pc, #704]	; (90d0 <ticker_job+0xa88>)
	*remainder += to_add;
    8e10:	443b      	add	r3, r7
	if ((*remainder < BIT(31)) &&
    8e12:	449e      	add	lr, r3
    8e14:	45ae      	cmp	lr, r5
    8e16:	d8f2      	bhi.n	8dfe <ticker_job+0x7b6>
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8e18:	46a6      	mov	lr, r4
    8e1a:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    8e1e:	4472      	add	r2, lr
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8e20:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    8e24:	3001      	adds	r0, #1
					while (ticks_to_expire <
    8e26:	4590      	cmp	r8, r2
		*remainder -= HAL_TICKER_REMAINDER_RANGE;
    8e28:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    8e2c:	b280      	uxth	r0, r0
					while (ticks_to_expire <
    8e2e:	d8ec      	bhi.n	8e0a <ticker_job+0x7c2>
				ticker->lazy_current += (lazy_periodic + lazy);
    8e30:	9c05      	ldr	r4, [sp, #20]
    8e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    8e34:	6263      	str	r3, [r4, #36]	; 0x24
    8e36:	4460      	add	r0, ip
    8e38:	fa1f fc80 	uxth.w	ip, r0
    8e3c:	e6ea      	b.n	8c14 <ticker_job+0x5cc>
		ticks_elapsed = 0U;
    8e3e:	9606      	str	r6, [sp, #24]
    8e40:	e428      	b.n	8694 <ticker_job+0x4c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    8e42:	9a01      	ldr	r2, [sp, #4]
    8e44:	9806      	ldr	r0, [sp, #24]
    8e46:	69d2      	ldr	r2, [r2, #28]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8e48:	f8d4 c004 	ldr.w	ip, [r4, #4]
		ticker_id_iter = nodes[ticker_id_head].next;
    8e4c:	f81b e003 	ldrb.w	lr, [fp, r3]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8e50:	f8cd c008 	str.w	ip, [sp, #8]
		if (instance->ticks_slot_previous > ticks_elapsed) {
    8e54:	4290      	cmp	r0, r2
			window_start_ticks = instance->ticks_slot_previous -
    8e56:	bf38      	it	cc
    8e58:	1a12      	subcc	r2, r2, r0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8e5a:	6820      	ldr	r0, [r4, #0]
		ticker_id_iter = nodes[ticker_id_head].next;
    8e5c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		uint32_t window_start_ticks = 0U;
    8e60:	bf28      	it	cs
    8e62:	2200      	movcs	r2, #0
    8e64:	9203      	str	r2, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8e66:	4584      	cmp	ip, r0
		if (ticker->ticks_slot) {
    8e68:	69aa      	ldr	r2, [r5, #24]
    8e6a:	920a      	str	r2, [sp, #40]	; 0x28
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    8e6c:	f080 80b6 	bcs.w	8fdc <ticker_job+0x994>
			ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    8e70:	2a00      	cmp	r2, #0
    8e72:	bf18      	it	ne
    8e74:	4692      	movne	sl, r2
		while ((ticker_id_iter != TICKER_NULL) &&
    8e76:	4672      	mov	r2, lr
			ticks_slot = HAL_TICKER_RESCHEDULE_MARGIN;
    8e78:	bf08      	it	eq
    8e7a:	f04f 0a04 	moveq.w	sl, #4
		while ((ticker_id_iter != TICKER_NULL) &&
    8e7e:	2aff      	cmp	r2, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    8e80:	eba0 090c 	sub.w	r9, r0, ip
		while ((ticker_id_iter != TICKER_NULL) &&
    8e84:	f000 80ad 	beq.w	8fe2 <ticker_job+0x99a>
    8e88:	45d1      	cmp	r9, sl
    8e8a:	f0c0 80aa 	bcc.w	8fe2 <ticker_job+0x99a>
    8e8e:	2000      	movs	r0, #0
    8e90:	e9cd 6504 	strd	r6, r5, [sp, #16]
    8e94:	e9cd 4107 	strd	r4, r1, [sp, #28]
    8e98:	e9dd 620a 	ldrd	r6, r2, [sp, #40]	; 0x28
    8e9c:	9d03      	ldr	r5, [sp, #12]
		       ((ticks_start_offset + ticks_slot) <=
    8e9e:	46d6      	mov	lr, sl
		while ((ticker_id_iter != TICKER_NULL) &&
    8ea0:	4680      	mov	r8, r0
    8ea2:	4684      	mov	ip, r0
    8ea4:	e021      	b.n	8eea <ticker_job+0x8a2>
			    !node->ticks_slot ||
    8ea6:	6849      	ldr	r1, [r1, #4]
    8ea8:	b371      	cbz	r1, 8f08 <ticker_job+0x8c0>
			if (ticks_to_expire_offset >
    8eaa:	f1bc 0f04 	cmp.w	ip, #4
    8eae:	d92e      	bls.n	8f0e <ticker_job+0x8c6>
					MIN(ticks_slot_window,
    8eb0:	f1ac 0004 	sub.w	r0, ip, #4
    8eb4:	4440      	add	r0, r8
				window_end_ticks =
    8eb6:	4548      	cmp	r0, r9
    8eb8:	bf28      	it	cs
    8eba:	4648      	movcs	r0, r9
			if (window_end_ticks > (ticks_start_offset +
    8ebc:	4570      	cmp	r0, lr
    8ebe:	d926      	bls.n	8f0e <ticker_job+0x8c6>
				if (!ticker->ticks_slot) {
    8ec0:	b366      	cbz	r6, 8f1c <ticker_job+0x8d4>
			if ((ticks_to_expire != 0U) &&
    8ec2:	ebb0 000a 	subs.w	r0, r0, sl
    8ec6:	d001      	beq.n	8ecc <ticker_job+0x884>
    8ec8:	4285      	cmp	r5, r0
    8eca:	d932      	bls.n	8f32 <ticker_job+0x8ea>
			ticks_start_offset += ticks_to_expire_offset;
    8ecc:	44e0      	add	r8, ip
			window_start_ticks  = ticks_start_offset +
    8ece:	eb08 0504 	add.w	r5, r8, r4
				ticks_to_expire = ticks_slot_window -
    8ed2:	eba9 000a 	sub.w	r0, r9, sl
			ticker_id_iter = node->next;
    8ed6:	f81b 2002 	ldrb.w	r2, [fp, r2]
			ticks_to_expire_offset = 0U;
    8eda:	f04f 0c00 	mov.w	ip, #0
		while ((ticker_id_iter != TICKER_NULL) &&
    8ede:	2aff      	cmp	r2, #255	; 0xff
    8ee0:	d027      	beq.n	8f32 <ticker_job+0x8ea>
		       ((ticks_start_offset + ticks_slot) <=
    8ee2:	eb0a 0e08 	add.w	lr, sl, r8
		while ((ticker_id_iter != TICKER_NULL) &&
    8ee6:	45f1      	cmp	r9, lr
    8ee8:	d323      	bcc.n	8f32 <ticker_job+0x8ea>
			node = &nodes[ticker_id_iter];
    8eea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8eee:	eb0b 1102 	add.w	r1, fp, r2, lsl #4
    8ef2:	0112      	lsls	r2, r2, #4
			ticks_to_expire_offset += node->ticks_to_expire;
    8ef4:	688c      	ldr	r4, [r1, #8]
    8ef6:	44a4      	add	ip, r4
			if (TICKER_RESCHEDULE_PENDING(node) ||
    8ef8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    8efa:	b114      	cbz	r4, 8f02 <ticker_job+0x8ba>
    8efc:	7a24      	ldrb	r4, [r4, #8]
    8efe:	2c01      	cmp	r4, #1
    8f00:	d002      	beq.n	8f08 <ticker_job+0x8c0>
			    !node->ticks_slot ||
    8f02:	698c      	ldr	r4, [r1, #24]
			if (TICKER_RESCHEDULE_PENDING(node) ||
    8f04:	2c00      	cmp	r4, #0
    8f06:	d1ce      	bne.n	8ea6 <ticker_job+0x85e>
				ticker_id_iter = node->next;
    8f08:	f81b 2002 	ldrb.w	r2, [fp, r2]
				continue;
    8f0c:	e7e7      	b.n	8ede <ticker_job+0x896>
			ticks_start_offset += ticks_to_expire_offset;
    8f0e:	44e0      	add	r8, ip
			window_start_ticks  = ticks_start_offset +
    8f10:	eb04 0008 	add.w	r0, r4, r8
    8f14:	4605      	mov	r5, r0
			if (!ticker->ticks_slot) {
    8f16:	2e00      	cmp	r6, #0
    8f18:	d0dd      	beq.n	8ed6 <ticker_job+0x88e>
    8f1a:	e7da      	b.n	8ed2 <ticker_job+0x88a>
			if ((ticks_to_expire != 0U) &&
    8f1c:	b125      	cbz	r5, 8f28 <ticker_job+0x8e0>
			    (ticks_to_expire <= (window_end_ticks -
    8f1e:	eba0 000a 	sub.w	r0, r0, sl
			    (ticks_to_expire >= window_start_ticks) &&
    8f22:	42a8      	cmp	r0, r5
    8f24:	f080 80dc 	bcs.w	90e0 <ticker_job+0xa98>
			ticks_start_offset += ticks_to_expire_offset;
    8f28:	44e0      	add	r8, ip
			window_start_ticks  = ticks_start_offset +
    8f2a:	eb08 0004 	add.w	r0, r8, r4
    8f2e:	4605      	mov	r5, r0
    8f30:	e7d1      	b.n	8ed6 <ticker_job+0x88e>
    8f32:	e9dd 6504 	ldrd	r6, r5, [sp, #16]
    8f36:	e9dd 4107 	ldrd	r4, r1, [sp, #28]
		ext_data->ticks_drift += ticks_to_expire -
    8f3a:	9a02      	ldr	r2, [sp, #8]
    8f3c:	4684      	mov	ip, r0
    8f3e:	4402      	add	r2, r0
    8f40:	68a8      	ldr	r0, [r5, #8]
    8f42:	1a12      	subs	r2, r2, r0
    8f44:	6062      	str	r2, [r4, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    8f46:	f8c5 c008 	str.w	ip, [r5, #8]
    8f4a:	4660      	mov	r0, ip
		ticker_id_iter = nodes[ticker_id_head].next;
    8f4c:	f81b c003 	ldrb.w	ip, [fp, r3]
		while (ticker_id_iter != TICKER_NULL) {
    8f50:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8f54:	d02d      	beq.n	8fb2 <ticker_job+0x96a>
		ticker_id_prev = TICKER_NULL;
    8f56:	f04f 0eff 	mov.w	lr, #255	; 0xff
    8f5a:	4699      	mov	r9, r3
    8f5c:	e000      	b.n	8f60 <ticker_job+0x918>
			ticker_id_iter = node->next;
    8f5e:	469c      	mov	ip, r3
			node = &nodes[ticker_id_iter];
    8f60:	fa0f f28c 	sxth.w	r2, ip
    8f64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8f68:	eb0b 1802 	add.w	r8, fp, r2, lsl #4
    8f6c:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    8f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8f72:	4283      	cmp	r3, r0
    8f74:	f080 8095 	bcs.w	90a2 <ticker_job+0xa5a>
				ticker->ticks_to_expire -=
    8f78:	1ac0      	subs	r0, r0, r3
    8f7a:	60a8      	str	r0, [r5, #8]
			ticker_id_iter = node->next;
    8f7c:	f81b 3002 	ldrb.w	r3, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
    8f80:	2bff      	cmp	r3, #255	; 0xff
    8f82:	46e6      	mov	lr, ip
    8f84:	d1eb      	bne.n	8f5e <ticker_job+0x916>
    8f86:	464b      	mov	r3, r9
		if (ticker_id_prev != TICKER_NULL) {
    8f88:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8f8c:	d011      	beq.n	8fb2 <ticker_job+0x96a>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    8f8e:	fa0f fc8c 	sxth.w	ip, ip
    8f92:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    8f96:	ea4f 120c 	mov.w	r2, ip, lsl #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    8f9a:	f8dd c004 	ldr.w	ip, [sp, #4]
    8f9e:	f81b 0003 	ldrb.w	r0, [fp, r3]
    8fa2:	f88c 0018 	strb.w	r0, [ip, #24]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    8fa6:	f81b 0002 	ldrb.w	r0, [fp, r2]
    8faa:	f80b 0003 	strb.w	r0, [fp, r3]
			nodes[ticker_id_prev].next = ticker_id_head;
    8fae:	f80b 1002 	strb.w	r1, [fp, r2]
		ticker->lazy_current--;
    8fb2:	8beb      	ldrh	r3, [r5, #30]
    8fb4:	3b01      	subs	r3, #1
    8fb6:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    8fb8:	2302      	movs	r3, #2
    8fba:	7223      	strb	r3, [r4, #8]
		rescheduled  = 1U;
    8fbc:	f04f 0c01 	mov.w	ip, #1
    8fc0:	e523      	b.n	8a0a <ticker_job+0x3c2>
    8fc2:	9d08      	ldr	r5, [sp, #32]
    8fc4:	e64f      	b.n	8c66 <ticker_job+0x61e>
			ticker->ticks_to_expire -= ticks_elapsed;
    8fc6:	46b2      	mov	sl, r6
		if (instance->ticker_id_head != ticker_id_old_head) {
    8fc8:	9b01      	ldr	r3, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
    8fca:	9d07      	ldr	r5, [sp, #28]
    8fcc:	eba2 020a 	sub.w	r2, r2, sl
    8fd0:	60a2      	str	r2, [r4, #8]
    8fd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
		if (instance->ticker_id_head != ticker_id_old_head) {
    8fd6:	f893 b018 	ldrb.w	fp, [r3, #24]
			break;
    8fda:	e508      	b.n	89ee <ticker_job+0x3a6>
		if (ticker->ticks_slot) {
    8fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8fde:	4318      	orrs	r0, r3
    8fe0:	d020      	beq.n	9024 <ticker_job+0x9dc>
		ext_data->ticks_drift += ticks_to_expire -
    8fe2:	68ab      	ldr	r3, [r5, #8]
    8fe4:	9a02      	ldr	r2, [sp, #8]
    8fe6:	1ad3      	subs	r3, r2, r3
    8fe8:	6063      	str	r3, [r4, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    8fea:	2300      	movs	r3, #0
    8fec:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    8fee:	e7e0      	b.n	8fb2 <ticker_job+0x96a>
	instance->job_guard = 0U;
    8ff0:	9b01      	ldr	r3, [sp, #4]
    8ff2:	f883 a019 	strb.w	sl, [r3, #25]
	if (instance->worker_trigger || compare_trigger) {
    8ff6:	e63f      	b.n	8c78 <ticker_job+0x630>
	count_user = instance->count_user;
    8ff8:	9b01      	ldr	r3, [sp, #4]
    8ffa:	7a5a      	ldrb	r2, [r3, #9]
	users = &instance->users[0];
    8ffc:	685c      	ldr	r4, [r3, #4]
	while (count_user--) {
    8ffe:	1e53      	subs	r3, r2, #1
    9000:	b2db      	uxtb	r3, r3
    9002:	2a00      	cmp	r2, #0
    9004:	f47f ae55 	bne.w	8cb2 <ticker_job+0x66a>
    9008:	e62d      	b.n	8c66 <ticker_job+0x61e>
	if (!pending) {
    900a:	2f00      	cmp	r7, #0
    900c:	f47f ad2a 	bne.w	8a64 <ticker_job+0x41c>
	users = &instance->users[0];
    9010:	9b01      	ldr	r3, [sp, #4]
	count_user = instance->count_user;
    9012:	7a5a      	ldrb	r2, [r3, #9]
	users = &instance->users[0];
    9014:	685c      	ldr	r4, [r3, #4]
	while (count_user--) {
    9016:	1e53      	subs	r3, r2, #1
    9018:	b2db      	uxtb	r3, r3
    901a:	2a00      	cmp	r2, #0
    901c:	f43f ad22 	beq.w	8a64 <ticker_job+0x41c>
			flag_compare_update = 1U;
    9020:	4635      	mov	r5, r6
    9022:	e646      	b.n	8cb2 <ticker_job+0x66a>
			LL_ASSERT(TICKER_HAS_SLOT_WINDOW(ticker));
    9024:	4a2b      	ldr	r2, [pc, #172]	; (90d4 <ticker_job+0xa8c>)
    9026:	492c      	ldr	r1, [pc, #176]	; (90d8 <ticker_job+0xa90>)
    9028:	482c      	ldr	r0, [pc, #176]	; (90dc <ticker_job+0xa94>)
    902a:	f640 134e 	movw	r3, #2382	; 0x94e
    902e:	f010 fb06 	bl	1963e <assert_print>
    9032:	4040      	eors	r0, r0
    9034:	f380 8811 	msr	BASEPRI, r0
    9038:	f04f 0003 	mov.w	r0, #3
    903c:	df02      	svc	2
		ext_data->ticks_drift += ticks_to_expire -
    903e:	6863      	ldr	r3, [r4, #4]
    9040:	9302      	str	r3, [sp, #8]
    9042:	e7ce      	b.n	8fe2 <ticker_job+0x99a>
	insert_head = TICKER_NULL;
    9044:	23ff      	movs	r3, #255	; 0xff
    9046:	9304      	str	r3, [sp, #16]
    9048:	e46c      	b.n	8924 <ticker_job+0x2dc>
	instance->job_guard = 0U;
    904a:	9a01      	ldr	r2, [sp, #4]
    904c:	2300      	movs	r3, #0
    904e:	7653      	strb	r3, [r2, #25]
	if (instance->worker_trigger || compare_trigger) {
    9050:	e612      	b.n	8c78 <ticker_job+0x630>
		ticks_current = cntr_cnt_get();
    9052:	f00a fdf3 	bl	13c3c <cntr_cnt_get>
    9056:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    9058:	f00a fdba 	bl	13bd0 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    905c:	9b01      	ldr	r3, [sp, #4]
		if (cntr_start() == 0) {
    905e:	b1e8      	cbz	r0, 909c <ticker_job+0xa54>
	ticker = &instance->nodes[instance->ticker_id_head];
    9060:	7e18      	ldrb	r0, [r3, #24]
    9062:	e4ff      	b.n	8a64 <ticker_job+0x41c>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    9064:	4635      	mov	r5, r6
    9066:	4666      	mov	r6, ip
    9068:	2e00      	cmp	r6, #0
    906a:	f43f adf5 	beq.w	8c58 <ticker_job+0x610>
	if (instance->ticker_id_head != ticker_id_old_head) {
    906e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9070:	2bff      	cmp	r3, #255	; 0xff
    9072:	d01f      	beq.n	90b4 <ticker_job+0xa6c>
	if (!pending) {
    9074:	2f00      	cmp	r7, #0
    9076:	f43f ae13 	beq.w	8ca0 <ticker_job+0x658>
		if (cntr_stop() == 0) {
    907a:	f00a fdb9 	bl	13bf0 <cntr_stop>
    907e:	4604      	mov	r4, r0
    9080:	2800      	cmp	r0, #0
    9082:	f47f ad6e 	bne.w	8b62 <ticker_job+0x51a>
			instance->ticks_slot_previous = 0U;
    9086:	9d01      	ldr	r5, [sp, #4]
    9088:	61e8      	str	r0, [r5, #28]
			instance->ticks_current = cntr_cnt_get();
    908a:	f00a fdd7 	bl	13c3c <cntr_cnt_get>
	if (instance->worker_trigger || compare_trigger) {
    908e:	7eab      	ldrb	r3, [r5, #26]
			instance->ticks_current = cntr_cnt_get();
    9090:	6168      	str	r0, [r5, #20]
	instance->job_guard = 0U;
    9092:	766c      	strb	r4, [r5, #25]
	if (instance->worker_trigger || compare_trigger) {
    9094:	2b00      	cmp	r3, #0
    9096:	f43f ad6b 	beq.w	8b70 <ticker_job+0x528>
    909a:	e5ed      	b.n	8c78 <ticker_job+0x630>
	ticker = &instance->nodes[instance->ticker_id_head];
    909c:	7e18      	ldrb	r0, [r3, #24]
			instance->ticks_current = ticks_current;
    909e:	615c      	str	r4, [r3, #20]
    90a0:	e4e0      	b.n	8a64 <ticker_job+0x41c>
				node->ticks_to_expire -=
    90a2:	464a      	mov	r2, r9
    90a4:	4699      	mov	r9, r3
    90a6:	eba9 0000 	sub.w	r0, r9, r0
    90aa:	4613      	mov	r3, r2
    90ac:	f8c8 0008 	str.w	r0, [r8, #8]
				break;
    90b0:	46f4      	mov	ip, lr
    90b2:	e769      	b.n	8f88 <ticker_job+0x940>
	if (!pending) {
    90b4:	2f00      	cmp	r7, #0
    90b6:	d1e0      	bne.n	907a <ticker_job+0xa32>
	count_user = instance->count_user;
    90b8:	9b01      	ldr	r3, [sp, #4]
    90ba:	7a5a      	ldrb	r2, [r3, #9]
	users = &instance->users[0];
    90bc:	685c      	ldr	r4, [r3, #4]
	while (count_user--) {
    90be:	1e53      	subs	r3, r2, #1
    90c0:	b2db      	uxtb	r3, r3
    90c2:	2a00      	cmp	r2, #0
    90c4:	d0d9      	beq.n	907a <ticker_job+0xa32>
			flag_compare_update = 1U;
    90c6:	4635      	mov	r5, r6
    90c8:	e5f3      	b.n	8cb2 <ticker_job+0x66a>
    90ca:	bf00      	nop
    90cc:	ff172b5a 	.word	0xff172b5a
    90d0:	7f172b59 	.word	0x7f172b59
    90d4:	0001e11c 	.word	0x0001e11c
    90d8:	0001e15c 	.word	0x0001e15c
    90dc:	0001e1a4 	.word	0x0001e1a4
    90e0:	9503      	str	r5, [sp, #12]
			    (ticks_to_expire >= window_start_ticks) &&
    90e2:	9a03      	ldr	r2, [sp, #12]
    90e4:	9e04      	ldr	r6, [sp, #16]
    90e6:	9d05      	ldr	r5, [sp, #20]
    90e8:	e9dd 4107 	ldrd	r4, r1, [sp, #28]
    90ec:	4610      	mov	r0, r2
    90ee:	e724      	b.n	8f3a <ticker_job+0x8f2>
	if (instance->ticker_id_head == TICKER_NULL) {
    90f0:	9b01      	ldr	r3, [sp, #4]
    90f2:	7e18      	ldrb	r0, [r3, #24]
    90f4:	e4af      	b.n	8a56 <ticker_job+0x40e>
    90f6:	bf00      	nop

000090f8 <ticker_init>:
{
    90f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90fa:	9e06      	ldr	r6, [sp, #24]
    90fc:	f89d 501c 	ldrb.w	r5, [sp, #28]
    9100:	9c08      	ldr	r4, [sp, #32]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    9102:	b9b8      	cbnz	r0, 9134 <ticker_init+0x3c>
	instance->count_node = count_node;
    9104:	4f14      	ldr	r7, [pc, #80]	; (9158 <ticker_init+0x60>)
	instance->nodes = node;
    9106:	603a      	str	r2, [r7, #0]
	while (count_user--) {
    9108:	1e5a      	subs	r2, r3, #1
	instance->count_node = count_node;
    910a:	7239      	strb	r1, [r7, #8]
	instance->count_user = count_user;
    910c:	727b      	strb	r3, [r7, #9]
	instance->users = user;
    910e:	607e      	str	r6, [r7, #4]
	while (count_user--) {
    9110:	b2d2      	uxtb	r2, r2
    9112:	b173      	cbz	r3, 9132 <ticker_init+0x3a>
    9114:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		users[count_user].user_op = user_op_;
    9118:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    911a:	4611      	mov	r1, r2
    911c:	f812 3908 	ldrb.w	r3, [r2], #-8
	while (count_user--) {
    9120:	428e      	cmp	r6, r1
		user_op_ += users[count_user].count_user_op;
    9122:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    9126:	eba5 0303 	sub.w	r3, r5, r3
		user_op_ += users[count_user].count_user_op;
    912a:	eb04 1400 	add.w	r4, r4, r0, lsl #4
		count_op -= users[count_user].count_user_op;
    912e:	b2dd      	uxtb	r5, r3
	while (count_user--) {
    9130:	d1f2      	bne.n	9118 <ticker_init+0x20>
	if (count_op) {
    9132:	b10d      	cbz	r5, 9138 <ticker_init+0x40>
		return TICKER_STATUS_FAILURE;
    9134:	2001      	movs	r0, #1
}
    9136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	instance->caller_id_get_cb = caller_id_get_cb;
    9138:	9b09      	ldr	r3, [sp, #36]	; 0x24
    913a:	623b      	str	r3, [r7, #32]
	instance->sched_cb = sched_cb;
    913c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    913e:	627b      	str	r3, [r7, #36]	; 0x24
	instance->ticker_id_head = TICKER_NULL;
    9140:	24ff      	movs	r4, #255	; 0xff
	instance->trigger_set_cb = trigger_set_cb;
    9142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9144:	62bb      	str	r3, [r7, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    9146:	763c      	strb	r4, [r7, #24]
	instance->ticks_current = cntr_cnt_get();
    9148:	f00a fd78 	bl	13c3c <cntr_cnt_get>
	instance->ticks_elapsed_first = 0U;
    914c:	817d      	strh	r5, [r7, #10]
	instance->ticks_current = cntr_cnt_get();
    914e:	6178      	str	r0, [r7, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    9150:	76fc      	strb	r4, [r7, #27]
	instance->ticks_slot_previous = 0U;
    9152:	61fd      	str	r5, [r7, #28]
	return TICKER_STATUS_SUCCESS;
    9154:	4628      	mov	r0, r5
}
    9156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9158:	2000148c 	.word	0x2000148c

0000915c <ticker_trigger>:
{
    915c:	b410      	push	{r4}
	if (instance->sched_cb) {
    915e:	4b0a      	ldr	r3, [pc, #40]	; (9188 <ticker_trigger+0x2c>)
    9160:	222c      	movs	r2, #44	; 0x2c
    9162:	fb02 3200 	mla	r2, r2, r0, r3
    9166:	6a54      	ldr	r4, [r2, #36]	; 0x24
    9168:	b15c      	cbz	r4, 9182 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    916a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    916e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    9172:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9176:	46a4      	mov	ip, r4
    9178:	2201      	movs	r2, #1
}
    917a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    917c:	2103      	movs	r1, #3
    917e:	2002      	movs	r0, #2
    9180:	4760      	bx	ip
}
    9182:	bc10      	pop	{r4}
    9184:	4770      	bx	lr
    9186:	bf00      	nop
    9188:	2000148c 	.word	0x2000148c

0000918c <ticker_start>:
{
    918c:	b510      	push	{r4, lr}
    918e:	b08a      	sub	sp, #40	; 0x28
    9190:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    9192:	9400      	str	r4, [sp, #0]
{
    9194:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    9196:	9401      	str	r4, [sp, #4]
{
    9198:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    919a:	9402      	str	r4, [sp, #8]
{
    919c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91a0:	9403      	str	r4, [sp, #12]
{
    91a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91a4:	9404      	str	r4, [sp, #16]
{
    91a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91a8:	9405      	str	r4, [sp, #20]
{
    91aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91ac:	9406      	str	r4, [sp, #24]
{
    91ae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91b0:	9407      	str	r4, [sp, #28]
{
    91b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91b4:	9408      	str	r4, [sp, #32]
    91b6:	2400      	movs	r4, #0
    91b8:	9409      	str	r4, [sp, #36]	; 0x24
    91ba:	f7fe ff89 	bl	80d0 <start_us.constprop.0>
}
    91be:	b00a      	add	sp, #40	; 0x28
    91c0:	bd10      	pop	{r4, pc}
    91c2:	bf00      	nop

000091c4 <ticker_start_ext>:
{
    91c4:	b410      	push	{r4}
    91c6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91ca:	9404      	str	r4, [sp, #16]
}
    91cc:	bc10      	pop	{r4}
	return start_us(instance_index, user_id, ticker_id, ticks_anchor,
    91ce:	f7fe bf7f 	b.w	80d0 <start_us.constprop.0>
    91d2:	bf00      	nop

000091d4 <ticker_update_ext>:
{
    91d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    91d8:	4d28      	ldr	r5, [pc, #160]	; (927c <ticker_update_ext+0xa8>)
{
    91da:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
    91de:	4604      	mov	r4, r0
    91e0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    91e2:	212c      	movs	r1, #44	; 0x2c
    91e4:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    91e8:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    91ec:	eb04 0447 	add.w	r4, r4, r7, lsl #1
    91f0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    91f4:	684c      	ldr	r4, [r1, #4]
{
    91f6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	if (last >= user->count_user_op) {
    91fa:	f814 8030 	ldrb.w	r8, [r4, r0, lsl #3]
	user = &instance->users[user_id];
    91fe:	eb04 0ec0 	add.w	lr, r4, r0, lsl #3
	last = user->last + 1;
    9202:	f89e 4003 	ldrb.w	r4, [lr, #3]
	if (last == user->first) {
    9206:	f89e 9001 	ldrb.w	r9, [lr, #1]
	last = user->last + 1;
    920a:	f104 0c01 	add.w	ip, r4, #1
    920e:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    9212:	45e0      	cmp	r8, ip
    9214:	bf98      	it	ls
    9216:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    921a:	45e1      	cmp	r9, ip
{
    921c:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
	if (last == user->first) {
    9220:	d029      	beq.n	9276 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    9222:	f8de 9004 	ldr.w	r9, [lr, #4]
    9226:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    922a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    922e:	eb09 1404 	add.w	r4, r9, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    9232:	f04f 0b05 	mov.w	fp, #5
    9236:	f809 b00a 	strb.w	fp, [r9, sl]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    923a:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    923c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    923e:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    9240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9242:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    9244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9246:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    9248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    924a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    924c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    924e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    9250:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    9252:	7062      	strb	r2, [r4, #1]
	user_op->params.update.lazy = lazy;
    9254:	82a6      	strh	r6, [r4, #20]
	user_op->params.update.force = force;
    9256:	75a7      	strb	r7, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    9258:	f884 8017 	strb.w	r8, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    925c:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    925e:	f88e c003 	strb.w	ip, [lr, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9262:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    9266:	4798      	blx	r3
    9268:	462b      	mov	r3, r5
    926a:	2200      	movs	r2, #0
    926c:	2104      	movs	r1, #4
    926e:	47b0      	blx	r6
	return user_op->status;
    9270:	78a0      	ldrb	r0, [r4, #2]
}
    9272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    9276:	2001      	movs	r0, #1
}
    9278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    927c:	2000148c 	.word	0x2000148c

00009280 <ticker_update>:
{
    9280:	b510      	push	{r4, lr}
    9282:	b088      	sub	sp, #32
    9284:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    9286:	9400      	str	r4, [sp, #0]
{
    9288:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    928a:	9401      	str	r4, [sp, #4]
{
    928c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    928e:	9402      	str	r4, [sp, #8]
{
    9290:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    9294:	9403      	str	r4, [sp, #12]
{
    9296:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    929a:	9404      	str	r4, [sp, #16]
{
    929c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    929e:	9405      	str	r4, [sp, #20]
{
    92a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    92a2:	9406      	str	r4, [sp, #24]
    92a4:	2400      	movs	r4, #0
    92a6:	9407      	str	r4, [sp, #28]
    92a8:	f7ff ff94 	bl	91d4 <ticker_update_ext>
}
    92ac:	b008      	add	sp, #32
    92ae:	bd10      	pop	{r4, pc}

000092b0 <ticker_stop>:
{
    92b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    92b4:	4d1e      	ldr	r5, [pc, #120]	; (9330 <ticker_stop+0x80>)
{
    92b6:	4607      	mov	r7, r0
    92b8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    92ba:	212c      	movs	r1, #44	; 0x2c
    92bc:	fb01 5e07 	mla	lr, r1, r7, r5
	struct ticker_instance *instance = &_instance[instance_index];
    92c0:	eb07 0487 	add.w	r4, r7, r7, lsl #2
    92c4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
    92c8:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
    92cc:	f8de 5004 	ldr.w	r5, [lr, #4]
    92d0:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    92d4:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    92d8:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    92da:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
    92dc:	f104 0c01 	add.w	ip, r4, #1
    92e0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    92e4:	4567      	cmp	r7, ip
    92e6:	bf98      	it	ls
    92e8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    92ec:	4565      	cmp	r5, ip
    92ee:	d01b      	beq.n	9328 <ticker_stop+0x78>
	user_op = &user->user_op[user->last];
    92f0:	684d      	ldr	r5, [r1, #4]
    92f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    92f6:	0127      	lsls	r7, r4, #4
    92f8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    92fc:	f04f 0807 	mov.w	r8, #7
    9300:	f805 8007 	strb.w	r8, [r5, r7]
	user_op->fp_op_func = fp_op_func;
    9304:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    9306:	9b06      	ldr	r3, [sp, #24]
    9308:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    930a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    930c:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    930e:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    9310:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    9314:	e9de 3508 	ldrd	r3, r5, [lr, #32]
    9318:	4798      	blx	r3
    931a:	4633      	mov	r3, r6
    931c:	2200      	movs	r2, #0
    931e:	2104      	movs	r1, #4
    9320:	47a8      	blx	r5
	return user_op->status;
    9322:	78a0      	ldrb	r0, [r4, #2]
}
    9324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    9328:	2001      	movs	r0, #1
}
    932a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    932e:	bf00      	nop
    9330:	2000148c 	.word	0x2000148c

00009334 <ticker_stop_abs>:
{
    9334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    9338:	4d1f      	ldr	r5, [pc, #124]	; (93b8 <ticker_stop_abs+0x84>)
{
    933a:	4607      	mov	r7, r0
    933c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    933e:	212c      	movs	r1, #44	; 0x2c
    9340:	fb01 5e07 	mla	lr, r1, r7, r5
	struct ticker_instance *instance = &_instance[instance_index];
    9344:	eb07 0487 	add.w	r4, r7, r7, lsl #2
    9348:	eb07 0444 	add.w	r4, r7, r4, lsl #1
    934c:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
    9350:	f8de 5004 	ldr.w	r5, [lr, #4]
    9354:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    9358:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    935c:	78cc      	ldrb	r4, [r1, #3]
	if (last == user->first) {
    935e:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
    9360:	f104 0c01 	add.w	ip, r4, #1
    9364:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    9368:	4567      	cmp	r7, ip
    936a:	bf98      	it	ls
    936c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    9370:	4565      	cmp	r5, ip
    9372:	d01d      	beq.n	93b0 <ticker_stop_abs+0x7c>
	user_op = &user->user_op[user->last];
    9374:	684d      	ldr	r5, [r1, #4]
    9376:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    937a:	0127      	lsls	r7, r4, #4
    937c:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	user_op->op = TICKER_USER_OP_TYPE_STOP_ABS;
    9380:	f04f 0808 	mov.w	r8, #8
    9384:	f805 8007 	strb.w	r8, [r5, r7]
	user_op->params.yield.ticks_at_yield = ticks_at_stop;
    9388:	6063      	str	r3, [r4, #4]
	user_op->fp_op_func = fp_op_func;
    938a:	9b06      	ldr	r3, [sp, #24]
    938c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    938e:	9b07      	ldr	r3, [sp, #28]
    9390:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    9392:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    9394:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    9396:	70a3      	strb	r3, [r4, #2]
	user->last = last;
    9398:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    939c:	e9de 3508 	ldrd	r3, r5, [lr, #32]
    93a0:	4798      	blx	r3
    93a2:	4633      	mov	r3, r6
    93a4:	2200      	movs	r2, #0
    93a6:	2104      	movs	r1, #4
    93a8:	47a8      	blx	r5
	return user_op->status;
    93aa:	78a0      	ldrb	r0, [r4, #2]
}
    93ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    93b0:	2001      	movs	r0, #1
}
    93b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93b6:	bf00      	nop
    93b8:	2000148c 	.word	0x2000148c

000093bc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    93bc:	f00a bc3e 	b.w	13c3c <cntr_cnt_get>

000093c0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    93c0:	1a40      	subs	r0, r0, r1
}
    93c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93c6:	4770      	bx	lr

000093c8 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    93c8:	4801      	ldr	r0, [pc, #4]	; (93d0 <ll_feat_get+0x8>)
    93ca:	2100      	movs	r1, #0
    93cc:	4770      	bx	lr
    93ce:	bf00      	nop
    93d0:	0001413f 	.word	0x0001413f

000093d4 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    93d4:	2802      	cmp	r0, #2
    93d6:	d001      	beq.n	93dc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    93d8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    93da:	4770      	bx	lr
{
    93dc:	b538      	push	{r3, r4, r5, lr}
    93de:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    93e0:	4608      	mov	r0, r1
    93e2:	461d      	mov	r5, r3
    93e4:	f003 fb24 	bl	ca30 <ll_connected_get>
			if (!conn) {
    93e8:	b110      	cbz	r0, 93f0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    93ea:	2000      	movs	r0, #0
    93ec:	7028      	strb	r0, [r5, #0]
}
    93ee:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    93f0:	4620      	mov	r0, r4
}
    93f2:	bd38      	pop	{r3, r4, r5, pc}

000093f4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    93f4:	2300      	movs	r3, #0
    93f6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    93f8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    93fa:	4770      	bx	lr

000093fc <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    93fc:	b538      	push	{r3, r4, r5, lr}
    93fe:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    9400:	2000      	movs	r0, #0
{
    9402:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
    9404:	f003 f836 	bl	c474 <ull_adv_is_enabled>
    9408:	b9a8      	cbnz	r0, 9436 <ll_addr_set+0x3a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    940a:	b93d      	cbnz	r5, 941c <ll_addr_set+0x20>
		} else {
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
		}
	} else {
		if (bdaddr) {
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    940c:	480b      	ldr	r0, [pc, #44]	; (943c <ll_addr_set+0x40>)
    940e:	2206      	movs	r2, #6
    9410:	4621      	mov	r1, r4
		if (bdaddr) {
    9412:	b16c      	cbz	r4, 9430 <ll_addr_set+0x34>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    9414:	f010 fbee 	bl	19bf4 <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
    9418:	2000      	movs	r0, #0
}
    941a:	bd38      	pop	{r3, r4, r5, pc}
		if (bdaddr) {
    941c:	b12c      	cbz	r4, 942a <ll_addr_set+0x2e>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    941e:	2206      	movs	r2, #6
    9420:	4621      	mov	r1, r4
    9422:	4807      	ldr	r0, [pc, #28]	; (9440 <ll_addr_set+0x44>)
    9424:	f010 fbe6 	bl	19bf4 <memcpy>
    9428:	e7f6      	b.n	9418 <ll_addr_set+0x1c>
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
    942a:	4805      	ldr	r0, [pc, #20]	; (9440 <ll_addr_set+0x44>)
    942c:	2206      	movs	r2, #6
    942e:	4621      	mov	r1, r4
    9430:	f010 fbeb 	bl	19c0a <memset>
    9434:	e7f0      	b.n	9418 <ll_addr_set+0x1c>
			return BT_HCI_ERR_CMD_DISALLOWED;
    9436:	200c      	movs	r0, #12
}
    9438:	bd38      	pop	{r3, r4, r5, pc}
    943a:	bf00      	nop
    943c:	200014c0 	.word	0x200014c0
    9440:	200014b8 	.word	0x200014b8

00009444 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    9444:	2801      	cmp	r0, #1
{
    9446:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    9448:	d805      	bhi.n	9456 <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
    944a:	4a04      	ldr	r2, [pc, #16]	; (945c <ll_addr_get+0x18>)
    944c:	4804      	ldr	r0, [pc, #16]	; (9460 <ll_addr_get+0x1c>)
    944e:	2b00      	cmp	r3, #0
    9450:	bf08      	it	eq
    9452:	4610      	moveq	r0, r2
    9454:	4770      	bx	lr
		return NULL;
    9456:	2000      	movs	r0, #0
}
    9458:	4770      	bx	lr
    945a:	bf00      	nop
    945c:	200014c0 	.word	0x200014c0
    9460:	200014b8 	.word	0x200014b8

00009464 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    9464:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    9466:	b510      	push	{r4, lr}
    9468:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    946a:	d80b      	bhi.n	9484 <ll_addr_read+0x20>
	if (addr_type) {
    946c:	4608      	mov	r0, r1
		return rnd_addr;
    946e:	4c07      	ldr	r4, [pc, #28]	; (948c <ll_addr_read+0x28>)
    9470:	4907      	ldr	r1, [pc, #28]	; (9490 <ll_addr_read+0x2c>)
    9472:	2b00      	cmp	r3, #0
    9474:	bf18      	it	ne
    9476:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    9478:	2206      	movs	r2, #6
    947a:	4621      	mov	r1, r4
    947c:	f010 fbba 	bl	19bf4 <memcpy>
	}

	return addr;
}
    9480:	4620      	mov	r0, r4
    9482:	bd10      	pop	{r4, pc}
		return NULL;
    9484:	2400      	movs	r4, #0
}
    9486:	4620      	mov	r0, r4
    9488:	bd10      	pop	{r4, pc}
    948a:	bf00      	nop
    948c:	200014c0 	.word	0x200014c0
    9490:	200014b8 	.word	0x200014b8

00009494 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    9494:	b510      	push	{r4, lr}
    9496:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    9498:	f008 ffde 	bl	12458 <lll_reset>
	LL_ASSERT(!err);
    949c:	b950      	cbnz	r0, 94b4 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    949e:	f009 fbe9 	bl	12c74 <lll_adv_reset>
	LL_ASSERT(!err);
    94a2:	b9c0      	cbnz	r0, 94d6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    94a4:	f009 ff7c 	bl	133a0 <lll_conn_reset>
	LL_ASSERT(!err);
    94a8:	bb30      	cbnz	r0, 94f8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    94aa:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    94ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94b0:	f00e bcb2 	b.w	17e18 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    94b4:	4a19      	ldr	r2, [pc, #100]	; (951c <perform_lll_reset+0x88>)
    94b6:	491a      	ldr	r1, [pc, #104]	; (9520 <perform_lll_reset+0x8c>)
    94b8:	481a      	ldr	r0, [pc, #104]	; (9524 <perform_lll_reset+0x90>)
    94ba:	f640 03f9 	movw	r3, #2297	; 0x8f9
    94be:	f010 f8be 	bl	1963e <assert_print>
    94c2:	4040      	eors	r0, r0
    94c4:	f380 8811 	msr	BASEPRI, r0
    94c8:	f04f 0003 	mov.w	r0, #3
    94cc:	df02      	svc	2
	err = lll_adv_reset();
    94ce:	f009 fbd1 	bl	12c74 <lll_adv_reset>
	LL_ASSERT(!err);
    94d2:	2800      	cmp	r0, #0
    94d4:	d0e6      	beq.n	94a4 <perform_lll_reset+0x10>
    94d6:	4a11      	ldr	r2, [pc, #68]	; (951c <perform_lll_reset+0x88>)
    94d8:	4911      	ldr	r1, [pc, #68]	; (9520 <perform_lll_reset+0x8c>)
    94da:	4812      	ldr	r0, [pc, #72]	; (9524 <perform_lll_reset+0x90>)
    94dc:	f640 03fe 	movw	r3, #2302	; 0x8fe
    94e0:	f010 f8ad 	bl	1963e <assert_print>
    94e4:	4040      	eors	r0, r0
    94e6:	f380 8811 	msr	BASEPRI, r0
    94ea:	f04f 0003 	mov.w	r0, #3
    94ee:	df02      	svc	2
	err = lll_conn_reset();
    94f0:	f009 ff56 	bl	133a0 <lll_conn_reset>
	LL_ASSERT(!err);
    94f4:	2800      	cmp	r0, #0
    94f6:	d0d8      	beq.n	94aa <perform_lll_reset+0x16>
    94f8:	4a08      	ldr	r2, [pc, #32]	; (951c <perform_lll_reset+0x88>)
    94fa:	4909      	ldr	r1, [pc, #36]	; (9520 <perform_lll_reset+0x8c>)
    94fc:	4809      	ldr	r0, [pc, #36]	; (9524 <perform_lll_reset+0x90>)
    94fe:	f640 130a 	movw	r3, #2314	; 0x90a
    9502:	f010 f89c 	bl	1963e <assert_print>
    9506:	4040      	eors	r0, r0
    9508:	f380 8811 	msr	BASEPRI, r0
    950c:	f04f 0003 	mov.w	r0, #3
    9510:	df02      	svc	2
    9512:	4620      	mov	r0, r4
}
    9514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9518:	f00e bc7e 	b.w	17e18 <z_impl_k_sem_give>
    951c:	0001e1c4 	.word	0x0001e1c4
    9520:	0001e200 	.word	0x0001e200
    9524:	0001e1a4 	.word	0x0001e1a4

00009528 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    9528:	6008      	str	r0, [r1, #0]
    952a:	4801      	ldr	r0, [pc, #4]	; (9530 <ull_ticker_status_give+0x8>)
    952c:	f00e bc74 	b.w	17e18 <z_impl_k_sem_give>
    9530:	200017bc 	.word	0x200017bc

00009534 <disabled_cb>:
    9534:	f00e bc70 	b.w	17e18 <z_impl_k_sem_give>

00009538 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    9538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;
	uint8_t next;

	next = *first;
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    953c:	4d2a      	ldr	r5, [pc, #168]	; (95e8 <tx_cmplt_get+0xb0>)
	next = *first;
    953e:	780c      	ldrb	r4, [r1, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    9540:	78ab      	ldrb	r3, [r5, #2]
{
    9542:	468a      	mov	sl, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    9544:	7929      	ldrb	r1, [r5, #4]
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
		*idx = first;
    9546:	429c      	cmp	r4, r3
    9548:	bf28      	it	cs
    954a:	460c      	movcs	r4, r1
	}

	if (*idx == last) {
    954c:	42a2      	cmp	r2, r4
    954e:	7829      	ldrb	r1, [r5, #0]
    9550:	d042      	beq.n	95d8 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    9552:	fb14 f101 	smulbb	r1, r4, r1
    9556:	f105 0708 	add.w	r7, r5, #8
	i = *idx + 1;
    955a:	3401      	adds	r4, #1
    955c:	b2e4      	uxtb	r4, r4
		i = 0U;
    955e:	42a3      	cmp	r3, r4
    9560:	bf08      	it	eq
    9562:	2400      	moveq	r4, #0
	p = (void *)(fifo + (*idx) * size);
    9564:	187b      	adds	r3, r7, r1
				    &next);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    9566:	5a79      	ldrh	r1, [r7, r1]
    9568:	8001      	strh	r1, [r0, #0]
	cmplt = 0U;
    956a:	4693      	mov	fp, r2
    956c:	4681      	mov	r9, r0
    956e:	2600      	movs	r6, #0
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
			      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE)) ||
			    (!IS_NODE_TX_PTR(tx_node) &&
			     IS_NODE_TX_DATA(tx_node))) {
				/* data packet, hence count num cmplt */
				NODE_TX_DATA_SET(tx->node);
    9570:	f04f 0801 	mov.w	r8, #1
    9574:	e01c      	b.n	95b0 <tx_cmplt_get+0x78>
			    (!IS_NODE_TX_PTR(tx_node) &&
    9576:	2801      	cmp	r0, #1
    9578:	d02b      	beq.n	95d2 <tx_cmplt_get+0x9a>
    957a:	2212      	movs	r2, #18
    957c:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		*first = next;
    957e:	f88a 4000 	strb.w	r4, [sl]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    9582:	78a8      	ldrb	r0, [r5, #2]
    9584:	792b      	ldrb	r3, [r5, #4]
    9586:	7829      	ldrb	r1, [r5, #0]
	if (*idx >= count) {
    9588:	42a0      	cmp	r0, r4
    958a:	bf88      	it	hi
    958c:	4623      	movhi	r3, r4
	if (*idx == last) {
    958e:	459b      	cmp	fp, r3
    9590:	d023      	beq.n	95da <tx_cmplt_get+0xa2>
	p = (void *)(fifo + (*idx) * size);
    9592:	fb13 f101 	smulbb	r1, r3, r1
	i = *idx + 1;
    9596:	3301      	adds	r3, #1
    9598:	b2dc      	uxtb	r4, r3
		i = 0U;
    959a:	42a0      	cmp	r0, r4
    959c:	bf08      	it	eq
    959e:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, &next);
	} while (tx && tx->handle == *handle);
    95a0:	f837 c001 	ldrh.w	ip, [r7, r1]
    95a4:	f8b9 0000 	ldrh.w	r0, [r9]
    95a8:	4584      	cmp	ip, r0
	p = (void *)(fifo + (*idx) * size);
    95aa:	eb07 0301 	add.w	r3, r7, r1
    95ae:	d114      	bne.n	95da <tx_cmplt_get+0xa2>
			tx_node = tx->node;
    95b0:	6858      	ldr	r0, [r3, #4]
			if (!tx_node ||
    95b2:	b160      	cbz	r0, 95ce <tx_cmplt_get+0x96>
    95b4:	28ff      	cmp	r0, #255	; 0xff
    95b6:	d9de      	bls.n	9576 <tx_cmplt_get+0x3e>
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    95b8:	7901      	ldrb	r1, [r0, #4]
    95ba:	f001 0103 	and.w	r1, r1, #3
			    (IS_NODE_TX_PTR(tx_node) &&
    95be:	3901      	subs	r1, #1
    95c0:	2901      	cmp	r1, #1
    95c2:	d90d      	bls.n	95e0 <tx_cmplt_get+0xa8>
				NODE_TX_CTRL_SET(tx->node);
    95c4:	2112      	movs	r1, #18
    95c6:	6059      	str	r1, [r3, #4]
				ll_tx_mem_release(tx_node);
    95c8:	f003 fa4a 	bl	ca60 <ll_tx_mem_release>
    95cc:	e7d7      	b.n	957e <tx_cmplt_get+0x46>
				NODE_TX_DATA_SET(tx->node);
    95ce:	f8c3 8004 	str.w	r8, [r3, #4]
				cmplt++;
    95d2:	3601      	adds	r6, #1
    95d4:	b2f6      	uxtb	r6, r6
			if (IS_NODE_TX_PTR(tx_node)) {
    95d6:	e7d2      	b.n	957e <tx_cmplt_get+0x46>
		return 0;
    95d8:	2600      	movs	r6, #0

	return cmplt;
}
    95da:	4630      	mov	r0, r6
    95dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
    95e0:	3601      	adds	r6, #1
    95e2:	b2f6      	uxtb	r6, r6
				NODE_TX_DATA_SET(tx->node);
    95e4:	2101      	movs	r1, #1
				cmplt++;
    95e6:	e7ee      	b.n	95c6 <tx_cmplt_get+0x8e>
    95e8:	200002b4 	.word	0x200002b4

000095ec <rx_replenish>:
{
    95ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
    95f0:	4f3d      	ldr	r7, [pc, #244]	; (96e8 <rx_replenish+0xfc>)
    95f2:	883b      	ldrh	r3, [r7, #0]
    95f4:	4298      	cmp	r0, r3
    95f6:	d968      	bls.n	96ca <rx_replenish+0xde>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    95f8:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
    95fc:	d02c      	beq.n	9658 <rx_replenish+0x6c>
    95fe:	4d3b      	ldr	r5, [pc, #236]	; (96ec <rx_replenish+0x100>)
		link = mem_acquire(&mem_link_rx.free);
    9600:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 96f0 <rx_replenish+0x104>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9604:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    9606:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 96f4 <rx_replenish+0x108>
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    960a:	f105 0a08 	add.w	sl, r5, #8
	if (last == count) {
    960e:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9610:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
    9612:	3401      	adds	r4, #1
    9614:	b2e4      	uxtb	r4, r4
		last = 0U;
    9616:	42a2      	cmp	r2, r4
    9618:	bf08      	it	eq
    961a:	2400      	moveq	r4, #0
	if (last == first) {
    961c:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    961e:	4640      	mov	r0, r8
    9620:	d01c      	beq.n	965c <rx_replenish+0x70>
    9622:	f7fe fb01 	bl	7c28 <mem_acquire>
    9626:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    9628:	4648      	mov	r0, r9
		if (!link) {
    962a:	f1bb 0f00 	cmp.w	fp, #0
    962e:	d013      	beq.n	9658 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
    9630:	f7fe fafa 	bl	7c28 <mem_acquire>
		if (!rx) {
    9634:	2800      	cmp	r0, #0
    9636:	d04a      	beq.n	96ce <rx_replenish+0xe2>
		rx->link = link;
    9638:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    963c:	796b      	ldrb	r3, [r5, #5]
    963e:	782a      	ldrb	r2, [r5, #0]
    9640:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9644:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
    9648:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    964a:	716c      	strb	r4, [r5, #5]
		max--;
    964c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    964e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9650:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    9654:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9656:	d1da      	bne.n	960e <rx_replenish+0x22>
}
    9658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
    965c:	883b      	ldrh	r3, [r7, #0]
    965e:	2b00      	cmp	r3, #0
    9660:	d0fa      	beq.n	9658 <rx_replenish+0x6c>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9662:	f8df 9094 	ldr.w	r9, [pc, #148]	; 96f8 <rx_replenish+0x10c>
		link = mem_acquire(&mem_link_rx.free);
    9666:	4d22      	ldr	r5, [pc, #136]	; (96f0 <rx_replenish+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9668:	f899 4005 	ldrb.w	r4, [r9, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
    966c:	4e21      	ldr	r6, [pc, #132]	; (96f4 <rx_replenish+0x108>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    966e:	f109 0808 	add.w	r8, r9, #8
	if (last == count) {
    9672:	f899 2002 	ldrb.w	r2, [r9, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9676:	f899 3004 	ldrb.w	r3, [r9, #4]
	last = last + 1;
    967a:	3401      	adds	r4, #1
    967c:	b2e4      	uxtb	r4, r4
		last = 0U;
    967e:	42a2      	cmp	r2, r4
    9680:	bf08      	it	eq
    9682:	2400      	moveq	r4, #0
	if (last == first) {
    9684:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    9686:	4628      	mov	r0, r5
    9688:	d0e6      	beq.n	9658 <rx_replenish+0x6c>
    968a:	f7fe facd 	bl	7c28 <mem_acquire>
    968e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    9690:	4630      	mov	r0, r6
		if (!link) {
    9692:	f1ba 0f00 	cmp.w	sl, #0
    9696:	d0df      	beq.n	9658 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
    9698:	f7fe fac6 	bl	7c28 <mem_acquire>
		link->mem = NULL;
    969c:	2300      	movs	r3, #0
		if (!rx) {
    969e:	b1e0      	cbz	r0, 96da <rx_replenish+0xee>
		link->mem = NULL;
    96a0:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
    96a4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    96a8:	f899 3005 	ldrb.w	r3, [r9, #5]
    96ac:	f899 2000 	ldrb.w	r2, [r9]
    96b0:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    96b4:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
    96b8:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    96ba:	f889 4005 	strb.w	r4, [r9, #5]
    96be:	3b01      	subs	r3, #1
    96c0:	b29b      	uxth	r3, r3
    96c2:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    96c4:	2b00      	cmp	r3, #0
    96c6:	d1d4      	bne.n	9672 <rx_replenish+0x86>
    96c8:	e7c6      	b.n	9658 <rx_replenish+0x6c>
    96ca:	4606      	mov	r6, r0
    96cc:	e797      	b.n	95fe <rx_replenish+0x12>
	mem_release(link, &mem_link_rx.free);
    96ce:	4658      	mov	r0, fp
    96d0:	4907      	ldr	r1, [pc, #28]	; (96f0 <rx_replenish+0x104>)
}
    96d2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
    96d6:	f7fe bac3 	b.w	7c60 <mem_release>
    96da:	4650      	mov	r0, sl
    96dc:	4904      	ldr	r1, [pc, #16]	; (96f0 <rx_replenish+0x104>)
}
    96de:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
    96e2:	f7fe babd 	b.w	7c60 <mem_release>
    96e6:	bf00      	nop
    96e8:	20001510 	.word	0x20001510
    96ec:	200002f0 	.word	0x200002f0
    96f0:	20001514 	.word	0x20001514
    96f4:	20001568 	.word	0x20001568
    96f8:	200002dc 	.word	0x200002dc

000096fc <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    96fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9700:	4e3c      	ldr	r6, [pc, #240]	; (97f4 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    9702:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 97f8 <ull_done+0xfc>
    9706:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 97fc <ull_done+0x100>
{
    970a:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    970c:	e9d6 0100 	ldrd	r0, r1, [r6]
    9710:	aa01      	add	r2, sp, #4
    9712:	f7fe faf9 	bl	7d08 <memq_peek>
		if (link) {
    9716:	4604      	mov	r4, r0
    9718:	2800      	cmp	r0, #0
    971a:	d03e      	beq.n	979a <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    971c:	6870      	ldr	r0, [r6, #4]
    971e:	2200      	movs	r2, #0
    9720:	4631      	mov	r1, r6
    9722:	f7fe faf9 	bl	7d18 <memq_dequeue>
			rx_demux_event_done(link, done);
    9726:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    9728:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    972a:	b135      	cbz	r5, 973a <ull_done+0x3e>
    972c:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    972e:	2b00      	cmp	r3, #0
    9730:	d052      	beq.n	97d8 <ull_done+0xdc>
	return hdr->ref--;
    9732:	782b      	ldrb	r3, [r5, #0]
    9734:	3b01      	subs	r3, #1
    9736:	b2db      	uxtb	r3, r3
    9738:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    973a:	f897 3020 	ldrb.w	r3, [r7, #32]
    973e:	b123      	cbz	r3, 974a <ull_done+0x4e>
    9740:	2b01      	cmp	r3, #1
    9742:	d13b      	bne.n	97bc <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    9744:	4638      	mov	r0, r7
    9746:	f7f7 fed7 	bl	14f8 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    974a:	4a2d      	ldr	r2, [pc, #180]	; (9800 <ull_done+0x104>)
	last = last + 1;
    974c:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
    974e:	f892 c002 	ldrb.w	ip, [r2, #2]
    9752:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
    9754:	3301      	adds	r3, #1
	done->extra.type = 0U;
    9756:	2100      	movs	r1, #0
    9758:	b2db      	uxtb	r3, r3
		last = 0U;
    975a:	459c      	cmp	ip, r3
    975c:	bf08      	it	eq
    975e:	460b      	moveq	r3, r1
	if (last == first) {
    9760:	4298      	cmp	r0, r3
    9762:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
    9766:	7811      	ldrb	r1, [r2, #0]
    9768:	d01a      	beq.n	97a0 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    976a:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    976c:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    976e:	fb00 2101 	mla	r1, r0, r1, r2
    9772:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
    9774:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    9776:	2d00      	cmp	r5, #0
    9778:	d0c8      	beq.n	970c <ull_done+0x10>
	return hdr->ref;
    977a:	782b      	ldrb	r3, [r5, #0]
    977c:	2b00      	cmp	r3, #0
    977e:	d1c5      	bne.n	970c <ull_done+0x10>
    9780:	696b      	ldr	r3, [r5, #20]
    9782:	2b00      	cmp	r3, #0
    9784:	d0c2      	beq.n	970c <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    9786:	69a8      	ldr	r0, [r5, #24]
    9788:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    978a:	e9d6 0100 	ldrd	r0, r1, [r6]
    978e:	aa01      	add	r2, sp, #4
    9790:	f7fe faba 	bl	7d08 <memq_peek>
		if (link) {
    9794:	4604      	mov	r4, r0
    9796:	2800      	cmp	r0, #0
    9798:	d1c0      	bne.n	971c <ull_done+0x20>
}
    979a:	b003      	add	sp, #12
    979c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    97a0:	4918      	ldr	r1, [pc, #96]	; (9804 <ull_done+0x108>)
    97a2:	4819      	ldr	r0, [pc, #100]	; (9808 <ull_done+0x10c>)
    97a4:	f640 33d9 	movw	r3, #3033	; 0xbd9
    97a8:	4642      	mov	r2, r8
    97aa:	f00f ff48 	bl	1963e <assert_print>
    97ae:	4040      	eors	r0, r0
    97b0:	f380 8811 	msr	BASEPRI, r0
    97b4:	f04f 0003 	mov.w	r0, #3
    97b8:	df02      	svc	2
    97ba:	e7dc      	b.n	9776 <ull_done+0x7a>
		LL_ASSERT(0);
    97bc:	4913      	ldr	r1, [pc, #76]	; (980c <ull_done+0x110>)
    97be:	4812      	ldr	r0, [pc, #72]	; (9808 <ull_done+0x10c>)
    97c0:	f640 33d2 	movw	r3, #3026	; 0xbd2
    97c4:	4642      	mov	r2, r8
    97c6:	f00f ff3a 	bl	1963e <assert_print>
    97ca:	4040      	eors	r0, r0
    97cc:	f380 8811 	msr	BASEPRI, r0
    97d0:	f04f 0003 	mov.w	r0, #3
    97d4:	df02      	svc	2
		break;
    97d6:	e7b8      	b.n	974a <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    97d8:	480b      	ldr	r0, [pc, #44]	; (9808 <ull_done+0x10c>)
    97da:	f640 337b 	movw	r3, #2939	; 0xb7b
    97de:	4642      	mov	r2, r8
    97e0:	4649      	mov	r1, r9
    97e2:	f00f ff2c 	bl	1963e <assert_print>
    97e6:	4040      	eors	r0, r0
    97e8:	f380 8811 	msr	BASEPRI, r0
    97ec:	f04f 0003 	mov.w	r0, #3
    97f0:	df02      	svc	2
    97f2:	e79e      	b.n	9732 <ull_done+0x36>
    97f4:	200014f8 	.word	0x200014f8
    97f8:	0001e1c4 	.word	0x0001e1c4
    97fc:	0001e208 	.word	0x0001e208
    9800:	200003f4 	.word	0x200003f4
    9804:	0001e224 	.word	0x0001e224
    9808:	0001e1a4 	.word	0x0001e1a4
    980c:	0001e220 	.word	0x0001e220

00009810 <rx_demux>:
{
    9810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9814:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 99cc <rx_demux+0x1bc>
	k_sem_give(sem_recv);
    9818:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 99d0 <rx_demux+0x1c0>
			LL_ASSERT(rx);
    981c:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 99d4 <rx_demux+0x1c4>
    9820:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 99d8 <rx_demux+0x1c8>
{
    9824:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    9826:	e9d8 0100 	ldrd	r0, r1, [r8]
    982a:	aa03      	add	r2, sp, #12
    982c:	f7fe fa6c 	bl	7d08 <memq_peek>
		if (link) {
    9830:	4605      	mov	r5, r0
    9832:	2800      	cmp	r0, #0
    9834:	d035      	beq.n	98a2 <rx_demux+0x92>
			LL_ASSERT(rx);
    9836:	9b03      	ldr	r3, [sp, #12]
    9838:	2b00      	cmp	r3, #0
    983a:	f000 80a6 	beq.w	998a <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    983e:	7818      	ldrb	r0, [r3, #0]
    9840:	aa04      	add	r2, sp, #16
    9842:	a902      	add	r1, sp, #8
    9844:	f003 fd52 	bl	d2ec <ull_conn_ack_by_last_peek>
			if (link_tx) {
    9848:	4604      	mov	r4, r0
    984a:	2800      	cmp	r0, #0
    984c:	d055      	beq.n	98fa <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    984e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    9852:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    9856:	780f      	ldrb	r7, [r1, #0]
    9858:	f8ad 200a 	strh.w	r2, [sp, #10]
    985c:	ae05      	add	r6, sp, #20
    985e:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    9860:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    9864:	f003 fd5c 	bl	d320 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    9868:	4621      	mov	r1, r4
    986a:	9a05      	ldr	r2, [sp, #20]
    986c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    9870:	f003 fd9e 	bl	d3b0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    9874:	4620      	mov	r0, r4
    9876:	f003 fd11 	bl	d29c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    987a:	4632      	mov	r2, r6
    987c:	4629      	mov	r1, r5
    987e:	4638      	mov	r0, r7
    9880:	f003 fd34 	bl	d2ec <ull_conn_ack_by_last_peek>
	} while (link);
    9884:	4604      	mov	r4, r0
    9886:	2800      	cmp	r0, #0
    9888:	d1ec      	bne.n	9864 <rx_demux+0x54>
	k_sem_give(sem_recv);
    988a:	f8d9 0000 	ldr.w	r0, [r9]
    988e:	f00e fac3 	bl	17e18 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    9892:	e9d8 0100 	ldrd	r0, r1, [r8]
    9896:	aa03      	add	r2, sp, #12
    9898:	f7fe fa36 	bl	7d08 <memq_peek>
		if (link) {
    989c:	4605      	mov	r5, r0
    989e:	2800      	cmp	r0, #0
    98a0:	d1c9      	bne.n	9836 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    98a2:	aa04      	add	r2, sp, #16
    98a4:	a902      	add	r1, sp, #8
    98a6:	f10d 0007 	add.w	r0, sp, #7
    98aa:	f003 fd03 	bl	d2b4 <ull_conn_ack_peek>
			if (link) {
    98ae:	4604      	mov	r4, r0
    98b0:	2800      	cmp	r0, #0
    98b2:	d067      	beq.n	9984 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    98b4:	9b04      	ldr	r3, [sp, #16]
    98b6:	9305      	str	r3, [sp, #20]
    98b8:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    98bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    98c0:	f8ad 300a 	strh.w	r3, [sp, #10]
    98c4:	ae05      	add	r6, sp, #20
    98c6:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    98ca:	f003 fd29 	bl	d320 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    98ce:	4621      	mov	r1, r4
    98d0:	9a05      	ldr	r2, [sp, #20]
    98d2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    98d6:	f003 fd6b 	bl	d3b0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    98da:	4620      	mov	r0, r4
    98dc:	f003 fcde 	bl	d29c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    98e0:	4632      	mov	r2, r6
    98e2:	4629      	mov	r1, r5
    98e4:	4638      	mov	r0, r7
    98e6:	f003 fd01 	bl	d2ec <ull_conn_ack_by_last_peek>
	} while (link);
    98ea:	4604      	mov	r4, r0
    98ec:	2800      	cmp	r0, #0
    98ee:	d1ec      	bne.n	98ca <rx_demux+0xba>
	k_sem_give(sem_recv);
    98f0:	f8d9 0000 	ldr.w	r0, [r9]
    98f4:	f00e fa90 	bl	17e18 <z_impl_k_sem_give>
	} while (link);
    98f8:	e7cb      	b.n	9892 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    98fa:	9b03      	ldr	r3, [sp, #12]
    98fc:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    98fe:	791b      	ldrb	r3, [r3, #4]
    9900:	3b01      	subs	r3, #1
    9902:	2b17      	cmp	r3, #23
    9904:	d80d      	bhi.n	9922 <rx_demux+0x112>
    9906:	e8df f003 	tbb	[pc, r3]
    990a:	0c1a      	.short	0x0c1a
    990c:	0c0c0c38 	.word	0x0c0c0c38
    9910:	0c0c0c0c 	.word	0x0c0c0c0c
    9914:	0c0c0c0c 	.word	0x0c0c0c0c
    9918:	0c0c0c0c 	.word	0x0c0c0c0c
    991c:	0c0c0c0c 	.word	0x0c0c0c0c
    9920:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
    9922:	4a2c      	ldr	r2, [pc, #176]	; (99d4 <rx_demux+0x1c4>)
    9924:	492d      	ldr	r1, [pc, #180]	; (99dc <rx_demux+0x1cc>)
    9926:	482e      	ldr	r0, [pc, #184]	; (99e0 <rx_demux+0x1d0>)
    9928:	f640 3368 	movw	r3, #2920	; 0xb68
    992c:	f00f fe87 	bl	1963e <assert_print>
    9930:	4040      	eors	r0, r0
    9932:	f380 8811 	msr	BASEPRI, r0
    9936:	f04f 0003 	mov.w	r0, #3
    993a:	df02      	svc	2
			if (nack) {
    993c:	e773      	b.n	9826 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    993e:	4923      	ldr	r1, [pc, #140]	; (99cc <rx_demux+0x1bc>)
    9940:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9944:	2200      	movs	r2, #0
    9946:	f7fe f9e7 	bl	7d18 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    994a:	4b26      	ldr	r3, [pc, #152]	; (99e4 <rx_demux+0x1d4>)
		ll_rx_put_sched(link, rx);
    994c:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    994e:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9950:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9952:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9954:	4a24      	ldr	r2, [pc, #144]	; (99e8 <rx_demux+0x1d8>)
    9956:	f7fe f9cd 	bl	7cf4 <memq_enqueue>
	k_sem_give(sem_recv);
    995a:	4b1d      	ldr	r3, [pc, #116]	; (99d0 <rx_demux+0x1c0>)
    995c:	6818      	ldr	r0, [r3, #0]
    995e:	f00e fa5b 	bl	17e18 <z_impl_k_sem_give>
			if (nack) {
    9962:	e760      	b.n	9826 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9964:	4919      	ldr	r1, [pc, #100]	; (99cc <rx_demux+0x1bc>)
    9966:	f8d8 0004 	ldr.w	r0, [r8, #4]
    996a:	2200      	movs	r2, #0
    996c:	f7fe f9d4 	bl	7d18 <memq_dequeue>
		ull_conn_setup(link, rx);
    9970:	9905      	ldr	r1, [sp, #20]
    9972:	4628      	mov	r0, r5
    9974:	f003 fad8 	bl	cf28 <ull_conn_setup>
			if (nack) {
    9978:	e755      	b.n	9826 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    997a:	a905      	add	r1, sp, #20
    997c:	4628      	mov	r0, r5
    997e:	f003 fafb 	bl	cf78 <ull_conn_rx>
		if (nack) {
    9982:	b188      	cbz	r0, 99a8 <rx_demux+0x198>
}
    9984:	b007      	add	sp, #28
    9986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    998a:	4815      	ldr	r0, [pc, #84]	; (99e0 <rx_demux+0x1d0>)
    998c:	f640 13a7 	movw	r3, #2471	; 0x9a7
    9990:	465a      	mov	r2, fp
    9992:	4651      	mov	r1, sl
    9994:	f00f fe53 	bl	1963e <assert_print>
    9998:	4040      	eors	r0, r0
    999a:	f380 8811 	msr	BASEPRI, r0
    999e:	f04f 0003 	mov.w	r0, #3
    99a2:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    99a4:	9b03      	ldr	r3, [sp, #12]
    99a6:	e74a      	b.n	983e <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    99a8:	4908      	ldr	r1, [pc, #32]	; (99cc <rx_demux+0x1bc>)
    99aa:	4602      	mov	r2, r0
    99ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
    99b0:	f7fe f9b2 	bl	7d18 <memq_dequeue>
		if (rx && rx->type != NODE_RX_TYPE_RETAIN) {
    99b4:	9905      	ldr	r1, [sp, #20]
    99b6:	2900      	cmp	r1, #0
    99b8:	f43f af35 	beq.w	9826 <rx_demux+0x16>
    99bc:	790b      	ldrb	r3, [r1, #4]
    99be:	2b2c      	cmp	r3, #44	; 0x2c
    99c0:	f43f af31 	beq.w	9826 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    99c4:	4b07      	ldr	r3, [pc, #28]	; (99e4 <rx_demux+0x1d4>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    99c6:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    99c8:	795b      	ldrb	r3, [r3, #5]
    99ca:	e7c2      	b.n	9952 <rx_demux+0x142>
    99cc:	20001508 	.word	0x20001508
    99d0:	200017b8 	.word	0x200017b8
    99d4:	0001e1c4 	.word	0x0001e1c4
    99d8:	0001e234 	.word	0x0001e234
    99dc:	0001e220 	.word	0x0001e220
    99e0:	0001e1a4 	.word	0x0001e1a4
    99e4:	200002b4 	.word	0x200002b4
    99e8:	20001504 	.word	0x20001504

000099ec <ll_rx_get>:
{
    99ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    99f0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 9ac0 <ll_rx_get+0xd4>
    99f4:	4f33      	ldr	r7, [pc, #204]	; (9ac4 <ll_rx_get+0xd8>)
{
    99f6:	b082      	sub	sp, #8
    99f8:	4680      	mov	r8, r0
    99fa:	4689      	mov	r9, r1
			f = mfifo_tx_ack.f;
    99fc:	f1aa 0504 	sub.w	r5, sl, #4
	*node_rx = NULL;
    9a00:	2300      	movs	r3, #0
    9a02:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    9a06:	e9d7 0100 	ldrd	r0, r1, [r7]
    9a0a:	aa01      	add	r2, sp, #4
    9a0c:	f7fe f97c 	bl	7d08 <memq_peek>
	if (link) {
    9a10:	4606      	mov	r6, r0
    9a12:	2800      	cmp	r0, #0
    9a14:	d042      	beq.n	9a9c <ll_rx_get+0xb0>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    9a16:	9b01      	ldr	r3, [sp, #4]
    9a18:	4651      	mov	r1, sl
    9a1a:	781a      	ldrb	r2, [r3, #0]
    9a1c:	4648      	mov	r0, r9
    9a1e:	f7ff fd8b 	bl	9538 <tx_cmplt_get>
		if (!cmplt) {
    9a22:	4603      	mov	r3, r0
    9a24:	2800      	cmp	r0, #0
    9a26:	d140      	bne.n	9aaa <ll_rx_get+0xbe>
			f = mfifo_tx_ack.f;
    9a28:	792a      	ldrb	r2, [r5, #4]
    9a2a:	f88d 2001 	strb.w	r2, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
    9a2e:	796a      	ldrb	r2, [r5, #5]
    9a30:	f10d 0101 	add.w	r1, sp, #1
    9a34:	f10d 0002 	add.w	r0, sp, #2
    9a38:	461c      	mov	r4, r3
    9a3a:	f7ff fd7d 	bl	9538 <tx_cmplt_get>
    9a3e:	ea44 0200 	orr.w	r2, r4, r0
			} while ((cmplt_prev != 0U) ||
    9a42:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    9a46:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    9a48:	d1f1      	bne.n	9a2e <ll_rx_get+0x42>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    9a4a:	9b01      	ldr	r3, [sp, #4]
    9a4c:	7919      	ldrb	r1, [r3, #4]
    9a4e:	2901      	cmp	r1, #1
    9a50:	d12f      	bne.n	9ab2 <ll_rx_get+0xc6>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9a52:	4c1d      	ldr	r4, [pc, #116]	; (9ac8 <ll_rx_get+0xdc>)
	(void)memq_dequeue(memq_ll_rx.tail,
    9a54:	6878      	ldr	r0, [r7, #4]
    9a56:	4639      	mov	r1, r7
    9a58:	f7fe f95e 	bl	7d18 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
    9a5c:	1d21      	adds	r1, r4, #4
    9a5e:	4630      	mov	r0, r6
    9a60:	f7fe f8fe 	bl	7c60 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9a64:	8823      	ldrh	r3, [r4, #0]
    9a66:	2b05      	cmp	r3, #5
    9a68:	d809      	bhi.n	9a7e <ll_rx_get+0x92>
	mem_release(node_rx, &mem_pdu_rx.free);
    9a6a:	9801      	ldr	r0, [sp, #4]
    9a6c:	4917      	ldr	r1, [pc, #92]	; (9acc <ll_rx_get+0xe0>)
	mem_link_rx.quota_pdu += delta;
    9a6e:	3301      	adds	r3, #1
    9a70:	8023      	strh	r3, [r4, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
    9a72:	f7fe f8f5 	bl	7c60 <mem_release>
	rx_replenish(1U);
    9a76:	2001      	movs	r0, #1
    9a78:	f7ff fdb8 	bl	95ec <rx_replenish>
				goto ll_rx_get_again;
    9a7c:	e7c0      	b.n	9a00 <ll_rx_get+0x14>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9a7e:	4a14      	ldr	r2, [pc, #80]	; (9ad0 <ll_rx_get+0xe4>)
    9a80:	4914      	ldr	r1, [pc, #80]	; (9ad4 <ll_rx_get+0xe8>)
    9a82:	4815      	ldr	r0, [pc, #84]	; (9ad8 <ll_rx_get+0xec>)
    9a84:	f240 6387 	movw	r3, #1671	; 0x687
    9a88:	f00f fdd9 	bl	1963e <assert_print>
    9a8c:	4040      	eors	r0, r0
    9a8e:	f380 8811 	msr	BASEPRI, r0
    9a92:	f04f 0003 	mov.w	r0, #3
    9a96:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    9a98:	8823      	ldrh	r3, [r4, #0]
    9a9a:	e7e6      	b.n	9a6a <ll_rx_get+0x7e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    9a9c:	490f      	ldr	r1, [pc, #60]	; (9adc <ll_rx_get+0xf0>)
    9a9e:	4648      	mov	r0, r9
    9aa0:	794a      	ldrb	r2, [r1, #5]
    9aa2:	3104      	adds	r1, #4
    9aa4:	f7ff fd48 	bl	9538 <tx_cmplt_get>
    9aa8:	4603      	mov	r3, r0
}
    9aaa:	4618      	mov	r0, r3
    9aac:	b002      	add	sp, #8
    9aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*node_rx = rx;
    9ab2:	f8c8 3000 	str.w	r3, [r8]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    9ab6:	4613      	mov	r3, r2
}
    9ab8:	4618      	mov	r0, r3
    9aba:	b002      	add	sp, #8
    9abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ac0:	200002b8 	.word	0x200002b8
    9ac4:	20001500 	.word	0x20001500
    9ac8:	20001510 	.word	0x20001510
    9acc:	20001568 	.word	0x20001568
    9ad0:	0001e1c4 	.word	0x0001e1c4
    9ad4:	0001e238 	.word	0x0001e238
    9ad8:	0001e1a4 	.word	0x0001e1a4
    9adc:	200002b4 	.word	0x200002b4

00009ae0 <ll_rx_dequeue>:
{
    9ae0:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9ae2:	495a      	ldr	r1, [pc, #360]	; (9c4c <ll_rx_dequeue+0x16c>)
{
    9ae4:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    9ae6:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9ae8:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    9aea:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9aec:	aa01      	add	r2, sp, #4
    9aee:	f7fe f913 	bl	7d18 <memq_dequeue>
	LL_ASSERT(link);
    9af2:	4604      	mov	r4, r0
    9af4:	2800      	cmp	r0, #0
    9af6:	d05c      	beq.n	9bb2 <ll_rx_dequeue+0xd2>
	mem_release(link, &mem_link_rx.free);
    9af8:	4955      	ldr	r1, [pc, #340]	; (9c50 <ll_rx_dequeue+0x170>)
    9afa:	4620      	mov	r0, r4
    9afc:	f7fe f8b0 	bl	7c60 <mem_release>
	switch (rx->type) {
    9b00:	9a01      	ldr	r2, [sp, #4]
    9b02:	7913      	ldrb	r3, [r2, #4]
    9b04:	2b1d      	cmp	r3, #29
    9b06:	d810      	bhi.n	9b2a <ll_rx_dequeue+0x4a>
    9b08:	e8df f003 	tbb	[pc, r3]
    9b0c:	1e0f0f1e 	.word	0x1e0f0f1e
    9b10:	0f0f0f0f 	.word	0x0f0f0f0f
    9b14:	0f0f0f0f 	.word	0x0f0f0f0f
    9b18:	0f0f0f0f 	.word	0x0f0f0f0f
    9b1c:	0f0f0f0f 	.word	0x0f0f0f0f
    9b20:	2f0f0f0f 	.word	0x2f0f0f0f
    9b24:	1e1e1e1e 	.word	0x1e1e1e1e
    9b28:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
    9b2a:	4a4a      	ldr	r2, [pc, #296]	; (9c54 <ll_rx_dequeue+0x174>)
    9b2c:	494a      	ldr	r1, [pc, #296]	; (9c58 <ll_rx_dequeue+0x178>)
    9b2e:	484b      	ldr	r0, [pc, #300]	; (9c5c <ll_rx_dequeue+0x17c>)
    9b30:	f240 533f 	movw	r3, #1343	; 0x53f
    9b34:	f00f fd83 	bl	1963e <assert_print>
    9b38:	4040      	eors	r0, r0
    9b3a:	f380 8811 	msr	BASEPRI, r0
    9b3e:	f04f 0003 	mov.w	r0, #3
    9b42:	df02      	svc	2
}
    9b44:	b002      	add	sp, #8
    9b46:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    9b48:	2b00      	cmp	r3, #0
    9b4a:	d1fb      	bne.n	9b44 <ll_rx_dequeue+0x64>
    9b4c:	4a41      	ldr	r2, [pc, #260]	; (9c54 <ll_rx_dequeue+0x174>)
    9b4e:	4944      	ldr	r1, [pc, #272]	; (9c60 <ll_rx_dequeue+0x180>)
    9b50:	4842      	ldr	r0, [pc, #264]	; (9c5c <ll_rx_dequeue+0x17c>)
    9b52:	f240 533b 	movw	r3, #1339	; 0x53b
    9b56:	f00f fd72 	bl	1963e <assert_print>
    9b5a:	4040      	eors	r0, r0
    9b5c:	f380 8811 	msr	BASEPRI, r0
    9b60:	f04f 0003 	mov.w	r0, #3
    9b64:	df02      	svc	2
}
    9b66:	b002      	add	sp, #8
    9b68:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    9b6a:	7f13      	ldrb	r3, [r2, #28]
    9b6c:	2b3c      	cmp	r3, #60	; 0x3c
    9b6e:	d02e      	beq.n	9bce <ll_rx_dequeue+0xee>
    9b70:	7f53      	ldrb	r3, [r2, #29]
    9b72:	b183      	cbz	r3, 9b96 <ll_rx_dequeue+0xb6>
			adv = HDR_LLL2ULL(lll);
    9b74:	6893      	ldr	r3, [r2, #8]
    9b76:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    9b78:	6e60      	ldr	r0, [r4, #100]	; 0x64
    9b7a:	b120      	cbz	r0, 9b86 <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
    9b7c:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
    9b7e:	4939      	ldr	r1, [pc, #228]	; (9c64 <ll_rx_dequeue+0x184>)
					adv->node_rx_cc_free = NULL;
    9b80:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
    9b82:	f7fe f86d 	bl	7c60 <mem_release>
			adv->is_enabled = 0U;
    9b86:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    9b8a:	f36f 0300 	bfc	r3, #0, #1
    9b8e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    9b92:	b002      	add	sp, #8
    9b94:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    9b96:	4a2f      	ldr	r2, [pc, #188]	; (9c54 <ll_rx_dequeue+0x174>)
    9b98:	492f      	ldr	r1, [pc, #188]	; (9c58 <ll_rx_dequeue+0x178>)
    9b9a:	4830      	ldr	r0, [pc, #192]	; (9c5c <ll_rx_dequeue+0x17c>)
    9b9c:	f240 43c4 	movw	r3, #1220	; 0x4c4
    9ba0:	f00f fd4d 	bl	1963e <assert_print>
    9ba4:	4040      	eors	r0, r0
    9ba6:	f380 8811 	msr	BASEPRI, r0
    9baa:	f04f 0003 	mov.w	r0, #3
    9bae:	df02      	svc	2
    9bb0:	e7c8      	b.n	9b44 <ll_rx_dequeue+0x64>
	LL_ASSERT(link);
    9bb2:	4a28      	ldr	r2, [pc, #160]	; (9c54 <ll_rx_dequeue+0x174>)
    9bb4:	492c      	ldr	r1, [pc, #176]	; (9c68 <ll_rx_dequeue+0x188>)
    9bb6:	4829      	ldr	r0, [pc, #164]	; (9c5c <ll_rx_dequeue+0x17c>)
    9bb8:	f240 4307 	movw	r3, #1031	; 0x407
    9bbc:	f00f fd3f 	bl	1963e <assert_print>
    9bc0:	4040      	eors	r0, r0
    9bc2:	f380 8811 	msr	BASEPRI, r0
    9bc6:	f04f 0003 	mov.w	r0, #3
    9bca:	df02      	svc	2
    9bcc:	e794      	b.n	9af8 <ll_rx_dequeue+0x18>
			lll = ftr->param;
    9bce:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    9bd0:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    9bd4:	b1ed      	cbz	r5, 9c12 <ll_rx_dequeue+0x132>
				lll->conn = NULL;
    9bd6:	2300      	movs	r3, #0
    9bd8:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    9bda:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    9bdc:	b163      	cbz	r3, 9bf8 <ll_rx_dequeue+0x118>
    9bde:	4a1d      	ldr	r2, [pc, #116]	; (9c54 <ll_rx_dequeue+0x174>)
    9be0:	4922      	ldr	r1, [pc, #136]	; (9c6c <ll_rx_dequeue+0x18c>)
    9be2:	481e      	ldr	r0, [pc, #120]	; (9c5c <ll_rx_dequeue+0x17c>)
    9be4:	f44f 6390 	mov.w	r3, #1152	; 0x480
    9be8:	f00f fd29 	bl	1963e <assert_print>
    9bec:	4040      	eors	r0, r0
    9bee:	f380 8811 	msr	BASEPRI, r0
    9bf2:	f04f 0003 	mov.w	r0, #3
    9bf6:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    9bf8:	f105 0160 	add.w	r1, r5, #96	; 0x60
    9bfc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    9c00:	f7fe f86e 	bl	7ce0 <memq_deinit>
				LL_ASSERT(link);
    9c04:	4606      	mov	r6, r0
    9c06:	b190      	cbz	r0, 9c2e <ll_rx_dequeue+0x14e>
				ll_conn_release(conn);
    9c08:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    9c0a:	66ee      	str	r6, [r5, #108]	; 0x6c
				ll_conn_release(conn);
    9c0c:	f002 fefa 	bl	ca04 <ll_conn_release>
    9c10:	e7b9      	b.n	9b86 <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
    9c12:	4a10      	ldr	r2, [pc, #64]	; (9c54 <ll_rx_dequeue+0x174>)
    9c14:	4916      	ldr	r1, [pc, #88]	; (9c70 <ll_rx_dequeue+0x190>)
    9c16:	4811      	ldr	r0, [pc, #68]	; (9c5c <ll_rx_dequeue+0x17c>)
    9c18:	f240 437d 	movw	r3, #1149	; 0x47d
    9c1c:	f00f fd0f 	bl	1963e <assert_print>
    9c20:	4040      	eors	r0, r0
    9c22:	f380 8811 	msr	BASEPRI, r0
    9c26:	f04f 0003 	mov.w	r0, #3
    9c2a:	df02      	svc	2
    9c2c:	e7d3      	b.n	9bd6 <ll_rx_dequeue+0xf6>
				LL_ASSERT(link);
    9c2e:	4a09      	ldr	r2, [pc, #36]	; (9c54 <ll_rx_dequeue+0x174>)
    9c30:	490d      	ldr	r1, [pc, #52]	; (9c68 <ll_rx_dequeue+0x188>)
    9c32:	480a      	ldr	r0, [pc, #40]	; (9c5c <ll_rx_dequeue+0x17c>)
    9c34:	f240 4383 	movw	r3, #1155	; 0x483
    9c38:	f00f fd01 	bl	1963e <assert_print>
    9c3c:	4040      	eors	r0, r0
    9c3e:	f380 8811 	msr	BASEPRI, r0
    9c42:	f04f 0003 	mov.w	r0, #3
    9c46:	df02      	svc	2
    9c48:	e7de      	b.n	9c08 <ll_rx_dequeue+0x128>
    9c4a:	bf00      	nop
    9c4c:	20001500 	.word	0x20001500
    9c50:	20001514 	.word	0x20001514
    9c54:	0001e1c4 	.word	0x0001e1c4
    9c58:	0001e220 	.word	0x0001e220
    9c5c:	0001e1a4 	.word	0x0001e1a4
    9c60:	0001e29c 	.word	0x0001e29c
    9c64:	20001568 	.word	0x20001568
    9c68:	0001e6c8 	.word	0x0001e6c8
    9c6c:	0001e284 	.word	0x0001e284
    9c70:	0001e278 	.word	0x0001e278

00009c74 <ll_rx_mem_release>:
{
    9c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    9c78:	6804      	ldr	r4, [r0, #0]
{
    9c7a:	4680      	mov	r8, r0
	while (rx) {
    9c7c:	b344      	cbz	r4, 9cd0 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    9c7e:	4f57      	ldr	r7, [pc, #348]	; (9ddc <ll_rx_mem_release+0x168>)
    9c80:	f8df 915c 	ldr.w	r9, [pc, #348]	; 9de0 <ll_rx_mem_release+0x16c>
    9c84:	4e57      	ldr	r6, [pc, #348]	; (9de4 <ll_rx_mem_release+0x170>)
		rx = rx->next;
    9c86:	4625      	mov	r5, r4
    9c88:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    9c8a:	792b      	ldrb	r3, [r5, #4]
    9c8c:	2b1d      	cmp	r3, #29
    9c8e:	d810      	bhi.n	9cb2 <ll_rx_mem_release+0x3e>
    9c90:	e8df f003 	tbb	[pc, r3]
    9c94:	380f0f38 	.word	0x380f0f38
    9c98:	0f0f0f0f 	.word	0x0f0f0f0f
    9c9c:	0f0f0f0f 	.word	0x0f0f0f0f
    9ca0:	0f0f0f0f 	.word	0x0f0f0f0f
    9ca4:	0f0f0f0f 	.word	0x0f0f0f0f
    9ca8:	260f0f0f 	.word	0x260f0f0f
    9cac:	38383856 	.word	0x38383856
    9cb0:	3838      	.short	0x3838
			LL_ASSERT(0);
    9cb2:	f240 637b 	movw	r3, #1659	; 0x67b
    9cb6:	463a      	mov	r2, r7
    9cb8:	4649      	mov	r1, r9
    9cba:	4630      	mov	r0, r6
    9cbc:	f00f fcbf 	bl	1963e <assert_print>
    9cc0:	4040      	eors	r0, r0
    9cc2:	f380 8811 	msr	BASEPRI, r0
    9cc6:	f04f 0003 	mov.w	r0, #3
    9cca:	df02      	svc	2
	while (rx) {
    9ccc:	2c00      	cmp	r4, #0
    9cce:	d1da      	bne.n	9c86 <ll_rx_mem_release+0x12>
	*node_rx = rx;
    9cd0:	2300      	movs	r3, #0
    9cd2:	f8c8 3000 	str.w	r3, [r8]
}
    9cd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
    9cda:	20ff      	movs	r0, #255	; 0xff
    9cdc:	f7ff bc86 	b.w	95ec <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    9ce0:	7f2b      	ldrb	r3, [r5, #28]
    9ce2:	2b3c      	cmp	r3, #60	; 0x3c
    9ce4:	d063      	beq.n	9dae <ll_rx_mem_release+0x13a>
				LL_ASSERT(!cc->status);
    9ce6:	b1db      	cbz	r3, 9d20 <ll_rx_mem_release+0xac>
    9ce8:	4a3c      	ldr	r2, [pc, #240]	; (9ddc <ll_rx_mem_release+0x168>)
    9cea:	493f      	ldr	r1, [pc, #252]	; (9de8 <ll_rx_mem_release+0x174>)
    9cec:	483d      	ldr	r0, [pc, #244]	; (9de4 <ll_rx_mem_release+0x170>)
    9cee:	f240 53a3 	movw	r3, #1443	; 0x5a3
    9cf2:	f00f fca4 	bl	1963e <assert_print>
    9cf6:	4040      	eors	r0, r0
    9cf8:	f380 8811 	msr	BASEPRI, r0
    9cfc:	f04f 0003 	mov.w	r0, #3
    9d00:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    9d02:	792b      	ldrb	r3, [r5, #4]
    9d04:	b963      	cbnz	r3, 9d20 <ll_rx_mem_release+0xac>
    9d06:	4939      	ldr	r1, [pc, #228]	; (9dec <ll_rx_mem_release+0x178>)
    9d08:	f240 53f9 	movw	r3, #1529	; 0x5f9
    9d0c:	463a      	mov	r2, r7
    9d0e:	4630      	mov	r0, r6
    9d10:	f00f fc95 	bl	1963e <assert_print>
    9d14:	4040      	eors	r0, r0
    9d16:	f380 8811 	msr	BASEPRI, r0
    9d1a:	f04f 0003 	mov.w	r0, #3
    9d1e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9d20:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 9df0 <ll_rx_mem_release+0x17c>
    9d24:	f8ba 3000 	ldrh.w	r3, [sl]
    9d28:	2b05      	cmp	r3, #5
    9d2a:	d830      	bhi.n	9d8e <ll_rx_mem_release+0x11a>
	mem_link_rx.quota_pdu += delta;
    9d2c:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
    9d2e:	4931      	ldr	r1, [pc, #196]	; (9df4 <ll_rx_mem_release+0x180>)
	mem_link_rx.quota_pdu += delta;
    9d30:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
    9d34:	4628      	mov	r0, r5
    9d36:	f7fd ff93 	bl	7c60 <mem_release>
	while (rx) {
    9d3a:	2c00      	cmp	r4, #0
    9d3c:	d1a3      	bne.n	9c86 <ll_rx_mem_release+0x12>
    9d3e:	e7c7      	b.n	9cd0 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    9d40:	88e8      	ldrh	r0, [r5, #6]
    9d42:	2800      	cmp	r0, #0
    9d44:	d1c2      	bne.n	9ccc <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    9d46:	f002 fe6b 	bl	ca20 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    9d4a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
				conn = ll_conn_get(rx_free->handle);
    9d4e:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    9d50:	b163      	cbz	r3, 9d6c <ll_rx_mem_release+0xf8>
    9d52:	4a22      	ldr	r2, [pc, #136]	; (9ddc <ll_rx_mem_release+0x168>)
    9d54:	4928      	ldr	r1, [pc, #160]	; (9df8 <ll_rx_mem_release+0x184>)
    9d56:	4823      	ldr	r0, [pc, #140]	; (9de4 <ll_rx_mem_release+0x170>)
    9d58:	f240 636a 	movw	r3, #1642	; 0x66a
    9d5c:	f00f fc6f 	bl	1963e <assert_print>
    9d60:	4040      	eors	r0, r0
    9d62:	f380 8811 	msr	BASEPRI, r0
    9d66:	f04f 0003 	mov.w	r0, #3
    9d6a:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    9d6c:	f105 017c 	add.w	r1, r5, #124	; 0x7c
    9d70:	f105 0078 	add.w	r0, r5, #120	; 0x78
    9d74:	f7fd ffb4 	bl	7ce0 <memq_deinit>
				LL_ASSERT(link);
    9d78:	4682      	mov	sl, r0
    9d7a:	b300      	cbz	r0, 9dbe <ll_rx_mem_release+0x14a>
				conn->lll.link_tx_free = link;
    9d7c:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
				ll_conn_release(conn);
    9d80:	4628      	mov	r0, r5
    9d82:	f002 fe3f 	bl	ca04 <ll_conn_release>
	while (rx) {
    9d86:	2c00      	cmp	r4, #0
    9d88:	f47f af7d 	bne.w	9c86 <ll_rx_mem_release+0x12>
    9d8c:	e7a0      	b.n	9cd0 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9d8e:	491b      	ldr	r1, [pc, #108]	; (9dfc <ll_rx_mem_release+0x188>)
    9d90:	f240 6387 	movw	r3, #1671	; 0x687
    9d94:	463a      	mov	r2, r7
    9d96:	4630      	mov	r0, r6
    9d98:	f00f fc51 	bl	1963e <assert_print>
    9d9c:	4040      	eors	r0, r0
    9d9e:	f380 8811 	msr	BASEPRI, r0
    9da2:	f04f 0003 	mov.w	r0, #3
    9da6:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    9da8:	f8ba 3000 	ldrh.w	r3, [sl]
    9dac:	e7be      	b.n	9d2c <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
    9dae:	4911      	ldr	r1, [pc, #68]	; (9df4 <ll_rx_mem_release+0x180>)
    9db0:	4628      	mov	r0, r5
    9db2:	f7fd ff55 	bl	7c60 <mem_release>
	while (rx) {
    9db6:	2c00      	cmp	r4, #0
    9db8:	f47f af65 	bne.w	9c86 <ll_rx_mem_release+0x12>
    9dbc:	e788      	b.n	9cd0 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    9dbe:	4a07      	ldr	r2, [pc, #28]	; (9ddc <ll_rx_mem_release+0x168>)
    9dc0:	490f      	ldr	r1, [pc, #60]	; (9e00 <ll_rx_mem_release+0x18c>)
    9dc2:	4808      	ldr	r0, [pc, #32]	; (9de4 <ll_rx_mem_release+0x170>)
    9dc4:	f240 636d 	movw	r3, #1645	; 0x66d
    9dc8:	f00f fc39 	bl	1963e <assert_print>
    9dcc:	4040      	eors	r0, r0
    9dce:	f380 8811 	msr	BASEPRI, r0
    9dd2:	f04f 0003 	mov.w	r0, #3
    9dd6:	df02      	svc	2
    9dd8:	e7d0      	b.n	9d7c <ll_rx_mem_release+0x108>
    9dda:	bf00      	nop
    9ddc:	0001e1c4 	.word	0x0001e1c4
    9de0:	0001e220 	.word	0x0001e220
    9de4:	0001e1a4 	.word	0x0001e1a4
    9de8:	0001e2bc 	.word	0x0001e2bc
    9dec:	0001e2c8 	.word	0x0001e2c8
    9df0:	20001510 	.word	0x20001510
    9df4:	20001568 	.word	0x20001568
    9df8:	0001e2ec 	.word	0x0001e2ec
    9dfc:	0001e238 	.word	0x0001e238
    9e00:	0001e6c8 	.word	0x0001e6c8

00009e04 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    9e04:	4801      	ldr	r0, [pc, #4]	; (9e0c <ll_rx_link_alloc+0x8>)
    9e06:	f7fd bf0f 	b.w	7c28 <mem_acquire>
    9e0a:	bf00      	nop
    9e0c:	20001514 	.word	0x20001514

00009e10 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    9e10:	4901      	ldr	r1, [pc, #4]	; (9e18 <ll_rx_link_release+0x8>)
    9e12:	f7fd bf25 	b.w	7c60 <mem_release>
    9e16:	bf00      	nop
    9e18:	20001514 	.word	0x20001514

00009e1c <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    9e1c:	4801      	ldr	r0, [pc, #4]	; (9e24 <ll_rx_alloc+0x8>)
    9e1e:	f7fd bf03 	b.w	7c28 <mem_acquire>
    9e22:	bf00      	nop
    9e24:	20001568 	.word	0x20001568

00009e28 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    9e28:	4901      	ldr	r1, [pc, #4]	; (9e30 <ll_rx_release+0x8>)
    9e2a:	f7fd bf19 	b.w	7c60 <mem_release>
    9e2e:	bf00      	nop
    9e30:	20001568 	.word	0x20001568

00009e34 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9e34:	4b02      	ldr	r3, [pc, #8]	; (9e40 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9e36:	4a03      	ldr	r2, [pc, #12]	; (9e44 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9e38:	795b      	ldrb	r3, [r3, #5]
    9e3a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9e3c:	f7fd bf5a 	b.w	7cf4 <memq_enqueue>
    9e40:	200002b4 	.word	0x200002b4
    9e44:	20001504 	.word	0x20001504

00009e48 <ll_rx_put_sched>:
{
    9e48:	b508      	push	{r3, lr}
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9e4a:	4b06      	ldr	r3, [pc, #24]	; (9e64 <ll_rx_put_sched+0x1c>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9e4c:	4a06      	ldr	r2, [pc, #24]	; (9e68 <ll_rx_put_sched+0x20>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9e4e:	795b      	ldrb	r3, [r3, #5]
    9e50:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9e52:	f7fd ff4f 	bl	7cf4 <memq_enqueue>
	k_sem_give(sem_recv);
    9e56:	4b05      	ldr	r3, [pc, #20]	; (9e6c <ll_rx_put_sched+0x24>)
    9e58:	6818      	ldr	r0, [r3, #0]
}
    9e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9e5e:	f00d bfdb 	b.w	17e18 <z_impl_k_sem_give>
    9e62:	bf00      	nop
    9e64:	200002b4 	.word	0x200002b4
    9e68:	20001504 	.word	0x20001504
    9e6c:	200017b8 	.word	0x200017b8

00009e70 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    9e70:	490e      	ldr	r1, [pc, #56]	; (9eac <ll_pdu_rx_alloc_peek+0x3c>)
    9e72:	790b      	ldrb	r3, [r1, #4]
    9e74:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
    9e76:	4293      	cmp	r3, r2
    9e78:	d80d      	bhi.n	9e96 <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
    9e7a:	eba2 0c03 	sub.w	ip, r2, r3
    9e7e:	fa5f fc8c 	uxtb.w	ip, ip
    9e82:	4560      	cmp	r0, ip
    9e84:	d80f      	bhi.n	9ea6 <ll_pdu_rx_alloc_peek+0x36>
	if (first == last) {
    9e86:	4293      	cmp	r3, r2
    9e88:	d00d      	beq.n	9ea6 <ll_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    9e8a:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
    9e8c:	4a08      	ldr	r2, [pc, #32]	; (9eb0 <ll_pdu_rx_alloc_peek+0x40>)
    9e8e:	fb13 f301 	smulbb	r3, r3, r1
    9e92:	58d0      	ldr	r0, [r2, r3]
    9e94:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    9e96:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
    9e9a:	ebac 0c03 	sub.w	ip, ip, r3
    9e9e:	4462      	add	r2, ip
    9ea0:	b2d2      	uxtb	r2, r2
    9ea2:	4290      	cmp	r0, r2
    9ea4:	d9f1      	bls.n	9e8a <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
    9ea6:	2000      	movs	r0, #0
}
    9ea8:	4770      	bx	lr
    9eaa:	bf00      	nop
    9eac:	200002dc 	.word	0x200002dc
    9eb0:	200002e4 	.word	0x200002e4

00009eb4 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    9eb4:	4b09      	ldr	r3, [pc, #36]	; (9edc <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    9eb6:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    9eb8:	795a      	ldrb	r2, [r3, #5]
    9eba:	7818      	ldrb	r0, [r3, #0]
    9ebc:	f893 c002 	ldrb.w	ip, [r3, #2]
    9ec0:	428a      	cmp	r2, r1
    9ec2:	d009      	beq.n	9ed8 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    9ec4:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
    9ec6:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
    9eca:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
    9ecc:	4594      	cmp	ip, r2
    9ece:	bf08      	it	eq
    9ed0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    9ed2:	6880      	ldr	r0, [r0, #8]
	}

	*first = _first; /* Write back read-index */
    9ed4:	711a      	strb	r2, [r3, #4]

	return mem;
    9ed6:	4770      	bx	lr
		return NULL;
    9ed8:	2000      	movs	r0, #0
}
    9eda:	4770      	bx	lr
    9edc:	200002dc 	.word	0x200002dc

00009ee0 <ll_tx_ack_put>:
{
    9ee0:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    9ee2:	4c14      	ldr	r4, [pc, #80]	; (9f34 <ll_tx_ack_put+0x54>)
    9ee4:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    9ee6:	f894 e002 	ldrb.w	lr, [r4, #2]
    9eea:	f894 c004 	ldrb.w	ip, [r4, #4]
    9eee:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
    9ef0:	1c53      	adds	r3, r2, #1
    9ef2:	b2db      	uxtb	r3, r3
		last = 0U;
    9ef4:	459e      	cmp	lr, r3
    9ef6:	bf08      	it	eq
    9ef8:	2300      	moveq	r3, #0
	if (last == first) {
    9efa:	459c      	cmp	ip, r3
    9efc:	d009      	beq.n	9f12 <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    9efe:	fb12 f205 	smulbb	r2, r2, r5
    9f02:	f104 0c08 	add.w	ip, r4, #8
	tx->handle = handle;
    9f06:	f82c 0002 	strh.w	r0, [ip, r2]
    9f0a:	4462      	add	r2, ip
	tx->node = node_tx;
    9f0c:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
    9f0e:	7163      	strb	r3, [r4, #5]
}
    9f10:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    9f12:	4a09      	ldr	r2, [pc, #36]	; (9f38 <ll_tx_ack_put+0x58>)
    9f14:	4909      	ldr	r1, [pc, #36]	; (9f3c <ll_tx_ack_put+0x5c>)
    9f16:	480a      	ldr	r0, [pc, #40]	; (9f40 <ll_tx_ack_put+0x60>)
    9f18:	f240 63e1 	movw	r3, #1761	; 0x6e1
    9f1c:	f00f fb8f 	bl	1963e <assert_print>
    9f20:	4040      	eors	r0, r0
    9f22:	f380 8811 	msr	BASEPRI, r0
    9f26:	f04f 0003 	mov.w	r0, #3
    9f2a:	df02      	svc	2
	tx->handle = handle;
    9f2c:	2300      	movs	r3, #0
    9f2e:	801b      	strh	r3, [r3, #0]
    9f30:	deff      	udf	#255	; 0xff
    9f32:	bf00      	nop
    9f34:	200002b4 	.word	0x200002b4
    9f38:	0001e1c4 	.word	0x0001e1c4
    9f3c:	0001e800 	.word	0x0001e800
    9f40:	0001e1a4 	.word	0x0001e1a4

00009f44 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
    9f44:	f030 0302 	bics.w	r3, r0, #2
{
    9f48:	b510      	push	{r4, lr}
    9f4a:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
    9f4c:	d002      	beq.n	9f54 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9f4e:	680b      	ldr	r3, [r1, #0]
    9f50:	2b02      	cmp	r3, #2
    9f52:	d008      	beq.n	9f66 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    9f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f5c:	4809      	ldr	r0, [pc, #36]	; (9f84 <ull_ticker_status_take+0x40>)
    9f5e:	f00d ff81 	bl	17e64 <z_impl_k_sem_take>
	return *ret_cb;
    9f62:	6820      	ldr	r0, [r4, #0]
}
    9f64:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9f66:	4a08      	ldr	r2, [pc, #32]	; (9f88 <ull_ticker_status_take+0x44>)
    9f68:	4908      	ldr	r1, [pc, #32]	; (9f8c <ull_ticker_status_take+0x48>)
    9f6a:	4809      	ldr	r0, [pc, #36]	; (9f90 <ull_ticker_status_take+0x4c>)
    9f6c:	f240 731c 	movw	r3, #1820	; 0x71c
    9f70:	f00f fb65 	bl	1963e <assert_print>
    9f74:	4040      	eors	r0, r0
    9f76:	f380 8811 	msr	BASEPRI, r0
    9f7a:	f04f 0003 	mov.w	r0, #3
    9f7e:	df02      	svc	2
    9f80:	e7e8      	b.n	9f54 <ull_ticker_status_take+0x10>
    9f82:	bf00      	nop
    9f84:	200017bc 	.word	0x200017bc
    9f88:	0001e1c4 	.word	0x0001e1c4
    9f8c:	0001e30c 	.word	0x0001e30c
    9f90:	0001e1a4 	.word	0x0001e1a4

00009f94 <ull_disable_mark>:
	if (!*m) {
    9f94:	4904      	ldr	r1, [pc, #16]	; (9fa8 <ull_disable_mark+0x14>)
    9f96:	680a      	ldr	r2, [r1, #0]
    9f98:	b10a      	cbz	r2, 9f9e <ull_disable_mark+0xa>
}
    9f9a:	4610      	mov	r0, r2
    9f9c:	4770      	bx	lr
		*m = param;
    9f9e:	4602      	mov	r2, r0
    9fa0:	6008      	str	r0, [r1, #0]
}
    9fa2:	4610      	mov	r0, r2
    9fa4:	4770      	bx	lr
    9fa6:	bf00      	nop
    9fa8:	200014f0 	.word	0x200014f0

00009fac <ull_disable_unmark>:
	if (*m && *m == param) {
    9fac:	4a04      	ldr	r2, [pc, #16]	; (9fc0 <ull_disable_unmark+0x14>)
    9fae:	6813      	ldr	r3, [r2, #0]
    9fb0:	b123      	cbz	r3, 9fbc <ull_disable_unmark+0x10>
    9fb2:	4298      	cmp	r0, r3
		*m = NULL;
    9fb4:	bf06      	itte	eq
    9fb6:	2100      	moveq	r1, #0
    9fb8:	6011      	streq	r1, [r2, #0]
	return NULL;
    9fba:	2300      	movne	r3, #0
}
    9fbc:	4618      	mov	r0, r3
    9fbe:	4770      	bx	lr
    9fc0:	200014f0 	.word	0x200014f0

00009fc4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    9fc4:	4b01      	ldr	r3, [pc, #4]	; (9fcc <ull_disable_mark_get+0x8>)
}
    9fc6:	6818      	ldr	r0, [r3, #0]
    9fc8:	4770      	bx	lr
    9fca:	bf00      	nop
    9fcc:	200014f0 	.word	0x200014f0

00009fd0 <ull_update_mark>:
	if (!*m) {
    9fd0:	4904      	ldr	r1, [pc, #16]	; (9fe4 <ull_update_mark+0x14>)
    9fd2:	680a      	ldr	r2, [r1, #0]
    9fd4:	b10a      	cbz	r2, 9fda <ull_update_mark+0xa>
}
    9fd6:	4610      	mov	r0, r2
    9fd8:	4770      	bx	lr
		*m = param;
    9fda:	4602      	mov	r2, r0
    9fdc:	6008      	str	r0, [r1, #0]
}
    9fde:	4610      	mov	r0, r2
    9fe0:	4770      	bx	lr
    9fe2:	bf00      	nop
    9fe4:	200014f4 	.word	0x200014f4

00009fe8 <ull_update_unmark>:
	if (*m && *m == param) {
    9fe8:	4a04      	ldr	r2, [pc, #16]	; (9ffc <ull_update_unmark+0x14>)
    9fea:	6813      	ldr	r3, [r2, #0]
    9fec:	b123      	cbz	r3, 9ff8 <ull_update_unmark+0x10>
    9fee:	4298      	cmp	r0, r3
		*m = NULL;
    9ff0:	bf06      	itte	eq
    9ff2:	2100      	moveq	r1, #0
    9ff4:	6011      	streq	r1, [r2, #0]
	return NULL;
    9ff6:	2300      	movne	r3, #0
}
    9ff8:	4618      	mov	r0, r3
    9ffa:	4770      	bx	lr
    9ffc:	200014f4 	.word	0x200014f4

0000a000 <ull_update_mark_get>:
	return mark_get(mark_update);
    a000:	4b01      	ldr	r3, [pc, #4]	; (a008 <ull_update_mark_get+0x8>)
}
    a002:	6818      	ldr	r0, [r3, #0]
    a004:	4770      	bx	lr
    a006:	bf00      	nop
    a008:	200014f4 	.word	0x200014f4

0000a00c <ull_disable>:
{
    a00c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    a00e:	6805      	ldr	r5, [r0, #0]
    a010:	782b      	ldrb	r3, [r5, #0]
{
    a012:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
    a014:	b353      	cbz	r3, a06c <ull_disable+0x60>
	compiler_barrier();
    a016:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    a018:	2201      	movs	r2, #1
    a01a:	2100      	movs	r1, #0
    a01c:	4668      	mov	r0, sp
    a01e:	f013 f830 	bl	1d082 <z_impl_k_sem_init>
    a022:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    a024:	4a13      	ldr	r2, [pc, #76]	; (a074 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    a026:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    a02a:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    a02c:	b1f3      	cbz	r3, a06c <ull_disable+0x60>
	mfy.param = lll;
    a02e:	4b12      	ldr	r3, [pc, #72]	; (a078 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    a030:	2200      	movs	r2, #0
    a032:	4611      	mov	r1, r2
    a034:	2003      	movs	r0, #3
	mfy.param = lll;
    a036:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    a038:	f7fd fed2 	bl	7de0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    a03c:	b940      	cbnz	r0, a050 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    a03e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a046:	4668      	mov	r0, sp
    a048:	f00d ff0c 	bl	17e64 <z_impl_k_sem_take>
}
    a04c:	b007      	add	sp, #28
    a04e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    a050:	4a0a      	ldr	r2, [pc, #40]	; (a07c <ull_disable+0x70>)
    a052:	490b      	ldr	r1, [pc, #44]	; (a080 <ull_disable+0x74>)
    a054:	480b      	ldr	r0, [pc, #44]	; (a084 <ull_disable+0x78>)
    a056:	f240 7399 	movw	r3, #1945	; 0x799
    a05a:	f00f faf0 	bl	1963e <assert_print>
    a05e:	4040      	eors	r0, r0
    a060:	f380 8811 	msr	BASEPRI, r0
    a064:	f04f 0003 	mov.w	r0, #3
    a068:	df02      	svc	2
    a06a:	e7e8      	b.n	a03e <ull_disable+0x32>
		return -EALREADY;
    a06c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a070:	e7ec      	b.n	a04c <ull_disable+0x40>
    a072:	bf00      	nop
    a074:	00009535 	.word	0x00009535
    a078:	20000294 	.word	0x20000294
    a07c:	0001e1c4 	.word	0x0001e1c4
    a080:	0001e304 	.word	0x0001e304
    a084:	0001e1a4 	.word	0x0001e1a4

0000a088 <ull_ticker_stop_with_mark>:
{
    a088:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    a08a:	4e1e      	ldr	r6, [pc, #120]	; (a104 <ull_ticker_stop_with_mark+0x7c>)
    a08c:	6833      	ldr	r3, [r6, #0]
{
    a08e:	b085      	sub	sp, #20
    a090:	460c      	mov	r4, r1
    a092:	4617      	mov	r7, r2
	if (!*m) {
    a094:	b353      	cbz	r3, a0ec <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
    a096:	4299      	cmp	r1, r3
    a098:	d113      	bne.n	a0c2 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a09a:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    a09c:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a09e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    a0a0:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a0a2:	9500      	str	r5, [sp, #0]
    a0a4:	4b18      	ldr	r3, [pc, #96]	; (a108 <ull_ticker_stop_with_mark+0x80>)
    a0a6:	2103      	movs	r1, #3
    a0a8:	2000      	movs	r0, #0
    a0aa:	f7ff f901 	bl	92b0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    a0ae:	4629      	mov	r1, r5
    a0b0:	f7ff ff48 	bl	9f44 <ull_ticker_status_take>
	if (ret) {
    a0b4:	4605      	mov	r5, r0
    a0b6:	b140      	cbz	r0, a0ca <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
    a0b8:	6833      	ldr	r3, [r6, #0]
    a0ba:	b10b      	cbz	r3, a0c0 <ull_ticker_stop_with_mark+0x38>
    a0bc:	429c      	cmp	r4, r3
    a0be:	d017      	beq.n	a0f0 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
    a0c0:	b1c4      	cbz	r4, a0f4 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
    a0c2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    a0c6:	b005      	add	sp, #20
    a0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    a0ca:	4638      	mov	r0, r7
    a0cc:	f7ff ff9e 	bl	a00c <ull_disable>
	if (*m && *m == param) {
    a0d0:	6833      	ldr	r3, [r6, #0]
    a0d2:	b10b      	cbz	r3, a0d8 <ull_ticker_stop_with_mark+0x50>
    a0d4:	429c      	cmp	r4, r3
    a0d6:	d011      	beq.n	a0fc <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
    a0d8:	2c00      	cmp	r4, #0
    a0da:	d1f2      	bne.n	a0c2 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
    a0dc:	2800      	cmp	r0, #0
    a0de:	d0f2      	beq.n	a0c6 <ull_ticker_stop_with_mark+0x3e>
	return 0;
    a0e0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a0e4:	bf08      	it	eq
    a0e6:	2000      	moveq	r0, #0
}
    a0e8:	b005      	add	sp, #20
    a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    a0ec:	6031      	str	r1, [r6, #0]
	if (mark != param) {
    a0ee:	e7d4      	b.n	a09a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    a0f0:	2300      	movs	r3, #0
    a0f2:	6033      	str	r3, [r6, #0]
		return -EALREADY;
    a0f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    a0f8:	b005      	add	sp, #20
    a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    a0fc:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
    a0fe:	2800      	cmp	r0, #0
    a100:	d0e1      	beq.n	a0c6 <ull_ticker_stop_with_mark+0x3e>
    a102:	e7ed      	b.n	a0e0 <ull_ticker_stop_with_mark+0x58>
    a104:	200014f0 	.word	0x200014f0
    a108:	00009529 	.word	0x00009529

0000a10c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    a10c:	490e      	ldr	r1, [pc, #56]	; (a148 <ull_pdu_rx_alloc_peek+0x3c>)
    a10e:	790b      	ldrb	r3, [r1, #4]
    a110:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
    a112:	4293      	cmp	r3, r2
    a114:	d80d      	bhi.n	a132 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
    a116:	eba2 0c03 	sub.w	ip, r2, r3
    a11a:	fa5f fc8c 	uxtb.w	ip, ip
    a11e:	4560      	cmp	r0, ip
    a120:	d80f      	bhi.n	a142 <ull_pdu_rx_alloc_peek+0x36>
	if (first == last) {
    a122:	4293      	cmp	r3, r2
    a124:	d00d      	beq.n	a142 <ull_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    a126:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
    a128:	4a08      	ldr	r2, [pc, #32]	; (a14c <ull_pdu_rx_alloc_peek+0x40>)
    a12a:	fb13 f301 	smulbb	r3, r3, r1
    a12e:	58d0      	ldr	r0, [r2, r3]
    a130:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    a132:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
    a136:	ebac 0c03 	sub.w	ip, ip, r3
    a13a:	4462      	add	r2, ip
    a13c:	b2d2      	uxtb	r2, r2
    a13e:	4290      	cmp	r0, r2
    a140:	d9f1      	bls.n	a126 <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
    a142:	2000      	movs	r0, #0
}
    a144:	4770      	bx	lr
    a146:	bf00      	nop
    a148:	200002f0 	.word	0x200002f0
    a14c:	200002f8 	.word	0x200002f8

0000a150 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    a150:	4b09      	ldr	r3, [pc, #36]	; (a178 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    a152:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    a154:	795a      	ldrb	r2, [r3, #5]
    a156:	7818      	ldrb	r0, [r3, #0]
    a158:	f893 c002 	ldrb.w	ip, [r3, #2]
    a15c:	428a      	cmp	r2, r1
    a15e:	d009      	beq.n	a174 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    a160:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
    a162:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
    a166:	b2d2      	uxtb	r2, r2
		_first = 0U;
    a168:	4594      	cmp	ip, r2
    a16a:	bf08      	it	eq
    a16c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    a16e:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
    a170:	711a      	strb	r2, [r3, #4]
	return mem;
    a172:	4770      	bx	lr
		return NULL;
    a174:	2000      	movs	r0, #0
}
    a176:	4770      	bx	lr
    a178:	200002f0 	.word	0x200002f0

0000a17c <ull_rx_put>:
{
    a17c:	b538      	push	{r3, r4, r5, lr}
    a17e:	460c      	mov	r4, r1
    a180:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    a182:	f003 f891 	bl	d2a8 <ull_conn_ack_last_idx_get>
    a186:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a188:	4621      	mov	r1, r4
    a18a:	4628      	mov	r0, r5
    a18c:	4a02      	ldr	r2, [pc, #8]	; (a198 <ull_rx_put+0x1c>)
}
    a18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a192:	f7fd bdaf 	b.w	7cf4 <memq_enqueue>
    a196:	bf00      	nop
    a198:	2000150c 	.word	0x2000150c

0000a19c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    a19c:	2201      	movs	r2, #1
    a19e:	4b02      	ldr	r3, [pc, #8]	; (a1a8 <ull_rx_sched+0xc>)
    a1a0:	4611      	mov	r1, r2
    a1a2:	2000      	movs	r0, #0
    a1a4:	f7fd be1c 	b.w	7de0 <mayfly_enqueue>
    a1a8:	20000284 	.word	0x20000284

0000a1ac <ull_rx_put_sched>:
{
    a1ac:	b570      	push	{r4, r5, r6, lr}
    a1ae:	460c      	mov	r4, r1
    a1b0:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    a1b2:	f003 f879 	bl	d2a8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a1b6:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    a1b8:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a1ba:	4a06      	ldr	r2, [pc, #24]	; (a1d4 <ull_rx_put_sched+0x28>)
    a1bc:	4628      	mov	r0, r5
    a1be:	f7fd fd99 	bl	7cf4 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    a1c2:	2201      	movs	r2, #1
}
    a1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    a1c8:	4b03      	ldr	r3, [pc, #12]	; (a1d8 <ull_rx_put_sched+0x2c>)
    a1ca:	4611      	mov	r1, r2
    a1cc:	2000      	movs	r0, #0
    a1ce:	f7fd be07 	b.w	7de0 <mayfly_enqueue>
    a1d2:	bf00      	nop
    a1d4:	2000150c 	.word	0x2000150c
    a1d8:	20000284 	.word	0x20000284

0000a1dc <ull_prepare_enqueue>:
{
    a1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a1e0:	4e16      	ldr	r6, [pc, #88]	; (a23c <ull_prepare_enqueue+0x60>)
{
    a1e2:	f89d a020 	ldrb.w	sl, [sp, #32]
    a1e6:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a1e8:	7973      	ldrb	r3, [r6, #5]
{
    a1ea:	460f      	mov	r7, r1
	last = last + 1;
    a1ec:	1c5d      	adds	r5, r3, #1
    a1ee:	4611      	mov	r1, r2
	if (last == count) {
    a1f0:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
    a1f2:	b2ed      	uxtb	r5, r5
		last = 0U;
    a1f4:	42aa      	cmp	r2, r5
    a1f6:	bf08      	it	eq
    a1f8:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a1fa:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
    a1fc:	42aa      	cmp	r2, r5
{
    a1fe:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a200:	7830      	ldrb	r0, [r6, #0]
    a202:	d016      	beq.n	a232 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a204:	f106 0408 	add.w	r4, r6, #8
    a208:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    a20c:	2210      	movs	r2, #16
    a20e:	4620      	mov	r0, r4
    a210:	f00f fcf0 	bl	19bf4 <memcpy>
	e->is_resume = is_resume;
    a214:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    a216:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    a218:	f00a 0a01 	and.w	sl, sl, #1
    a21c:	f023 0303 	bic.w	r3, r3, #3
    a220:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    a224:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    a228:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    a22a:	7175      	strb	r5, [r6, #5]
}
    a22c:	4620      	mov	r0, r4
    a22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    a232:	2400      	movs	r4, #0
}
    a234:	4620      	mov	r0, r4
    a236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a23a:	bf00      	nop
    a23c:	20000410 	.word	0x20000410

0000a240 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    a240:	4805      	ldr	r0, [pc, #20]	; (a258 <ull_prepare_dequeue_get+0x18>)
    a242:	7902      	ldrb	r2, [r0, #4]
	if (first == last) {
    a244:	7941      	ldrb	r1, [r0, #5]
    a246:	f890 c000 	ldrb.w	ip, [r0]
    a24a:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    a24c:	bf1a      	itte	ne
    a24e:	3008      	addne	r0, #8
    a250:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
    a254:	2000      	moveq	r0, #0
}
    a256:	4770      	bx	lr
    a258:	20000410 	.word	0x20000410

0000a25c <ull_prepare_dequeue_iter>:
{
    a25c:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    a25e:	4b0d      	ldr	r3, [pc, #52]	; (a294 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    a260:	7802      	ldrb	r2, [r0, #0]
    a262:	7899      	ldrb	r1, [r3, #2]
    a264:	f893 c005 	ldrb.w	ip, [r3, #5]
    a268:	f893 e000 	ldrb.w	lr, [r3]
    a26c:	4291      	cmp	r1, r2
    a26e:	bf9c      	itt	ls
    a270:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
    a272:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    a274:	4594      	cmp	ip, r2
    a276:	d00a      	beq.n	a28e <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    a278:	1c53      	adds	r3, r2, #1
    a27a:	b2db      	uxtb	r3, r3
		i = 0U;
    a27c:	4299      	cmp	r1, r3
    a27e:	bf08      	it	eq
    a280:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    a282:	4905      	ldr	r1, [pc, #20]	; (a298 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    a284:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    a286:	fb02 100e 	mla	r0, r2, lr, r1
}
    a28a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    a28e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    a290:	e7fb      	b.n	a28a <ull_prepare_dequeue_iter+0x2e>
    a292:	bf00      	nop
    a294:	20000410 	.word	0x20000410
    a298:	20000418 	.word	0x20000418

0000a29c <ull_prepare_dequeue>:
{
    a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    a2a0:	4c36      	ldr	r4, [pc, #216]	; (a37c <ull_prepare_dequeue+0xe0>)
    a2a2:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
    a2a4:	7961      	ldrb	r1, [r4, #5]
    a2a6:	7823      	ldrb	r3, [r4, #0]
{
    a2a8:	b083      	sub	sp, #12
    a2aa:	4291      	cmp	r1, r2
    a2ac:	9000      	str	r0, [sp, #0]
    a2ae:	d035      	beq.n	a31c <ull_prepare_dequeue+0x80>
	return (void *)(fifo + first * size);
    a2b0:	f04f 0900 	mov.w	r9, #0
    a2b4:	f104 0808 	add.w	r8, r4, #8
    a2b8:	fb02 8303 	mla	r3, r2, r3, r8
    a2bc:	f8cd 9004 	str.w	r9, [sp, #4]
    a2c0:	46ca      	mov	sl, r9
    a2c2:	46cb      	mov	fp, r9
		uint8_t is_aborted = next->is_aborted;
    a2c4:	7f1a      	ldrb	r2, [r3, #28]
		void *param = next->prepare_param.param;
    a2c6:	68df      	ldr	r7, [r3, #12]
		uint8_t is_aborted = next->is_aborted;
    a2c8:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
    a2cc:	f002 0601 	and.w	r6, r2, #1
		if (!is_aborted) {
    a2d0:	0792      	lsls	r2, r2, #30
    a2d2:	d526      	bpl.n	a322 <ull_prepare_dequeue+0x86>
		MFIFO_DEQUEUE(prep);
    a2d4:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
    a2d6:	7923      	ldrb	r3, [r4, #4]
    a2d8:	7822      	ldrb	r2, [r4, #0]
    a2da:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
    a2dc:	4299      	cmp	r1, r3
    a2de:	d01d      	beq.n	a31c <ull_prepare_dequeue+0x80>
	_first += 1U;
    a2e0:	3301      	adds	r3, #1
    a2e2:	b2db      	uxtb	r3, r3
		_first = 0U;
    a2e4:	4298      	cmp	r0, r3
    a2e6:	bf08      	it	eq
    a2e8:	2300      	moveq	r3, #0
	if (first == last) {
    a2ea:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    a2ec:	7123      	strb	r3, [r4, #4]
	if (first == last) {
    a2ee:	d015      	beq.n	a31c <ull_prepare_dequeue+0x80>
	return (void *)(fifo + first * size);
    a2f0:	fb03 8302 	mla	r3, r3, r2, r8
			      ((next->prepare_param.param ==
    a2f4:	68da      	ldr	r2, [r3, #12]
		if (!is_aborted) {
    a2f6:	2d00      	cmp	r5, #0
    a2f8:	d1e4      	bne.n	a2c4 <ull_prepare_dequeue+0x28>
			if (!is_resume) {
    a2fa:	bb56      	cbnz	r6, a352 <ull_prepare_dequeue+0xb6>
				if (!param_normal_head) {
    a2fc:	f1bb 0f00 	cmp.w	fp, #0
    a300:	d037      	beq.n	a372 <ull_prepare_dequeue+0xd6>
					param_normal_next = param;
    a302:	f1ba 0f00 	cmp.w	sl, #0
    a306:	bf08      	it	eq
    a308:	46ba      	moveq	sl, r7
			if (!next->is_aborted &&
    a30a:	7f19      	ldrb	r1, [r3, #28]
    a30c:	0788      	lsls	r0, r1, #30
    a30e:	d4d9      	bmi.n	a2c4 <ull_prepare_dequeue+0x28>
    a310:	07c9      	lsls	r1, r1, #31
    a312:	d425      	bmi.n	a360 <ull_prepare_dequeue+0xc4>
			    ((!next->is_resume &&
    a314:	4593      	cmp	fp, r2
    a316:	d001      	beq.n	a31c <ull_prepare_dequeue+0x80>
				param_normal_head) ||
    a318:	4592      	cmp	sl, r2
    a31a:	d1d3      	bne.n	a2c4 <ull_prepare_dequeue+0x28>
}
    a31c:	b003      	add	sp, #12
    a31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    a322:	4a17      	ldr	r2, [pc, #92]	; (a380 <ull_prepare_dequeue+0xe4>)
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    a324:	9800      	ldr	r0, [sp, #0]
			mfy.param = next;
    a326:	6093      	str	r3, [r2, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    a328:	4629      	mov	r1, r5
    a32a:	4613      	mov	r3, r2
    a32c:	462a      	mov	r2, r5
    a32e:	f7fd fd57 	bl	7de0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a332:	2800      	cmp	r0, #0
    a334:	d0ce      	beq.n	a2d4 <ull_prepare_dequeue+0x38>
    a336:	4a13      	ldr	r2, [pc, #76]	; (a384 <ull_prepare_dequeue+0xe8>)
    a338:	4913      	ldr	r1, [pc, #76]	; (a388 <ull_prepare_dequeue+0xec>)
    a33a:	4814      	ldr	r0, [pc, #80]	; (a38c <ull_prepare_dequeue+0xf0>)
    a33c:	f640 031e 	movw	r3, #2078	; 0x81e
    a340:	f00f f97d 	bl	1963e <assert_print>
    a344:	4040      	eors	r0, r0
    a346:	f380 8811 	msr	BASEPRI, r0
    a34a:	f04f 0003 	mov.w	r0, #3
    a34e:	df02      	svc	2
    a350:	e7c0      	b.n	a2d4 <ull_prepare_dequeue+0x38>
				if (!param_resume_head) {
    a352:	9901      	ldr	r1, [sp, #4]
    a354:	b179      	cbz	r1, a376 <ull_prepare_dequeue+0xda>
					param_resume_next = param;
    a356:	f1b9 0f00 	cmp.w	r9, #0
    a35a:	bf08      	it	eq
    a35c:	46b9      	moveq	r9, r7
    a35e:	e7d4      	b.n	a30a <ull_prepare_dequeue+0x6e>
			     (next->is_resume &&
    a360:	f1ba 0f00 	cmp.w	sl, #0
    a364:	d1ae      	bne.n	a2c4 <ull_prepare_dequeue+0x28>
			      !param_normal_next &&
    a366:	9901      	ldr	r1, [sp, #4]
    a368:	4291      	cmp	r1, r2
    a36a:	d0d7      	beq.n	a31c <ull_prepare_dequeue+0x80>
				param_resume_head) ||
    a36c:	4591      	cmp	r9, r2
    a36e:	d1a9      	bne.n	a2c4 <ull_prepare_dequeue+0x28>
    a370:	e7d4      	b.n	a31c <ull_prepare_dequeue+0x80>
					param_normal_head = param;
    a372:	46bb      	mov	fp, r7
    a374:	e7c9      	b.n	a30a <ull_prepare_dequeue+0x6e>
					param_resume_head = param;
    a376:	9701      	str	r7, [sp, #4]
    a378:	e7c7      	b.n	a30a <ull_prepare_dequeue+0x6e>
    a37a:	bf00      	nop
    a37c:	20000410 	.word	0x20000410
    a380:	20000264 	.word	0x20000264
    a384:	0001e1c4 	.word	0x0001e1c4
    a388:	0001e304 	.word	0x0001e304
    a38c:	0001e1a4 	.word	0x0001e1a4

0000a390 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    a390:	4b06      	ldr	r3, [pc, #24]	; (a3ac <ull_event_done_extra_get+0x1c>)
    a392:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
    a394:	7959      	ldrb	r1, [r3, #5]
    a396:	7818      	ldrb	r0, [r3, #0]
    a398:	4291      	cmp	r1, r2
    a39a:	d005      	beq.n	a3a8 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    a39c:	fb02 3300 	mla	r3, r2, r0, r3
    a3a0:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
    a3a2:	b110      	cbz	r0, a3aa <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    a3a4:	3020      	adds	r0, #32
    a3a6:	4770      	bx	lr
		return NULL;
    a3a8:	2000      	movs	r0, #0
}
    a3aa:	4770      	bx	lr
    a3ac:	200003f4 	.word	0x200003f4

0000a3b0 <ull_event_done>:
{
    a3b0:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
    a3b2:	4a13      	ldr	r2, [pc, #76]	; (a400 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    a3b4:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
    a3b6:	7955      	ldrb	r5, [r2, #5]
    a3b8:	7814      	ldrb	r4, [r2, #0]
    a3ba:	429d      	cmp	r5, r3
{
    a3bc:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
    a3be:	7890      	ldrb	r0, [r2, #2]
    a3c0:	d01b      	beq.n	a3fa <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    a3c2:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
    a3c6:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    a3c8:	68a4      	ldr	r4, [r4, #8]
	_first += 1U;
    a3ca:	b2db      	uxtb	r3, r3
		_first = 0U;
    a3cc:	4298      	cmp	r0, r3
    a3ce:	bf08      	it	eq
    a3d0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    a3d2:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
    a3d4:	b18c      	cbz	r4, a3fa <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    a3d6:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    a3d8:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    a3da:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    a3dc:	4a09      	ldr	r2, [pc, #36]	; (a404 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    a3de:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    a3e0:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
    a3e2:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    a3e4:	4621      	mov	r1, r4
    a3e6:	f7fd fc85 	bl	7cf4 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    a3ea:	2201      	movs	r2, #1
    a3ec:	4b06      	ldr	r3, [pc, #24]	; (a408 <ull_event_done+0x58>)
    a3ee:	4611      	mov	r1, r2
    a3f0:	4628      	mov	r0, r5
    a3f2:	f7fd fcf5 	bl	7de0 <mayfly_enqueue>
}
    a3f6:	4620      	mov	r0, r4
    a3f8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    a3fa:	2400      	movs	r4, #0
    a3fc:	e7fb      	b.n	a3f6 <ull_event_done+0x46>
    a3fe:	bf00      	nop
    a400:	200003f4 	.word	0x200003f4
    a404:	200014fc 	.word	0x200014fc
    a408:	20000274 	.word	0x20000274

0000a40c <ull_rxfifo_alloc>:
{
    a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a410:	b083      	sub	sp, #12
    a412:	461d      	mov	r5, r3
    a414:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    a418:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a41a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    a41e:	9401      	str	r4, [sp, #4]
    a420:	4617      	mov	r7, r2
    a422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a424:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    a426:	b353      	cbz	r3, a47e <ull_rxfifo_alloc+0x72>
    a428:	1e5c      	subs	r4, r3, #1
    a42a:	f895 a000 	ldrb.w	sl, [r5]
    a42e:	4680      	mov	r8, r0
    a430:	460e      	mov	r6, r1
    a432:	b2e4      	uxtb	r4, r4
	last = last + 1;
    a434:	f10a 0301 	add.w	r3, sl, #1
    a438:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
    a43c:	4556      	cmp	r6, sl
    a43e:	bf08      	it	eq
    a440:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
    a444:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
    a446:	4648      	mov	r0, r9
    a448:	d019      	beq.n	a47e <ull_rxfifo_alloc+0x72>
    a44a:	f7fd fbed 	bl	7c28 <mem_acquire>
    a44e:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
    a450:	9800      	ldr	r0, [sp, #0]
		if (!link) {
    a452:	f1bb 0f00 	cmp.w	fp, #0
    a456:	d012      	beq.n	a47e <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
    a458:	f7fd fbe6 	bl	7c28 <mem_acquire>
		if (!rx) {
    a45c:	b190      	cbz	r0, a484 <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
    a45e:	2300      	movs	r3, #0
    a460:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    a464:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    a468:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    a46a:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    a46c:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    a470:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    a472:	3c01      	subs	r4, #1
    a474:	b2e4      	uxtb	r4, r4
    a476:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    a478:	f885 a000 	strb.w	sl, [r5]
    a47c:	d1da      	bne.n	a434 <ull_rxfifo_alloc+0x28>
}
    a47e:	b003      	add	sp, #12
    a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    a484:	4649      	mov	r1, r9
    a486:	4658      	mov	r0, fp
}
    a488:	b003      	add	sp, #12
    a48a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    a48e:	f7fd bbe7 	b.w	7c60 <mem_release>
    a492:	bf00      	nop

0000a494 <init_reset>:
{
    a494:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    a496:	4c3f      	ldr	r4, [pc, #252]	; (a594 <init_reset+0x100>)
    a498:	4d3f      	ldr	r5, [pc, #252]	; (a598 <init_reset+0x104>)
    a49a:	79a2      	ldrb	r2, [r4, #6]
    a49c:	88a1      	ldrh	r1, [r4, #4]
    a49e:	4e3f      	ldr	r6, [pc, #252]	; (a59c <init_reset+0x108>)
    a4a0:	2000      	movs	r0, #0
{
    a4a2:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    a4a4:	4623      	mov	r3, r4
    a4a6:	80a8      	strh	r0, [r5, #4]
    a4a8:	f104 0008 	add.w	r0, r4, #8
    a4ac:	f7fd fb8c 	bl	7bc8 <mem_init>
    a4b0:	79e3      	ldrb	r3, [r4, #7]
    a4b2:	79a2      	ldrb	r2, [r4, #6]
    a4b4:	1d30      	adds	r0, r6, #4
    a4b6:	441a      	add	r2, r3
    a4b8:	2108      	movs	r1, #8
    a4ba:	4633      	mov	r3, r6
    a4bc:	f7fd fb84 	bl	7bc8 <mem_init>
    a4c0:	9602      	str	r6, [sp, #8]
    a4c2:	462e      	mov	r6, r5
    a4c4:	79a3      	ldrb	r3, [r4, #6]
    a4c6:	f816 0b08 	ldrb.w	r0, [r6], #8
    a4ca:	9303      	str	r3, [sp, #12]
    a4cc:	792a      	ldrb	r2, [r5, #4]
    a4ce:	78a9      	ldrb	r1, [r5, #2]
    a4d0:	1d6b      	adds	r3, r5, #5
    a4d2:	e9cd 6400 	strd	r6, r4, [sp]
    a4d6:	f7ff ff99 	bl	a40c <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    a4da:	4b31      	ldr	r3, [pc, #196]	; (a5a0 <init_reset+0x10c>)
    a4dc:	2208      	movs	r2, #8
    a4de:	1d18      	adds	r0, r3, #4
    a4e0:	2144      	movs	r1, #68	; 0x44
    a4e2:	f7fd fb71 	bl	7bc8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    a4e6:	4b2f      	ldr	r3, [pc, #188]	; (a5a4 <init_reset+0x110>)
    a4e8:	220a      	movs	r2, #10
    a4ea:	1d18      	adds	r0, r3, #4
    a4ec:	2108      	movs	r1, #8
    a4ee:	f7fd fb6b 	bl	7bc8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    a4f2:	482c      	ldr	r0, [pc, #176]	; (a5a4 <init_reset+0x110>)
    a4f4:	f7fd fb98 	bl	7c28 <mem_acquire>
	LL_ASSERT(link);
    a4f8:	4604      	mov	r4, r0
    a4fa:	b308      	cbz	r0, a540 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    a4fc:	4a2a      	ldr	r2, [pc, #168]	; (a5a8 <init_reset+0x114>)
    a4fe:	4620      	mov	r0, r4
    a500:	1f11      	subs	r1, r2, #4
    a502:	f7fd fbe9 	bl	7cd8 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    a506:	4825      	ldr	r0, [pc, #148]	; (a59c <init_reset+0x108>)
    a508:	f7fd fb8e 	bl	7c28 <mem_acquire>
	LL_ASSERT(link);
    a50c:	4604      	mov	r4, r0
    a50e:	b328      	cbz	r0, a55c <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    a510:	4a26      	ldr	r2, [pc, #152]	; (a5ac <init_reset+0x118>)
    a512:	4620      	mov	r0, r4
    a514:	1f11      	subs	r1, r2, #4
    a516:	f7fd fbdf 	bl	7cd8 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    a51a:	4822      	ldr	r0, [pc, #136]	; (a5a4 <init_reset+0x110>)
    a51c:	f7fd fb84 	bl	7c28 <mem_acquire>
	LL_ASSERT(link);
    a520:	4604      	mov	r4, r0
    a522:	b348      	cbz	r0, a578 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    a524:	4a22      	ldr	r2, [pc, #136]	; (a5b0 <init_reset+0x11c>)
    a526:	4620      	mov	r0, r4
    a528:	1f11      	subs	r1, r2, #4
    a52a:	f7fd fbd5 	bl	7cd8 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    a52e:	4b21      	ldr	r3, [pc, #132]	; (a5b4 <init_reset+0x120>)
    a530:	2206      	movs	r2, #6
	rx_replenish(UINT8_MAX);
    a532:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    a534:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
    a536:	f7ff f859 	bl	95ec <rx_replenish>
}
    a53a:	2000      	movs	r0, #0
    a53c:	b004      	add	sp, #16
    a53e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    a540:	4a1d      	ldr	r2, [pc, #116]	; (a5b8 <init_reset+0x124>)
    a542:	491e      	ldr	r1, [pc, #120]	; (a5bc <init_reset+0x128>)
    a544:	481e      	ldr	r0, [pc, #120]	; (a5c0 <init_reset+0x12c>)
    a546:	f640 03d7 	movw	r3, #2263	; 0x8d7
    a54a:	f00f f878 	bl	1963e <assert_print>
    a54e:	4040      	eors	r0, r0
    a550:	f380 8811 	msr	BASEPRI, r0
    a554:	f04f 0003 	mov.w	r0, #3
    a558:	df02      	svc	2
    a55a:	e7cf      	b.n	a4fc <init_reset+0x68>
	LL_ASSERT(link);
    a55c:	4a16      	ldr	r2, [pc, #88]	; (a5b8 <init_reset+0x124>)
    a55e:	4917      	ldr	r1, [pc, #92]	; (a5bc <init_reset+0x128>)
    a560:	4817      	ldr	r0, [pc, #92]	; (a5c0 <init_reset+0x12c>)
    a562:	f640 03df 	movw	r3, #2271	; 0x8df
    a566:	f00f f86a 	bl	1963e <assert_print>
    a56a:	4040      	eors	r0, r0
    a56c:	f380 8811 	msr	BASEPRI, r0
    a570:	f04f 0003 	mov.w	r0, #3
    a574:	df02      	svc	2
    a576:	e7cb      	b.n	a510 <init_reset+0x7c>
	LL_ASSERT(link);
    a578:	4a0f      	ldr	r2, [pc, #60]	; (a5b8 <init_reset+0x124>)
    a57a:	4910      	ldr	r1, [pc, #64]	; (a5bc <init_reset+0x128>)
    a57c:	4810      	ldr	r0, [pc, #64]	; (a5c0 <init_reset+0x12c>)
    a57e:	f640 03e7 	movw	r3, #2279	; 0x8e7
    a582:	f00f f85c 	bl	1963e <assert_print>
    a586:	4040      	eors	r0, r0
    a588:	f380 8811 	msr	BASEPRI, r0
    a58c:	f04f 0003 	mov.w	r0, #3
    a590:	df02      	svc	2
    a592:	e7c7      	b.n	a524 <init_reset+0x90>
    a594:	2000030c 	.word	0x2000030c
    a598:	200003f4 	.word	0x200003f4
    a59c:	2000178c 	.word	0x2000178c
    a5a0:	20001568 	.word	0x20001568
    a5a4:	20001514 	.word	0x20001514
    a5a8:	2000150c 	.word	0x2000150c
    a5ac:	200014fc 	.word	0x200014fc
    a5b0:	20001504 	.word	0x20001504
    a5b4:	20001510 	.word	0x20001510
    a5b8:	0001e1c4 	.word	0x0001e1c4
    a5bc:	0001e6c8 	.word	0x0001e6c8
    a5c0:	0001e1a4 	.word	0x0001e1a4

0000a5c4 <ll_init>:
{
    a5c4:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
    a5c6:	4b2b      	ldr	r3, [pc, #172]	; (a674 <ll_init+0xb0>)
	if (!mayfly_initialized) {
    a5c8:	4c2b      	ldr	r4, [pc, #172]	; (a678 <ll_init+0xb4>)
	sem_recv = sem_rx;
    a5ca:	6018      	str	r0, [r3, #0]
{
    a5cc:	b086      	sub	sp, #24
	cntr_init();
    a5ce:	f009 faf1 	bl	13bb4 <cntr_init>
	if (!mayfly_initialized) {
    a5d2:	7823      	ldrb	r3, [r4, #0]
    a5d4:	2b00      	cmp	r3, #0
    a5d6:	d047      	beq.n	a668 <ll_init+0xa4>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a5d8:	4a28      	ldr	r2, [pc, #160]	; (a67c <ll_init+0xb8>)
    a5da:	4c29      	ldr	r4, [pc, #164]	; (a680 <ll_init+0xbc>)
    a5dc:	4929      	ldr	r1, [pc, #164]	; (a684 <ll_init+0xc0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    a5de:	482a      	ldr	r0, [pc, #168]	; (a688 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a5e0:	e9cd 2404 	strd	r2, r4, [sp, #16]
    a5e4:	4a29      	ldr	r2, [pc, #164]	; (a68c <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    a5e6:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a5e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    a5ec:	f04f 0c02 	mov.w	ip, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a5f0:	210c      	movs	r1, #12
    a5f2:	e9cd 0100 	strd	r0, r1, [sp]
    a5f6:	4a26      	ldr	r2, [pc, #152]	; (a690 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    a5f8:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    a5fa:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    a5fc:	f880 c010 	strb.w	ip, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    a600:	f880 c018 	strb.w	ip, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a604:	4619      	mov	r1, r3
    a606:	2000      	movs	r0, #0
    a608:	f7fe fd76 	bl	90f8 <ticker_init>
	LL_ASSERT(!err);
    a60c:	b9f0      	cbnz	r0, a64c <ll_init+0x88>
	return z_impl_k_sem_init(sem, initial_count, limit);
    a60e:	2201      	movs	r2, #1
    a610:	2100      	movs	r1, #0
    a612:	4820      	ldr	r0, [pc, #128]	; (a694 <ll_init+0xd0>)
    a614:	f012 fd35 	bl	1d082 <z_impl_k_sem_init>
	err = lll_init();
    a618:	f007 feb0 	bl	1237c <lll_init>
	if (err) {
    a61c:	b108      	cbz	r0, a622 <ll_init+0x5e>
}
    a61e:	b006      	add	sp, #24
    a620:	bd10      	pop	{r4, pc}
	err = init_reset();
    a622:	f7ff ff37 	bl	a494 <init_reset>
	if (err) {
    a626:	2800      	cmp	r0, #0
    a628:	d1f9      	bne.n	a61e <ll_init+0x5a>
	err = lll_adv_init();
    a62a:	f008 fb0b 	bl	12c44 <lll_adv_init>
	if (err) {
    a62e:	2800      	cmp	r0, #0
    a630:	d1f5      	bne.n	a61e <ll_init+0x5a>
	err = ull_adv_init();
    a632:	f001 fed7 	bl	c3e4 <ull_adv_init>
	if (err) {
    a636:	2800      	cmp	r0, #0
    a638:	d1f1      	bne.n	a61e <ll_init+0x5a>
	err = lll_conn_init();
    a63a:	f008 fea5 	bl	13388 <lll_conn_init>
	if (err) {
    a63e:	2800      	cmp	r0, #0
    a640:	d1ed      	bne.n	a61e <ll_init+0x5a>
}
    a642:	b006      	add	sp, #24
    a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = ull_conn_init();
    a648:	f002 bc26 	b.w	ce98 <ull_conn_init>
	LL_ASSERT(!err);
    a64c:	4a12      	ldr	r2, [pc, #72]	; (a698 <ll_init+0xd4>)
    a64e:	4913      	ldr	r1, [pc, #76]	; (a69c <ll_init+0xd8>)
    a650:	4813      	ldr	r0, [pc, #76]	; (a6a0 <ll_init+0xdc>)
    a652:	f240 2359 	movw	r3, #601	; 0x259
    a656:	f00e fff2 	bl	1963e <assert_print>
    a65a:	4040      	eors	r0, r0
    a65c:	f380 8811 	msr	BASEPRI, r0
    a660:	f04f 0003 	mov.w	r0, #3
    a664:	df02      	svc	2
    a666:	e7d2      	b.n	a60e <ll_init+0x4a>
		mayfly_init();
    a668:	f7fd fb66 	bl	7d38 <mayfly_init>
		mayfly_initialized = true;
    a66c:	2301      	movs	r3, #1
    a66e:	7023      	strb	r3, [r4, #0]
    a670:	e7b2      	b.n	a5d8 <ll_init+0x14>
    a672:	bf00      	nop
    a674:	200017b8 	.word	0x200017b8
    a678:	20002715 	.word	0x20002715
    a67c:	0001464d 	.word	0x0001464d
    a680:	0001479d 	.word	0x0001479d
    a684:	000145e9 	.word	0x000145e9
    a688:	20001a14 	.word	0x20001a14
    a68c:	200017d4 	.word	0x200017d4
    a690:	20001a34 	.word	0x20001a34
    a694:	200017bc 	.word	0x200017bc
    a698:	0001e1c4 	.word	0x0001e1c4
    a69c:	0001e200 	.word	0x0001e200
    a6a0:	0001e1a4 	.word	0x0001e1a4

0000a6a4 <ll_reset>:
{
    a6a4:	b510      	push	{r4, lr}
    a6a6:	b086      	sub	sp, #24
	err = ull_adv_reset();
    a6a8:	f001 feac 	bl	c404 <ull_adv_reset>
	LL_ASSERT(!err);
    a6ac:	2800      	cmp	r0, #0
    a6ae:	d130      	bne.n	a712 <ll_reset+0x6e>
	err = ull_conn_reset();
    a6b0:	f002 fbf4 	bl	ce9c <ull_conn_reset>
	LL_ASSERT(!err);
    a6b4:	2800      	cmp	r0, #0
    a6b6:	d13d      	bne.n	a734 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
    a6b8:	483a      	ldr	r0, [pc, #232]	; (a7a4 <ll_reset+0x100>)
	MFIFO_INIT(prep);
    a6ba:	493b      	ldr	r1, [pc, #236]	; (a7a8 <ll_reset+0x104>)
	MFIFO_INIT(pdu_rx_free);
    a6bc:	4a3b      	ldr	r2, [pc, #236]	; (a7ac <ll_reset+0x108>)
	MFIFO_INIT(ll_pdu_rx_free);
    a6be:	4b3c      	ldr	r3, [pc, #240]	; (a7b0 <ll_reset+0x10c>)
	MFIFO_INIT(tx_ack);
    a6c0:	2400      	movs	r4, #0
    a6c2:	8084      	strh	r4, [r0, #4]
	MFIFO_INIT(prep);
    a6c4:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
    a6c6:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
    a6c8:	809c      	strh	r4, [r3, #4]
    a6ca:	2201      	movs	r2, #1
    a6cc:	4621      	mov	r1, r4
    a6ce:	4668      	mov	r0, sp
    a6d0:	f012 fcd7 	bl	1d082 <z_impl_k_sem_init>
		mfy.param = &sem;
    a6d4:	4b37      	ldr	r3, [pc, #220]	; (a7b4 <ll_reset+0x110>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    a6d6:	4622      	mov	r2, r4
    a6d8:	4621      	mov	r1, r4
    a6da:	2003      	movs	r0, #3
		mfy.param = &sem;
    a6dc:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    a6e0:	f7fd fb7e 	bl	7de0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    a6e4:	2800      	cmp	r0, #0
    a6e6:	d14f      	bne.n	a788 <ll_reset+0xe4>
	return z_impl_k_sem_take(sem, timeout);
    a6e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a6ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a6f0:	4668      	mov	r0, sp
    a6f2:	f00d fbb7 	bl	17e64 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    a6f6:	f001 fe8b 	bl	c410 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d136      	bne.n	a76c <ll_reset+0xc8>
	err = init_reset();
    a6fe:	f7ff fec9 	bl	a494 <init_reset>
	LL_ASSERT(!err);
    a702:	bb28      	cbnz	r0, a750 <ll_reset+0xac>
	(void)ll_addr_set(1U, NULL);
    a704:	2100      	movs	r1, #0
    a706:	2001      	movs	r0, #1
}
    a708:	b006      	add	sp, #24
    a70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
    a70e:	f7fe be75 	b.w	93fc <ll_addr_set>
	LL_ASSERT(!err);
    a712:	4a29      	ldr	r2, [pc, #164]	; (a7b8 <ll_reset+0x114>)
    a714:	4929      	ldr	r1, [pc, #164]	; (a7bc <ll_reset+0x118>)
    a716:	482a      	ldr	r0, [pc, #168]	; (a7c0 <ll_reset+0x11c>)
    a718:	f240 23ff 	movw	r3, #767	; 0x2ff
    a71c:	f00e ff8f 	bl	1963e <assert_print>
    a720:	4040      	eors	r0, r0
    a722:	f380 8811 	msr	BASEPRI, r0
    a726:	f04f 0003 	mov.w	r0, #3
    a72a:	df02      	svc	2
	err = ull_conn_reset();
    a72c:	f002 fbb6 	bl	ce9c <ull_conn_reset>
	LL_ASSERT(!err);
    a730:	2800      	cmp	r0, #0
    a732:	d0c1      	beq.n	a6b8 <ll_reset+0x14>
    a734:	4a20      	ldr	r2, [pc, #128]	; (a7b8 <ll_reset+0x114>)
    a736:	4921      	ldr	r1, [pc, #132]	; (a7bc <ll_reset+0x118>)
    a738:	4821      	ldr	r0, [pc, #132]	; (a7c0 <ll_reset+0x11c>)
    a73a:	f240 3331 	movw	r3, #817	; 0x331
    a73e:	f00e ff7e 	bl	1963e <assert_print>
    a742:	4040      	eors	r0, r0
    a744:	f380 8811 	msr	BASEPRI, r0
    a748:	f04f 0003 	mov.w	r0, #3
    a74c:	df02      	svc	2
    a74e:	e7b3      	b.n	a6b8 <ll_reset+0x14>
	LL_ASSERT(!err);
    a750:	4a19      	ldr	r2, [pc, #100]	; (a7b8 <ll_reset+0x114>)
    a752:	491a      	ldr	r1, [pc, #104]	; (a7bc <ll_reset+0x118>)
    a754:	481a      	ldr	r0, [pc, #104]	; (a7c0 <ll_reset+0x11c>)
    a756:	f240 337a 	movw	r3, #890	; 0x37a
    a75a:	f00e ff70 	bl	1963e <assert_print>
    a75e:	4040      	eors	r0, r0
    a760:	f380 8811 	msr	BASEPRI, r0
    a764:	f04f 0003 	mov.w	r0, #3
    a768:	df02      	svc	2
    a76a:	e7cb      	b.n	a704 <ll_reset+0x60>
	LL_ASSERT(!err);
    a76c:	4a12      	ldr	r2, [pc, #72]	; (a7b8 <ll_reset+0x114>)
    a76e:	4913      	ldr	r1, [pc, #76]	; (a7bc <ll_reset+0x118>)
    a770:	4813      	ldr	r0, [pc, #76]	; (a7c0 <ll_reset+0x11c>)
    a772:	f240 336d 	movw	r3, #877	; 0x36d
    a776:	f00e ff62 	bl	1963e <assert_print>
    a77a:	4040      	eors	r0, r0
    a77c:	f380 8811 	msr	BASEPRI, r0
    a780:	f04f 0003 	mov.w	r0, #3
    a784:	df02      	svc	2
    a786:	e7ba      	b.n	a6fe <ll_reset+0x5a>
		LL_ASSERT(!retval);
    a788:	4a0b      	ldr	r2, [pc, #44]	; (a7b8 <ll_reset+0x114>)
    a78a:	490e      	ldr	r1, [pc, #56]	; (a7c4 <ll_reset+0x120>)
    a78c:	480c      	ldr	r0, [pc, #48]	; (a7c0 <ll_reset+0x11c>)
    a78e:	f44f 7358 	mov.w	r3, #864	; 0x360
    a792:	f00e ff54 	bl	1963e <assert_print>
    a796:	4040      	eors	r0, r0
    a798:	f380 8811 	msr	BASEPRI, r0
    a79c:	f04f 0003 	mov.w	r0, #3
    a7a0:	df02      	svc	2
    a7a2:	e7a1      	b.n	a6e8 <ll_reset+0x44>
    a7a4:	200002b4 	.word	0x200002b4
    a7a8:	20000410 	.word	0x20000410
    a7ac:	200002f0 	.word	0x200002f0
    a7b0:	200002dc 	.word	0x200002dc
    a7b4:	200002a4 	.word	0x200002a4
    a7b8:	0001e1c4 	.word	0x0001e1c4
    a7bc:	0001e200 	.word	0x0001e200
    a7c0:	0001e1a4 	.word	0x0001e1a4
    a7c4:	0001e32c 	.word	0x0001e32c

0000a7c8 <ll_deinit>:
{
    a7c8:	b508      	push	{r3, lr}
	ll_reset();
    a7ca:	f7ff ff6b 	bl	a6a4 <ll_reset>
}
    a7ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
    a7d2:	f007 be03 	b.w	123dc <lll_deinit>
    a7d6:	bf00      	nop

0000a7d8 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    a7d8:	b510      	push	{r4, lr}
    a7da:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	err = lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb, prepare_param, 0U, 0U);
    a7dc:	2400      	movs	r4, #0
    a7de:	e9cd 4400 	strd	r4, r4, [sp]
    a7e2:	9b04      	ldr	r3, [sp, #16]
    a7e4:	f007 ffe6 	bl	127b4 <lll_prepare_resolve>

	return err;
}
    a7e8:	b002      	add	sp, #8
    a7ea:	bd10      	pop	{r4, pc}

0000a7ec <lll_resume>:

void lll_resume(void *param)
{
    a7ec:	b510      	push	{r4, lr}
    a7ee:	4603      	mov	r3, r0
	struct lll_event *next;
	int err;

	next = param;
	err = lll_prepare_resolve(next->is_abort_cb, next->abort_cb, next->prepare_cb,
				  &next->prepare_param, next->is_resume, 1U);
    a7f0:	7f00      	ldrb	r0, [r0, #28]
	err = lll_prepare_resolve(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    a7f2:	691a      	ldr	r2, [r3, #16]
    a7f4:	6999      	ldr	r1, [r3, #24]
    a7f6:	2401      	movs	r4, #1
{
    a7f8:	b082      	sub	sp, #8
	err = lll_prepare_resolve(next->is_abort_cb, next->abort_cb, next->prepare_cb,
    a7fa:	4020      	ands	r0, r4
    a7fc:	e9cd 0400 	strd	r0, r4, [sp]
    a800:	6958      	ldr	r0, [r3, #20]
    a802:	f007 ffd7 	bl	127b4 <lll_prepare_resolve>
	LL_ASSERT(!err || err == -EINPROGRESS);
    a806:	b108      	cbz	r0, a80c <lll_resume+0x20>
    a808:	3077      	adds	r0, #119	; 0x77
    a80a:	d101      	bne.n	a810 <lll_resume+0x24>
}
    a80c:	b002      	add	sp, #8
    a80e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
    a810:	4a06      	ldr	r2, [pc, #24]	; (a82c <lll_resume+0x40>)
    a812:	4907      	ldr	r1, [pc, #28]	; (a830 <lll_resume+0x44>)
    a814:	4807      	ldr	r0, [pc, #28]	; (a834 <lll_resume+0x48>)
    a816:	234e      	movs	r3, #78	; 0x4e
    a818:	f00e ff11 	bl	1963e <assert_print>
    a81c:	4040      	eors	r0, r0
    a81e:	f380 8811 	msr	BASEPRI, r0
    a822:	f04f 0003 	mov.w	r0, #3
    a826:	df02      	svc	2
}
    a828:	b002      	add	sp, #8
    a82a:	bd10      	pop	{r4, pc}
    a82c:	0001e334 	.word	0x0001e334
    a830:	0001e378 	.word	0x0001e378
    a834:	0001e1a4 	.word	0x0001e1a4

0000a838 <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(void)
{
    a838:	b508      	push	{r3, lr}

	bt_hci_driver_register(&drv);
    a83a:	4802      	ldr	r0, [pc, #8]	; (a844 <hci_driver_init+0xc>)
    a83c:	f7fa f95a 	bl	4af4 <bt_hci_driver_register>

	return 0;
}
    a840:	2000      	movs	r0, #0
    a842:	bd08      	pop	{r3, pc}
    a844:	0001e400 	.word	0x0001e400

0000a848 <hci_driver_send>:
{
    a848:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    a84a:	8a03      	ldrh	r3, [r0, #16]
{
    a84c:	b083      	sub	sp, #12
	if (!buf->len) {
    a84e:	b123      	cbz	r3, a85a <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a850:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
    a852:	4604      	mov	r4, r0
    a854:	b1c3      	cbz	r3, a888 <hci_driver_send+0x40>
    a856:	2b02      	cmp	r3, #2
    a858:	d004      	beq.n	a864 <hci_driver_send+0x1c>
    a85a:	f06f 0515 	mvn.w	r5, #21
}
    a85e:	4628      	mov	r0, r5
    a860:	b003      	add	sp, #12
    a862:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    a864:	a901      	add	r1, sp, #4
    a866:	f000 fe6d 	bl	b544 <hci_acl_handle>
	if (evt) {
    a86a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    a86c:	4605      	mov	r5, r0
	if (evt) {
    a86e:	b113      	cbz	r3, a876 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    a870:	4618      	mov	r0, r3
    a872:	f7fa f921 	bl	4ab8 <bt_recv_prio>
	if (!err) {
    a876:	2d00      	cmp	r5, #0
    a878:	d1f1      	bne.n	a85e <hci_driver_send+0x16>
		net_buf_unref(buf);
    a87a:	4620      	mov	r0, r4
    a87c:	f00a f8bc 	bl	149f8 <net_buf_unref>
    a880:	2500      	movs	r5, #0
}
    a882:	4628      	mov	r0, r5
    a884:	b003      	add	sp, #12
    a886:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a888:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    a88a:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    a88c:	f000 fa7a 	bl	ad84 <hci_cmd_handle>
	if (evt) {
    a890:	2800      	cmp	r0, #0
    a892:	d0f2      	beq.n	a87a <hci_driver_send+0x32>
		bt_recv_prio(evt);
    a894:	f7fa f910 	bl	4ab8 <bt_recv_prio>
		if (node_rx) {
    a898:	9d01      	ldr	r5, [sp, #4]
    a89a:	2d00      	cmp	r5, #0
    a89c:	d0ed      	beq.n	a87a <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    a89e:	4628      	mov	r0, r5
    a8a0:	f001 f98c 	bl	bbbc <hci_get_class>
    a8a4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    a8a6:	9901      	ldr	r1, [sp, #4]
    a8a8:	4801      	ldr	r0, [pc, #4]	; (a8b0 <hci_driver_send+0x68>)
    a8aa:	f012 fbd1 	bl	1d050 <k_queue_append>
	if (!err) {
    a8ae:	e7e4      	b.n	a87a <hci_driver_send+0x32>
    a8b0:	20001af4 	.word	0x20001af4

0000a8b4 <hci_driver_close>:
{
    a8b4:	b508      	push	{r3, lr}
	ll_deinit();
    a8b6:	f7ff ff87 	bl	a7c8 <ll_deinit>
	z_impl_k_thread_abort(thread);
    a8ba:	4804      	ldr	r0, [pc, #16]	; (a8cc <hci_driver_close+0x18>)
    a8bc:	f7f9 fab4 	bl	3e28 <z_impl_k_thread_abort>
    a8c0:	4803      	ldr	r0, [pc, #12]	; (a8d0 <hci_driver_close+0x1c>)
    a8c2:	f7f9 fab1 	bl	3e28 <z_impl_k_thread_abort>
}
    a8c6:	2000      	movs	r0, #0
    a8c8:	bd08      	pop	{r3, pc}
    a8ca:	bf00      	nop
    a8cc:	20000d80 	.word	0x20000d80
    a8d0:	20000d00 	.word	0x20000d00

0000a8d4 <recv_thread>:
{
    a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
    a8d8:	4e42      	ldr	r6, [pc, #264]	; (a9e4 <recv_thread+0x110>)
		LL_ASSERT(0);
    a8da:	f8df 810c 	ldr.w	r8, [pc, #268]	; a9e8 <recv_thread+0x114>
    a8de:	4f43      	ldr	r7, [pc, #268]	; (a9ec <recv_thread+0x118>)
{
    a8e0:	b082      	sub	sp, #8
    a8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a8ea:	4630      	mov	r0, r6
    a8ec:	f00d fa60 	bl	17db0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a8f0:	2800      	cmp	r0, #0
    a8f2:	d0f6      	beq.n	a8e2 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
    a8f4:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a8f6:	9001      	str	r0, [sp, #4]
	switch (class) {
    a8f8:	2b04      	cmp	r3, #4
    a8fa:	d821      	bhi.n	a940 <recv_thread+0x6c>
    a8fc:	2b00      	cmp	r3, #0
    a8fe:	d14b      	bne.n	a998 <recv_thread+0xc4>
		LL_ASSERT(0);
    a900:	483b      	ldr	r0, [pc, #236]	; (a9f0 <recv_thread+0x11c>)
    a902:	f240 13cb 	movw	r3, #459	; 0x1cb
    a906:	4642      	mov	r2, r8
    a908:	4639      	mov	r1, r7
    a90a:	f00e fe98 	bl	1963e <assert_print>
    a90e:	4040      	eors	r0, r0
    a910:	f380 8811 	msr	BASEPRI, r0
    a914:	f04f 0003 	mov.w	r0, #3
    a918:	df02      	svc	2
	node_rx->hdr.next = NULL;
    a91a:	9b01      	ldr	r3, [sp, #4]
    a91c:	2200      	movs	r2, #0
    a91e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a920:	a801      	add	r0, sp, #4
    a922:	f7ff f9a7 	bl	9c74 <ll_rx_mem_release>
    a926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a92e:	4630      	mov	r0, r6
    a930:	f00d fa3e 	bl	17db0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    a934:	2800      	cmp	r0, #0
    a936:	d0d4      	beq.n	a8e2 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
    a938:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    a93a:	9001      	str	r0, [sp, #4]
	switch (class) {
    a93c:	2b04      	cmp	r3, #4
    a93e:	d9dd      	bls.n	a8fc <recv_thread+0x28>
    a940:	2b05      	cmp	r3, #5
    a942:	d1dd      	bne.n	a900 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    a944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a94c:	2003      	movs	r0, #3
    a94e:	f7f9 fbe5 	bl	411c <bt_buf_get_rx>
    a952:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    a954:	4621      	mov	r1, r4
    a956:	9801      	ldr	r0, [sp, #4]
    a958:	f000 fe7a 	bl	b650 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    a95c:	9b01      	ldr	r3, [sp, #4]
    a95e:	2200      	movs	r2, #0
    a960:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a962:	a801      	add	r0, sp, #4
    a964:	f7ff f986 	bl	9c74 <ll_rx_mem_release>
		while (buf) {
    a968:	2c00      	cmp	r4, #0
    a96a:	d0ba      	beq.n	a8e2 <recv_thread+0xe>
			frag = net_buf_ref(buf);
    a96c:	4620      	mov	r0, r4
    a96e:	f011 f89c 	bl	1baaa <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    a972:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    a974:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    a976:	2000      	movs	r0, #0
    a978:	f011 f8bd 	bl	1baf6 <net_buf_frag_del>
			if (frag->len) {
    a97c:	8a2b      	ldrh	r3, [r5, #16]
			buf = net_buf_frag_del(NULL, buf);
    a97e:	4604      	mov	r4, r0
				bt_recv(frag);
    a980:	4628      	mov	r0, r5
			if (frag->len) {
    a982:	b133      	cbz	r3, a992 <recv_thread+0xbe>
				bt_recv(frag);
    a984:	f7fa f81c 	bl	49c0 <bt_recv>
	z_impl_k_yield();
    a988:	f00d fec6 	bl	18718 <z_impl_k_yield>
		while (buf) {
    a98c:	2c00      	cmp	r4, #0
    a98e:	d1ed      	bne.n	a96c <recv_thread+0x98>
    a990:	e7a7      	b.n	a8e2 <recv_thread+0xe>
				net_buf_unref(frag);
    a992:	f00a f831 	bl	149f8 <net_buf_unref>
    a996:	e7f7      	b.n	a988 <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    a998:	2b02      	cmp	r3, #2
    a99a:	d013      	beq.n	a9c4 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    a99c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a9a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a9a4:	2001      	movs	r0, #1
    a9a6:	f7f9 fbb9 	bl	411c <bt_buf_get_rx>
    a9aa:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    a9ac:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    a9ae:	b19c      	cbz	r4, a9d8 <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
    a9b0:	4621      	mov	r1, r4
    a9b2:	f000 fe87 	bl	b6c4 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    a9b6:	9b01      	ldr	r3, [sp, #4]
    a9b8:	2200      	movs	r2, #0
    a9ba:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    a9bc:	a801      	add	r0, sp, #4
    a9be:	f7ff f959 	bl	9c74 <ll_rx_mem_release>
		while (buf) {
    a9c2:	e7d3      	b.n	a96c <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    a9c4:	2200      	movs	r2, #0
    a9c6:	2300      	movs	r3, #0
    a9c8:	2101      	movs	r1, #1
    a9ca:	2000      	movs	r0, #0
    a9cc:	f7f9 fbd6 	bl	417c <bt_buf_get_evt>
    a9d0:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    a9d2:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    a9d4:	2c00      	cmp	r4, #0
    a9d6:	d1eb      	bne.n	a9b0 <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
    a9d8:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    a9da:	a801      	add	r0, sp, #4
    a9dc:	f7ff f94a 	bl	9c74 <ll_rx_mem_release>
		while (buf) {
    a9e0:	e77f      	b.n	a8e2 <recv_thread+0xe>
    a9e2:	bf00      	nop
    a9e4:	20001af4 	.word	0x20001af4
    a9e8:	0001e38c 	.word	0x0001e38c
    a9ec:	0001e220 	.word	0x0001e220
    a9f0:	0001e1a4 	.word	0x0001e1a4

0000a9f4 <prio_recv_thread>:
{
    a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    a9f8:	4f2e      	ldr	r7, [pc, #184]	; (aab4 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    a9fa:	4e2f      	ldr	r6, [pc, #188]	; (aab8 <prio_recv_thread+0xc4>)
{
    a9fc:	b082      	sub	sp, #8
    a9fe:	e00c      	b.n	aa1a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    aa00:	f7f9 fbbc 	bl	417c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    aa04:	4622      	mov	r2, r4
    aa06:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    aa0a:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    aa0c:	f001 f8be 	bl	bb8c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    aa10:	4620      	mov	r0, r4
    aa12:	f7fa f851 	bl	4ab8 <bt_recv_prio>
	z_impl_k_yield();
    aa16:	f00d fe7f 	bl	18718 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    aa1a:	f10d 0102 	add.w	r1, sp, #2
    aa1e:	a801      	add	r0, sp, #4
    aa20:	f7fe ffe4 	bl	99ec <ll_rx_get>
    aa24:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    aa26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aa2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa2e:	2100      	movs	r1, #0
    aa30:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    aa32:	2c00      	cmp	r4, #0
    aa34:	d1e4      	bne.n	aa00 <prio_recv_thread+0xc>
		if (node_rx) {
    aa36:	9b01      	ldr	r3, [sp, #4]
    aa38:	b1b3      	cbz	r3, aa68 <prio_recv_thread+0x74>
			ll_rx_dequeue();
    aa3a:	f7ff f851 	bl	9ae0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    aa3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    aa42:	4640      	mov	r0, r8
    aa44:	f001 f8ba 	bl	bbbc <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    aa48:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    aa4a:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    aa4e:	796b      	ldrb	r3, [r5, #5]
    aa50:	2b03      	cmp	r3, #3
    aa52:	d102      	bne.n	aa5a <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    aa54:	792b      	ldrb	r3, [r5, #4]
    aa56:	2b18      	cmp	r3, #24
    aa58:	d00e      	beq.n	aa78 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    aa5a:	4629      	mov	r1, r5
    aa5c:	4630      	mov	r0, r6
    aa5e:	f012 faf7 	bl	1d050 <k_queue_append>
		if (iso_received || node_rx) {
    aa62:	9b01      	ldr	r3, [sp, #4]
    aa64:	2b00      	cmp	r3, #0
    aa66:	d1d8      	bne.n	aa1a <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    aa68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aa6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa70:	4638      	mov	r0, r7
    aa72:	f00d f9f7 	bl	17e64 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    aa76:	e7d0      	b.n	aa1a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    aa78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa7c:	4621      	mov	r1, r4
    aa7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aa82:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    aa84:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    aa88:	f7f9 fb78 	bl	417c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    aa8c:	4641      	mov	r1, r8
    aa8e:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    aa90:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    aa92:	f105 001c 	add.w	r0, r5, #28
    aa96:	f000 fdb3 	bl	b600 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    aa9a:	4640      	mov	r0, r8
    aa9c:	f000 fdd0 	bl	b640 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    aaa0:	4620      	mov	r0, r4
			if (buf) {
    aaa2:	b124      	cbz	r4, aaae <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    aaa4:	f7fa f808 	bl	4ab8 <bt_recv_prio>
					net_buf_unref(buf);
    aaa8:	4620      	mov	r0, r4
    aaaa:	f009 ffa5 	bl	149f8 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    aaae:	9d01      	ldr	r5, [sp, #4]
    aab0:	e7d3      	b.n	aa5a <prio_recv_thread+0x66>
    aab2:	bf00      	nop
    aab4:	20001b0c 	.word	0x20001b0c
    aab8:	20001af4 	.word	0x20001af4

0000aabc <hci_driver_open>:
{
    aabc:	b5d0      	push	{r4, r6, r7, lr}
    aabe:	b088      	sub	sp, #32
	z_impl_k_queue_init(queue);
    aac0:	481e      	ldr	r0, [pc, #120]	; (ab3c <hci_driver_open+0x80>)
    aac2:	f012 fa99 	bl	1cff8 <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    aac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aaca:	2100      	movs	r1, #0
    aacc:	481c      	ldr	r0, [pc, #112]	; (ab40 <hci_driver_open+0x84>)
    aace:	f012 fad8 	bl	1d082 <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
    aad2:	481b      	ldr	r0, [pc, #108]	; (ab40 <hci_driver_open+0x84>)
    aad4:	f7ff fd76 	bl	a5c4 <ll_init>
	if (err) {
    aad8:	4604      	mov	r4, r0
    aada:	bb58      	cbnz	r0, ab34 <hci_driver_open+0x78>
	hci_init(NULL);
    aadc:	f001 f884 	bl	bbe8 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    aae0:	2600      	movs	r6, #0
    aae2:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    aae4:	f06f 0209 	mvn.w	r2, #9
    aae8:	e9cd 2403 	strd	r2, r4, [sp, #12]
    aaec:	e9cd 6706 	strd	r6, r7, [sp, #24]
    aaf0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    aaf4:	4b13      	ldr	r3, [pc, #76]	; (ab44 <hci_driver_open+0x88>)
    aaf6:	4914      	ldr	r1, [pc, #80]	; (ab48 <hci_driver_open+0x8c>)
    aaf8:	9400      	str	r4, [sp, #0]
    aafa:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    aafe:	4813      	ldr	r0, [pc, #76]	; (ab4c <hci_driver_open+0x90>)
    ab00:	f00c fffc 	bl	17afc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ab04:	4912      	ldr	r1, [pc, #72]	; (ab50 <hci_driver_open+0x94>)
    ab06:	4811      	ldr	r0, [pc, #68]	; (ab4c <hci_driver_open+0x90>)
    ab08:	f012 f9e9 	bl	1cede <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ab0c:	f06f 0207 	mvn.w	r2, #7
    ab10:	e9cd 2403 	strd	r2, r4, [sp, #12]
    ab14:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ab18:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ab1c:	4b0d      	ldr	r3, [pc, #52]	; (ab54 <hci_driver_open+0x98>)
    ab1e:	490e      	ldr	r1, [pc, #56]	; (ab58 <hci_driver_open+0x9c>)
    ab20:	9400      	str	r4, [sp, #0]
    ab22:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    ab26:	480d      	ldr	r0, [pc, #52]	; (ab5c <hci_driver_open+0xa0>)
    ab28:	f00c ffe8 	bl	17afc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    ab2c:	490c      	ldr	r1, [pc, #48]	; (ab60 <hci_driver_open+0xa4>)
    ab2e:	480b      	ldr	r0, [pc, #44]	; (ab5c <hci_driver_open+0xa0>)
    ab30:	f012 f9d5 	bl	1cede <z_impl_k_thread_name_set>
}
    ab34:	4620      	mov	r0, r4
    ab36:	b008      	add	sp, #32
    ab38:	bdd0      	pop	{r4, r6, r7, pc}
    ab3a:	bf00      	nop
    ab3c:	20001af4 	.word	0x20001af4
    ab40:	20001b0c 	.word	0x20001b0c
    ab44:	0000a9f5 	.word	0x0000a9f5
    ab48:	20003940 	.word	0x20003940
    ab4c:	20000d80 	.word	0x20000d80
    ab50:	0001e3cc 	.word	0x0001e3cc
    ab54:	0000a8d5 	.word	0x0000a8d5
    ab58:	20003440 	.word	0x20003440
    ab5c:	20000d00 	.word	0x20000d00
    ab60:	0001e3d8 	.word	0x0001e3d8

0000ab64 <hci_recv_fifo_reset>:
{
    ab64:	b510      	push	{r4, lr}
	k_sched_lock();
    ab66:	f00d fd9f 	bl	186a8 <k_sched_lock>
	z_impl_k_queue_cancel_wait(queue);
    ab6a:	4c05      	ldr	r4, [pc, #20]	; (ab80 <hci_recv_fifo_reset+0x1c>)
    ab6c:	4620      	mov	r0, r4
    ab6e:	f012 fa4f 	bl	1d010 <z_impl_k_queue_cancel_wait>
	z_impl_k_queue_init(queue);
    ab72:	4620      	mov	r0, r4
    ab74:	f012 fa40 	bl	1cff8 <z_impl_k_queue_init>
}
    ab78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_sched_unlock();
    ab7c:	f00d bda8 	b.w	186d0 <k_sched_unlock>
    ab80:	20001af4 	.word	0x20001af4

0000ab84 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ab86:	4c18      	ldr	r4, [pc, #96]	; (abe8 <le_remote_feat_complete+0x64>)
    ab88:	6864      	ldr	r4, [r4, #4]
    ab8a:	00a4      	lsls	r4, r4, #2
    ab8c:	d504      	bpl.n	ab98 <le_remote_feat_complete+0x14>
    ab8e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    ab90:	4a16      	ldr	r2, [pc, #88]	; (abec <le_remote_feat_complete+0x68>)
    ab92:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ab94:	0712      	lsls	r2, r2, #28
    ab96:	d400      	bmi.n	ab9a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    ab98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab9a:	f103 040c 	add.w	r4, r3, #12
    ab9e:	4607      	mov	r7, r0
    aba0:	460e      	mov	r6, r1
    aba2:	4620      	mov	r0, r4
    aba4:	2102      	movs	r1, #2
    aba6:	f010 ffb6 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    abaa:	f640 433e 	movw	r3, #3134	; 0xc3e
    abae:	8003      	strh	r3, [r0, #0]
    abb0:	2101      	movs	r1, #1
    abb2:	4620      	mov	r0, r4
    abb4:	f010 ffaf 	bl	1bb16 <net_buf_simple_add>
    abb8:	4603      	mov	r3, r0
	me->subevent = subevt;
    abba:	2204      	movs	r2, #4
    abbc:	701a      	strb	r2, [r3, #0]
    abbe:	4620      	mov	r0, r4
    abc0:	210b      	movs	r1, #11
    abc2:	f010 ffa8 	bl	1bb16 <net_buf_simple_add>
		memcpy(&sep->features[0],
    abc6:	2208      	movs	r2, #8
	sep->status = status;
    abc8:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    abca:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    abce:	b92f      	cbnz	r7, abdc <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
    abd0:	1d31      	adds	r1, r6, #4
    abd2:	3003      	adds	r0, #3
}
    abd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    abd8:	f00f b80c 	b.w	19bf4 <memcpy>
}
    abdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    abe0:	2100      	movs	r1, #0
    abe2:	3003      	adds	r0, #3
    abe4:	f00f b811 	b.w	19c0a <memset>
    abe8:	20000168 	.word	0x20000168
    abec:	20000160 	.word	0x20000160

0000abf0 <hci_vendor_cmd_handle_common>:
{
    abf0:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
    abf2:	3801      	subs	r0, #1
{
    abf4:	b086      	sub	sp, #24
    abf6:	4614      	mov	r4, r2
	switch (ocf) {
    abf8:	2811      	cmp	r0, #17
    abfa:	d80a      	bhi.n	ac12 <hci_vendor_cmd_handle_common+0x22>
    abfc:	e8df f000 	tbb	[pc, r0]
    ac00:	095a4023 	.word	0x095a4023
    ac04:	7d096b09 	.word	0x7d096b09
    ac08:	0909ab98 	.word	0x0909ab98
    ac0c:	09090909 	.word	0x09090909
    ac10:	0d09      	.short	0x0d09
    ac12:	f06f 0015 	mvn.w	r0, #21
}
    ac16:	b006      	add	sp, #24
    ac18:	bd70      	pop	{r4, r5, r6, pc}
	struct bt_hci_cp_vs_set_min_num_used_chans *cmd = (void *)buf->data;
    ac1a:	68cb      	ldr	r3, [r1, #12]
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
    ac1c:	78da      	ldrb	r2, [r3, #3]
    ac1e:	7899      	ldrb	r1, [r3, #2]
    ac20:	8818      	ldrh	r0, [r3, #0]
    ac22:	f007 f889 	bl	11d38 <ll_set_min_used_chans>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ac26:	4b55      	ldr	r3, [pc, #340]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
	status = ll_set_min_used_chans(handle, cmd->phys, cmd->min_used_chans);
    ac28:	4606      	mov	r6, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    ac2a:	2101      	movs	r1, #1
    ac2c:	8818      	ldrh	r0, [r3, #0]
    ac2e:	f00f faf8 	bl	1a222 <bt_hci_cmd_complete_create>
    ac32:	2101      	movs	r1, #1
    ac34:	4605      	mov	r5, r0
    ac36:	300c      	adds	r0, #12
    ac38:	f010 ff6d 	bl	1bb16 <net_buf_simple_add>
	ccst->status = status;
    ac3c:	7006      	strb	r6, [r0, #0]
	*evt = cmd_complete_status(status);
    ac3e:	6025      	str	r5, [r4, #0]
	return 0;
    ac40:	2000      	movs	r0, #0
}
    ac42:	b006      	add	sp, #24
    ac44:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ac46:	4b4d      	ldr	r3, [pc, #308]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
    ac48:	210d      	movs	r1, #13
    ac4a:	8818      	ldrh	r0, [r3, #0]
    ac4c:	f00f fae9 	bl	1a222 <bt_hci_cmd_complete_create>
    ac50:	210d      	movs	r1, #13
    ac52:	6020      	str	r0, [r4, #0]
    ac54:	300c      	adds	r0, #12
    ac56:	f010 ff5e 	bl	1bb16 <net_buf_simple_add>
	rp->fw_variant = 0U;
    ac5a:	f44f 7240 	mov.w	r2, #768	; 0x300
	rp->status = 0x00;
    ac5e:	2300      	movs	r3, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    ac60:	f04f 1402 	mov.w	r4, #131074	; 0x20002
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    ac64:	2104      	movs	r1, #4
	rp->fw_variant = 0U;
    ac66:	f8a0 2005 	strh.w	r2, [r0, #5]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    ac6a:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    ac6c:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    ac6e:	f8c0 4001 	str.w	r4, [r0, #1]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    ac72:	71c1      	strb	r1, [r0, #7]
    ac74:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    ac76:	7242      	strb	r2, [r0, #9]
    ac78:	7283      	strb	r3, [r0, #10]
    ac7a:	72c3      	strb	r3, [r0, #11]
    ac7c:	7303      	strb	r3, [r0, #12]
}
    ac7e:	e7df      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ac80:	4b3e      	ldr	r3, [pc, #248]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
    ac82:	2141      	movs	r1, #65	; 0x41
    ac84:	8818      	ldrh	r0, [r3, #0]
    ac86:	f00f facc 	bl	1a222 <bt_hci_cmd_complete_create>
    ac8a:	2141      	movs	r1, #65	; 0x41
    ac8c:	6020      	str	r0, [r4, #0]
    ac8e:	300c      	adds	r0, #12
    ac90:	f010 ff41 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    ac94:	2100      	movs	r1, #0
    ac96:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    ac98:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    ac9a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    ac9e:	f00e ffb4 	bl	19c0a <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    aca2:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    aca4:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    aca6:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    acaa:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
    acae:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    acb0:	70a3      	strb	r3, [r4, #2]
}
    acb2:	e7c5      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    acb4:	4b31      	ldr	r3, [pc, #196]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
    acb6:	2109      	movs	r1, #9
    acb8:	8818      	ldrh	r0, [r3, #0]
    acba:	f00f fab2 	bl	1a222 <bt_hci_cmd_complete_create>
    acbe:	2109      	movs	r1, #9
    acc0:	6020      	str	r0, [r4, #0]
    acc2:	300c      	adds	r0, #12
    acc4:	f010 ff27 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    acc8:	2100      	movs	r1, #0
    acca:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    acce:	2208      	movs	r2, #8
    acd0:	f00e ff9b 	bl	19c0a <memset>
}
    acd4:	e7b4      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    acd6:	68c9      	ldr	r1, [r1, #12]
    acd8:	2000      	movs	r0, #0
    acda:	f7fe fb8f 	bl	93fc <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    acde:	4b27      	ldr	r3, [pc, #156]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
    ace0:	2101      	movs	r1, #1
    ace2:	8818      	ldrh	r0, [r3, #0]
    ace4:	f00f fa9d 	bl	1a222 <bt_hci_cmd_complete_create>
    ace8:	2101      	movs	r1, #1
    acea:	4605      	mov	r5, r0
    acec:	300c      	adds	r0, #12
    acee:	f010 ff12 	bl	1bb16 <net_buf_simple_add>
	ccst->status = status;
    acf2:	2300      	movs	r3, #0
    acf4:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
    acf6:	6025      	str	r5, [r4, #0]
}
    acf8:	e7a2      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
	const char build_info[] = HCI_VS_BUILD_INFO;
    acfa:	4d21      	ldr	r5, [pc, #132]	; (ad80 <hci_vendor_cmd_handle_common+0x190>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    acfc:	4e1f      	ldr	r6, [pc, #124]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    acfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ad00:	f10d 0c04 	add.w	ip, sp, #4
    ad04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ad08:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ad0a:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    ad0c:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ad10:	2113      	movs	r1, #19
    ad12:	f00f fa86 	bl	1a222 <bt_hci_cmd_complete_create>
    ad16:	2113      	movs	r1, #19
    ad18:	6020      	str	r0, [r4, #0]
    ad1a:	300c      	adds	r0, #12
    ad1c:	f010 fefb 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    ad20:	2300      	movs	r3, #0
    ad22:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    ad26:	2212      	movs	r2, #18
    ad28:	a901      	add	r1, sp, #4
    ad2a:	f00e ff63 	bl	19bf4 <memcpy>
}
    ad2e:	e787      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ad30:	4b12      	ldr	r3, [pc, #72]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
    ad32:	2118      	movs	r1, #24
    ad34:	8818      	ldrh	r0, [r3, #0]
    ad36:	f00f fa74 	bl	1a222 <bt_hci_cmd_complete_create>
    ad3a:	2118      	movs	r1, #24
    ad3c:	6020      	str	r0, [r4, #0]
    ad3e:	300c      	adds	r0, #12
    ad40:	f010 fee9 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    ad44:	2300      	movs	r3, #0
    ad46:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ad48:	2101      	movs	r1, #1
	rp->status = 0x00;
    ad4a:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    ad4e:	f009 fd29 	bl	147a4 <hci_vendor_read_static_addr>
    ad52:	7060      	strb	r0, [r4, #1]
}
    ad54:	e774      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ad56:	4b09      	ldr	r3, [pc, #36]	; (ad7c <hci_vendor_cmd_handle_common+0x18c>)
    ad58:	2121      	movs	r1, #33	; 0x21
    ad5a:	8818      	ldrh	r0, [r3, #0]
    ad5c:	f00f fa61 	bl	1a222 <bt_hci_cmd_complete_create>
    ad60:	2121      	movs	r1, #33	; 0x21
    ad62:	6020      	str	r0, [r4, #0]
    ad64:	300c      	adds	r0, #12
    ad66:	f010 fed6 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    ad6a:	4601      	mov	r1, r0
    ad6c:	2300      	movs	r3, #0
    ad6e:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    ad72:	3001      	adds	r0, #1
    ad74:	f009 fd66 	bl	14844 <hci_vendor_read_key_hierarchy_roots>
}
    ad78:	e762      	b.n	ac40 <hci_vendor_cmd_handle_common+0x50>
    ad7a:	bf00      	nop
    ad7c:	200026f4 	.word	0x200026f4
    ad80:	0001e418 	.word	0x0001e418

0000ad84 <hci_cmd_handle>:
{
    ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
    ad88:	8a03      	ldrh	r3, [r0, #16]
{
    ad8a:	b08c      	sub	sp, #48	; 0x30
	struct net_buf *evt = NULL;
    ad8c:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    ad8e:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    ad90:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    ad92:	d92d      	bls.n	adf0 <hci_cmd_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
    ad94:	4604      	mov	r4, r0
    ad96:	2103      	movs	r1, #3
    ad98:	300c      	adds	r0, #12
    ad9a:	f010 fee3 	bl	1bb64 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    ad9e:	8a22      	ldrh	r2, [r4, #16]
    ada0:	7883      	ldrb	r3, [r0, #2]
    ada2:	429a      	cmp	r2, r3
    ada4:	d324      	bcc.n	adf0 <hci_cmd_handle+0x6c>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ada6:	8802      	ldrh	r2, [r0, #0]
    ada8:	4ed4      	ldr	r6, [pc, #848]	; (b0fc <hci_cmd_handle+0x378>)
	switch (BT_OGF(_opcode)) {
    adaa:	f3c2 2385 	ubfx	r3, r2, #10, #6
    adae:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    adb0:	8032      	strh	r2, [r6, #0]
    adb2:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    adb4:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    adb8:	d809      	bhi.n	adce <hci_cmd_handle+0x4a>
    adba:	b19b      	cbz	r3, ade4 <hci_cmd_handle+0x60>
    adbc:	3b01      	subs	r3, #1
    adbe:	2b07      	cmp	r3, #7
    adc0:	d810      	bhi.n	ade4 <hci_cmd_handle+0x60>
    adc2:	e8df f003 	tbb	[pc, r3]
    adc6:	0f1a      	.short	0x0f1a
    adc8:	0f0f4926 	.word	0x0f0f4926
    adcc:	610f      	.short	0x610f
    adce:	2b3f      	cmp	r3, #63	; 0x3f
    add0:	d108      	bne.n	ade4 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    add2:	aa07      	add	r2, sp, #28
    add4:	4621      	mov	r1, r4
    add6:	4628      	mov	r0, r5
    add8:	f7ff ff0a 	bl	abf0 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    addc:	3016      	adds	r0, #22
    adde:	f040 83a3 	bne.w	b528 <hci_cmd_handle+0x7a4>
	return bt_hci_cmd_status_create(_opcode, status);
    ade2:	8830      	ldrh	r0, [r6, #0]
    ade4:	2101      	movs	r1, #1
}
    ade6:	b00c      	add	sp, #48	; 0x30
    ade8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
    adec:	f00f ba2b 	b.w	1a246 <bt_hci_cmd_status_create>
		return NULL;
    adf0:	2400      	movs	r4, #0
}
    adf2:	4620      	mov	r0, r4
    adf4:	b00c      	add	sp, #48	; 0x30
    adf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
    adfa:	2d06      	cmp	r5, #6
    adfc:	f000 834e 	beq.w	b49c <hci_cmd_handle+0x718>
    ae00:	2d1d      	cmp	r5, #29
    ae02:	d1ef      	bne.n	ade4 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
    ae04:	68e3      	ldr	r3, [r4, #12]
	status = ll_version_ind_send(handle);
    ae06:	8818      	ldrh	r0, [r3, #0]
    ae08:	f001 ff3a 	bl	cc80 <ll_version_ind_send>
    ae0c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    ae0e:	8830      	ldrh	r0, [r6, #0]
    ae10:	e7e9      	b.n	ade6 <hci_cmd_handle+0x62>
	switch (ocf) {
    ae12:	2d63      	cmp	r5, #99	; 0x63
    ae14:	f000 8385 	beq.w	b522 <hci_cmd_handle+0x79e>
    ae18:	f200 80e6 	bhi.w	afe8 <hci_cmd_handle+0x264>
    ae1c:	2d03      	cmp	r5, #3
    ae1e:	f000 835d 	beq.w	b4dc <hci_cmd_handle+0x758>
    ae22:	2d2d      	cmp	r5, #45	; 0x2d
    ae24:	f040 80cc 	bne.w	afc0 <hci_cmd_handle+0x23c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    ae28:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ae2a:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    ae2c:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    ae2e:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    ae32:	f00f f9f6 	bl	1a222 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    ae36:	2104      	movs	r1, #4
    ae38:	4604      	mov	r4, r0
    ae3a:	300c      	adds	r0, #12
    ae3c:	f010 fe6b 	bl	1bb16 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    ae40:	b2b7      	uxth	r7, r6
    ae42:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    ae44:	1cc3      	adds	r3, r0, #3
    ae46:	4642      	mov	r2, r8
    ae48:	4639      	mov	r1, r7
    ae4a:	2002      	movs	r0, #2
    ae4c:	f7fe fac2 	bl	93d4 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
    ae50:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
    ae54:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
    ae56:	e7cc      	b.n	adf2 <hci_cmd_handle+0x6e>
	switch (ocf) {
    ae58:	1e6a      	subs	r2, r5, #1
    ae5a:	2a08      	cmp	r2, #8
    ae5c:	d8c2      	bhi.n	ade4 <hci_cmd_handle+0x60>
    ae5e:	a301      	add	r3, pc, #4	; (adr r3, ae64 <hci_cmd_handle+0xe0>)
    ae60:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    ae64:	0000b0d3 	.word	0x0000b0d3
    ae68:	0000b05f 	.word	0x0000b05f
    ae6c:	0000b03b 	.word	0x0000b03b
    ae70:	0000ade5 	.word	0x0000ade5
    ae74:	0000ade5 	.word	0x0000ade5
    ae78:	0000ade5 	.word	0x0000ade5
    ae7c:	0000ade5 	.word	0x0000ade5
    ae80:	0000ade5 	.word	0x0000ade5
    ae84:	0000b01d 	.word	0x0000b01d
	switch (ocf) {
    ae88:	1e6a      	subs	r2, r5, #1
    ae8a:	2a4a      	cmp	r2, #74	; 0x4a
    ae8c:	d8aa      	bhi.n	ade4 <hci_cmd_handle+0x60>
    ae8e:	a301      	add	r3, pc, #4	; (adr r3, ae94 <hci_cmd_handle+0x110>)
    ae90:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    ae94:	0000b151 	.word	0x0000b151
    ae98:	0000b131 	.word	0x0000b131
    ae9c:	0000b1f5 	.word	0x0000b1f5
    aea0:	0000ade5 	.word	0x0000ade5
    aea4:	0000b1eb 	.word	0x0000b1eb
    aea8:	0000b1cf 	.word	0x0000b1cf
    aeac:	0000b1b7 	.word	0x0000b1b7
    aeb0:	0000b1ab 	.word	0x0000b1ab
    aeb4:	0000b19f 	.word	0x0000b19f
    aeb8:	0000b17f 	.word	0x0000b17f
    aebc:	0000ade5 	.word	0x0000ade5
    aec0:	0000ade5 	.word	0x0000ade5
    aec4:	0000ade5 	.word	0x0000ade5
    aec8:	0000ade5 	.word	0x0000ade5
    aecc:	0000ade5 	.word	0x0000ade5
    aed0:	0000ade5 	.word	0x0000ade5
    aed4:	0000ade5 	.word	0x0000ade5
    aed8:	0000ade5 	.word	0x0000ade5
    aedc:	0000b15d 	.word	0x0000b15d
    aee0:	0000ade5 	.word	0x0000ade5
    aee4:	0000b365 	.word	0x0000b365
    aee8:	0000b357 	.word	0x0000b357
    aeec:	0000b327 	.word	0x0000b327
    aef0:	0000b309 	.word	0x0000b309
    aef4:	0000ade5 	.word	0x0000ade5
    aef8:	0000b2ff 	.word	0x0000b2ff
    aefc:	0000b2ef 	.word	0x0000b2ef
    af00:	0000b2d1 	.word	0x0000b2d1
    af04:	0000ade5 	.word	0x0000ade5
    af08:	0000ade5 	.word	0x0000ade5
    af0c:	0000ade5 	.word	0x0000ade5
    af10:	0000b2b1 	.word	0x0000b2b1
    af14:	0000b3d9 	.word	0x0000b3d9
    af18:	0000b3c9 	.word	0x0000b3c9
    af1c:	0000b397 	.word	0x0000b397
    af20:	0000b38b 	.word	0x0000b38b
    af24:	0000ade5 	.word	0x0000ade5
    af28:	0000ade5 	.word	0x0000ade5
    af2c:	0000ade5 	.word	0x0000ade5
    af30:	0000ade5 	.word	0x0000ade5
    af34:	0000ade5 	.word	0x0000ade5
    af38:	0000ade5 	.word	0x0000ade5
    af3c:	0000ade5 	.word	0x0000ade5
    af40:	0000ade5 	.word	0x0000ade5
    af44:	0000ade5 	.word	0x0000ade5
    af48:	0000ade5 	.word	0x0000ade5
    af4c:	0000b455 	.word	0x0000b455
    af50:	0000b3f3 	.word	0x0000b3f3
    af54:	0000b291 	.word	0x0000b291
    af58:	0000b23d 	.word	0x0000b23d
    af5c:	0000ade5 	.word	0x0000ade5
    af60:	0000ade5 	.word	0x0000ade5
    af64:	0000ade5 	.word	0x0000ade5
    af68:	0000ade5 	.word	0x0000ade5
    af6c:	0000ade5 	.word	0x0000ade5
    af70:	0000ade5 	.word	0x0000ade5
    af74:	0000ade5 	.word	0x0000ade5
    af78:	0000ade5 	.word	0x0000ade5
    af7c:	0000ade5 	.word	0x0000ade5
    af80:	0000ade5 	.word	0x0000ade5
    af84:	0000ade5 	.word	0x0000ade5
    af88:	0000ade5 	.word	0x0000ade5
    af8c:	0000ade5 	.word	0x0000ade5
    af90:	0000ade5 	.word	0x0000ade5
    af94:	0000ade5 	.word	0x0000ade5
    af98:	0000ade5 	.word	0x0000ade5
    af9c:	0000ade5 	.word	0x0000ade5
    afa0:	0000ade5 	.word	0x0000ade5
    afa4:	0000ade5 	.word	0x0000ade5
    afa8:	0000ade5 	.word	0x0000ade5
    afac:	0000ade5 	.word	0x0000ade5
    afb0:	0000ade5 	.word	0x0000ade5
    afb4:	0000ade5 	.word	0x0000ade5
    afb8:	0000ade5 	.word	0x0000ade5
    afbc:	0000b111 	.word	0x0000b111
	switch (ocf) {
    afc0:	2d01      	cmp	r5, #1
    afc2:	f47f af0f 	bne.w	ade4 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    afc6:	68e2      	ldr	r2, [r4, #12]
	event_mask = sys_get_le64(cmd->events);
    afc8:	4b4d      	ldr	r3, [pc, #308]	; (b100 <hci_cmd_handle+0x37c>)
    afca:	6811      	ldr	r1, [r2, #0]
    afcc:	6852      	ldr	r2, [r2, #4]
    afce:	6019      	str	r1, [r3, #0]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    afd0:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    afd2:	2101      	movs	r1, #1
    afd4:	f00f f925 	bl	1a222 <bt_hci_cmd_complete_create>
    afd8:	2101      	movs	r1, #1
    afda:	4604      	mov	r4, r0
    afdc:	300c      	adds	r0, #12
    afde:	f010 fd9a 	bl	1bb16 <net_buf_simple_add>
	ccst->status = status;
    afe2:	2300      	movs	r3, #0
    afe4:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
    afe6:	e704      	b.n	adf2 <hci_cmd_handle+0x6e>
	switch (ocf) {
    afe8:	2d7b      	cmp	r5, #123	; 0x7b
    afea:	f000 825f 	beq.w	b4ac <hci_cmd_handle+0x728>
    afee:	2d7c      	cmp	r5, #124	; 0x7c
    aff0:	f47f aef8 	bne.w	ade4 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    aff4:	68e3      	ldr	r3, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    aff6:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    aff8:	8859      	ldrh	r1, [r3, #2]
    affa:	b2b8      	uxth	r0, r7
    affc:	f001 ff2a 	bl	ce54 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    b000:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b002:	2103      	movs	r1, #3
    b004:	8830      	ldrh	r0, [r6, #0]
    b006:	f00f f90c 	bl	1a222 <bt_hci_cmd_complete_create>
    b00a:	2103      	movs	r1, #3
    b00c:	4604      	mov	r4, r0
    b00e:	300c      	adds	r0, #12
    b010:	f010 fd81 	bl	1bb16 <net_buf_simple_add>
	rp->status = status;
    b014:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    b016:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
    b01a:	e6ea      	b.n	adf2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b01c:	2107      	movs	r1, #7
    b01e:	f00f f900 	bl	1a222 <bt_hci_cmd_complete_create>
    b022:	2107      	movs	r1, #7
    b024:	4604      	mov	r4, r0
    b026:	300c      	adds	r0, #12
    b028:	f010 fd75 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b02c:	4601      	mov	r1, r0
    b02e:	2000      	movs	r0, #0
    b030:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    b034:	f7fe fa16 	bl	9464 <ll_addr_read>
	if (err == -EINVAL) {
    b038:	e6db      	b.n	adf2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b03a:	2109      	movs	r1, #9
    b03c:	f00f f8f1 	bl	1a222 <bt_hci_cmd_complete_create>
    b040:	2109      	movs	r1, #9
    b042:	4604      	mov	r4, r0
    b044:	300c      	adds	r0, #12
    b046:	f010 fd66 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b04a:	2100      	movs	r1, #0
    b04c:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b04e:	2208      	movs	r2, #8
	rp->status = 0x00;
    b050:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b054:	f00e fdd9 	bl	19c0a <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    b058:	2360      	movs	r3, #96	; 0x60
    b05a:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    b05c:	e6c9      	b.n	adf2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b05e:	2141      	movs	r1, #65	; 0x41
    b060:	f00f f8df 	bl	1a222 <bt_hci_cmd_complete_create>
    b064:	2141      	movs	r1, #65	; 0x41
    b066:	4604      	mov	r4, r0
    b068:	300c      	adds	r0, #12
    b06a:	f010 fd54 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b06e:	2100      	movs	r1, #0
    b070:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    b072:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    b074:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    b078:	f00e fdc7 	bl	19c0a <memset>
	rp->commands[10] |= BIT(2);
    b07c:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
    b07e:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    b080:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    b082:	f8d5 001a 	ldr.w	r0, [r5, #26]
	rp->commands[10] |= BIT(2);
    b086:	f043 0304 	orr.w	r3, r3, #4
    b08a:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
    b08c:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
    b08e:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
    b092:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[15] |= BIT(1);
    b096:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[5] |= BIT(6) | BIT(7);
    b09a:	71a9      	strb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    b09c:	73ea      	strb	r2, [r5, #15]
	rp->commands[22] |= BIT(2);
    b09e:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
    b0a0:	786a      	ldrb	r2, [r5, #1]
	rp->commands[15] |= BIT(1);
    b0a2:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    b0a4:	4b17      	ldr	r3, [pc, #92]	; (b104 <hci_cmd_handle+0x380>)
	rp->commands[22] |= BIT(2);
    b0a6:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    b0aa:	4303      	orrs	r3, r0
	rp->commands[0] |= BIT(5);
    b0ac:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[22] |= BIT(2);
    b0b0:	75e9      	strb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
    b0b2:	706a      	strb	r2, [r5, #1]
	rp->commands[32] |= BIT(4) | BIT(5);
    b0b4:	f8d5 1021 	ldr.w	r1, [r5, #33]	; 0x21
    b0b8:	4a13      	ldr	r2, [pc, #76]	; (b108 <hci_cmd_handle+0x384>)
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    b0ba:	f8c5 301a 	str.w	r3, [r5, #26]
	rp->commands[38] |= BIT(7);
    b0be:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[32] |= BIT(4) | BIT(5);
    b0c2:	430a      	orrs	r2, r1
	rp->commands[38] |= BIT(7);
    b0c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    b0c8:	f8c5 2021 	str.w	r2, [r5, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    b0cc:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
    b0d0:	e68f      	b.n	adf2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b0d2:	2109      	movs	r1, #9
    b0d4:	f00f f8a5 	bl	1a222 <bt_hci_cmd_complete_create>
    b0d8:	2109      	movs	r1, #9
    b0da:	4604      	mov	r4, r0
    b0dc:	300c      	adds	r0, #12
    b0de:	f010 fd1a 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b0e2:	f44f 6150 	mov.w	r1, #3328	; 0xd00
	rp->hci_revision = sys_cpu_to_le16(0);
    b0e6:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    b0e8:	4a08      	ldr	r2, [pc, #32]	; (b10c <hci_cmd_handle+0x388>)
	rp->status = 0x00;
    b0ea:	8001      	strh	r1, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
    b0ec:	210d      	movs	r1, #13
	rp->hci_revision = sys_cpu_to_le16(0);
    b0ee:	7083      	strb	r3, [r0, #2]
    b0f0:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
    b0f2:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    b0f4:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
    b0f8:	e67b      	b.n	adf2 <hci_cmd_handle+0x6e>
    b0fa:	bf00      	nop
    b0fc:	200026f4 	.word	0x200026f4
    b100:	20000168 	.word	0x20000168
    b104:	0ef403f7 	.word	0x0ef403f7
    b108:	7801f030 	.word	0x7801f030
    b10c:	ffff05f1 	.word	0xffff05f1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b110:	2103      	movs	r1, #3
    b112:	f00f f886 	bl	1a222 <bt_hci_cmd_complete_create>
    b116:	2103      	movs	r1, #3
    b118:	4604      	mov	r4, r0
    b11a:	300c      	adds	r0, #12
    b11c:	f010 fcfb 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b120:	4601      	mov	r1, r0
    b122:	2300      	movs	r3, #0
    b124:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    b128:	3001      	adds	r0, #1
    b12a:	f7fe f963 	bl	93f4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    b12e:	e660      	b.n	adf2 <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b130:	2104      	movs	r1, #4
    b132:	f00f f876 	bl	1a222 <bt_hci_cmd_complete_create>
    b136:	2104      	movs	r1, #4
    b138:	4604      	mov	r4, r0
    b13a:	300c      	adds	r0, #12
    b13c:	f010 fceb 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b140:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    b142:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    b144:	2203      	movs	r2, #3
	rp->status = 0x00;
    b146:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    b148:	7041      	strb	r1, [r0, #1]
    b14a:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    b14c:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
    b14e:	e650      	b.n	adf2 <hci_cmd_handle+0x6e>
    b150:	68e2      	ldr	r2, [r4, #12]
	le_event_mask = sys_get_le64(cmd->events);
    b152:	4bbd      	ldr	r3, [pc, #756]	; (b448 <hci_cmd_handle+0x6c4>)
    b154:	6811      	ldr	r1, [r2, #0]
    b156:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    b158:	6019      	str	r1, [r3, #0]
    b15a:	e739      	b.n	afd0 <hci_cmd_handle+0x24c>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    b15c:	68e1      	ldr	r1, [r4, #12]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    b15e:	2200      	movs	r2, #0
    b160:	884b      	ldrh	r3, [r1, #2]
    b162:	8808      	ldrh	r0, [r1, #0]
    b164:	9203      	str	r2, [sp, #12]
    b166:	890c      	ldrh	r4, [r1, #8]
    b168:	9402      	str	r4, [sp, #8]
    b16a:	88cc      	ldrh	r4, [r1, #6]
    b16c:	9401      	str	r4, [sp, #4]
    b16e:	8889      	ldrh	r1, [r1, #4]
    b170:	9100      	str	r1, [sp, #0]
    b172:	4611      	mov	r1, r2
    b174:	f001 fcc6 	bl	cb04 <ll_conn_update>
    b178:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b17a:	8830      	ldrh	r0, [r6, #0]
    b17c:	e633      	b.n	ade6 <hci_cmd_handle+0x62>
	status = ll_adv_enable(cmd->enable);
    b17e:	68e3      	ldr	r3, [r4, #12]
    b180:	7818      	ldrb	r0, [r3, #0]
    b182:	f7f5 ff29 	bl	fd8 <ll_adv_enable>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    b186:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    b188:	2101      	movs	r1, #1
    b18a:	8830      	ldrh	r0, [r6, #0]
    b18c:	f00f f849 	bl	1a222 <bt_hci_cmd_complete_create>
    b190:	2101      	movs	r1, #1
    b192:	4604      	mov	r4, r0
    b194:	300c      	adds	r0, #12
    b196:	f010 fcbe 	bl	1bb16 <net_buf_simple_add>
	ccst->status = status;
    b19a:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    b19c:	e629      	b.n	adf2 <hci_cmd_handle+0x6e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    b19e:	68e1      	ldr	r1, [r4, #12]
    b1a0:	f811 0b01 	ldrb.w	r0, [r1], #1
    b1a4:	f001 fa44 	bl	c630 <ll_adv_scan_rsp_set>
    b1a8:	e7ed      	b.n	b186 <hci_cmd_handle+0x402>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    b1aa:	68e1      	ldr	r1, [r4, #12]
    b1ac:	f811 0b01 	ldrb.w	r0, [r1], #1
    b1b0:	f001 f9d0 	bl	c554 <ll_adv_data_set>
    b1b4:	e7e7      	b.n	b186 <hci_cmd_handle+0x402>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b1b6:	2102      	movs	r1, #2
    b1b8:	f00f f833 	bl	1a222 <bt_hci_cmd_complete_create>
    b1bc:	2102      	movs	r1, #2
    b1be:	4604      	mov	r4, r0
    b1c0:	300c      	adds	r0, #12
    b1c2:	f010 fca8 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b1c6:	2300      	movs	r3, #0
    b1c8:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    b1ca:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    b1cc:	e611      	b.n	adf2 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    b1ce:	68e4      	ldr	r4, [r4, #12]
	status = ll_adv_params_set(min_interval, cmd->type,
    b1d0:	7ba5      	ldrb	r5, [r4, #14]
    b1d2:	79a3      	ldrb	r3, [r4, #6]
    b1d4:	7962      	ldrb	r2, [r4, #5]
    b1d6:	7921      	ldrb	r1, [r4, #4]
    b1d8:	8820      	ldrh	r0, [r4, #0]
    b1da:	9502      	str	r5, [sp, #8]
    b1dc:	7b65      	ldrb	r5, [r4, #13]
    b1de:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    b1e0:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    b1e2:	9400      	str	r4, [sp, #0]
    b1e4:	f001 f816 	bl	c214 <ll_adv_params_set>
    b1e8:	e7cd      	b.n	b186 <hci_cmd_handle+0x402>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    b1ea:	68e1      	ldr	r1, [r4, #12]
    b1ec:	2001      	movs	r0, #1
    b1ee:	f7fe f905 	bl	93fc <ll_addr_set>
    b1f2:	e7c8      	b.n	b186 <hci_cmd_handle+0x402>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b1f4:	2109      	movs	r1, #9
    b1f6:	f00f f814 	bl	1a222 <bt_hci_cmd_complete_create>
    b1fa:	2109      	movs	r1, #9
    b1fc:	4604      	mov	r4, r0
    b1fe:	300c      	adds	r0, #12
    b200:	f010 fc89 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b204:	2500      	movs	r5, #0
    b206:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b208:	2208      	movs	r2, #8
    b20a:	4629      	mov	r1, r5
	rp->status = 0x00;
    b20c:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    b210:	f00e fcfb 	bl	19c0a <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    b214:	f7fe f8d8 	bl	93c8 <ll_feat_get>
	dst[0] = val;
    b218:	462b      	mov	r3, r5
    b21a:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
    b21e:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[0] = val;
    b222:	f362 230f 	bfi	r3, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    b226:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    b228:	f361 4317 	bfi	r3, r1, #16, #8
	dst[1] = val >> 8;
    b22c:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    b22e:	f361 631f 	bfi	r3, r1, #24, #8
    b232:	f8c6 0001 	str.w	r0, [r6, #1]
    b236:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
    b23a:	e5da      	b.n	adf2 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    b23c:	68e2      	ldr	r2, [r4, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b23e:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    b240:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    b242:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    b244:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b248:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    b24a:	bf48      	it	mi
    b24c:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
    b250:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
    b252:	bf48      	it	mi
    b254:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    b256:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    b258:	bf44      	itt	mi
    b25a:	f043 0303 	orrmi.w	r3, r3, #3
    b25e:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    b260:	ea41 0203 	orr.w	r2, r1, r3
    b264:	2a03      	cmp	r2, #3
    b266:	f200 8163 	bhi.w	b530 <hci_cmd_handle+0x7ac>
	if (!(cmd->tx_phys & 0x07) ||
    b26a:	074c      	lsls	r4, r1, #29
    b26c:	f000 815e 	beq.w	b52c <hci_cmd_handle+0x7a8>
    b270:	075a      	lsls	r2, r3, #29
    b272:	f000 815b 	beq.w	b52c <hci_cmd_handle+0x7a8>
	if (phy_opts & 0x03) {
    b276:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
    b27a:	bf1c      	itt	ne
    b27c:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
    b280:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    b284:	4638      	mov	r0, r7
    b286:	f001 fd8f 	bl	cda8 <ll_phy_req_send>
    b28a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b28c:	8830      	ldrh	r0, [r6, #0]
    b28e:	e5aa      	b.n	ade6 <hci_cmd_handle+0x62>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    b290:	68e3      	ldr	r3, [r4, #12]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    b292:	781a      	ldrb	r2, [r3, #0]
    b294:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    b296:	bf44      	itt	mi
    b298:	2107      	movmi	r1, #7
    b29a:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    b29c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    b29e:	bf4c      	ite	mi
    b2a0:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    b2a2:	7899      	ldrbpl	r1, [r3, #2]
    b2a4:	7858      	ldrb	r0, [r3, #1]
		cmd->rx_phys = 0x07;
    b2a6:	bf48      	it	mi
    b2a8:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    b2aa:	f001 fd73 	bl	cd94 <ll_phy_default_set>
    b2ae:	e76a      	b.n	b186 <hci_cmd_handle+0x402>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    b2b0:	68e1      	ldr	r1, [r4, #12]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    b2b2:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    b2b4:	880f      	ldrh	r7, [r1, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    b2b6:	884b      	ldrh	r3, [r1, #2]
    b2b8:	9203      	str	r2, [sp, #12]
    b2ba:	8908      	ldrh	r0, [r1, #8]
    b2bc:	9002      	str	r0, [sp, #8]
    b2be:	88c8      	ldrh	r0, [r1, #6]
    b2c0:	9001      	str	r0, [sp, #4]
    b2c2:	8889      	ldrh	r1, [r1, #4]
    b2c4:	9100      	str	r1, [sp, #0]
    b2c6:	b2b8      	uxth	r0, r7
    b2c8:	2102      	movs	r1, #2
    b2ca:	f001 fc1b 	bl	cb04 <ll_conn_update>
    b2ce:	e697      	b.n	b000 <hci_cmd_handle+0x27c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b2d0:	2109      	movs	r1, #9
    b2d2:	f00e ffa6 	bl	1a222 <bt_hci_cmd_complete_create>
    b2d6:	2109      	movs	r1, #9
    b2d8:	4604      	mov	r4, r0
    b2da:	300c      	adds	r0, #12
    b2dc:	f010 fc1b 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b2e0:	495a      	ldr	r1, [pc, #360]	; (b44c <hci_cmd_handle+0x6c8>)
    b2e2:	4a5b      	ldr	r2, [pc, #364]	; (b450 <hci_cmd_handle+0x6cc>)
    b2e4:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
    b2e6:	2300      	movs	r3, #0
    b2e8:	6042      	str	r2, [r0, #4]
    b2ea:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    b2ec:	e581      	b.n	adf2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    b2ee:	68e3      	ldr	r3, [r4, #12]
    b2f0:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    b2f2:	2200      	movs	r2, #0
    b2f4:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    b2f6:	b2b8      	uxth	r0, r7
    b2f8:	f006 fd0c 	bl	11d14 <ll_start_enc_req_send>
    b2fc:	e680      	b.n	b000 <hci_cmd_handle+0x27c>
	handle = sys_le16_to_cpu(cmd->handle);
    b2fe:	68e2      	ldr	r2, [r4, #12]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    b300:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    b302:	f832 7b02 	ldrh.w	r7, [r2], #2
    b306:	e7f6      	b.n	b2f6 <hci_cmd_handle+0x572>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b308:	2109      	movs	r1, #9
    b30a:	f00e ff8a 	bl	1a222 <bt_hci_cmd_complete_create>
    b30e:	2109      	movs	r1, #9
    b310:	4604      	mov	r4, r0
    b312:	300c      	adds	r0, #12
    b314:	f010 fbff 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b318:	2300      	movs	r3, #0
    b31a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    b31e:	2108      	movs	r1, #8
    b320:	f007 f86c 	bl	123fc <lll_csrand_get>
	if (err == -EINVAL) {
    b324:	e565      	b.n	adf2 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    b326:	68e0      	ldr	r0, [r4, #12]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    b328:	aa08      	add	r2, sp, #32
    b32a:	2300      	movs	r3, #0
    b32c:	f100 0110 	add.w	r1, r0, #16
    b330:	f008 fcba 	bl	13ca8 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b334:	8830      	ldrh	r0, [r6, #0]
    b336:	2111      	movs	r1, #17
    b338:	f00e ff73 	bl	1a222 <bt_hci_cmd_complete_create>
    b33c:	2111      	movs	r1, #17
    b33e:	4604      	mov	r4, r0
    b340:	300c      	adds	r0, #12
    b342:	f010 fbe8 	bl	1bb16 <net_buf_simple_add>
	rp->status = 0x00;
    b346:	2300      	movs	r3, #0
    b348:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    b34c:	2210      	movs	r2, #16
    b34e:	a908      	add	r1, sp, #32
    b350:	f00e fc50 	bl	19bf4 <memcpy>
	if (err == -EINVAL) {
    b354:	e54d      	b.n	adf2 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    b356:	68e3      	ldr	r3, [r4, #12]
	status = ll_feature_req_send(handle);
    b358:	8818      	ldrh	r0, [r3, #0]
    b35a:	f001 fc6f 	bl	cc3c <ll_feature_req_send>
    b35e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b360:	8830      	ldrh	r0, [r6, #0]
    b362:	e540      	b.n	ade6 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
    b364:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b366:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    b368:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b36a:	f00e ff5a 	bl	1a222 <bt_hci_cmd_complete_create>
    b36e:	2108      	movs	r1, #8
    b370:	4604      	mov	r4, r0
    b372:	300c      	adds	r0, #12
    b374:	f010 fbcf 	bl	1bb16 <net_buf_simple_add>
    b378:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    b37a:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    b37c:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    b37e:	f001 fc05 	bl	cb8c <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
    b382:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
    b386:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
    b388:	e533      	b.n	adf2 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    b38a:	68e3      	ldr	r3, [r4, #12]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    b38c:	8859      	ldrh	r1, [r3, #2]
    b38e:	8818      	ldrh	r0, [r3, #0]
    b390:	f001 fccc 	bl	cd2c <ll_length_default_set>
    b394:	e6f7      	b.n	b186 <hci_cmd_handle+0x402>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b396:	2105      	movs	r1, #5
    b398:	f00e ff43 	bl	1a222 <bt_hci_cmd_complete_create>
    b39c:	2105      	movs	r1, #5
    b39e:	4604      	mov	r4, r0
    b3a0:	300c      	adds	r0, #12
    b3a2:	f010 fbb8 	bl	1bb16 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    b3a6:	a908      	add	r1, sp, #32
    b3a8:	4605      	mov	r5, r0
    b3aa:	f10d 001a 	add.w	r0, sp, #26
    b3ae:	f001 fcb1 	bl	cd14 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    b3b2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b3b6:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b3ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    b3be:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
    b3c2:	2300      	movs	r3, #0
    b3c4:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
    b3c6:	e514      	b.n	adf2 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    b3c8:	68e3      	ldr	r3, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    b3ca:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    b3cc:	889a      	ldrh	r2, [r3, #4]
    b3ce:	8859      	ldrh	r1, [r3, #2]
    b3d0:	b2b8      	uxth	r0, r7
    b3d2:	f001 fc75 	bl	ccc0 <ll_length_req_send>
    b3d6:	e613      	b.n	b000 <hci_cmd_handle+0x27c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    b3d8:	68e2      	ldr	r2, [r4, #12]
	handle = sys_le16_to_cpu(cmd->handle);
    b3da:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0, NULL);
    b3dc:	7892      	ldrb	r2, [r2, #2]
    b3de:	2300      	movs	r3, #0
    b3e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b3e4:	e9cd 3300 	strd	r3, r3, [sp]
    b3e8:	2102      	movs	r1, #2
    b3ea:	b2b8      	uxth	r0, r7
    b3ec:	f001 fb8a 	bl	cb04 <ll_conn_update>
    b3f0:	e606      	b.n	b000 <hci_cmd_handle+0x27c>
	handle = sys_le16_to_cpu(cmd->handle);
    b3f2:	68e3      	ldr	r3, [r4, #12]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b3f4:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    b3f6:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b3f8:	f00e ff13 	bl	1a222 <bt_hci_cmd_complete_create>
    b3fc:	2105      	movs	r1, #5
    b3fe:	4604      	mov	r4, r0
    b400:	300c      	adds	r0, #12
    b402:	f010 fb88 	bl	1bb16 <net_buf_simple_add>
    b406:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    b408:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    b40a:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    b40c:	1ce9      	adds	r1, r5, #3
    b40e:	f001 fca3 	bl	cd58 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    b412:	78eb      	ldrb	r3, [r5, #3]
    b414:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
    b416:	7028      	strb	r0, [r5, #0]
    b418:	2b00      	cmp	r3, #0
    b41a:	fa93 f3a3 	rbit	r3, r3
    b41e:	fab3 f383 	clz	r3, r3
    b422:	bf08      	it	eq
    b424:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b428:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    b42a:	70eb      	strb	r3, [r5, #3]
    b42c:	2a00      	cmp	r2, #0
    b42e:	fa92 f3a2 	rbit	r3, r2
    b432:	fab3 f383 	clz	r3, r3
    b436:	bf08      	it	eq
    b438:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b43c:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
    b43e:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    b442:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
    b444:	e4d5      	b.n	adf2 <hci_cmd_handle+0x6e>
    b446:	bf00      	nop
    b448:	20000160 	.word	0x20000160
    b44c:	30cc8f00 	.word	0x30cc8f00
    b450:	0001c0ec 	.word	0x0001c0ec
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b454:	2109      	movs	r1, #9
    b456:	f00e fee4 	bl	1a222 <bt_hci_cmd_complete_create>
    b45a:	2109      	movs	r1, #9
    b45c:	4604      	mov	r4, r0
    b45e:	300c      	adds	r0, #12
    b460:	f010 fb59 	bl	1bb16 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    b464:	ab08      	add	r3, sp, #32
    b466:	4605      	mov	r5, r0
    b468:	f10d 021a 	add.w	r2, sp, #26
    b46c:	a906      	add	r1, sp, #24
    b46e:	f10d 0016 	add.w	r0, sp, #22
    b472:	f001 fc65 	bl	cd40 <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    b476:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b47a:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    b47e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b482:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    b486:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b48a:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    b48e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    b492:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
    b496:	2300      	movs	r3, #0
    b498:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
    b49a:	e4aa      	b.n	adf2 <hci_cmd_handle+0x6e>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    b49c:	68e3      	ldr	r3, [r4, #12]
	status = ll_terminate_ind_send(handle, cmd->reason);
    b49e:	7899      	ldrb	r1, [r3, #2]
    b4a0:	8818      	ldrh	r0, [r3, #0]
    b4a2:	f001 fb95 	bl	cbd0 <ll_terminate_ind_send>
    b4a6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    b4a8:	8830      	ldrh	r0, [r6, #0]
    b4aa:	e49c      	b.n	ade6 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
    b4ac:	68e3      	ldr	r3, [r4, #12]
    b4ae:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    b4b0:	a908      	add	r1, sp, #32
    b4b2:	b2b8      	uxth	r0, r7
    b4b4:	f001 fcaa 	bl	ce0c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b4b8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    b4ba:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    b4bc:	8830      	ldrh	r0, [r6, #0]
    b4be:	f00e feb0 	bl	1a222 <bt_hci_cmd_complete_create>
    b4c2:	2105      	movs	r1, #5
    b4c4:	4604      	mov	r4, r0
    b4c6:	300c      	adds	r0, #12
    b4c8:	f010 fb25 	bl	1bb16 <net_buf_simple_add>
	rp->status = status;
    b4cc:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    b4ce:	f8a0 7001 	strh.w	r7, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    b4d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b4d6:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
    b4da:	e48a      	b.n	adf2 <hci_cmd_handle+0x6e>
	event_mask = DEFAULT_EVENT_MASK;
    b4dc:	4b15      	ldr	r3, [pc, #84]	; (b534 <hci_cmd_handle+0x7b0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b4de:	4a16      	ldr	r2, [pc, #88]	; (b538 <hci_cmd_handle+0x7b4>)
	event_mask = DEFAULT_EVENT_MASK;
    b4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b4e4:	f641 71ff 	movw	r1, #8191	; 0x1fff
    b4e8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b4ec:	4b13      	ldr	r3, [pc, #76]	; (b53c <hci_cmd_handle+0x7b8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    b4ee:	2000      	movs	r0, #0
    b4f0:	2100      	movs	r1, #0
    b4f2:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    b4f6:	201f      	movs	r0, #31
    b4f8:	2100      	movs	r1, #0
    b4fa:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    b4fe:	f7ff f8d1 	bl	a6a4 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    b502:	8830      	ldrh	r0, [r6, #0]
    b504:	2101      	movs	r1, #1
    b506:	f00e fe8c 	bl	1a222 <bt_hci_cmd_complete_create>
    b50a:	2101      	movs	r1, #1
    b50c:	4604      	mov	r4, r0
    b50e:	300c      	adds	r0, #12
    b510:	f010 fb01 	bl	1bb16 <net_buf_simple_add>
	ccst->status = status;
    b514:	2300      	movs	r3, #0
	conn_count = 0U;
    b516:	4a0a      	ldr	r2, [pc, #40]	; (b540 <hci_cmd_handle+0x7bc>)
	ccst->status = status;
    b518:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    b51a:	6013      	str	r3, [r2, #0]
	hci_recv_fifo_reset();
    b51c:	f7ff fb22 	bl	ab64 <hci_recv_fifo_reset>
	if (err == -EINVAL) {
    b520:	e467      	b.n	adf2 <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    b522:	68e2      	ldr	r2, [r4, #12]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    b524:	4b04      	ldr	r3, [pc, #16]	; (b538 <hci_cmd_handle+0x7b4>)
    b526:	e615      	b.n	b154 <hci_cmd_handle+0x3d0>
	return evt;
    b528:	9c07      	ldr	r4, [sp, #28]
    b52a:	e462      	b.n	adf2 <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
    b52c:	2112      	movs	r1, #18
    b52e:	e45a      	b.n	ade6 <hci_cmd_handle+0x62>
    b530:	2111      	movs	r1, #17
    b532:	e458      	b.n	ade6 <hci_cmd_handle+0x62>
    b534:	20000168 	.word	0x20000168
    b538:	20000e00 	.word	0x20000e00
    b53c:	20000160 	.word	0x20000160
    b540:	20001b24 	.word	0x20001b24

0000b544 <hci_acl_handle>:
{
    b544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    b548:	2300      	movs	r3, #0
    b54a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    b54c:	8a03      	ldrh	r3, [r0, #16]
    b54e:	2b03      	cmp	r3, #3
    b550:	d92e      	bls.n	b5b0 <hci_acl_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
    b552:	4605      	mov	r5, r0
    b554:	4688      	mov	r8, r1
    b556:	300c      	adds	r0, #12
    b558:	2104      	movs	r1, #4
    b55a:	f010 fb03 	bl	1bb64 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    b55e:	8a2b      	ldrh	r3, [r5, #16]
	len = sys_le16_to_cpu(acl->len);
    b560:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    b562:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    b566:	42bb      	cmp	r3, r7
    b568:	d322      	bcc.n	b5b0 <hci_acl_handle+0x6c>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    b56a:	2f1b      	cmp	r7, #27
    b56c:	d820      	bhi.n	b5b0 <hci_acl_handle+0x6c>
	node_tx = ll_tx_mem_acquire();
    b56e:	f001 fa71 	bl	ca54 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    b572:	ea4f 3619 	mov.w	r6, r9, lsr #12
    b576:	4633      	mov	r3, r6
	if (!node_tx) {
    b578:	4604      	mov	r4, r0
    b57a:	b1f8      	cbz	r0, b5bc <hci_acl_handle+0x78>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    b57c:	089b      	lsrs	r3, r3, #2
    b57e:	d117      	bne.n	b5b0 <hci_acl_handle+0x6c>
	switch (bt_acl_flags_pb(flags)) {
    b580:	b1d6      	cbz	r6, b5b8 <hci_acl_handle+0x74>
    b582:	2e01      	cmp	r6, #1
    b584:	d114      	bne.n	b5b0 <hci_acl_handle+0x6c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    b586:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
    b588:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    b58a:	f366 0301 	bfi	r3, r6, #0, #2
    b58e:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    b590:	68e9      	ldr	r1, [r5, #12]
    b592:	463a      	mov	r2, r7
    b594:	1de0      	adds	r0, r4, #7
    b596:	f00e fb2d 	bl	19bf4 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    b59a:	4621      	mov	r1, r4
    b59c:	f3c9 000b 	ubfx	r0, r9, #0, #12
    b5a0:	f001 fa64 	bl	ca6c <ll_tx_mem_enqueue>
    b5a4:	b908      	cbnz	r0, b5aa <hci_acl_handle+0x66>
}
    b5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ll_tx_mem_release(node_tx);
    b5aa:	4620      	mov	r0, r4
    b5ac:	f001 fa58 	bl	ca60 <ll_tx_mem_release>
	switch (bt_acl_flags_pb(flags)) {
    b5b0:	f06f 0015 	mvn.w	r0, #21
}
    b5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
    b5b8:	2602      	movs	r6, #2
    b5ba:	e7e4      	b.n	b586 <hci_acl_handle+0x42>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    b5bc:	4b0f      	ldr	r3, [pc, #60]	; (b5fc <hci_acl_handle+0xb8>)
    b5be:	681b      	ldr	r3, [r3, #0]
    b5c0:	019b      	lsls	r3, r3, #6
    b5c2:	d517      	bpl.n	b5f4 <hci_acl_handle+0xb0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b5c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b5c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b5cc:	2001      	movs	r0, #1
    b5ce:	f7f8 fda5 	bl	411c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    b5d2:	2102      	movs	r1, #2
    b5d4:	f8c8 0000 	str.w	r0, [r8]
    b5d8:	300c      	adds	r0, #12
    b5da:	f010 fa9c 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b5de:	f44f 738d 	mov.w	r3, #282	; 0x11a
    b5e2:	8003      	strh	r3, [r0, #0]
    b5e4:	f8d8 0000 	ldr.w	r0, [r8]
    b5e8:	2101      	movs	r1, #1
    b5ea:	300c      	adds	r0, #12
    b5ec:	f010 fa93 	bl	1bb16 <net_buf_simple_add>
	ep->link_type = link_type;
    b5f0:	2301      	movs	r3, #1
    b5f2:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    b5f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    b5f8:	e7d5      	b.n	b5a6 <hci_acl_handle+0x62>
    b5fa:	bf00      	nop
    b5fc:	20000168 	.word	0x20000168

0000b600 <hci_disconn_complete_encode>:
{
    b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    b602:	4b0e      	ldr	r3, [pc, #56]	; (b63c <hci_disconn_complete_encode+0x3c>)
    b604:	681b      	ldr	r3, [r3, #0]
    b606:	06db      	lsls	r3, r3, #27
    b608:	d400      	bmi.n	b60c <hci_disconn_complete_encode+0xc>
}
    b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b60c:	f102 040c 	add.w	r4, r2, #12
    b610:	4606      	mov	r6, r0
    b612:	460d      	mov	r5, r1
    b614:	4620      	mov	r0, r4
    b616:	2102      	movs	r1, #2
    b618:	f010 fa7d 	bl	1bb16 <net_buf_simple_add>
    b61c:	4603      	mov	r3, r0
	hdr->evt = evt;
    b61e:	f240 4205 	movw	r2, #1029	; 0x405
    b622:	801a      	strh	r2, [r3, #0]
    b624:	4620      	mov	r0, r4
    b626:	2104      	movs	r1, #4
    b628:	f010 fa75 	bl	1bb16 <net_buf_simple_add>
	ep->status = 0x00;
    b62c:	2700      	movs	r7, #0
    b62e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b630:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    b634:	7832      	ldrb	r2, [r6, #0]
    b636:	70c2      	strb	r2, [r0, #3]
}
    b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b63a:	bf00      	nop
    b63c:	20000168 	.word	0x20000168

0000b640 <hci_disconn_complete_process>:
	conn_count--;
    b640:	4a02      	ldr	r2, [pc, #8]	; (b64c <hci_disconn_complete_process+0xc>)
    b642:	6813      	ldr	r3, [r2, #0]
    b644:	3b01      	subs	r3, #1
    b646:	6013      	str	r3, [r2, #0]
}
    b648:	4770      	bx	lr
    b64a:	bf00      	nop
    b64c:	20001b24 	.word	0x20001b24

0000b650 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BT_CONN)
void hci_acl_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    b650:	b570      	push	{r4, r5, r6, lr}
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    b652:	7f03      	ldrb	r3, [r0, #28]
	handle = node_rx->hdr.handle;
    b654:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    b656:	f003 0303 	and.w	r3, r3, #3
    b65a:	3b01      	subs	r3, #1
    b65c:	2b01      	cmp	r3, #1
    b65e:	d90d      	bls.n	b67c <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    b660:	4a15      	ldr	r2, [pc, #84]	; (b6b8 <hci_acl_encode+0x68>)
    b662:	4916      	ldr	r1, [pc, #88]	; (b6bc <hci_acl_encode+0x6c>)
    b664:	4816      	ldr	r0, [pc, #88]	; (b6c0 <hci_acl_encode+0x70>)
    b666:	f242 13ba 	movw	r3, #8634	; 0x21ba
    b66a:	f00d ffe8 	bl	1963e <assert_print>
    b66e:	4040      	eors	r0, r0
    b670:	f380 8811 	msr	BASEPRI, r0
    b674:	f04f 0003 	mov.w	r0, #3
    b678:	df02      	svc	2
		break;
	}
}
    b67a:	bd70      	pop	{r4, r5, r6, pc}
    b67c:	4604      	mov	r4, r0
    b67e:	f101 050c 	add.w	r5, r1, #12
    b682:	4628      	mov	r0, r5
    b684:	2104      	movs	r1, #4
    b686:	f010 fa46 	bl	1bb16 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    b68a:	7f23      	ldrb	r3, [r4, #28]
    b68c:	f003 0303 	and.w	r3, r3, #3
    b690:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    b692:	bf0c      	ite	eq
    b694:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    b698:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    b69c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    b69e:	7f63      	ldrb	r3, [r4, #29]
    b6a0:	8043      	strh	r3, [r0, #2]
    b6a2:	7f61      	ldrb	r1, [r4, #29]
    b6a4:	4628      	mov	r0, r5
    b6a6:	f010 fa36 	bl	1bb16 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    b6aa:	7f62      	ldrb	r2, [r4, #29]
    b6ac:	f104 011f 	add.w	r1, r4, #31
}
    b6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    b6b4:	f00e ba9e 	b.w	19bf4 <memcpy>
    b6b8:	0001e42c 	.word	0x0001e42c
    b6bc:	0001e220 	.word	0x0001e220
    b6c0:	0001e1a4 	.word	0x0001e1a4

0000b6c4 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b6c6:	f890 c004 	ldrb.w	ip, [r0, #4]
    b6ca:	88c6      	ldrh	r6, [r0, #6]
    b6cc:	f1bc 0f03 	cmp.w	ip, #3
{
    b6d0:	b085      	sub	sp, #20
    b6d2:	4604      	mov	r4, r0
    b6d4:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    b6d6:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    b6da:	d00b      	beq.n	b6f4 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    b6dc:	f1ac 0c17 	sub.w	ip, ip, #23
    b6e0:	f1bc 0f06 	cmp.w	ip, #6
    b6e4:	f200 8233 	bhi.w	bb4e <hci_evt_encode+0x48a>
    b6e8:	e8df f00c 	tbb	[pc, ip]
    b6ec:	1e574f27 	.word	0x1e574f27
    b6f0:	9684      	.short	0x9684
    b6f2:	b4          	.byte	0xb4
    b6f3:	00          	.byte	0x00
	switch (pdu_data->llctrl.opcode) {
    b6f4:	7fc3      	ldrb	r3, [r0, #31]
    b6f6:	3b03      	subs	r3, #3
    b6f8:	2b12      	cmp	r3, #18
    b6fa:	f200 80e2 	bhi.w	b8c2 <hci_evt_encode+0x1fe>
    b6fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    b702:	0185      	.short	0x0185
    b704:	00e000e0 	.word	0x00e000e0
    b708:	012401b3 	.word	0x012401b3
    b70c:	013200e0 	.word	0x013200e0
    b710:	00e000e0 	.word	0x00e000e0
    b714:	013700e0 	.word	0x013700e0
    b718:	015200e0 	.word	0x015200e0
    b71c:	001a00e0 	.word	0x001a00e0
    b720:	00e000e0 	.word	0x00e000e0
    b724:	00ee00ee 	.word	0x00ee00ee
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    b728:	4bb2      	ldr	r3, [pc, #712]	; (b9f4 <hci_evt_encode+0x330>)
    b72a:	685b      	ldr	r3, [r3, #4]
    b72c:	0418      	lsls	r0, r3, #16
    b72e:	f04f 0400 	mov.w	r4, #0
    b732:	f100 80fa 	bmi.w	b92a <hci_evt_encode+0x266>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    b736:	b005      	add	sp, #20
    b738:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    b73a:	07ff      	lsls	r7, r7, #31
    b73c:	f100 81ad 	bmi.w	ba9a <hci_evt_encode+0x3d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b740:	4bac      	ldr	r3, [pc, #688]	; (b9f4 <hci_evt_encode+0x330>)
	status = cc->status;
    b742:	7f27      	ldrb	r7, [r4, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b744:	685b      	ldr	r3, [r3, #4]
    b746:	0098      	lsls	r0, r3, #2
    b748:	d5f5      	bpl.n	b736 <hci_evt_encode+0x72>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    b74a:	4bab      	ldr	r3, [pc, #684]	; (b9f8 <hci_evt_encode+0x334>)
    b74c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b74e:	07d9      	lsls	r1, r3, #31
    b750:	d5f1      	bpl.n	b736 <hci_evt_encode+0x72>
    b752:	350c      	adds	r5, #12
	if (!status) {
    b754:	2f00      	cmp	r7, #0
    b756:	f000 81ae 	beq.w	bab6 <hci_evt_encode+0x3f2>
    b75a:	2102      	movs	r1, #2
    b75c:	4628      	mov	r0, r5
    b75e:	f010 f9da 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b762:	f241 333e 	movw	r3, #4926	; 0x133e
    b766:	8003      	strh	r3, [r0, #0]
    b768:	2101      	movs	r1, #1
    b76a:	4628      	mov	r0, r5
    b76c:	f010 f9d3 	bl	1bb16 <net_buf_simple_add>
	me->subevent = subevt;
    b770:	2301      	movs	r3, #1
    b772:	7003      	strb	r3, [r0, #0]
    b774:	2112      	movs	r1, #18
    b776:	4628      	mov	r0, r5
    b778:	f010 f9cd 	bl	1bb16 <net_buf_simple_add>
    b77c:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    b77e:	2212      	movs	r2, #18
    b780:	2100      	movs	r1, #0
    b782:	f00e fa42 	bl	19c0a <memset>
		lecc->status = status;
    b786:	7027      	strb	r7, [r4, #0]
		return;
    b788:	e7d5      	b.n	b736 <hci_evt_encode+0x72>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    b78a:	460a      	mov	r2, r1
    b78c:	4638      	mov	r0, r7
    b78e:	4631      	mov	r1, r6
}
    b790:	b005      	add	sp, #20
    b792:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    b796:	f7ff bf33 	b.w	b600 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b79a:	4b96      	ldr	r3, [pc, #600]	; (b9f4 <hci_evt_encode+0x330>)
    b79c:	685b      	ldr	r3, [r3, #4]
    b79e:	009a      	lsls	r2, r3, #2
    b7a0:	d5c9      	bpl.n	b736 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    b7a2:	4b95      	ldr	r3, [pc, #596]	; (b9f8 <hci_evt_encode+0x334>)
    b7a4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b7a6:	075b      	lsls	r3, r3, #29
    b7a8:	d5c5      	bpl.n	b736 <hci_evt_encode+0x72>
    b7aa:	350c      	adds	r5, #12
    b7ac:	2102      	movs	r1, #2
    b7ae:	4628      	mov	r0, r5
    b7b0:	f010 f9b1 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b7b4:	f640 233e 	movw	r3, #2622	; 0xa3e
    b7b8:	8003      	strh	r3, [r0, #0]
    b7ba:	2101      	movs	r1, #1
    b7bc:	4628      	mov	r0, r5
    b7be:	f010 f9aa 	bl	1bb16 <net_buf_simple_add>
    b7c2:	4603      	mov	r3, r0
	me->subevent = subevt;
    b7c4:	2203      	movs	r2, #3
    b7c6:	4628      	mov	r0, r5
    b7c8:	701a      	strb	r2, [r3, #0]
    b7ca:	2109      	movs	r1, #9
    b7cc:	f010 f9a3 	bl	1bb16 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    b7d0:	07ff      	lsls	r7, r7, #31
    b7d2:	4605      	mov	r5, r0
    b7d4:	f100 81ad 	bmi.w	bb32 <hci_evt_encode+0x46e>
	sep->status = cu->status;
    b7d8:	7f23      	ldrb	r3, [r4, #28]
    b7da:	702b      	strb	r3, [r5, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b7dc:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    b7e0:	8be3      	ldrh	r3, [r4, #30]
    b7e2:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    b7e6:	8c23      	ldrh	r3, [r4, #32]
    b7e8:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    b7ec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b7ee:	f8a5 3007 	strh.w	r3, [r5, #7]
    b7f2:	e7a0      	b.n	b736 <hci_evt_encode+0x72>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    b7f4:	4b81      	ldr	r3, [pc, #516]	; (b9fc <hci_evt_encode+0x338>)
    b7f6:	681b      	ldr	r3, [r3, #0]
    b7f8:	0219      	lsls	r1, r3, #8
    b7fa:	d59c      	bpl.n	b736 <hci_evt_encode+0x72>
    b7fc:	350c      	adds	r5, #12
    b7fe:	2102      	movs	r1, #2
    b800:	4628      	mov	r0, r5
    b802:	f010 f988 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b806:	f240 2357 	movw	r3, #599	; 0x257
    b80a:	8003      	strh	r3, [r0, #0]
    b80c:	2102      	movs	r1, #2
    b80e:	4628      	mov	r0, r5
    b810:	f010 f981 	bl	1bb16 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    b814:	8006      	strh	r6, [r0, #0]
    b816:	e78e      	b.n	b736 <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b818:	4b76      	ldr	r3, [pc, #472]	; (b9f4 <hci_evt_encode+0x330>)
    b81a:	685b      	ldr	r3, [r3, #4]
    b81c:	009a      	lsls	r2, r3, #2
    b81e:	d58a      	bpl.n	b736 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    b820:	4b75      	ldr	r3, [pc, #468]	; (b9f8 <hci_evt_encode+0x334>)
    b822:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b824:	031b      	lsls	r3, r3, #12
    b826:	d586      	bpl.n	b736 <hci_evt_encode+0x72>
    b828:	350c      	adds	r5, #12
    b82a:	2102      	movs	r1, #2
    b82c:	4628      	mov	r0, r5
    b82e:	f010 f972 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b832:	f240 433e 	movw	r3, #1086	; 0x43e
    b836:	8003      	strh	r3, [r0, #0]
    b838:	2101      	movs	r1, #1
    b83a:	4628      	mov	r0, r5
    b83c:	f010 f96b 	bl	1bb16 <net_buf_simple_add>
	me->subevent = subevt;
    b840:	2314      	movs	r3, #20
    b842:	7003      	strb	r3, [r0, #0]
    b844:	2103      	movs	r1, #3
    b846:	4628      	mov	r0, r5
    b848:	f010 f965 	bl	1bb16 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    b84c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    b84e:	7f23      	ldrb	r3, [r4, #28]
    b850:	7083      	strb	r3, [r0, #2]
    b852:	e770      	b.n	b736 <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b854:	4b67      	ldr	r3, [pc, #412]	; (b9f4 <hci_evt_encode+0x330>)
    b856:	685b      	ldr	r3, [r3, #4]
    b858:	009f      	lsls	r7, r3, #2
    b85a:	f57f af6c 	bpl.w	b736 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    b85e:	4b66      	ldr	r3, [pc, #408]	; (b9f8 <hci_evt_encode+0x334>)
    b860:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b862:	0518      	lsls	r0, r3, #20
    b864:	f57f af67 	bpl.w	b736 <hci_evt_encode+0x72>
    b868:	350c      	adds	r5, #12
    b86a:	2102      	movs	r1, #2
    b86c:	4628      	mov	r0, r5
    b86e:	f010 f952 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b872:	f240 633e 	movw	r3, #1598	; 0x63e
    b876:	8003      	strh	r3, [r0, #0]
    b878:	2101      	movs	r1, #1
    b87a:	4628      	mov	r0, r5
    b87c:	f010 f94b 	bl	1bb16 <net_buf_simple_add>
	me->subevent = subevt;
    b880:	230c      	movs	r3, #12
    b882:	7003      	strb	r3, [r0, #0]
    b884:	2105      	movs	r1, #5
    b886:	4628      	mov	r0, r5
    b888:	f010 f945 	bl	1bb16 <net_buf_simple_add>
	sep->status = pu->status;
    b88c:	7f23      	ldrb	r3, [r4, #28]
    b88e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    b890:	f8a0 6001 	strh.w	r6, [r0, #1]
    b894:	7f62      	ldrb	r2, [r4, #29]
    b896:	2a00      	cmp	r2, #0
    b898:	fa92 f3a2 	rbit	r3, r2
    b89c:	fab3 f383 	clz	r3, r3
    b8a0:	bf08      	it	eq
    b8a2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b8a6:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    b8a8:	70c3      	strb	r3, [r0, #3]
    b8aa:	7fa2      	ldrb	r2, [r4, #30]
    b8ac:	fa92 f3a2 	rbit	r3, r2
    b8b0:	2a00      	cmp	r2, #0
    b8b2:	fab3 f383 	clz	r3, r3
    b8b6:	bf08      	it	eq
    b8b8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b8bc:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    b8be:	7103      	strb	r3, [r0, #4]
    b8c0:	e739      	b.n	b736 <hci_evt_encode+0x72>
		LL_ASSERT(0);
    b8c2:	4a4f      	ldr	r2, [pc, #316]	; (ba00 <hci_evt_encode+0x33c>)
    b8c4:	494f      	ldr	r1, [pc, #316]	; (ba04 <hci_evt_encode+0x340>)
    b8c6:	4850      	ldr	r0, [pc, #320]	; (ba08 <hci_evt_encode+0x344>)
    b8c8:	f242 138e 	movw	r3, #8590	; 0x218e
    b8cc:	f00d feb7 	bl	1963e <assert_print>
    b8d0:	4040      	eors	r0, r0
    b8d2:	f380 8811 	msr	BASEPRI, r0
    b8d6:	f04f 0003 	mov.w	r0, #3
    b8da:	df02      	svc	2
}
    b8dc:	e72b      	b.n	b736 <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b8de:	4b45      	ldr	r3, [pc, #276]	; (b9f4 <hci_evt_encode+0x330>)
    b8e0:	685b      	ldr	r3, [r3, #4]
    b8e2:	009a      	lsls	r2, r3, #2
    b8e4:	f57f af27 	bpl.w	b736 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    b8e8:	4b43      	ldr	r3, [pc, #268]	; (b9f8 <hci_evt_encode+0x334>)
    b8ea:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b8ec:	065b      	lsls	r3, r3, #25
    b8ee:	f57f af22 	bpl.w	b736 <hci_evt_encode+0x72>
    b8f2:	350c      	adds	r5, #12
    b8f4:	2102      	movs	r1, #2
    b8f6:	4628      	mov	r0, r5
    b8f8:	f010 f90d 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b8fc:	f640 333e 	movw	r3, #2878	; 0xb3e
    b900:	8003      	strh	r3, [r0, #0]
    b902:	2101      	movs	r1, #1
    b904:	4628      	mov	r0, r5
    b906:	f010 f906 	bl	1bb16 <net_buf_simple_add>
	me->subevent = subevt;
    b90a:	2307      	movs	r3, #7
    b90c:	7003      	strb	r3, [r0, #0]
    b90e:	210a      	movs	r1, #10
    b910:	4628      	mov	r0, r5
    b912:	f010 f900 	bl	1bb16 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    b916:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    b918:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b91a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    b91c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b91e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    b920:	8c23      	ldrh	r3, [r4, #32]
    b922:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    b924:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b926:	8103      	strh	r3, [r0, #8]
    b928:	e705      	b.n	b736 <hci_evt_encode+0x72>
    b92a:	350c      	adds	r5, #12
    b92c:	2102      	movs	r1, #2
    b92e:	4628      	mov	r0, r5
    b930:	f010 f8f1 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b934:	f44f 734c 	mov.w	r3, #816	; 0x330
    b938:	8003      	strh	r3, [r0, #0]
    b93a:	2103      	movs	r1, #3
    b93c:	4628      	mov	r0, r5
    b93e:	f010 f8ea 	bl	1bb16 <net_buf_simple_add>
	ep->status = 0x00;
    b942:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b944:	f8a0 6001 	strh.w	r6, [r0, #1]
    b948:	e6f5      	b.n	b736 <hci_evt_encode+0x72>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    b94a:	f890 3020 	ldrb.w	r3, [r0, #32]
    b94e:	2b0e      	cmp	r3, #14
    b950:	f47f aef1 	bne.w	b736 <hci_evt_encode+0x72>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b954:	460b      	mov	r3, r1
    b956:	4632      	mov	r2, r6
    b958:	2100      	movs	r1, #0
    b95a:	201a      	movs	r0, #26
}
    b95c:	b005      	add	sp, #20
    b95e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    b962:	f7ff b90f 	b.w	ab84 <le_remote_feat_complete>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    b966:	460b      	mov	r3, r1
    b968:	4632      	mov	r2, r6
    b96a:	4639      	mov	r1, r7
    b96c:	2000      	movs	r0, #0
    b96e:	e7f5      	b.n	b95c <hci_evt_encode+0x298>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b970:	4b20      	ldr	r3, [pc, #128]	; (b9f4 <hci_evt_encode+0x330>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    b972:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    b976:	681b      	ldr	r3, [r3, #0]
    b978:	061f      	lsls	r7, r3, #24
    b97a:	f57f aedc 	bpl.w	b736 <hci_evt_encode+0x72>
    b97e:	350c      	adds	r5, #12
    b980:	2102      	movs	r1, #2
    b982:	4628      	mov	r0, r5
    b984:	f010 f8c7 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b988:	f44f 6381 	mov.w	r3, #1032	; 0x408
    b98c:	8003      	strh	r3, [r0, #0]
    b98e:	2104      	movs	r1, #4
    b990:	4628      	mov	r0, r5
    b992:	f010 f8c0 	bl	1bb16 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    b996:	fab4 f384 	clz	r3, r4
    b99a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    b99c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    b99e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    b9a2:	70c3      	strb	r3, [r0, #3]
    b9a4:	e6c7      	b.n	b736 <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b9a6:	4b13      	ldr	r3, [pc, #76]	; (b9f4 <hci_evt_encode+0x330>)
    b9a8:	685b      	ldr	r3, [r3, #4]
    b9aa:	0098      	lsls	r0, r3, #2
    b9ac:	f140 80b6 	bpl.w	bb1c <hci_evt_encode+0x458>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    b9b0:	4b11      	ldr	r3, [pc, #68]	; (b9f8 <hci_evt_encode+0x334>)
    b9b2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    b9b4:	0699      	lsls	r1, r3, #26
    b9b6:	f140 80b1 	bpl.w	bb1c <hci_evt_encode+0x458>
    b9ba:	350c      	adds	r5, #12
    b9bc:	2102      	movs	r1, #2
    b9be:	4628      	mov	r0, r5
    b9c0:	f010 f8a9 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    b9c4:	f640 333e 	movw	r3, #2878	; 0xb3e
    b9c8:	8003      	strh	r3, [r0, #0]
    b9ca:	2101      	movs	r1, #1
    b9cc:	4628      	mov	r0, r5
    b9ce:	f010 f8a2 	bl	1bb16 <net_buf_simple_add>
	me->subevent = subevt;
    b9d2:	2306      	movs	r3, #6
    b9d4:	7003      	strb	r3, [r0, #0]
    b9d6:	210a      	movs	r1, #10
    b9d8:	4628      	mov	r0, r5
    b9da:	f010 f89c 	bl	1bb16 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    b9de:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    b9e0:	8c23      	ldrh	r3, [r4, #32]
    b9e2:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    b9e4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    b9e6:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    b9e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    b9ea:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    b9ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    b9ee:	8103      	strh	r3, [r0, #8]
    b9f0:	e6a1      	b.n	b736 <hci_evt_encode+0x72>
    b9f2:	bf00      	nop
    b9f4:	20000168 	.word	0x20000168
    b9f8:	20000160 	.word	0x20000160
    b9fc:	20000e00 	.word	0x20000e00
    ba00:	0001e42c 	.word	0x0001e42c
    ba04:	0001e220 	.word	0x0001e220
    ba08:	0001e1a4 	.word	0x0001e1a4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba0c:	4b57      	ldr	r3, [pc, #348]	; (bb6c <hci_evt_encode+0x4a8>)
    ba0e:	685b      	ldr	r3, [r3, #4]
    ba10:	0099      	lsls	r1, r3, #2
    ba12:	f57f ae90 	bpl.w	b736 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    ba16:	4b56      	ldr	r3, [pc, #344]	; (bb70 <hci_evt_encode+0x4ac>)
    ba18:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba1a:	06da      	lsls	r2, r3, #27
    ba1c:	f57f ae8b 	bpl.w	b736 <hci_evt_encode+0x72>
    ba20:	350c      	adds	r5, #12
    ba22:	2102      	movs	r1, #2
    ba24:	4628      	mov	r0, r5
    ba26:	f010 f876 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    ba2a:	f640 533e 	movw	r3, #3390	; 0xd3e
    ba2e:	8003      	strh	r3, [r0, #0]
    ba30:	2101      	movs	r1, #1
    ba32:	4628      	mov	r0, r5
    ba34:	f010 f86f 	bl	1bb16 <net_buf_simple_add>
	me->subevent = subevt;
    ba38:	2305      	movs	r3, #5
    ba3a:	7003      	strb	r3, [r0, #0]
    ba3c:	210c      	movs	r1, #12
    ba3e:	4628      	mov	r0, r5
    ba40:	f010 f869 	bl	1bb16 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    ba44:	f104 0120 	add.w	r1, r4, #32
    ba48:	4605      	mov	r5, r0
    ba4a:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    ba4c:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    ba50:	f00e f8d0 	bl	19bf4 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    ba54:	2202      	movs	r2, #2
    ba56:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ba5a:	f105 000a 	add.w	r0, r5, #10
}
    ba5e:	b005      	add	sp, #20
    ba60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    ba64:	f00e b8c6 	b.w	19bf4 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ba68:	4b40      	ldr	r3, [pc, #256]	; (bb6c <hci_evt_encode+0x4a8>)
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	061b      	lsls	r3, r3, #24
    ba6e:	f04f 0400 	mov.w	r4, #0
    ba72:	f57f ae60 	bpl.w	b736 <hci_evt_encode+0x72>
    ba76:	350c      	adds	r5, #12
    ba78:	2102      	movs	r1, #2
    ba7a:	4628      	mov	r0, r5
    ba7c:	f010 f84b 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    ba80:	f44f 6381 	mov.w	r3, #1032	; 0x408
    ba84:	8003      	strh	r3, [r0, #0]
    ba86:	2104      	movs	r1, #4
    ba88:	4628      	mov	r0, r5
    ba8a:	f010 f844 	bl	1bb16 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    ba8e:	2301      	movs	r3, #1
	ep->status = err;
    ba90:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ba92:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ba96:	70c3      	strb	r3, [r0, #3]
    ba98:	e64d      	b.n	b736 <hci_evt_encode+0x72>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    ba9a:	4a36      	ldr	r2, [pc, #216]	; (bb74 <hci_evt_encode+0x4b0>)
    ba9c:	4936      	ldr	r1, [pc, #216]	; (bb78 <hci_evt_encode+0x4b4>)
    ba9e:	4837      	ldr	r0, [pc, #220]	; (bb7c <hci_evt_encode+0x4b8>)
    baa0:	f641 63c8 	movw	r3, #7880	; 0x1ec8
    baa4:	f00d fdcb 	bl	1963e <assert_print>
    baa8:	4040      	eors	r0, r0
    baaa:	f380 8811 	msr	BASEPRI, r0
    baae:	f04f 0003 	mov.w	r0, #3
    bab2:	df02      	svc	2
    bab4:	e644      	b.n	b740 <hci_evt_encode+0x7c>
		conn_count++;
    bab6:	4a32      	ldr	r2, [pc, #200]	; (bb80 <hci_evt_encode+0x4bc>)
    bab8:	6813      	ldr	r3, [r2, #0]
    baba:	2102      	movs	r1, #2
    babc:	3301      	adds	r3, #1
    babe:	4628      	mov	r0, r5
    bac0:	6013      	str	r3, [r2, #0]
    bac2:	f010 f828 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    bac6:	f241 333e 	movw	r3, #4926	; 0x133e
    baca:	8003      	strh	r3, [r0, #0]
    bacc:	2101      	movs	r1, #1
    bace:	4628      	mov	r0, r5
    bad0:	f010 f821 	bl	1bb16 <net_buf_simple_add>
    bad4:	4603      	mov	r3, r0
	me->subevent = subevt;
    bad6:	2201      	movs	r2, #1
    bad8:	701a      	strb	r2, [r3, #0]
    bada:	4628      	mov	r0, r5
    badc:	2112      	movs	r1, #18
    bade:	f010 f81a 	bl	1bb16 <net_buf_simple_add>
	lecc->status = 0x00;
    bae2:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    bae4:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    bae8:	7f63      	ldrb	r3, [r4, #29]
    baea:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    baec:	7fa3      	ldrb	r3, [r4, #30]
    baee:	f003 0301 	and.w	r3, r3, #1
    baf2:	4605      	mov	r5, r0
    baf4:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    baf6:	2206      	movs	r2, #6
    baf8:	f104 011f 	add.w	r1, r4, #31
    bafc:	3005      	adds	r0, #5
    bafe:	f00e f879 	bl	19bf4 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
    bb02:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bb04:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
    bb08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    bb0a:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    bb0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    bb10:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    bb14:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    bb18:	746b      	strb	r3, [r5, #17]
    bb1a:	e60c      	b.n	b736 <hci_evt_encode+0x72>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    bb1c:	2300      	movs	r3, #0
    bb1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bb22:	e9cd 3300 	strd	r3, r3, [sp]
    bb26:	221a      	movs	r2, #26
    bb28:	2102      	movs	r1, #2
    bb2a:	4630      	mov	r0, r6
    bb2c:	f000 ffea 	bl	cb04 <ll_conn_update>
		return;
    bb30:	e601      	b.n	b736 <hci_evt_encode+0x72>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    bb32:	4a10      	ldr	r2, [pc, #64]	; (bb74 <hci_evt_encode+0x4b0>)
    bb34:	4913      	ldr	r1, [pc, #76]	; (bb84 <hci_evt_encode+0x4c0>)
    bb36:	4811      	ldr	r0, [pc, #68]	; (bb7c <hci_evt_encode+0x4b8>)
    bb38:	f641 7351 	movw	r3, #8017	; 0x1f51
    bb3c:	f00d fd7f 	bl	1963e <assert_print>
    bb40:	4040      	eors	r0, r0
    bb42:	f380 8811 	msr	BASEPRI, r0
    bb46:	f04f 0003 	mov.w	r0, #3
    bb4a:	df02      	svc	2
    bb4c:	e644      	b.n	b7d8 <hci_evt_encode+0x114>
		LL_ASSERT(0);
    bb4e:	4a09      	ldr	r2, [pc, #36]	; (bb74 <hci_evt_encode+0x4b0>)
    bb50:	490d      	ldr	r1, [pc, #52]	; (bb88 <hci_evt_encode+0x4c4>)
    bb52:	480a      	ldr	r0, [pc, #40]	; (bb7c <hci_evt_encode+0x4b8>)
    bb54:	f242 03aa 	movw	r3, #8362	; 0x20aa
    bb58:	f00d fd71 	bl	1963e <assert_print>
    bb5c:	4040      	eors	r0, r0
    bb5e:	f380 8811 	msr	BASEPRI, r0
    bb62:	f04f 0003 	mov.w	r0, #3
    bb66:	df02      	svc	2
		return;
    bb68:	e5e5      	b.n	b736 <hci_evt_encode+0x72>
    bb6a:	bf00      	nop
    bb6c:	20000168 	.word	0x20000168
    bb70:	20000160 	.word	0x20000160
    bb74:	0001e42c 	.word	0x0001e42c
    bb78:	0001e468 	.word	0x0001e468
    bb7c:	0001e1a4 	.word	0x0001e1a4
    bb80:	20001b24 	.word	0x20001b24
    bb84:	0001e4a4 	.word	0x0001e4a4
    bb88:	0001e220 	.word	0x0001e220

0000bb8c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    bb8c:	b570      	push	{r4, r5, r6, lr}
    bb8e:	f100 040c 	add.w	r4, r0, #12
    bb92:	460e      	mov	r6, r1
    bb94:	4620      	mov	r0, r4
    bb96:	2102      	movs	r1, #2
    bb98:	4615      	mov	r5, r2
    bb9a:	f00f ffbc 	bl	1bb16 <net_buf_simple_add>
	hdr->evt = evt;
    bb9e:	f240 5313 	movw	r3, #1299	; 0x513
    bba2:	8003      	strh	r3, [r0, #0]
    bba4:	2105      	movs	r1, #5
    bba6:	4620      	mov	r0, r4
    bba8:	f00f ffb5 	bl	1bb16 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    bbac:	2301      	movs	r3, #1
    bbae:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    bbb0:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    bbb4:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    bbb8:	bd70      	pop	{r4, r5, r6, pc}
    bbba:	bf00      	nop

0000bbbc <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    bbbc:	7903      	ldrb	r3, [r0, #4]
    bbbe:	2b03      	cmp	r3, #3
    bbc0:	d009      	beq.n	bbd6 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    bbc2:	2b17      	cmp	r3, #23
    bbc4:	d005      	beq.n	bbd2 <hci_get_class+0x16>
    bbc6:	3b18      	subs	r3, #24
    bbc8:	2b05      	cmp	r3, #5
    bbca:	bf8c      	ite	hi
    bbcc:	2000      	movhi	r0, #0
    bbce:	2003      	movls	r0, #3
    bbd0:	4770      	bx	lr

#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
		case NODE_RX_TYPE_CONN_IQ_SAMPLE_REPORT:
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

			return HCI_CLASS_EVT_REQUIRED;
    bbd2:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    bbd4:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    bbd6:	7f03      	ldrb	r3, [r0, #28]
    bbd8:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
    bbdc:	2b03      	cmp	r3, #3
    bbde:	bf14      	ite	ne
    bbe0:	2005      	movne	r0, #5
    bbe2:	2004      	moveq	r0, #4
    bbe4:	4770      	bx	lr
    bbe6:	bf00      	nop

0000bbe8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    bbe8:	4b0b      	ldr	r3, [pc, #44]	; (bc18 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    bbea:	4a0c      	ldr	r2, [pc, #48]	; (bc1c <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    bbec:	490c      	ldr	r1, [pc, #48]	; (bc20 <hci_init+0x38>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
    bbee:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    bbf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    bbf4:	f641 75ff 	movw	r5, #8191	; 0x1fff
    bbf8:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    bbfc:	2400      	movs	r4, #0
    bbfe:	2500      	movs	r5, #0
    bc00:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    bc04:	241f      	movs	r4, #31
    bc06:	2500      	movs	r5, #0
    bc08:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    bc0c:	4b05      	ldr	r3, [pc, #20]	; (bc24 <hci_init+0x3c>)
    bc0e:	2200      	movs	r2, #0
    bc10:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    bc12:	bc30      	pop	{r4, r5}
	hci_recv_fifo_reset();
    bc14:	f7fe bfa6 	b.w	ab64 <hci_recv_fifo_reset>
    bc18:	20000168 	.word	0x20000168
    bc1c:	20000e00 	.word	0x20000e00
    bc20:	20000160 	.word	0x20000160
    bc24:	20001b24 	.word	0x20001b24

0000bc28 <ticker_stop_cb>:
{
    bc28:	b530      	push	{r4, r5, lr}
    bc2a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    bc2c:	4c18      	ldr	r4, [pc, #96]	; (bc90 <ticker_stop_cb+0x68>)
{
    bc2e:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    bc30:	4b18      	ldr	r3, [pc, #96]	; (bc94 <ticker_stop_cb+0x6c>)
    bc32:	1b2c      	subs	r4, r5, r4
    bc34:	08a4      	lsrs	r4, r4, #2
    bc36:	fba3 3404 	umull	r3, r4, r3, r4
	handle = ull_adv_handle_get(adv);
    bc3a:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    bc3e:	b9cc      	cbnz	r4, bc74 <ticker_stop_cb+0x4c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    bc40:	1ca2      	adds	r2, r4, #2
    bc42:	4b15      	ldr	r3, [pc, #84]	; (bc98 <ticker_stop_cb+0x70>)
    bc44:	9500      	str	r5, [sp, #0]
    bc46:	b2d2      	uxtb	r2, r2
    bc48:	2101      	movs	r1, #1
    bc4a:	2000      	movs	r0, #0
    bc4c:	f7fd fb30 	bl	92b0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    bc50:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    bc54:	d00c      	beq.n	bc70 <ticker_stop_cb+0x48>
    bc56:	4a11      	ldr	r2, [pc, #68]	; (bc9c <ticker_stop_cb+0x74>)
    bc58:	4911      	ldr	r1, [pc, #68]	; (bca0 <ticker_stop_cb+0x78>)
    bc5a:	4812      	ldr	r0, [pc, #72]	; (bca4 <ticker_stop_cb+0x7c>)
    bc5c:	f640 1389 	movw	r3, #2441	; 0x989
    bc60:	f00d fced 	bl	1963e <assert_print>
    bc64:	4040      	eors	r0, r0
    bc66:	f380 8811 	msr	BASEPRI, r0
    bc6a:	f04f 0003 	mov.w	r0, #3
    bc6e:	df02      	svc	2
}
    bc70:	b003      	add	sp, #12
    bc72:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    bc74:	4a09      	ldr	r2, [pc, #36]	; (bc9c <ticker_stop_cb+0x74>)
    bc76:	490c      	ldr	r1, [pc, #48]	; (bca8 <ticker_stop_cb+0x80>)
    bc78:	480a      	ldr	r0, [pc, #40]	; (bca4 <ticker_stop_cb+0x7c>)
    bc7a:	f640 1384 	movw	r3, #2436	; 0x984
    bc7e:	f00d fcde 	bl	1963e <assert_print>
    bc82:	4040      	eors	r0, r0
    bc84:	f380 8811 	msr	BASEPRI, r0
    bc88:	f04f 0003 	mov.w	r0, #3
    bc8c:	df02      	svc	2
    bc8e:	e7d7      	b.n	bc40 <ticker_stop_cb+0x18>
    bc90:	20001b5c 	.word	0x20001b5c
    bc94:	4bda12f7 	.word	0x4bda12f7
    bc98:	0000bd3d 	.word	0x0000bd3d
    bc9c:	0001e4ec 	.word	0x0001e4ec
    bca0:	0001e538 	.word	0x0001e538
    bca4:	0001e1a4 	.word	0x0001e1a4
    bca8:	0001e52c 	.word	0x0001e52c

0000bcac <disabled_cb>:
{
    bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    bcae:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    bcb0:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    bcb2:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    bcb4:	b1c7      	cbz	r7, bce8 <disabled_cb+0x3c>
	LL_ASSERT(adv->node_rx_cc_free);
    bcb6:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    bcb8:	2300      	movs	r3, #0
    bcba:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    bcbc:	b33c      	cbz	r4, bd0e <disabled_cb+0x62>
	adv->node_rx_cc_free = NULL;
    bcbe:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    bcc0:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
    bcc2:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    bcc4:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    bcc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bcca:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    bccc:	f104 001c 	add.w	r0, r4, #28
    bcd0:	2212      	movs	r2, #18
    bcd2:	f00d ff9a 	bl	19c0a <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    bcd6:	233c      	movs	r3, #60	; 0x3c
    bcd8:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    bcda:	60a6      	str	r6, [r4, #8]
	ll_rx_put_sched(link, rx);
    bcdc:	4621      	mov	r1, r4
    bcde:	4638      	mov	r0, r7
}
    bce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_put_sched(link, rx);
    bce4:	f7fe b8b0 	b.w	9e48 <ll_rx_put_sched>
	LL_ASSERT(adv->link_cc_free);
    bce8:	4a10      	ldr	r2, [pc, #64]	; (bd2c <disabled_cb+0x80>)
    bcea:	4911      	ldr	r1, [pc, #68]	; (bd30 <disabled_cb+0x84>)
    bcec:	4811      	ldr	r0, [pc, #68]	; (bd34 <disabled_cb+0x88>)
    bcee:	f640 13d1 	movw	r3, #2513	; 0x9d1
    bcf2:	f00d fca4 	bl	1963e <assert_print>
    bcf6:	4040      	eors	r0, r0
    bcf8:	f380 8811 	msr	BASEPRI, r0
    bcfc:	f04f 0003 	mov.w	r0, #3
    bd00:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    bd02:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    bd04:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    bd06:	2300      	movs	r3, #0
    bd08:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    bd0a:	2c00      	cmp	r4, #0
    bd0c:	d1d7      	bne.n	bcbe <disabled_cb+0x12>
    bd0e:	4a07      	ldr	r2, [pc, #28]	; (bd2c <disabled_cb+0x80>)
    bd10:	4909      	ldr	r1, [pc, #36]	; (bd38 <disabled_cb+0x8c>)
    bd12:	4808      	ldr	r0, [pc, #32]	; (bd34 <disabled_cb+0x88>)
    bd14:	f640 13d5 	movw	r3, #2517	; 0x9d5
    bd18:	f00d fc91 	bl	1963e <assert_print>
    bd1c:	4040      	eors	r0, r0
    bd1e:	f380 8811 	msr	BASEPRI, r0
    bd22:	f04f 0003 	mov.w	r0, #3
    bd26:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    bd28:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    bd2a:	e7c8      	b.n	bcbe <disabled_cb+0x12>
    bd2c:	0001e4ec 	.word	0x0001e4ec
    bd30:	0001e554 	.word	0x0001e554
    bd34:	0001e1a4 	.word	0x0001e1a4
    bd38:	0001e568 	.word	0x0001e568

0000bd3c <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    bd3c:	b100      	cbz	r0, bd40 <ticker_stop_op_cb+0x4>
    bd3e:	4770      	bx	lr
	mfy.param = param;
    bd40:	4b0c      	ldr	r3, [pc, #48]	; (bd74 <ticker_stop_op_cb+0x38>)
{
    bd42:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    bd44:	4602      	mov	r2, r0
    bd46:	460c      	mov	r4, r1
    bd48:	2002      	movs	r0, #2
    bd4a:	2101      	movs	r1, #1
	mfy.param = param;
    bd4c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    bd4e:	f7fc f847 	bl	7de0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    bd52:	b900      	cbnz	r0, bd56 <ticker_stop_op_cb+0x1a>
}
    bd54:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    bd56:	4a08      	ldr	r2, [pc, #32]	; (bd78 <ticker_stop_op_cb+0x3c>)
    bd58:	4908      	ldr	r1, [pc, #32]	; (bd7c <ticker_stop_op_cb+0x40>)
    bd5a:	4809      	ldr	r0, [pc, #36]	; (bd80 <ticker_stop_op_cb+0x44>)
    bd5c:	f640 13a5 	movw	r3, #2469	; 0x9a5
    bd60:	f00d fc6d 	bl	1963e <assert_print>
    bd64:	4040      	eors	r0, r0
    bd66:	f380 8811 	msr	BASEPRI, r0
    bd6a:	f04f 0003 	mov.w	r0, #3
    bd6e:	df02      	svc	2
}
    bd70:	bd10      	pop	{r4, pc}
    bd72:	bf00      	nop
    bd74:	20000538 	.word	0x20000538
    bd78:	0001e4ec 	.word	0x0001e4ec
    bd7c:	0001e304 	.word	0x0001e304
    bd80:	0001e1a4 	.word	0x0001e1a4

0000bd84 <adv_disable>:
{
    bd84:	b538      	push	{r3, r4, r5, lr}
    bd86:	4604      	mov	r4, r0
    bd88:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    bd8c:	b353      	cbz	r3, bde4 <adv_disable+0x60>
		mfy.param = &adv->lll;
    bd8e:	4d17      	ldr	r5, [pc, #92]	; (bdec <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    bd90:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
    bd92:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    bd94:	b16b      	cbz	r3, bdb2 <adv_disable+0x2e>
    bd96:	4a16      	ldr	r2, [pc, #88]	; (bdf0 <adv_disable+0x6c>)
    bd98:	4916      	ldr	r1, [pc, #88]	; (bdf4 <adv_disable+0x70>)
    bd9a:	4817      	ldr	r0, [pc, #92]	; (bdf8 <adv_disable+0x74>)
    bd9c:	f640 13ba 	movw	r3, #2490	; 0x9ba
    bda0:	f00d fc4d 	bl	1963e <assert_print>
    bda4:	4040      	eors	r0, r0
    bda6:	f380 8811 	msr	BASEPRI, r0
    bdaa:	f04f 0003 	mov.w	r0, #3
    bdae:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    bdb0:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    bdb2:	4912      	ldr	r1, [pc, #72]	; (bdfc <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    bdb4:	4b0d      	ldr	r3, [pc, #52]	; (bdec <adv_disable+0x68>)
    bdb6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    bdb8:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    bdbc:	4611      	mov	r1, r2
    bdbe:	2001      	movs	r0, #1
    bdc0:	f7fc f80e 	bl	7de0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    bdc4:	b900      	cbnz	r0, bdc8 <adv_disable+0x44>
}
    bdc6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    bdc8:	4a09      	ldr	r2, [pc, #36]	; (bdf0 <adv_disable+0x6c>)
    bdca:	490d      	ldr	r1, [pc, #52]	; (be00 <adv_disable+0x7c>)
    bdcc:	480a      	ldr	r0, [pc, #40]	; (bdf8 <adv_disable+0x74>)
    bdce:	f640 13c1 	movw	r3, #2497	; 0x9c1
    bdd2:	f00d fc34 	bl	1963e <assert_print>
    bdd6:	4040      	eors	r0, r0
    bdd8:	f380 8811 	msr	BASEPRI, r0
    bddc:	f04f 0003 	mov.w	r0, #3
    bde0:	df02      	svc	2
}
    bde2:	bd38      	pop	{r3, r4, r5, pc}
    bde4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    bde8:	f7ff bf60 	b.w	bcac <disabled_cb>
    bdec:	20000528 	.word	0x20000528
    bdf0:	0001e4ec 	.word	0x0001e4ec
    bdf4:	0001e580 	.word	0x0001e580
    bdf8:	0001e1a4 	.word	0x0001e1a4
    bdfc:	0000bcad 	.word	0x0000bcad
    be00:	0001e304 	.word	0x0001e304

0000be04 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    be04:	b900      	cbnz	r0, be08 <ticker_update_op_cb+0x4>
    be06:	4770      	bx	lr
{
    be08:	b510      	push	{r4, lr}
    be0a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    be0c:	f7fe f8da 	bl	9fc4 <ull_disable_mark_get>
    be10:	4284      	cmp	r4, r0
    be12:	d00c      	beq.n	be2e <ticker_update_op_cb+0x2a>
    be14:	4a06      	ldr	r2, [pc, #24]	; (be30 <ticker_update_op_cb+0x2c>)
    be16:	4907      	ldr	r1, [pc, #28]	; (be34 <ticker_update_op_cb+0x30>)
    be18:	4807      	ldr	r0, [pc, #28]	; (be38 <ticker_update_op_cb+0x34>)
    be1a:	f640 1376 	movw	r3, #2422	; 0x976
    be1e:	f00d fc0e 	bl	1963e <assert_print>
    be22:	4040      	eors	r0, r0
    be24:	f380 8811 	msr	BASEPRI, r0
    be28:	f04f 0003 	mov.w	r0, #3
    be2c:	df02      	svc	2
}
    be2e:	bd10      	pop	{r4, pc}
    be30:	0001e4ec 	.word	0x0001e4ec
    be34:	0001e594 	.word	0x0001e594
    be38:	0001e1a4 	.word	0x0001e1a4

0000be3c <init_set.constprop.0>:
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    be3c:	4b0f      	ldr	r3, [pc, #60]	; (be7c <init_set.constprop.0+0x40>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    be3e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    be40:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
    be44:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    be48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    be4c:	f022 0202 	bic.w	r2, r2, #2
    be50:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    be52:	f042 020e 	orr.w	r2, r2, #14
    be56:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    be58:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    be5a:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    be5c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    be60:	f8a3 c068 	strh.w	ip, [r3, #104]	; 0x68
	pdu->type = pdu_type;
    be64:	700a      	strb	r2, [r1, #0]
	pdu->len = BDADDR_SIZE;
    be66:	7048      	strb	r0, [r1, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    be68:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    be6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	pdu->type = pdu_type;
    be70:	2204      	movs	r2, #4
    be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    be74:	701a      	strb	r2, [r3, #0]
	pdu->len = BDADDR_SIZE;
    be76:	7058      	strb	r0, [r3, #1]
	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);

#if !defined(CONFIG_BT_CTLR_ADV_EXT)
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    be78:	4770      	bx	lr
    be7a:	bf00      	nop
    be7c:	20001b5c 	.word	0x20001b5c

0000be80 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    be80:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    be82:	4c1b      	ldr	r4, [pc, #108]	; (bef0 <conn_release.constprop.0+0x70>)
    be84:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    be86:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    be88:	b163      	cbz	r3, bea4 <conn_release.constprop.0+0x24>
    be8a:	4a1a      	ldr	r2, [pc, #104]	; (bef4 <conn_release.constprop.0+0x74>)
    be8c:	491a      	ldr	r1, [pc, #104]	; (bef8 <conn_release.constprop.0+0x78>)
    be8e:	481b      	ldr	r0, [pc, #108]	; (befc <conn_release.constprop.0+0x7c>)
    be90:	f640 13fe 	movw	r3, #2558	; 0x9fe
    be94:	f00d fbd3 	bl	1963e <assert_print>
    be98:	4040      	eors	r0, r0
    be9a:	f380 8811 	msr	BASEPRI, r0
    be9e:	f04f 0003 	mov.w	r0, #3
    bea2:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    bea4:	f105 0160 	add.w	r1, r5, #96	; 0x60
    bea8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    beac:	f7fb ff18 	bl	7ce0 <memq_deinit>
	LL_ASSERT(link);
    beb0:	4606      	mov	r6, r0
    beb2:	b170      	cbz	r0, bed2 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    beb4:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    beb6:	66ee      	str	r6, [r5, #108]	; 0x6c
	ll_conn_release(lll->hdr.parent);
    beb8:	f000 fda4 	bl	ca04 <ll_conn_release>
	adv->lll.conn = NULL;
    bebc:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    bebe:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    bec0:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    bec2:	f7fd ffb1 	bl	9e28 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    bec6:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    bec8:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    beca:	f7fd ffa1 	bl	9e10 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    bece:	6625      	str	r5, [r4, #96]	; 0x60
}
    bed0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    bed2:	4a08      	ldr	r2, [pc, #32]	; (bef4 <conn_release.constprop.0+0x74>)
    bed4:	490a      	ldr	r1, [pc, #40]	; (bf00 <conn_release.constprop.0+0x80>)
    bed6:	4809      	ldr	r0, [pc, #36]	; (befc <conn_release.constprop.0+0x7c>)
    bed8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
    bedc:	f00d fbaf 	bl	1963e <assert_print>
    bee0:	4040      	eors	r0, r0
    bee2:	f380 8811 	msr	BASEPRI, r0
    bee6:	f04f 0003 	mov.w	r0, #3
    beea:	df02      	svc	2
    beec:	e7e2      	b.n	beb4 <conn_release.constprop.0+0x34>
    beee:	bf00      	nop
    bef0:	20001b5c 	.word	0x20001b5c
    bef4:	0001e4ec 	.word	0x0001e4ec
    bef8:	0001e5c4 	.word	0x0001e5c4
    befc:	0001e1a4 	.word	0x0001e1a4
    bf00:	0001e6c8 	.word	0x0001e6c8

0000bf04 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
    bf04:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    bf06:	4c4f      	ldr	r4, [pc, #316]	; (c044 <disable.constprop.0+0x140>)
    bf08:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    bf0c:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
    bf0e:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    bf10:	d55f      	bpl.n	bfd2 <disable.constprop.0+0xce>
	if (adv->lll.conn) {
    bf12:	6a23      	ldr	r3, [r4, #32]
    bf14:	b153      	cbz	r3, bf2c <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
    bf16:	f893 2020 	ldrb.w	r2, [r3, #32]
    bf1a:	f042 0202 	orr.w	r2, r2, #2
    bf1e:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    bf22:	6a23      	ldr	r3, [r4, #32]
    bf24:	f893 3020 	ldrb.w	r3, [r3, #32]
    bf28:	07da      	lsls	r2, r3, #31
    bf2a:	d467      	bmi.n	bffc <disable.constprop.0+0xf8>
	mark = ull_disable_mark(adv);
    bf2c:	4845      	ldr	r0, [pc, #276]	; (c044 <disable.constprop.0+0x140>)
    bf2e:	f7fe f831 	bl	9f94 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    bf32:	4284      	cmp	r4, r0
    bf34:	d00c      	beq.n	bf50 <disable.constprop.0+0x4c>
    bf36:	4a44      	ldr	r2, [pc, #272]	; (c048 <disable.constprop.0+0x144>)
    bf38:	4944      	ldr	r1, [pc, #272]	; (c04c <disable.constprop.0+0x148>)
    bf3a:	4845      	ldr	r0, [pc, #276]	; (c050 <disable.constprop.0+0x14c>)
    bf3c:	f640 23c9 	movw	r3, #2761	; 0xac9
    bf40:	f00d fb7d 	bl	1963e <assert_print>
    bf44:	4040      	eors	r0, r0
    bf46:	f380 8811 	msr	BASEPRI, r0
    bf4a:	f04f 0003 	mov.w	r0, #3
    bf4e:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    bf50:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    bf54:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    bf56:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    bf58:	d50d      	bpl.n	bf76 <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
    bf5a:	2102      	movs	r1, #2
    bf5c:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    bf5e:	4b3d      	ldr	r3, [pc, #244]	; (c054 <disable.constprop.0+0x150>)
    bf60:	9500      	str	r5, [sp, #0]
    bf62:	2103      	movs	r1, #3
    bf64:	2201      	movs	r2, #1
    bf66:	2000      	movs	r0, #0
    bf68:	f7fd f9a2 	bl	92b0 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    bf6c:	4629      	mov	r1, r5
    bf6e:	f7fd ffe9 	bl	9f44 <ull_ticker_status_take>
		if (ret) {
    bf72:	2800      	cmp	r0, #0
    bf74:	d152      	bne.n	c01c <disable.constprop.0+0x118>
	ret_cb = TICKER_STATUS_BUSY;
    bf76:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    bf78:	2103      	movs	r1, #3
    bf7a:	4b36      	ldr	r3, [pc, #216]	; (c054 <disable.constprop.0+0x150>)
    bf7c:	9500      	str	r5, [sp, #0]
    bf7e:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    bf80:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    bf82:	f7fd f995 	bl	92b0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    bf86:	4629      	mov	r1, r5
    bf88:	f7fd ffdc 	bl	9f44 <ull_ticker_status_take>
	if (ret) {
    bf8c:	bb20      	cbnz	r0, bfd8 <disable.constprop.0+0xd4>
	err = ull_disable(&adv->lll);
    bf8e:	4832      	ldr	r0, [pc, #200]	; (c058 <disable.constprop.0+0x154>)
    bf90:	f7fe f83c 	bl	a00c <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
    bf94:	b108      	cbz	r0, bf9a <disable.constprop.0+0x96>
    bf96:	3078      	adds	r0, #120	; 0x78
    bf98:	d132      	bne.n	c000 <disable.constprop.0+0xfc>
	mark = ull_disable_unmark(adv);
    bf9a:	482a      	ldr	r0, [pc, #168]	; (c044 <disable.constprop.0+0x140>)
    bf9c:	f7fe f806 	bl	9fac <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    bfa0:	4284      	cmp	r4, r0
    bfa2:	d00c      	beq.n	bfbe <disable.constprop.0+0xba>
    bfa4:	4a28      	ldr	r2, [pc, #160]	; (c048 <disable.constprop.0+0x144>)
    bfa6:	4929      	ldr	r1, [pc, #164]	; (c04c <disable.constprop.0+0x148>)
    bfa8:	4829      	ldr	r0, [pc, #164]	; (c050 <disable.constprop.0+0x14c>)
    bfaa:	f640 23eb 	movw	r3, #2795	; 0xaeb
    bfae:	f00d fb46 	bl	1963e <assert_print>
    bfb2:	4040      	eors	r0, r0
    bfb4:	f380 8811 	msr	BASEPRI, r0
    bfb8:	f04f 0003 	mov.w	r0, #3
    bfbc:	df02      	svc	2
	if (adv->lll.conn) {
    bfbe:	6a23      	ldr	r3, [r4, #32]
    bfc0:	b10b      	cbz	r3, bfc6 <disable.constprop.0+0xc2>
		conn_release(adv);
    bfc2:	f7ff ff5d 	bl	be80 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    bfc6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    bfca:	f36f 0300 	bfc	r3, #0, #1
    bfce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
    bfd2:	2000      	movs	r0, #0
}
    bfd4:	b005      	add	sp, #20
    bfd6:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
    bfd8:	481a      	ldr	r0, [pc, #104]	; (c044 <disable.constprop.0+0x140>)
    bfda:	f7fd ffe7 	bl	9fac <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    bfde:	4284      	cmp	r4, r0
    bfe0:	d00c      	beq.n	bffc <disable.constprop.0+0xf8>
    bfe2:	4a19      	ldr	r2, [pc, #100]	; (c048 <disable.constprop.0+0x144>)
    bfe4:	4919      	ldr	r1, [pc, #100]	; (c04c <disable.constprop.0+0x148>)
    bfe6:	481a      	ldr	r0, [pc, #104]	; (c050 <disable.constprop.0+0x14c>)
    bfe8:	f640 23e2 	movw	r3, #2786	; 0xae2
    bfec:	f00d fb27 	bl	1963e <assert_print>
    bff0:	4040      	eors	r0, r0
    bff2:	f380 8811 	msr	BASEPRI, r0
    bff6:	f04f 0003 	mov.w	r0, #3
    bffa:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    bffc:	200c      	movs	r0, #12
    bffe:	e7e9      	b.n	bfd4 <disable.constprop.0+0xd0>
	LL_ASSERT(!err || (err == -EALREADY));
    c000:	4a11      	ldr	r2, [pc, #68]	; (c048 <disable.constprop.0+0x144>)
    c002:	4916      	ldr	r1, [pc, #88]	; (c05c <disable.constprop.0+0x158>)
    c004:	4812      	ldr	r0, [pc, #72]	; (c050 <disable.constprop.0+0x14c>)
    c006:	f640 23e8 	movw	r3, #2792	; 0xae8
    c00a:	f00d fb18 	bl	1963e <assert_print>
    c00e:	4040      	eors	r0, r0
    c010:	f380 8811 	msr	BASEPRI, r0
    c014:	f04f 0003 	mov.w	r0, #3
    c018:	df02      	svc	2
    c01a:	e7be      	b.n	bf9a <disable.constprop.0+0x96>
			mark = ull_disable_unmark(adv);
    c01c:	4809      	ldr	r0, [pc, #36]	; (c044 <disable.constprop.0+0x140>)
    c01e:	f7fd ffc5 	bl	9fac <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    c022:	4284      	cmp	r4, r0
    c024:	d0ea      	beq.n	bffc <disable.constprop.0+0xf8>
    c026:	4a08      	ldr	r2, [pc, #32]	; (c048 <disable.constprop.0+0x144>)
    c028:	4908      	ldr	r1, [pc, #32]	; (c04c <disable.constprop.0+0x148>)
    c02a:	4809      	ldr	r0, [pc, #36]	; (c050 <disable.constprop.0+0x14c>)
    c02c:	f640 23d4 	movw	r3, #2772	; 0xad4
    c030:	f00d fb05 	bl	1963e <assert_print>
    c034:	4040      	eors	r0, r0
    c036:	f380 8811 	msr	BASEPRI, r0
    c03a:	f04f 0003 	mov.w	r0, #3
    c03e:	df02      	svc	2
    c040:	e7dc      	b.n	bffc <disable.constprop.0+0xf8>
    c042:	bf00      	nop
    c044:	20001b5c 	.word	0x20001b5c
    c048:	0001e4ec 	.word	0x0001e4ec
    c04c:	0001e5d8 	.word	0x0001e5d8
    c050:	0001e1a4 	.word	0x0001e1a4
    c054:	00009529 	.word	0x00009529
    c058:	20001b78 	.word	0x20001b78
    c05c:	0001e5e4 	.word	0x0001e5e4

0000c060 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    c060:	7803      	ldrb	r3, [r0, #0]
    c062:	f003 030f 	and.w	r3, r3, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
    c066:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    c06a:	2b02      	cmp	r3, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    c06c:	fa1f fc8c 	uxth.w	ip, ip
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    c070:	d025      	beq.n	c0be <adv_time_get.constprop.0.isra.0+0x5e>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    c072:	2b01      	cmp	r3, #1
    c074:	d00d      	beq.n	c092 <adv_time_get.constprop.0.isra.0+0x32>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    c076:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    c078:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    c07a:	b19b      	cbz	r3, c0a4 <adv_time_get.constprop.0.isra.0+0x44>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    c07c:	2b06      	cmp	r3, #6
    c07e:	d011      	beq.n	c0a4 <adv_time_get.constprop.0.isra.0+0x44>
    c080:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    c084:	fb13 f30c 	smulbb	r3, r3, ip
    c088:	f240 208f 	movw	r0, #655	; 0x28f
			time_us += (BYTES2US(adv_size, PHY_1M) +
    c08c:	4418      	add	r0, r3
    c08e:	b280      	uxth	r0, r0
}
    c090:	4770      	bx	lr
    c092:	f240 2316 	movw	r3, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    c096:	fb13 f30c 	smulbb	r3, r3, ip
    c09a:	f240 401f 	movw	r0, #1055	; 0x41f
			time_us += (BYTES2US(adv_size, PHY_1M) +
    c09e:	4418      	add	r0, r3
    c0a0:	b280      	uxth	r0, r0
}
    c0a2:	4770      	bx	lr
				adv_size += pdu->len;
    c0a4:	7840      	ldrb	r0, [r0, #1]
    c0a6:	3010      	adds	r0, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
    c0a8:	00c0      	lsls	r0, r0, #3
    c0aa:	f201 3157 	addw	r1, r1, #855	; 0x357
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    c0ae:	f500 73b3 	add.w	r3, r0, #358	; 0x166
    c0b2:	fb13 f30c 	smulbb	r3, r3, ip
    c0b6:	4408      	add	r0, r1
			time_us += (BYTES2US(adv_size, PHY_1M) +
    c0b8:	4418      	add	r0, r3
    c0ba:	b280      	uxth	r0, r0
}
    c0bc:	4770      	bx	lr
			adv_size += pdu->len;
    c0be:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    c0c0:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    c0c4:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    c0c8:	0040      	lsls	r0, r0, #1
    c0ca:	f101 0310 	add.w	r3, r1, #16
    c0ce:	00db      	lsls	r3, r3, #3
    c0d0:	f200 1077 	addw	r0, r0, #375	; 0x177
    c0d4:	fb03 0202 	mla	r2, r3, r2, r0
    c0d8:	b290      	uxth	r0, r2
    c0da:	4770      	bx	lr

0000c0dc <ticker_cb>:
{
    c0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0e0:	461d      	mov	r5, r3
    c0e2:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    c0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0e8:	429d      	cmp	r5, r3
{
    c0ea:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    c0ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    c0f0:	d018      	beq.n	c124 <ticker_cb+0x48>
	return ++hdr->ref;
    c0f2:	7823      	ldrb	r3, [r4, #0]
    c0f4:	3301      	adds	r3, #1
    c0f6:	b2db      	uxtb	r3, r3
    c0f8:	4607      	mov	r7, r0
    c0fa:	4616      	mov	r6, r2
    c0fc:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    c0fe:	2b00      	cmp	r3, #0
    c100:	d064      	beq.n	c1cc <ticker_cb+0xf0>
		p.ticks_at_expire = ticks_at_expire;
    c102:	4939      	ldr	r1, [pc, #228]	; (c1e8 <ticker_cb+0x10c>)
		mfy.param = &p;
    c104:	4b39      	ldr	r3, [pc, #228]	; (c1ec <ticker_cb+0x110>)
		p.lazy = lazy;
    c106:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    c108:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c10c:	2200      	movs	r2, #0
		p.param = lll;
    c10e:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    c110:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    c114:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    c118:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c11a:	2001      	movs	r0, #1
    c11c:	4611      	mov	r1, r2
    c11e:	f7fb fe5f 	bl	7de0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    c122:	b938      	cbnz	r0, c134 <ticker_cb+0x58>
	if (!lll->is_hdcd)
    c124:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c128:	f010 0501 	ands.w	r5, r0, #1
    c12c:	d014      	beq.n	c158 <ticker_cb+0x7c>
}
    c12e:	b00a      	add	sp, #40	; 0x28
    c130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    c134:	4a2e      	ldr	r2, [pc, #184]	; (c1f0 <ticker_cb+0x114>)
    c136:	492f      	ldr	r1, [pc, #188]	; (c1f4 <ticker_cb+0x118>)
    c138:	482f      	ldr	r0, [pc, #188]	; (c1f8 <ticker_cb+0x11c>)
    c13a:	f44f 6314 	mov.w	r3, #2368	; 0x940
    c13e:	f00d fa7e 	bl	1963e <assert_print>
    c142:	4040      	eors	r0, r0
    c144:	f380 8811 	msr	BASEPRI, r0
    c148:	f04f 0003 	mov.w	r0, #3
    c14c:	df02      	svc	2
	if (!lll->is_hdcd)
    c14e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    c152:	f010 0501 	ands.w	r5, r0, #1
    c156:	d1ea      	bne.n	c12e <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    c158:	2104      	movs	r1, #4
    c15a:	a809      	add	r0, sp, #36	; 0x24
    c15c:	f006 f96a 	bl	12434 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c162:	4a26      	ldr	r2, [pc, #152]	; (c1fc <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c164:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
    c166:	fba2 1203 	umull	r1, r2, r2, r3
    c16a:	1a99      	subs	r1, r3, r2
    c16c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    c170:	0a12      	lsrs	r2, r2, #8
    c172:	f240 1147 	movw	r1, #327	; 0x147
    c176:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    c17a:	4a21      	ldr	r2, [pc, #132]	; (c200 <ticker_cb+0x124>)
    c17c:	4921      	ldr	r1, [pc, #132]	; (c204 <ticker_cb+0x128>)
    c17e:	1aa2      	subs	r2, r4, r2
    c180:	0892      	lsrs	r2, r2, #2
    c182:	fba1 1202 	umull	r1, r2, r1, r2
    c186:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c188:	491f      	ldr	r1, [pc, #124]	; (c208 <ticker_cb+0x12c>)
    c18a:	3202      	adds	r2, #2
    c18c:	e9cd 5104 	strd	r5, r1, [sp, #16]
	random_delay += (ticks_delay_window_offset + 1);
    c190:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c192:	e9cd 5502 	strd	r5, r5, [sp, #8]
    c196:	e9cd 5500 	strd	r5, r5, [sp]
    c19a:	b2d2      	uxtb	r2, r2
    c19c:	2101      	movs	r1, #1
    c19e:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
    c1a0:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    c1a2:	f7fd f86d 	bl	9280 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    c1a6:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    c1aa:	d0c0      	beq.n	c12e <ticker_cb+0x52>
    c1ac:	4a10      	ldr	r2, [pc, #64]	; (c1f0 <ticker_cb+0x114>)
    c1ae:	4917      	ldr	r1, [pc, #92]	; (c20c <ticker_cb+0x130>)
    c1b0:	4811      	ldr	r0, [pc, #68]	; (c1f8 <ticker_cb+0x11c>)
    c1b2:	f240 7393 	movw	r3, #1939	; 0x793
    c1b6:	f00d fa42 	bl	1963e <assert_print>
    c1ba:	4040      	eors	r0, r0
    c1bc:	f380 8811 	msr	BASEPRI, r0
    c1c0:	f04f 0003 	mov.w	r0, #3
    c1c4:	df02      	svc	2
}
    c1c6:	b00a      	add	sp, #40	; 0x28
    c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
    c1cc:	4a08      	ldr	r2, [pc, #32]	; (c1f0 <ticker_cb+0x114>)
    c1ce:	4910      	ldr	r1, [pc, #64]	; (c210 <ticker_cb+0x134>)
    c1d0:	4809      	ldr	r0, [pc, #36]	; (c1f8 <ticker_cb+0x11c>)
    c1d2:	f640 131e 	movw	r3, #2334	; 0x91e
    c1d6:	f00d fa32 	bl	1963e <assert_print>
    c1da:	4040      	eors	r0, r0
    c1dc:	f380 8811 	msr	BASEPRI, r0
    c1e0:	f04f 0003 	mov.w	r0, #3
    c1e4:	df02      	svc	2
    c1e6:	e78c      	b.n	c102 <ticker_cb+0x26>
    c1e8:	20001b30 	.word	0x20001b30
    c1ec:	20000518 	.word	0x20000518
    c1f0:	0001e4ec 	.word	0x0001e4ec
    c1f4:	0001e304 	.word	0x0001e304
    c1f8:	0001e1a4 	.word	0x0001e1a4
    c1fc:	90d4f121 	.word	0x90d4f121
    c200:	20001b5c 	.word	0x20001b5c
    c204:	4bda12f7 	.word	0x4bda12f7
    c208:	0000be05 	.word	0x0000be05
    c20c:	0001e600 	.word	0x0001e600
    c210:	0001e5fc 	.word	0x0001e5fc

0000c214 <ll_adv_params_set>:
{
    c214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
    c218:	4c6c      	ldr	r4, [pc, #432]	; (c3cc <ll_adv_params_set+0x1b8>)
{
    c21a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    c21c:	4b6c      	ldr	r3, [pc, #432]	; (c3d0 <ll_adv_params_set+0x1bc>)
	if (!adv || adv->is_enabled) {
    c21e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    c222:	4686      	mov	lr, r0
    c224:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    c226:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    c22a:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    c22c:	f016 0601 	ands.w	r6, r6, #1
{
    c230:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
    c234:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    c238:	9000      	str	r0, [sp, #0]
    c23a:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    c23e:	f040 809c 	bne.w	c37a <ll_adv_params_set+0x166>
	adv->lll.chan_map = chan_map;
    c242:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    c244:	4615      	mov	r5, r2
    c246:	f008 0207 	and.w	r2, r8, #7
    c24a:	f003 0303 	and.w	r3, r3, #3
    c24e:	0052      	lsls	r2, r2, #1
    c250:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
    c254:	f021 0102 	bic.w	r1, r1, #2
    c258:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    c25c:	430a      	orrs	r2, r1
    c25e:	84a2      	strh	r2, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    c260:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    c264:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		adv->interval = 0;
    c268:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
    c26c:	f10c 0308 	add.w	r3, ip, #8
    c270:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
		adv->interval = 0;
    c274:	bf08      	it	eq
    c276:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
    c27a:	eb0d 0c03 	add.w	ip, sp, r3
    c27e:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
    c282:	f898 2000 	ldrb.w	r2, [r8]
	pdu->type = pdu_adv_type[adv_type];
    c286:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
    c28a:	f022 001f 	bic.w	r0, r2, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    c28e:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
    c292:	f003 030f 	and.w	r3, r3, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    c296:	bf0c      	ite	eq
    c298:	2101      	moveq	r1, #1
    c29a:	2100      	movne	r1, #0
    c29c:	4303      	orrs	r3, r0
    c29e:	f361 1345 	bfi	r3, r1, #5, #1
    c2a2:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    c2a6:	f003 030f 	and.w	r3, r3, #15
    c2aa:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    c2ac:	f002 020f 	and.w	r2, r2, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    c2b0:	d02e      	beq.n	c310 <ll_adv_params_set+0xfc>
	} else if (pdu->len == 0) {
    c2b2:	f898 3001 	ldrb.w	r3, [r8, #1]
    c2b6:	b9f3      	cbnz	r3, c2f6 <ll_adv_params_set+0xe2>
		pdu->tx_addr = own_addr_type & 0x1;
    c2b8:	f898 3000 	ldrb.w	r3, [r8]
    c2bc:	f005 0501 	and.w	r5, r5, #1
    c2c0:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    c2c4:	f36f 13c7 	bfc	r3, #7, #1
    c2c8:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    c2cc:	2306      	movs	r3, #6
    c2ce:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    c2d2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    c2d6:	61e4      	str	r4, [r4, #28]
    c2d8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    c2dc:	01ad      	lsls	r5, r5, #6
    c2de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
    c2e0:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    c2e2:	f045 0504 	orr.w	r5, r5, #4
    c2e6:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    c2e8:	b90a      	cbnz	r2, c2ee <ll_adv_params_set+0xda>
			pdu->len = BDADDR_SIZE;
    c2ea:	2206      	movs	r2, #6
    c2ec:	705a      	strb	r2, [r3, #1]
}
    c2ee:	4630      	mov	r0, r6
    c2f0:	b003      	add	sp, #12
    c2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    c2f6:	2a01      	cmp	r2, #1
    c2f8:	d031      	beq.n	c35e <ll_adv_params_set+0x14a>
		pdu->tx_addr = own_addr_type & 0x1;
    c2fa:	f898 3000 	ldrb.w	r3, [r8]
    c2fe:	f005 0501 	and.w	r5, r5, #1
    c302:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    c306:	f36f 13c7 	bfc	r3, #7, #1
    c30a:	f888 3000 	strb.w	r3, [r8]
    c30e:	e7e0      	b.n	c2d2 <ll_adv_params_set+0xbe>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    c310:	2a01      	cmp	r2, #1
    c312:	d00f      	beq.n	c334 <ll_adv_params_set+0x120>
		if (pdu->len == 0U) {
    c314:	f898 2001 	ldrb.w	r2, [r8, #1]
    c318:	bba2      	cbnz	r2, c384 <ll_adv_params_set+0x170>
			adv->ad_data_backup.len = 0U;
    c31a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    c31e:	f898 3000 	ldrb.w	r3, [r8]
    c322:	f003 030f 	and.w	r3, r3, #15
    c326:	2b01      	cmp	r3, #1
    c328:	d004      	beq.n	c334 <ll_adv_params_set+0x120>
	} else if (pdu->len == 0) {
    c32a:	f898 3001 	ldrb.w	r3, [r8, #1]
    c32e:	2b00      	cmp	r3, #0
    c330:	d0c2      	beq.n	c2b8 <ll_adv_params_set+0xa4>
    c332:	e7e2      	b.n	c2fa <ll_adv_params_set+0xe6>
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    c334:	f108 0908 	add.w	r9, r8, #8
		pdu->tx_addr = own_addr_type & 0x1;
    c338:	f898 3000 	ldrb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    c33c:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->tx_addr = own_addr_type & 0x1;
    c33e:	f005 0501 	and.w	r5, r5, #1
    c342:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    c346:	f367 13c7 	bfi	r3, r7, #7, #1
    c34a:	f888 3000 	strb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    c34e:	4648      	mov	r0, r9
    c350:	2206      	movs	r2, #6
    c352:	f00d fc4f 	bl	19bf4 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    c356:	230c      	movs	r3, #12
    c358:	f888 3001 	strb.w	r3, [r8, #1]
    c35c:	e7b9      	b.n	c2d2 <ll_adv_params_set+0xbe>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    c35e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    c362:	f104 0141 	add.w	r1, r4, #65	; 0x41
    c366:	f108 0008 	add.w	r0, r8, #8
    c36a:	f00d fc43 	bl	19bf4 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    c36e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    c372:	3306      	adds	r3, #6
    c374:	f888 3001 	strb.w	r3, [r8, #1]
    c378:	e7bf      	b.n	c2fa <ll_adv_params_set+0xe6>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c37a:	260c      	movs	r6, #12
}
    c37c:	4630      	mov	r0, r6
    c37e:	b003      	add	sp, #12
    c380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LL_ASSERT(pdu->len >=
    c384:	2a05      	cmp	r2, #5
    c386:	d910      	bls.n	c3aa <ll_adv_params_set+0x196>
			adv->ad_data_backup.len = pdu->len -
    c388:	3a06      	subs	r2, #6
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    c38a:	f108 0908 	add.w	r9, r8, #8
			adv->ad_data_backup.len = pdu->len -
    c38e:	b2d2      	uxtb	r2, r2
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    c390:	4810      	ldr	r0, [pc, #64]	; (c3d4 <ll_adv_params_set+0x1c0>)
			adv->ad_data_backup.len = pdu->len -
    c392:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    c396:	4649      	mov	r1, r9
    c398:	f00d fc2c 	bl	19bf4 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    c39c:	f898 3000 	ldrb.w	r3, [r8]
    c3a0:	f003 030f 	and.w	r3, r3, #15
    c3a4:	2b01      	cmp	r3, #1
    c3a6:	d1c0      	bne.n	c32a <ll_adv_params_set+0x116>
    c3a8:	e7c6      	b.n	c338 <ll_adv_params_set+0x124>
			LL_ASSERT(pdu->len >=
    c3aa:	4a0b      	ldr	r2, [pc, #44]	; (c3d8 <ll_adv_params_set+0x1c4>)
    c3ac:	490b      	ldr	r1, [pc, #44]	; (c3dc <ll_adv_params_set+0x1c8>)
    c3ae:	480c      	ldr	r0, [pc, #48]	; (c3e0 <ll_adv_params_set+0x1cc>)
    c3b0:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
    c3b4:	f00d f943 	bl	1963e <assert_print>
    c3b8:	4040      	eors	r0, r0
    c3ba:	f380 8811 	msr	BASEPRI, r0
    c3be:	f04f 0003 	mov.w	r0, #3
    c3c2:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    c3c4:	f898 2001 	ldrb.w	r2, [r8, #1]
    c3c8:	e7de      	b.n	c388 <ll_adv_params_set+0x174>
    c3ca:	bf00      	nop
    c3cc:	20001b5c 	.word	0x20001b5c
    c3d0:	0001dd40 	.word	0x0001dd40
    c3d4:	20001b9d 	.word	0x20001b9d
    c3d8:	0001e4ec 	.word	0x0001e4ec
    c3dc:	0001e638 	.word	0x0001e638
    c3e0:	0001e1a4 	.word	0x0001e1a4

0000c3e4 <ull_adv_init>:
{
    c3e4:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    c3e6:	4c06      	ldr	r4, [pc, #24]	; (c400 <ull_adv_init+0x1c>)
    c3e8:	4620      	mov	r0, r4
    c3ea:	f006 fc5b 	bl	12ca4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    c3ee:	f104 000c 	add.w	r0, r4, #12
    c3f2:	f006 fc57 	bl	12ca4 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    c3f6:	f7ff fd21 	bl	be3c <init_set.constprop.0>
}
    c3fa:	2000      	movs	r0, #0
    c3fc:	bd10      	pop	{r4, pc}
    c3fe:	bf00      	nop
    c400:	20001b84 	.word	0x20001b84

0000c404 <ull_adv_reset>:
{
    c404:	b508      	push	{r3, lr}
		(void)disable(handle);
    c406:	f7ff fd7d 	bl	bf04 <disable.constprop.0>
}
    c40a:	2000      	movs	r0, #0
    c40c:	bd08      	pop	{r3, pc}
    c40e:	bf00      	nop

0000c410 <ull_adv_reset_finalize>:
{
    c410:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    c412:	4c09      	ldr	r4, [pc, #36]	; (c438 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
    c414:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
    c418:	4620      	mov	r0, r4
    c41a:	f006 fc53 	bl	12cc4 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    c41e:	4628      	mov	r0, r5
    c420:	f006 fc50 	bl	12cc4 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    c424:	4620      	mov	r0, r4
    c426:	f006 fc3d 	bl	12ca4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    c42a:	4628      	mov	r0, r5
    c42c:	f006 fc3a 	bl	12ca4 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    c430:	f7ff fd04 	bl	be3c <init_set.constprop.0>
}
    c434:	2000      	movs	r0, #0
    c436:	bd38      	pop	{r3, r4, r5, pc}
    c438:	20001b84 	.word	0x20001b84

0000c43c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    c43c:	4a04      	ldr	r2, [pc, #16]	; (c450 <ull_adv_handle_get+0x14>)
    c43e:	4b05      	ldr	r3, [pc, #20]	; (c454 <ull_adv_handle_get+0x18>)
    c440:	1a80      	subs	r0, r0, r2
    c442:	0880      	lsrs	r0, r0, #2
    c444:	fba3 3000 	umull	r3, r0, r3, r0
}
    c448:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    c44c:	4770      	bx	lr
    c44e:	bf00      	nop
    c450:	20001b5c 	.word	0x20001b5c
    c454:	4bda12f7 	.word	0x4bda12f7

0000c458 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    c458:	4a04      	ldr	r2, [pc, #16]	; (c46c <ull_adv_lll_handle_get+0x14>)
    c45a:	6800      	ldr	r0, [r0, #0]
    c45c:	4b04      	ldr	r3, [pc, #16]	; (c470 <ull_adv_lll_handle_get+0x18>)
    c45e:	1a80      	subs	r0, r0, r2
    c460:	0880      	lsrs	r0, r0, #2
    c462:	fba3 3000 	umull	r3, r0, r3, r0
}
    c466:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    c46a:	4770      	bx	lr
    c46c:	20001b5c 	.word	0x20001b5c
    c470:	4bda12f7 	.word	0x4bda12f7

0000c474 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    c474:	b928      	cbnz	r0, c482 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    c476:	4b04      	ldr	r3, [pc, #16]	; (c488 <ull_adv_is_enabled+0x14>)
    c478:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    c47c:	f000 0001 	and.w	r0, r0, #1
    c480:	4770      	bx	lr
    c482:	2000      	movs	r0, #0
}
    c484:	4770      	bx	lr
    c486:	bf00      	nop
    c488:	20001b5c 	.word	0x20001b5c

0000c48c <ull_adv_data_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
    c48c:	291f      	cmp	r1, #31
    c48e:	d857      	bhi.n	c540 <ull_adv_data_set+0xb4>
{
    c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    c494:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    c498:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    c49c:	b082      	sub	sp, #8
    c49e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    c4a0:	783b      	ldrb	r3, [r7, #0]
    c4a2:	f003 030f 	and.w	r3, r3, #15
    c4a6:	2b01      	cmp	r3, #1
    c4a8:	460e      	mov	r6, r1
    c4aa:	4605      	mov	r5, r0
    c4ac:	4690      	mov	r8, r2
    c4ae:	d049      	beq.n	c544 <ull_adv_data_set+0xb8>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    c4b0:	f10d 0107 	add.w	r1, sp, #7
    c4b4:	3028      	adds	r0, #40	; 0x28
    c4b6:	f006 fc77 	bl	12da8 <lll_adv_pdu_alloc>
	pdu->type = prev->type;
    c4ba:	783a      	ldrb	r2, [r7, #0]
    c4bc:	7803      	ldrb	r3, [r0, #0]
    c4be:	f002 020f 	and.w	r2, r2, #15
    c4c2:	f023 031f 	bic.w	r3, r3, #31
    c4c6:	4313      	orrs	r3, r2
    c4c8:	7003      	strb	r3, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
    c4ca:	783b      	ldrb	r3, [r7, #0]
    c4cc:	7802      	ldrb	r2, [r0, #0]
    c4ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
    c4d2:	f363 1245 	bfi	r2, r3, #5, #1
    c4d6:	7002      	strb	r2, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
    c4d8:	783b      	ldrb	r3, [r7, #0]
    c4da:	b2d2      	uxtb	r2, r2
    c4dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
    c4e0:	4639      	mov	r1, r7
	pdu->tx_addr = prev->tx_addr;
    c4e2:	f363 1286 	bfi	r2, r3, #6, #1
    c4e6:	7002      	strb	r2, [r0, #0]
	pdu->rx_addr = prev->rx_addr;
    c4e8:	f811 3b02 	ldrb.w	r3, [r1], #2
    c4ec:	b2d2      	uxtb	r2, r2
    c4ee:	09db      	lsrs	r3, r3, #7
    c4f0:	f363 12c7 	bfi	r2, r3, #7, #1
    c4f4:	4604      	mov	r4, r0
    c4f6:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    c4fa:	2206      	movs	r2, #6
    c4fc:	f00d fb7a 	bl	19bf4 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    c500:	4632      	mov	r2, r6
    c502:	4641      	mov	r1, r8
    c504:	f104 0008 	add.w	r0, r4, #8
	pdu->len = BDADDR_SIZE + len;
    c508:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    c50a:	f00d fb73 	bl	19bf4 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    c50e:	7066      	strb	r6, [r4, #1]
	if (adv->is_enabled) {
    c510:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    c514:	07db      	lsls	r3, r3, #31
    c516:	d407      	bmi.n	c528 <ull_adv_data_set+0x9c>
	pdu->last = idx;
    c518:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c51c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
		return 0;
    c520:	2000      	movs	r0, #0
}
    c522:	b002      	add	sp, #8
    c524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    c528:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    c52c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    c530:	4621      	mov	r1, r4
    c532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    c534:	4628      	mov	r0, r5
    c536:	f7f4 feef 	bl	1318 <ull_adv_time_update>
		if (err) {
    c53a:	2800      	cmp	r0, #0
    c53c:	d0ec      	beq.n	c518 <ull_adv_data_set+0x8c>
    c53e:	e7f0      	b.n	c522 <ull_adv_data_set+0x96>
		return BT_HCI_ERR_INVALID_PARAM;
    c540:	2012      	movs	r0, #18
}
    c542:	4770      	bx	lr
		adv->ad_data_backup.len = len;
    c544:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
    c548:	460a      	mov	r2, r1
    c54a:	3041      	adds	r0, #65	; 0x41
    c54c:	4641      	mov	r1, r8
    c54e:	f00d fb51 	bl	19bf4 <memcpy>
		return 0;
    c552:	e7e5      	b.n	c520 <ull_adv_data_set+0x94>

0000c554 <ll_adv_data_set>:
{
    c554:	4603      	mov	r3, r0
    c556:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    c558:	4801      	ldr	r0, [pc, #4]	; (c560 <ll_adv_data_set+0xc>)
    c55a:	4619      	mov	r1, r3
    c55c:	f7ff bf96 	b.w	c48c <ull_adv_data_set>
    c560:	20001b5c 	.word	0x20001b5c

0000c564 <ull_scan_rsp_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
    c564:	291f      	cmp	r1, #31
    c566:	d860      	bhi.n	c62a <ull_scan_rsp_set+0xc6>
{
    c568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c56c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    c570:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    c574:	b082      	sub	sp, #8
    c576:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	if (!prev) {
    c578:	460f      	mov	r7, r1
    c57a:	4604      	mov	r4, r0
    c57c:	4690      	mov	r8, r2
		err = lll_adv_data_init(&adv->lll.scan_rsp);
    c57e:	f100 0534 	add.w	r5, r0, #52	; 0x34
	if (!prev) {
    c582:	2e00      	cmp	r6, #0
    c584:	d041      	beq.n	c60a <ull_scan_rsp_set+0xa6>
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    c586:	4628      	mov	r0, r5
    c588:	f10d 0107 	add.w	r1, sp, #7
    c58c:	f006 fc0c 	bl	12da8 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    c590:	7803      	ldrb	r3, [r0, #0]
    c592:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
    c596:	4631      	mov	r1, r6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    c598:	f043 0304 	orr.w	r3, r3, #4
    c59c:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
    c59e:	f811 2b02 	ldrb.w	r2, [r1], #2
    c5a2:	b2db      	uxtb	r3, r3
    c5a4:	f3c2 1280 	ubfx	r2, r2, #6, #1
    c5a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c5ac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    c5b0:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    c5b2:	1dbb      	adds	r3, r7, #6
    c5b4:	7043      	strb	r3, [r0, #1]
    c5b6:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    c5b8:	2206      	movs	r2, #6
    c5ba:	3002      	adds	r0, #2
    c5bc:	f00d fb1a 	bl	19bf4 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    c5c0:	463a      	mov	r2, r7
    c5c2:	4641      	mov	r1, r8
    c5c4:	f105 0008 	add.w	r0, r5, #8
    c5c8:	f00d fb14 	bl	19bf4 <memcpy>
	if (adv->is_enabled) {
    c5cc:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    c5d0:	07da      	lsls	r2, r3, #31
    c5d2:	d407      	bmi.n	c5e4 <ull_scan_rsp_set+0x80>
	pdu->last = idx;
    c5d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c5d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
    c5dc:	2000      	movs	r0, #0
}
    c5de:	b002      	add	sp, #8
    c5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    c5e4:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    c5e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    c5ec:	2341      	movs	r3, #65	; 0x41
    c5ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    c5f0:	780a      	ldrb	r2, [r1, #0]
    c5f2:	f002 020f 	and.w	r2, r2, #15
    c5f6:	40d3      	lsrs	r3, r2
    c5f8:	07db      	lsls	r3, r3, #31
    c5fa:	d5eb      	bpl.n	c5d4 <ull_scan_rsp_set+0x70>
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    c5fc:	462a      	mov	r2, r5
    c5fe:	4620      	mov	r0, r4
    c600:	f7f4 fe8a 	bl	1318 <ull_adv_time_update>
			if (err) {
    c604:	2800      	cmp	r0, #0
    c606:	d0e5      	beq.n	c5d4 <ull_scan_rsp_set+0x70>
    c608:	e7e9      	b.n	c5de <ull_scan_rsp_set+0x7a>
		err = lll_adv_data_init(&adv->lll.scan_rsp);
    c60a:	4628      	mov	r0, r5
    c60c:	f006 fb4a 	bl	12ca4 <lll_adv_data_init>
		if (err) {
    c610:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    c614:	d1e3      	bne.n	c5de <ull_scan_rsp_set+0x7a>
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    c616:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    c61a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c61e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	pdu->type = pdu_type;
    c620:	2304      	movs	r3, #4
    c622:	7033      	strb	r3, [r6, #0]
	pdu->len = BDADDR_SIZE;
    c624:	2306      	movs	r3, #6
    c626:	7073      	strb	r3, [r6, #1]
}
    c628:	e7ad      	b.n	c586 <ull_scan_rsp_set+0x22>
		return BT_HCI_ERR_INVALID_PARAM;
    c62a:	2012      	movs	r0, #18
}
    c62c:	4770      	bx	lr
    c62e:	bf00      	nop

0000c630 <ll_adv_scan_rsp_set>:
{
    c630:	4603      	mov	r3, r0
    c632:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    c634:	4801      	ldr	r0, [pc, #4]	; (c63c <ll_adv_scan_rsp_set+0xc>)
    c636:	4619      	mov	r1, r3
    c638:	f7ff bf94 	b.w	c564 <ull_scan_rsp_set>
    c63c:	20001b5c 	.word	0x20001b5c

0000c640 <init_reset>:
{
    c640:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    c642:	4b13      	ldr	r3, [pc, #76]	; (c690 <init_reset+0x50>)
    c644:	4813      	ldr	r0, [pc, #76]	; (c694 <init_reset+0x54>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    c646:	4c14      	ldr	r4, [pc, #80]	; (c698 <init_reset+0x58>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    c648:	2201      	movs	r2, #1
    c64a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    c64e:	f7fb fabb 	bl	7bc8 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
    c652:	4b12      	ldr	r3, [pc, #72]	; (c69c <init_reset+0x5c>)
    c654:	2203      	movs	r2, #3
    c656:	1d18      	adds	r0, r3, #4
    c658:	2124      	movs	r1, #36	; 0x24
    c65a:	f7fb fab5 	bl	7bc8 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    c65e:	4b10      	ldr	r3, [pc, #64]	; (c6a0 <init_reset+0x60>)
    c660:	2207      	movs	r2, #7
    c662:	1d18      	adds	r0, r3, #4
    c664:	2108      	movs	r1, #8
    c666:	f7fb faaf 	bl	7bc8 <mem_init>
	ull_cp_init();
    c66a:	f002 faf1 	bl	ec50 <ull_cp_init>
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
    c66e:	4a0d      	ldr	r2, [pc, #52]	; (c6a4 <init_reset+0x64>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    c670:	4b0d      	ldr	r3, [pc, #52]	; (c6a8 <init_reset+0x68>)
	default_phy_tx |= PHY_2M;
    c672:	490e      	ldr	r1, [pc, #56]	; (c6ac <init_reset+0x6c>)
    c674:	2000      	movs	r0, #0
    c676:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    c678:	221b      	movs	r2, #27
    c67a:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
    c67c:	4a0c      	ldr	r2, [pc, #48]	; (c6b0 <init_reset+0x70>)
	default_phy_tx |= PHY_2M;
    c67e:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    c680:	f44f 7ca4 	mov.w	ip, #328	; 0x148
    c684:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    c688:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
    c68a:	7013      	strb	r3, [r2, #0]
}
    c68c:	bd10      	pop	{r4, pc}
    c68e:	bf00      	nop
    c690:	20001be8 	.word	0x20001be8
    c694:	20000e08 	.word	0x20000e08
    c698:	200026f6 	.word	0x200026f6
    c69c:	20001c28 	.word	0x20001c28
    c6a0:	20001bec 	.word	0x20001bec
    c6a4:	20001c98 	.word	0x20001c98
    c6a8:	200026f8 	.word	0x200026f8
    c6ac:	20002717 	.word	0x20002717
    c6b0:	20002716 	.word	0x20002716

0000c6b4 <tx_lll_flush>:
{
    c6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    c6b8:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    c6bc:	4933      	ldr	r1, [pc, #204]	; (c78c <tx_lll_flush+0xd8>)
{
    c6be:	b083      	sub	sp, #12
    c6c0:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    c6c2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    c6c6:	4640      	mov	r0, r8
    c6c8:	f7fb fae6 	bl	7c98 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    c6cc:	f105 065c 	add.w	r6, r5, #92	; 0x5c
	lll_conn_flush(handle, lll);
    c6d0:	4629      	mov	r1, r5
    c6d2:	f006 fe67 	bl	133a4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    c6d6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    c6d8:	aa01      	add	r2, sp, #4
    c6da:	4631      	mov	r1, r6
    c6dc:	f7fb fb1c 	bl	7d18 <memq_dequeue>
	while (link) {
    c6e0:	b328      	cbz	r0, c72e <tx_lll_flush+0x7a>
    c6e2:	4c2b      	ldr	r4, [pc, #172]	; (c790 <tx_lll_flush+0xdc>)
		tx_buf->handle = LLL_HANDLE_INVALID;
    c6e4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c6e8:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&tx_buf);
    c6ec:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    c6ee:	f894 c002 	ldrb.w	ip, [r4, #2]
    c6f2:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
    c6f4:	1c53      	adds	r3, r2, #1
    c6f6:	b2db      	uxtb	r3, r3
		last = 0U;
    c6f8:	459c      	cmp	ip, r3
    c6fa:	bf08      	it	eq
    c6fc:	2300      	moveq	r3, #0
	if (last == first) {
    c6fe:	4299      	cmp	r1, r3
    c700:	f894 c000 	ldrb.w	ip, [r4]
    c704:	d031      	beq.n	c76a <tx_lll_flush+0xb6>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c706:	fb12 f20c 	smulbb	r2, r2, ip
    c70a:	eb02 0109 	add.w	r1, r2, r9
		tx_buf->handle = LLL_HANDLE_INVALID;
    c70e:	f829 7002 	strh.w	r7, [r9, r2]
		tx_buf->node = tx;
    c712:	9a01      	ldr	r2, [sp, #4]
    c714:	604a      	str	r2, [r1, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    c716:	6812      	ldr	r2, [r2, #0]
    c718:	6002      	str	r2, [r0, #0]
		tx->next = link;
    c71a:	9a01      	ldr	r2, [sp, #4]
    c71c:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    c71e:	6e28      	ldr	r0, [r5, #96]	; 0x60
	*last = idx; /* Commit: Update write index */
    c720:	7163      	strb	r3, [r4, #5]
    c722:	aa01      	add	r2, sp, #4
    c724:	4631      	mov	r1, r6
    c726:	f7fb faf7 	bl	7d18 <memq_dequeue>
	while (link) {
    c72a:	2800      	cmp	r0, #0
    c72c:	d1de      	bne.n	c6ec <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    c72e:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
	rx = (void *)&conn->llcp_terminate.node_rx;
    c732:	f508 74aa 	add.w	r4, r8, #340	; 0x154
	LL_ASSERT(rx->hdr.link);
    c736:	b140      	cbz	r0, c74a <tx_lll_flush+0x96>
	rx->hdr.link = NULL;
    c738:	2300      	movs	r3, #0
    c73a:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
	ull_rx_put_sched(link, rx);
    c73e:	4621      	mov	r1, r4
    c740:	f7fd fd34 	bl	a1ac <ull_rx_put_sched>
}
    c744:	b003      	add	sp, #12
    c746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    c74a:	4a12      	ldr	r2, [pc, #72]	; (c794 <tx_lll_flush+0xe0>)
    c74c:	4912      	ldr	r1, [pc, #72]	; (c798 <tx_lll_flush+0xe4>)
    c74e:	4813      	ldr	r0, [pc, #76]	; (c79c <tx_lll_flush+0xe8>)
    c750:	f240 7374 	movw	r3, #1908	; 0x774
    c754:	f00c ff73 	bl	1963e <assert_print>
    c758:	4040      	eors	r0, r0
    c75a:	f380 8811 	msr	BASEPRI, r0
    c75e:	f04f 0003 	mov.w	r0, #3
    c762:	df02      	svc	2
	link = rx->hdr.link;
    c764:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
    c768:	e7e6      	b.n	c738 <tx_lll_flush+0x84>
		LL_ASSERT(tx_buf);
    c76a:	4a0a      	ldr	r2, [pc, #40]	; (c794 <tx_lll_flush+0xe0>)
    c76c:	490c      	ldr	r1, [pc, #48]	; (c7a0 <tx_lll_flush+0xec>)
    c76e:	480b      	ldr	r0, [pc, #44]	; (c79c <tx_lll_flush+0xe8>)
    c770:	f44f 63ec 	mov.w	r3, #1888	; 0x760
    c774:	f00c ff63 	bl	1963e <assert_print>
    c778:	4040      	eors	r0, r0
    c77a:	f380 8811 	msr	BASEPRI, r0
    c77e:	f04f 0003 	mov.w	r0, #3
    c782:	df02      	svc	2
		tx_buf->handle = LLL_HANDLE_INVALID;
    c784:	2300      	movs	r3, #0
    c786:	801b      	strh	r3, [r3, #0]
    c788:	deff      	udf	#255	; 0xff
    c78a:	bf00      	nop
    c78c:	20000e08 	.word	0x20000e08
    c790:	20000588 	.word	0x20000588
    c794:	0001e678 	.word	0x0001e678
    c798:	0001e6c0 	.word	0x0001e6c0
    c79c:	0001e1a4 	.word	0x0001e1a4
    c7a0:	0001e6b8 	.word	0x0001e6b8

0000c7a4 <ticker_stop_op_cb>:
{
    c7a4:	b510      	push	{r4, lr}
    c7a6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c7a8:	b9b0      	cbnz	r0, c7d8 <ticker_stop_op_cb+0x34>
	mfy.param = param;
    c7aa:	4b12      	ldr	r3, [pc, #72]	; (c7f4 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    c7ac:	2200      	movs	r2, #0
    c7ae:	2101      	movs	r1, #1
    c7b0:	2002      	movs	r0, #2
	mfy.param = param;
    c7b2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    c7b4:	f7fb fb14 	bl	7de0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c7b8:	b900      	cbnz	r0, c7bc <ticker_stop_op_cb+0x18>
}
    c7ba:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    c7bc:	4a0e      	ldr	r2, [pc, #56]	; (c7f8 <ticker_stop_op_cb+0x54>)
    c7be:	490f      	ldr	r1, [pc, #60]	; (c7fc <ticker_stop_op_cb+0x58>)
    c7c0:	480f      	ldr	r0, [pc, #60]	; (c800 <ticker_stop_op_cb+0x5c>)
    c7c2:	f240 731a 	movw	r3, #1818	; 0x71a
    c7c6:	f00c ff3a 	bl	1963e <assert_print>
    c7ca:	4040      	eors	r0, r0
    c7cc:	f380 8811 	msr	BASEPRI, r0
    c7d0:	f04f 0003 	mov.w	r0, #3
    c7d4:	df02      	svc	2
}
    c7d6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c7d8:	4a07      	ldr	r2, [pc, #28]	; (c7f8 <ticker_stop_op_cb+0x54>)
    c7da:	490a      	ldr	r1, [pc, #40]	; (c804 <ticker_stop_op_cb+0x60>)
    c7dc:	4808      	ldr	r0, [pc, #32]	; (c800 <ticker_stop_op_cb+0x5c>)
    c7de:	f240 7314 	movw	r3, #1812	; 0x714
    c7e2:	f00c ff2c 	bl	1963e <assert_print>
    c7e6:	4040      	eors	r0, r0
    c7e8:	f380 8811 	msr	BASEPRI, r0
    c7ec:	f04f 0003 	mov.w	r0, #3
    c7f0:	df02      	svc	2
    c7f2:	e7da      	b.n	c7aa <ticker_stop_op_cb+0x6>
    c7f4:	20000568 	.word	0x20000568
    c7f8:	0001e678 	.word	0x0001e678
    c7fc:	0001e304 	.word	0x0001e304
    c800:	0001e1a4 	.word	0x0001e1a4
    c804:	0001e6d0 	.word	0x0001e6d0

0000c808 <disabled_cb>:
{
    c808:	b508      	push	{r3, lr}
	mfy.param = param;
    c80a:	4b0b      	ldr	r3, [pc, #44]	; (c838 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c80c:	2200      	movs	r2, #0
	mfy.param = param;
    c80e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c810:	4611      	mov	r1, r2
    c812:	2001      	movs	r0, #1
    c814:	f7fb fae4 	bl	7de0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    c818:	b900      	cbnz	r0, c81c <disabled_cb+0x14>
}
    c81a:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    c81c:	4a07      	ldr	r2, [pc, #28]	; (c83c <disabled_cb+0x34>)
    c81e:	4908      	ldr	r1, [pc, #32]	; (c840 <disabled_cb+0x38>)
    c820:	4808      	ldr	r0, [pc, #32]	; (c844 <disabled_cb+0x3c>)
    c822:	f240 7346 	movw	r3, #1862	; 0x746
    c826:	f00c ff0a 	bl	1963e <assert_print>
    c82a:	4040      	eors	r0, r0
    c82c:	f380 8811 	msr	BASEPRI, r0
    c830:	f04f 0003 	mov.w	r0, #3
    c834:	df02      	svc	2
}
    c836:	bd08      	pop	{r3, pc}
    c838:	20000548 	.word	0x20000548
    c83c:	0001e678 	.word	0x0001e678
    c840:	0001e304 	.word	0x0001e304
    c844:	0001e1a4 	.word	0x0001e1a4

0000c848 <conn_disable>:
{
    c848:	b538      	push	{r3, r4, r5, lr}
    c84a:	4604      	mov	r4, r0
	return hdr->ref;
    c84c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    c850:	b353      	cbz	r3, c8a8 <conn_disable+0x60>
		mfy.param = &conn->lll;
    c852:	4d17      	ldr	r5, [pc, #92]	; (c8b0 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    c854:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    c856:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    c858:	b16b      	cbz	r3, c876 <conn_disable+0x2e>
    c85a:	4a16      	ldr	r2, [pc, #88]	; (c8b4 <conn_disable+0x6c>)
    c85c:	4916      	ldr	r1, [pc, #88]	; (c8b8 <conn_disable+0x70>)
    c85e:	4817      	ldr	r0, [pc, #92]	; (c8bc <conn_disable+0x74>)
    c860:	f240 732f 	movw	r3, #1839	; 0x72f
    c864:	f00c feeb 	bl	1963e <assert_print>
    c868:	4040      	eors	r0, r0
    c86a:	f380 8811 	msr	BASEPRI, r0
    c86e:	f04f 0003 	mov.w	r0, #3
    c872:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    c874:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    c876:	4912      	ldr	r1, [pc, #72]	; (c8c0 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c878:	4b0d      	ldr	r3, [pc, #52]	; (c8b0 <conn_disable+0x68>)
    c87a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    c87c:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    c880:	4611      	mov	r1, r2
    c882:	2001      	movs	r0, #1
    c884:	f7fb faac 	bl	7de0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    c888:	b900      	cbnz	r0, c88c <conn_disable+0x44>
}
    c88a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    c88c:	4a09      	ldr	r2, [pc, #36]	; (c8b4 <conn_disable+0x6c>)
    c88e:	490d      	ldr	r1, [pc, #52]	; (c8c4 <conn_disable+0x7c>)
    c890:	480a      	ldr	r0, [pc, #40]	; (c8bc <conn_disable+0x74>)
    c892:	f240 7336 	movw	r3, #1846	; 0x736
    c896:	f00c fed2 	bl	1963e <assert_print>
    c89a:	4040      	eors	r0, r0
    c89c:	f380 8811 	msr	BASEPRI, r0
    c8a0:	f04f 0003 	mov.w	r0, #3
    c8a4:	df02      	svc	2
}
    c8a6:	bd38      	pop	{r3, r4, r5, pc}
    c8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    c8ac:	f7ff bfac 	b.w	c808 <disabled_cb>
    c8b0:	20000558 	.word	0x20000558
    c8b4:	0001e678 	.word	0x0001e678
    c8b8:	0001e580 	.word	0x0001e580
    c8bc:	0001e1a4 	.word	0x0001e1a4
    c8c0:	0000c809 	.word	0x0000c809
    c8c4:	0001e304 	.word	0x0001e304

0000c8c8 <conn_setup_adv_scan_disabled_cb>:
{
    c8c8:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    c8ca:	6883      	ldr	r3, [r0, #8]
    c8cc:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    c8ce:	7f53      	ldrb	r3, [r2, #29]
    c8d0:	09db      	lsrs	r3, r3, #7
    c8d2:	d10d      	bne.n	c8f0 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
    c8d4:	4a09      	ldr	r2, [pc, #36]	; (c8fc <conn_setup_adv_scan_disabled_cb+0x34>)
    c8d6:	490a      	ldr	r1, [pc, #40]	; (c900 <conn_setup_adv_scan_disabled_cb+0x38>)
    c8d8:	480a      	ldr	r0, [pc, #40]	; (c904 <conn_setup_adv_scan_disabled_cb+0x3c>)
    c8da:	f240 638b 	movw	r3, #1675	; 0x68b
    c8de:	f00c feae 	bl	1963e <assert_print>
    c8e2:	4040      	eors	r0, r0
    c8e4:	f380 8811 	msr	BASEPRI, r0
    c8e8:	f04f 0003 	mov.w	r0, #3
    c8ec:	df02      	svc	2
}
    c8ee:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
    c8f0:	4601      	mov	r1, r0
}
    c8f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
    c8f6:	3108      	adds	r1, #8
    c8f8:	f7f5 b8d6 	b.w	1aa8 <ull_periph_setup>
    c8fc:	0001e678 	.word	0x0001e678
    c900:	0001e220 	.word	0x0001e220
    c904:	0001e1a4 	.word	0x0001e1a4

0000c908 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    c908:	b900      	cbnz	r0, c90c <ticker_update_conn_op_cb+0x4>
    c90a:	4770      	bx	lr
{
    c90c:	b510      	push	{r4, lr}
    c90e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    c910:	f7fd fb76 	bl	a000 <ull_update_mark_get>
    c914:	4284      	cmp	r4, r0
    c916:	d010      	beq.n	c93a <ticker_update_conn_op_cb+0x32>
    c918:	f7fd fb54 	bl	9fc4 <ull_disable_mark_get>
    c91c:	4284      	cmp	r4, r0
    c91e:	d00c      	beq.n	c93a <ticker_update_conn_op_cb+0x32>
    c920:	4a06      	ldr	r2, [pc, #24]	; (c93c <ticker_update_conn_op_cb+0x34>)
    c922:	4907      	ldr	r1, [pc, #28]	; (c940 <ticker_update_conn_op_cb+0x38>)
    c924:	4807      	ldr	r0, [pc, #28]	; (c944 <ticker_update_conn_op_cb+0x3c>)
    c926:	f240 634e 	movw	r3, #1614	; 0x64e
    c92a:	f00c fe88 	bl	1963e <assert_print>
    c92e:	4040      	eors	r0, r0
    c930:	f380 8811 	msr	BASEPRI, r0
    c934:	f04f 0003 	mov.w	r0, #3
    c938:	df02      	svc	2
}
    c93a:	bd10      	pop	{r4, pc}
    c93c:	0001e678 	.word	0x0001e678
    c940:	0001e6dc 	.word	0x0001e6dc
    c944:	0001e1a4 	.word	0x0001e1a4

0000c948 <ticker_start_conn_op_cb>:
{
    c948:	b510      	push	{r4, lr}
    c94a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c94c:	b990      	cbnz	r0, c974 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    c94e:	4620      	mov	r0, r4
    c950:	f7fd fb4a 	bl	9fe8 <ull_update_unmark>
	LL_ASSERT(p == param);
    c954:	4284      	cmp	r4, r0
    c956:	d00c      	beq.n	c972 <ticker_start_conn_op_cb+0x2a>
    c958:	4a0d      	ldr	r2, [pc, #52]	; (c990 <ticker_start_conn_op_cb+0x48>)
    c95a:	490e      	ldr	r1, [pc, #56]	; (c994 <ticker_start_conn_op_cb+0x4c>)
    c95c:	480e      	ldr	r0, [pc, #56]	; (c998 <ticker_start_conn_op_cb+0x50>)
    c95e:	f240 6364 	movw	r3, #1636	; 0x664
    c962:	f00c fe6c 	bl	1963e <assert_print>
    c966:	4040      	eors	r0, r0
    c968:	f380 8811 	msr	BASEPRI, r0
    c96c:	f04f 0003 	mov.w	r0, #3
    c970:	df02      	svc	2
}
    c972:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c974:	4a06      	ldr	r2, [pc, #24]	; (c990 <ticker_start_conn_op_cb+0x48>)
    c976:	4909      	ldr	r1, [pc, #36]	; (c99c <ticker_start_conn_op_cb+0x54>)
    c978:	4807      	ldr	r0, [pc, #28]	; (c998 <ticker_start_conn_op_cb+0x50>)
    c97a:	f240 6361 	movw	r3, #1633	; 0x661
    c97e:	f00c fe5e 	bl	1963e <assert_print>
    c982:	4040      	eors	r0, r0
    c984:	f380 8811 	msr	BASEPRI, r0
    c988:	f04f 0003 	mov.w	r0, #3
    c98c:	df02      	svc	2
    c98e:	e7de      	b.n	c94e <ticker_start_conn_op_cb+0x6>
    c990:	0001e678 	.word	0x0001e678
    c994:	0001e730 	.word	0x0001e730
    c998:	0001e1a4 	.word	0x0001e1a4
    c99c:	0001e6d0 	.word	0x0001e6d0

0000c9a0 <ticker_stop_conn_op_cb>:
{
    c9a0:	b510      	push	{r4, lr}
    c9a2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c9a4:	b990      	cbnz	r0, c9cc <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    c9a6:	4620      	mov	r0, r4
    c9a8:	f7fd fb12 	bl	9fd0 <ull_update_mark>
	LL_ASSERT(p == param);
    c9ac:	4284      	cmp	r4, r0
    c9ae:	d00c      	beq.n	c9ca <ticker_stop_conn_op_cb+0x2a>
    c9b0:	4a0d      	ldr	r2, [pc, #52]	; (c9e8 <ticker_stop_conn_op_cb+0x48>)
    c9b2:	490e      	ldr	r1, [pc, #56]	; (c9ec <ticker_stop_conn_op_cb+0x4c>)
    c9b4:	480e      	ldr	r0, [pc, #56]	; (c9f0 <ticker_stop_conn_op_cb+0x50>)
    c9b6:	f240 635a 	movw	r3, #1626	; 0x65a
    c9ba:	f00c fe40 	bl	1963e <assert_print>
    c9be:	4040      	eors	r0, r0
    c9c0:	f380 8811 	msr	BASEPRI, r0
    c9c4:	f04f 0003 	mov.w	r0, #3
    c9c8:	df02      	svc	2
}
    c9ca:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    c9cc:	4a06      	ldr	r2, [pc, #24]	; (c9e8 <ticker_stop_conn_op_cb+0x48>)
    c9ce:	4909      	ldr	r1, [pc, #36]	; (c9f4 <ticker_stop_conn_op_cb+0x54>)
    c9d0:	4807      	ldr	r0, [pc, #28]	; (c9f0 <ticker_stop_conn_op_cb+0x50>)
    c9d2:	f240 6357 	movw	r3, #1623	; 0x657
    c9d6:	f00c fe32 	bl	1963e <assert_print>
    c9da:	4040      	eors	r0, r0
    c9dc:	f380 8811 	msr	BASEPRI, r0
    c9e0:	f04f 0003 	mov.w	r0, #3
    c9e4:	df02      	svc	2
    c9e6:	e7de      	b.n	c9a6 <ticker_stop_conn_op_cb+0x6>
    c9e8:	0001e678 	.word	0x0001e678
    c9ec:	0001e730 	.word	0x0001e730
    c9f0:	0001e1a4 	.word	0x0001e1a4
    c9f4:	0001e6d0 	.word	0x0001e6d0

0000c9f8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    c9f8:	4801      	ldr	r0, [pc, #4]	; (ca00 <ll_conn_acquire+0x8>)
    c9fa:	f7fb b915 	b.w	7c28 <mem_acquire>
    c9fe:	bf00      	nop
    ca00:	20001be8 	.word	0x20001be8

0000ca04 <ll_conn_release>:
	mem_release(conn, &conn_free);
    ca04:	4901      	ldr	r1, [pc, #4]	; (ca0c <ll_conn_release+0x8>)
    ca06:	f7fb b92b 	b.w	7c60 <mem_release>
    ca0a:	bf00      	nop
    ca0c:	20001be8 	.word	0x20001be8

0000ca10 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    ca10:	4902      	ldr	r1, [pc, #8]	; (ca1c <ll_conn_handle_get+0xc>)
    ca12:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    ca16:	f7fb b93f 	b.w	7c98 <mem_index_get>
    ca1a:	bf00      	nop
    ca1c:	20000e08 	.word	0x20000e08

0000ca20 <ll_conn_get>:
{
    ca20:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ca22:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    ca26:	4801      	ldr	r0, [pc, #4]	; (ca2c <ll_conn_get+0xc>)
    ca28:	f7fb b932 	b.w	7c90 <mem_get>
    ca2c:	20000e08 	.word	0x20000e08

0000ca30 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ca30:	b958      	cbnz	r0, ca4a <ll_connected_get+0x1a>
{
    ca32:	b508      	push	{r3, lr}
    ca34:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ca36:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    ca3a:	4805      	ldr	r0, [pc, #20]	; (ca50 <ll_connected_get+0x20>)
    ca3c:	f7fb f928 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    ca40:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    ca42:	b903      	cbnz	r3, ca46 <ll_connected_get+0x16>
}
    ca44:	bd08      	pop	{r3, pc}
		return NULL;
    ca46:	2000      	movs	r0, #0
}
    ca48:	bd08      	pop	{r3, pc}
		return NULL;
    ca4a:	2000      	movs	r0, #0
}
    ca4c:	4770      	bx	lr
    ca4e:	bf00      	nop
    ca50:	20000e08 	.word	0x20000e08

0000ca54 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    ca54:	4801      	ldr	r0, [pc, #4]	; (ca5c <ll_tx_mem_acquire+0x8>)
    ca56:	f7fb b8e7 	b.w	7c28 <mem_acquire>
    ca5a:	bf00      	nop
    ca5c:	20001c28 	.word	0x20001c28

0000ca60 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    ca60:	4901      	ldr	r1, [pc, #4]	; (ca68 <ll_tx_mem_release+0x8>)
    ca62:	f7fb b8fd 	b.w	7c60 <mem_release>
    ca66:	bf00      	nop
    ca68:	20001c28 	.word	0x20001c28

0000ca6c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ca6c:	2800      	cmp	r0, #0
    ca6e:	d13f      	bne.n	caf0 <ll_tx_mem_enqueue+0x84>
{
    ca70:	b570      	push	{r4, r5, r6, lr}
    ca72:	4602      	mov	r2, r0
    ca74:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ca76:	4820      	ldr	r0, [pc, #128]	; (caf8 <ll_tx_mem_enqueue+0x8c>)
    ca78:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    ca7c:	f7fb f908 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    ca80:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ca82:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    ca84:	b9fa      	cbnz	r2, cac6 <ll_tx_mem_enqueue+0x5a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    ca86:	4c1d      	ldr	r4, [pc, #116]	; (cafc <ll_tx_mem_enqueue+0x90>)
    ca88:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
    ca8c:	78a1      	ldrb	r1, [r4, #2]
    ca8e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    ca90:	f10c 0301 	add.w	r3, ip, #1
    ca94:	b2db      	uxtb	r3, r3
		last = 0U;
    ca96:	4299      	cmp	r1, r3
    ca98:	bf08      	it	eq
    ca9a:	2300      	moveq	r3, #0
    ca9c:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
    ca9e:	4299      	cmp	r1, r3
    caa0:	d023      	beq.n	caea <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    caa2:	fb1c fc00 	smulbb	ip, ip, r0
    caa6:	f104 0108 	add.w	r1, r4, #8
	lll_tx->handle = handle;
    caaa:	f821 200c 	strh.w	r2, [r1, ip]
    caae:	448c      	add	ip, r1
	lll_tx->node = tx;
    cab0:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
    cab4:	7163      	strb	r3, [r4, #5]
    cab6:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
    cab8:	b943      	cbnz	r3, cacc <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    caba:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    cabe:	2b00      	cmp	r3, #0
    cac0:	db0e      	blt.n	cae0 <ll_tx_mem_enqueue+0x74>
	return 0;
    cac2:	2000      	movs	r0, #0
}
    cac4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cac6:	f06f 0015 	mvn.w	r0, #21
}
    caca:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
    cacc:	4b0c      	ldr	r3, [pc, #48]	; (cb00 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    cace:	2101      	movs	r1, #1
    cad0:	2003      	movs	r0, #3
	mfy.param = conn;
    cad2:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
    cad4:	f7fb f984 	bl	7de0 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    cad8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    cadc:	2b00      	cmp	r3, #0
    cade:	daf0      	bge.n	cac2 <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
    cae0:	2100      	movs	r1, #0
    cae2:	4628      	mov	r0, r5
    cae4:	f005 f8de 	bl	11ca4 <ull_periph_latency_cancel>
    cae8:	e7eb      	b.n	cac2 <ll_tx_mem_enqueue+0x56>
		return -ENOBUFS;
    caea:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    caee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    caf0:	f06f 0015 	mvn.w	r0, #21
}
    caf4:	4770      	bx	lr
    caf6:	bf00      	nop
    caf8:	20000e08 	.word	0x20000e08
    cafc:	200005d0 	.word	0x200005d0
    cb00:	20000578 	.word	0x20000578

0000cb04 <ll_conn_update>:
{
    cb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb08:	b082      	sub	sp, #8
    cb0a:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    cb0e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    cb12:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (handle >= CONFIG_BT_MAX_CONN) {
    cb16:	b9b0      	cbnz	r0, cb46 <ll_conn_update+0x42>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cb18:	460c      	mov	r4, r1
    cb1a:	4615      	mov	r5, r2
    cb1c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cb20:	4602      	mov	r2, r0
    cb22:	4819      	ldr	r0, [pc, #100]	; (cb88 <ll_conn_update+0x84>)
    cb24:	461e      	mov	r6, r3
    cb26:	f7fb f8b3 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cb2a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cb2c:	4682      	mov	sl, r0
	if (conn->lll.handle != handle) {
    cb2e:	b953      	cbnz	r3, cb46 <ll_conn_update+0x42>
	if (cmd == 0U) {
    cb30:	b16c      	cbz	r4, cb4e <ll_conn_update+0x4a>
	} else if (cmd == 2U) {
    cb32:	2c02      	cmp	r4, #2
    cb34:	d003      	beq.n	cb3e <ll_conn_update+0x3a>
		return BT_HCI_ERR_UNKNOWN_CMD;
    cb36:	2001      	movs	r0, #1
}
    cb38:	b002      	add	sp, #8
    cb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (status == 0U) {
    cb3e:	b9cd      	cbnz	r5, cb74 <ll_conn_update+0x70>
			ull_cp_conn_param_req_reply(conn);
    cb40:	f002 fad2 	bl	f0e8 <ull_cp_conn_param_req_reply>
    cb44:	e012      	b.n	cb6c <ll_conn_update+0x68>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cb46:	2002      	movs	r0, #2
}
    cb48:	b002      	add	sp, #8
    cb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = ull_cp_conn_update(conn, interval_min, interval_max, latency, timeout,
    cb4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb50:	9301      	str	r3, [sp, #4]
    cb52:	f8cd 9000 	str.w	r9, [sp]
    cb56:	4643      	mov	r3, r8
    cb58:	463a      	mov	r2, r7
    cb5a:	4631      	mov	r1, r6
    cb5c:	f002 fa3e 	bl	efdc <ull_cp_conn_update>
		if (err) {
    cb60:	2800      	cmp	r0, #0
    cb62:	d1e9      	bne.n	cb38 <ll_conn_update+0x34>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cb64:	f99a 3039 	ldrsb.w	r3, [sl, #57]	; 0x39
    cb68:	2b00      	cmp	r3, #0
    cb6a:	db07      	blt.n	cb7c <ll_conn_update+0x78>
		return BT_HCI_ERR_SUCCESS;
    cb6c:	2000      	movs	r0, #0
}
    cb6e:	b002      	add	sp, #8
    cb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ull_cp_conn_param_req_neg_reply(conn, status);
    cb74:	4629      	mov	r1, r5
    cb76:	f002 fac7 	bl	f108 <ull_cp_conn_param_req_neg_reply>
    cb7a:	e7f7      	b.n	cb6c <ll_conn_update+0x68>
			ull_periph_latency_cancel(conn, handle);
    cb7c:	4601      	mov	r1, r0
    cb7e:	4650      	mov	r0, sl
    cb80:	f005 f890 	bl	11ca4 <ull_periph_latency_cancel>
    cb84:	e7f2      	b.n	cb6c <ll_conn_update+0x68>
    cb86:	bf00      	nop
    cb88:	20000e08 	.word	0x20000e08

0000cb8c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cb8c:	b9e0      	cbnz	r0, cbc8 <ll_chm_get+0x3c>
{
    cb8e:	b538      	push	{r3, r4, r5, lr}
    cb90:	4602      	mov	r2, r0
    cb92:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cb94:	480d      	ldr	r0, [pc, #52]	; (cbcc <ll_chm_get+0x40>)
    cb96:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cb9a:	f7fb f879 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cb9e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cba0:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    cba2:	b94b      	cbnz	r3, cbb8 <ll_chm_get+0x2c>
	pending_chm = ull_cp_chan_map_update_pending(conn);
    cba4:	f002 f9ba 	bl	ef1c <ull_cp_chan_map_update_pending>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
    cba8:	2205      	movs	r2, #5
	if (pending_chm) {
    cbaa:	4601      	mov	r1, r0
    cbac:	b130      	cbz	r0, cbbc <ll_chm_get+0x30>
		memcpy(chm, pending_chm, sizeof(conn->lll.data_chan_map));
    cbae:	4620      	mov	r0, r4
    cbb0:	f00d f820 	bl	19bf4 <memcpy>
	return 0;
    cbb4:	2000      	movs	r0, #0
}
    cbb6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cbb8:	2002      	movs	r0, #2
}
    cbba:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(chm, conn->lll.data_chan_map, sizeof(conn->lll.data_chan_map));
    cbbc:	f105 0134 	add.w	r1, r5, #52	; 0x34
    cbc0:	4620      	mov	r0, r4
    cbc2:	f00d f817 	bl	19bf4 <memcpy>
    cbc6:	e7f5      	b.n	cbb4 <ll_chm_get+0x28>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cbc8:	2002      	movs	r0, #2
}
    cbca:	4770      	bx	lr
    cbcc:	20000e08 	.word	0x20000e08

0000cbd0 <ll_terminate_ind_send>:
{
    cbd0:	b538      	push	{r3, r4, r5, lr}
	if (IS_ACL_HANDLE(handle)) {
    cbd2:	b110      	cbz	r0, cbda <ll_terminate_ind_send+0xa>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cbd4:	2402      	movs	r4, #2
}
    cbd6:	4620      	mov	r0, r4
    cbd8:	bd38      	pop	{r3, r4, r5, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cbda:	4602      	mov	r2, r0
    cbdc:	460c      	mov	r4, r1
    cbde:	4815      	ldr	r0, [pc, #84]	; (cc34 <ll_terminate_ind_send+0x64>)
    cbe0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cbe4:	f7fb f854 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cbe8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cbea:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    cbec:	b9fb      	cbnz	r3, cc2e <ll_terminate_ind_send+0x5e>
	switch (reason) {
    cbee:	2c1a      	cmp	r4, #26
    cbf0:	d804      	bhi.n	cbfc <ll_terminate_ind_send+0x2c>
    cbf2:	2c04      	cmp	r4, #4
    cbf4:	d816      	bhi.n	cc24 <ll_terminate_ind_send+0x54>
    cbf6:	2412      	movs	r4, #18
}
    cbf8:	4620      	mov	r0, r4
    cbfa:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
    cbfc:	2c29      	cmp	r4, #41	; 0x29
    cbfe:	d001      	beq.n	cc04 <ll_terminate_ind_send+0x34>
    cc00:	2c3b      	cmp	r4, #59	; 0x3b
    cc02:	d1f8      	bne.n	cbf6 <ll_terminate_ind_send+0x26>
		err = ull_cp_terminate(conn, reason);
    cc04:	4621      	mov	r1, r4
    cc06:	4628      	mov	r0, r5
    cc08:	f002 f972 	bl	eef0 <ull_cp_terminate>
		if (err) {
    cc0c:	4604      	mov	r4, r0
    cc0e:	2800      	cmp	r0, #0
    cc10:	d1e1      	bne.n	cbd6 <ll_terminate_ind_send+0x6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    cc12:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    cc16:	2b00      	cmp	r3, #0
    cc18:	dadd      	bge.n	cbd6 <ll_terminate_ind_send+0x6>
			ull_periph_latency_cancel(conn, handle);
    cc1a:	4601      	mov	r1, r0
    cc1c:	4628      	mov	r0, r5
    cc1e:	f005 f841 	bl	11ca4 <ull_periph_latency_cancel>
    cc22:	e7d8      	b.n	cbd6 <ll_terminate_ind_send+0x6>
	switch (reason) {
    cc24:	4b04      	ldr	r3, [pc, #16]	; (cc38 <ll_terminate_ind_send+0x68>)
    cc26:	40e3      	lsrs	r3, r4
    cc28:	07db      	lsls	r3, r3, #31
    cc2a:	d4eb      	bmi.n	cc04 <ll_terminate_ind_send+0x34>
    cc2c:	e7e3      	b.n	cbf6 <ll_terminate_ind_send+0x26>
			return BT_HCI_ERR_CMD_DISALLOWED;
    cc2e:	240c      	movs	r4, #12
    cc30:	e7d1      	b.n	cbd6 <ll_terminate_ind_send+0x6>
    cc32:	bf00      	nop
    cc34:	20000e08 	.word	0x20000e08
    cc38:	04380020 	.word	0x04380020

0000cc3c <ll_feature_req_send>:
{
    cc3c:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    cc3e:	b998      	cbnz	r0, cc68 <ll_feature_req_send+0x2c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc40:	4602      	mov	r2, r0
    cc42:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cc46:	480d      	ldr	r0, [pc, #52]	; (cc7c <ll_feature_req_send+0x40>)
    cc48:	f7fb f822 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cc4c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc4e:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    cc50:	b953      	cbnz	r3, cc68 <ll_feature_req_send+0x2c>
	err = ull_cp_feature_exchange(conn, 1U);
    cc52:	2101      	movs	r1, #1
    cc54:	f002 f902 	bl	ee5c <ull_cp_feature_exchange>
	if (err) {
    cc58:	4604      	mov	r4, r0
    cc5a:	b918      	cbnz	r0, cc64 <ll_feature_req_send+0x28>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    cc5c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    cc60:	2b00      	cmp	r3, #0
    cc62:	db04      	blt.n	cc6e <ll_feature_req_send+0x32>
}
    cc64:	4620      	mov	r0, r4
    cc66:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cc68:	2402      	movs	r4, #2
}
    cc6a:	4620      	mov	r0, r4
    cc6c:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    cc6e:	4601      	mov	r1, r0
    cc70:	4628      	mov	r0, r5
    cc72:	f005 f817 	bl	11ca4 <ull_periph_latency_cancel>
}
    cc76:	4620      	mov	r0, r4
    cc78:	bd38      	pop	{r3, r4, r5, pc}
    cc7a:	bf00      	nop
    cc7c:	20000e08 	.word	0x20000e08

0000cc80 <ll_version_ind_send>:
{
    cc80:	b538      	push	{r3, r4, r5, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    cc82:	b990      	cbnz	r0, ccaa <ll_version_ind_send+0x2a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc84:	4602      	mov	r2, r0
    cc86:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cc8a:	480c      	ldr	r0, [pc, #48]	; (ccbc <ll_version_ind_send+0x3c>)
    cc8c:	f7fb f800 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cc90:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cc92:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    cc94:	b94b      	cbnz	r3, ccaa <ll_version_ind_send+0x2a>
	err = ull_cp_version_exchange(conn);
    cc96:	f002 f8f7 	bl	ee88 <ull_cp_version_exchange>
	if (err) {
    cc9a:	4604      	mov	r4, r0
    cc9c:	b918      	cbnz	r0, cca6 <ll_version_ind_send+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    cc9e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    cca2:	2b00      	cmp	r3, #0
    cca4:	db04      	blt.n	ccb0 <ll_version_ind_send+0x30>
}
    cca6:	4620      	mov	r0, r4
    cca8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ccaa:	2402      	movs	r4, #2
}
    ccac:	4620      	mov	r0, r4
    ccae:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    ccb0:	4601      	mov	r1, r0
    ccb2:	4628      	mov	r0, r5
    ccb4:	f004 fff6 	bl	11ca4 <ull_periph_latency_cancel>
}
    ccb8:	4620      	mov	r0, r4
    ccba:	bd38      	pop	{r3, r4, r5, pc}
    ccbc:	20000e08 	.word	0x20000e08

0000ccc0 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ccc0:	b9f0      	cbnz	r0, cd00 <ll_length_req_send+0x40>
{
    ccc2:	b570      	push	{r4, r5, r6, lr}
    ccc4:	460d      	mov	r5, r1
    ccc6:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ccc8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cccc:	4602      	mov	r2, r0
    ccce:	4810      	ldr	r0, [pc, #64]	; (cd10 <ll_length_req_send+0x50>)
    ccd0:	f7fa ffde 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    ccd4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ccd6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    ccd8:	b983      	cbnz	r3, ccfc <ll_length_req_send+0x3c>
}

static inline bool feature_dle(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_DLE) != 0;
    ccda:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_dle(conn)) {
    ccde:	069b      	lsls	r3, r3, #26
    cce0:	d50a      	bpl.n	ccf8 <ll_length_req_send+0x38>
	err = ull_cp_data_length_update(conn, tx_octets, tx_time);
    cce2:	4632      	mov	r2, r6
    cce4:	4629      	mov	r1, r5
    cce6:	f002 f92b 	bl	ef40 <ull_cp_data_length_update>
	if (err) {
    ccea:	b920      	cbnz	r0, ccf6 <ll_length_req_send+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    ccec:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ccf0:	2b00      	cmp	r3, #0
    ccf2:	db07      	blt.n	cd04 <ll_length_req_send+0x44>
	return 0;
    ccf4:	2000      	movs	r0, #0
}
    ccf6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    ccf8:	201a      	movs	r0, #26
}
    ccfa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ccfc:	2002      	movs	r0, #2
}
    ccfe:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd00:	2002      	movs	r0, #2
}
    cd02:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
    cd04:	4601      	mov	r1, r0
    cd06:	4620      	mov	r0, r4
    cd08:	f004 ffcc 	bl	11ca4 <ull_periph_latency_cancel>
    cd0c:	e7f2      	b.n	ccf4 <ll_length_req_send+0x34>
    cd0e:	bf00      	nop
    cd10:	20000e08 	.word	0x20000e08

0000cd14 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    cd14:	4a03      	ldr	r2, [pc, #12]	; (cd24 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    cd16:	4b04      	ldr	r3, [pc, #16]	; (cd28 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    cd18:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    cd1a:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    cd1c:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    cd1e:	800b      	strh	r3, [r1, #0]
}
    cd20:	4770      	bx	lr
    cd22:	bf00      	nop
    cd24:	200026f8 	.word	0x200026f8
    cd28:	200026f6 	.word	0x200026f6

0000cd2c <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    cd2c:	4a02      	ldr	r2, [pc, #8]	; (cd38 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    cd2e:	4b03      	ldr	r3, [pc, #12]	; (cd3c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    cd30:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    cd32:	8019      	strh	r1, [r3, #0]
}
    cd34:	2000      	movs	r0, #0
    cd36:	4770      	bx	lr
    cd38:	200026f8 	.word	0x200026f8
    cd3c:	200026f6 	.word	0x200026f6

0000cd40 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    cd40:	f04f 0c1b 	mov.w	ip, #27
    cd44:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    cd48:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    cd4c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    cd50:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    cd52:	8018      	strh	r0, [r3, #0]
}
    cd54:	4770      	bx	lr
    cd56:	bf00      	nop

0000cd58 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    cd58:	b9c0      	cbnz	r0, cd8c <ll_phy_get+0x34>
{
    cd5a:	b538      	push	{r3, r4, r5, lr}
    cd5c:	460d      	mov	r5, r1
    cd5e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cd60:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cd64:	4602      	mov	r2, r0
    cd66:	480a      	ldr	r0, [pc, #40]	; (cd90 <ll_phy_get+0x38>)
    cd68:	f7fa ff92 	bl	7c90 <mem_get>
    cd6c:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    cd6e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    cd70:	b950      	cbnz	r0, cd88 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    cd72:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    cd76:	f3c2 0202 	ubfx	r2, r2, #0, #3
    cd7a:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    cd7c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
    cd80:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cd84:	7023      	strb	r3, [r4, #0]
}
    cd86:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd88:	2002      	movs	r0, #2
}
    cd8a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd8c:	2002      	movs	r0, #2
}
    cd8e:	4770      	bx	lr
    cd90:	20000e08 	.word	0x20000e08

0000cd94 <ll_phy_default_set>:
	default_phy_tx = tx;
    cd94:	4a02      	ldr	r2, [pc, #8]	; (cda0 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    cd96:	4b03      	ldr	r3, [pc, #12]	; (cda4 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    cd98:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    cd9a:	7019      	strb	r1, [r3, #0]
}
    cd9c:	2000      	movs	r0, #0
    cd9e:	4770      	bx	lr
    cda0:	20002717 	.word	0x20002717
    cda4:	20002716 	.word	0x20002716

0000cda8 <ll_phy_req_send>:
{
    cda8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdaa:	b083      	sub	sp, #12
	if (handle >= CONFIG_BT_MAX_CONN) {
    cdac:	b9f8      	cbnz	r0, cdee <ll_phy_req_send+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cdae:	460f      	mov	r7, r1
    cdb0:	4616      	mov	r6, r2
    cdb2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cdb6:	4602      	mov	r2, r0
    cdb8:	4813      	ldr	r0, [pc, #76]	; (ce08 <ll_phy_req_send+0x60>)
    cdba:	461d      	mov	r5, r3
    cdbc:	f7fa ff68 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cdc0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cdc2:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    cdc4:	b99b      	cbnz	r3, cdee <ll_phy_req_send+0x46>
}

static inline bool feature_phy_2m(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_PHY_2M)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_PHY_2M) != 0;
    cdc6:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	if (!feature_phy_2m(conn) && !feature_phy_coded(conn)) {
    cdca:	05db      	lsls	r3, r3, #23
    cdcc:	d513      	bpl.n	cdf6 <ll_phy_req_send+0x4e>
	err = ull_cp_phy_update(conn, tx, flags, rx, 1U);
    cdce:	462b      	mov	r3, r5
    cdd0:	2501      	movs	r5, #1
    cdd2:	9500      	str	r5, [sp, #0]
    cdd4:	4632      	mov	r2, r6
    cdd6:	4639      	mov	r1, r7
    cdd8:	f002 f864 	bl	eea4 <ull_cp_phy_update>
	if (err) {
    cddc:	4605      	mov	r5, r0
    cdde:	b918      	cbnz	r0, cde8 <ll_phy_req_send+0x40>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    cde0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    cde4:	2b00      	cmp	r3, #0
    cde6:	db0a      	blt.n	cdfe <ll_phy_req_send+0x56>
}
    cde8:	4628      	mov	r0, r5
    cdea:	b003      	add	sp, #12
    cdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cdee:	2502      	movs	r5, #2
}
    cdf0:	4628      	mov	r0, r5
    cdf2:	b003      	add	sp, #12
    cdf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    cdf6:	251a      	movs	r5, #26
}
    cdf8:	4628      	mov	r0, r5
    cdfa:	b003      	add	sp, #12
    cdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
    cdfe:	4601      	mov	r1, r0
    ce00:	4620      	mov	r0, r4
    ce02:	f004 ff4f 	bl	11ca4 <ull_periph_latency_cancel>
    ce06:	e7ef      	b.n	cde8 <ll_phy_req_send+0x40>
    ce08:	20000e08 	.word	0x20000e08

0000ce0c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ce0c:	b9d8      	cbnz	r0, ce46 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce0e:	4602      	mov	r2, r0
{
    ce10:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce12:	480e      	ldr	r0, [pc, #56]	; (ce4c <ll_apto_get+0x40>)
    ce14:	460c      	mov	r4, r1
    ce16:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    ce1a:	f7fa ff39 	bl	7c90 <mem_get>
    ce1e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    ce20:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    ce22:	b970      	cbnz	r0, ce42 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    ce24:	f8b2 3186 	ldrh.w	r3, [r2, #390]	; 0x186
    ce28:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    ce2a:	fb02 f303 	mul.w	r3, r2, r3
    ce2e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    ce32:	4a07      	ldr	r2, [pc, #28]	; (ce50 <ll_apto_get+0x44>)
    ce34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ce38:	fba2 2303 	umull	r2, r3, r2, r3
    ce3c:	099b      	lsrs	r3, r3, #6
    ce3e:	8023      	strh	r3, [r4, #0]
}
    ce40:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce42:	2002      	movs	r0, #2
}
    ce44:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce46:	2002      	movs	r0, #2
}
    ce48:	4770      	bx	lr
    ce4a:	bf00      	nop
    ce4c:	20000e08 	.word	0x20000e08
    ce50:	10624dd3 	.word	0x10624dd3

0000ce54 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    ce54:	b9d8      	cbnz	r0, ce8e <ll_apto_set+0x3a>
{
    ce56:	b510      	push	{r4, lr}
    ce58:	4602      	mov	r2, r0
    ce5a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce5c:	480d      	ldr	r0, [pc, #52]	; (ce94 <ll_apto_set+0x40>)
    ce5e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    ce62:	f7fa ff15 	bl	7c90 <mem_get>
    ce66:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    ce68:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    ce6a:	b970      	cbnz	r0, ce8a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    ce6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    ce6e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ce72:	fb01 f202 	mul.w	r2, r1, r2
    ce76:	f242 7110 	movw	r1, #10000	; 0x2710
    ce7a:	fb01 2104 	mla	r1, r1, r4, r2
    ce7e:	3901      	subs	r1, #1
    ce80:	fbb1 f1f2 	udiv	r1, r1, r2
    ce84:	f8a3 1186 	strh.w	r1, [r3, #390]	; 0x186
}
    ce88:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce8a:	2002      	movs	r0, #2
}
    ce8c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ce8e:	2002      	movs	r0, #2
}
    ce90:	4770      	bx	lr
    ce92:	bf00      	nop
    ce94:	20000e08 	.word	0x20000e08

0000ce98 <ull_conn_init>:
	err = init_reset();
    ce98:	f7ff bbd2 	b.w	c640 <init_reset>

0000ce9c <ull_conn_reset>:
{
    ce9c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ce9e:	2200      	movs	r2, #0
    cea0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cea4:	4814      	ldr	r0, [pc, #80]	; (cef8 <ull_conn_reset+0x5c>)
    cea6:	f7fa fef3 	bl	7c90 <mem_get>
    ceaa:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    ceac:	f100 021c 	add.w	r2, r0, #28
    ceb0:	4601      	mov	r1, r0
    ceb2:	2003      	movs	r0, #3
    ceb4:	f7fd f8e8 	bl	a088 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    ceb8:	b108      	cbz	r0, cebe <ull_conn_reset+0x22>
    ceba:	3078      	adds	r0, #120	; 0x78
    cebc:	d10d      	bne.n	ceda <ull_conn_reset+0x3e>
	MFIFO_INIT(conn_tx);
    cebe:	490f      	ldr	r1, [pc, #60]	; (cefc <ull_conn_reset+0x60>)
	MFIFO_INIT(conn_ack);
    cec0:	4a0f      	ldr	r2, [pc, #60]	; (cf00 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
    cec2:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    cec4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cec8:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    ceca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	MFIFO_INIT(conn_tx);
    cece:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
    ced0:	8093      	strh	r3, [r2, #4]
}
    ced2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
    ced6:	f7ff bbb3 	b.w	c640 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    ceda:	4a0a      	ldr	r2, [pc, #40]	; (cf04 <ull_conn_reset+0x68>)
    cedc:	490a      	ldr	r1, [pc, #40]	; (cf08 <ull_conn_reset+0x6c>)
    cede:	480b      	ldr	r0, [pc, #44]	; (cf0c <ull_conn_reset+0x70>)
    cee0:	f240 6399 	movw	r3, #1689	; 0x699
    cee4:	f00c fbab 	bl	1963e <assert_print>
    cee8:	4040      	eors	r0, r0
    ceea:	f380 8811 	msr	BASEPRI, r0
    ceee:	f04f 0003 	mov.w	r0, #3
    cef2:	df02      	svc	2
    cef4:	e7e3      	b.n	cebe <ull_conn_reset+0x22>
    cef6:	bf00      	nop
    cef8:	20000e08 	.word	0x20000e08
    cefc:	200005d0 	.word	0x200005d0
    cf00:	20000588 	.word	0x20000588
    cf04:	0001e678 	.word	0x0001e678
    cf08:	0001e76c 	.word	0x0001e76c
    cf0c:	0001e1a4 	.word	0x0001e1a4

0000cf10 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    cf10:	4b01      	ldr	r3, [pc, #4]	; (cf18 <ull_conn_default_phy_tx_get+0x8>)
}
    cf12:	7818      	ldrb	r0, [r3, #0]
    cf14:	4770      	bx	lr
    cf16:	bf00      	nop
    cf18:	20002717 	.word	0x20002717

0000cf1c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    cf1c:	4b01      	ldr	r3, [pc, #4]	; (cf24 <ull_conn_default_phy_rx_get+0x8>)
}
    cf1e:	7818      	ldrb	r0, [r3, #0]
    cf20:	4770      	bx	lr
    cf22:	bf00      	nop
    cf24:	20002716 	.word	0x20002716

0000cf28 <ull_conn_setup>:
{
    cf28:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    cf2a:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    cf2c:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    cf2e:	681d      	ldr	r5, [r3, #0]
    cf30:	782b      	ldrb	r3, [r5, #0]
{
    cf32:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    cf34:	b193      	cbz	r3, cf5c <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    cf36:	696b      	ldr	r3, [r5, #20]
    cf38:	b163      	cbz	r3, cf54 <ull_conn_setup+0x2c>
    cf3a:	4a0b      	ldr	r2, [pc, #44]	; (cf68 <ull_conn_setup+0x40>)
    cf3c:	490b      	ldr	r1, [pc, #44]	; (cf6c <ull_conn_setup+0x44>)
    cf3e:	480c      	ldr	r0, [pc, #48]	; (cf70 <ull_conn_setup+0x48>)
    cf40:	f240 331e 	movw	r3, #798	; 0x31e
    cf44:	f00c fb7b 	bl	1963e <assert_print>
    cf48:	4040      	eors	r0, r0
    cf4a:	f380 8811 	msr	BASEPRI, r0
    cf4e:	f04f 0003 	mov.w	r0, #3
    cf52:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    cf54:	4b07      	ldr	r3, [pc, #28]	; (cf74 <ull_conn_setup+0x4c>)
    cf56:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    cf5a:	bd38      	pop	{r3, r4, r5, pc}
    cf5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    cf60:	4608      	mov	r0, r1
    cf62:	f7ff bcb1 	b.w	c8c8 <conn_setup_adv_scan_disabled_cb>
    cf66:	bf00      	nop
    cf68:	0001e678 	.word	0x0001e678
    cf6c:	0001e580 	.word	0x0001e580
    cf70:	0001e1a4 	.word	0x0001e1a4
    cf74:	0000c8c9 	.word	0x0000c8c9

0000cf78 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    cf78:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    cf7a:	88da      	ldrh	r2, [r3, #6]
    cf7c:	bba2      	cbnz	r2, cfe8 <ull_conn_rx+0x70>
{
    cf7e:	b570      	push	{r4, r5, r6, lr}
    cf80:	460c      	mov	r4, r1
    cf82:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cf84:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    cf88:	4819      	ldr	r0, [pc, #100]	; (cff0 <ull_conn_rx+0x78>)
    cf8a:	f7fa fe81 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    cf8e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    cf90:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    cf92:	bb23      	cbnz	r3, cfde <ull_conn_rx+0x66>
	ull_cp_tx_ntf(conn);
    cf94:	f002 f8f4 	bl	f180 <ull_cp_tx_ntf>
	pdu_rx = (void *)(*rx)->pdu;
    cf98:	6822      	ldr	r2, [r4, #0]
	switch (pdu_rx->ll_id) {
    cf9a:	7f13      	ldrb	r3, [r2, #28]
    cf9c:	f003 0303 	and.w	r3, r3, #3
    cfa0:	2b03      	cmp	r3, #3
    cfa2:	d108      	bne.n	cfb6 <ull_conn_rx+0x3e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cfa4:	2301      	movs	r3, #1
    cfa6:	7113      	strb	r3, [r2, #4]
		ull_cp_rx(conn, link, *rx);
    cfa8:	6822      	ldr	r2, [r4, #0]
    cfaa:	4631      	mov	r1, r6
    cfac:	4628      	mov	r0, r5
    cfae:	f002 f8fb 	bl	f1a8 <ull_cp_rx>
}
    cfb2:	2000      	movs	r0, #0
    cfb4:	bd70      	pop	{r4, r5, r6, pc}
	switch (pdu_rx->ll_id) {
    cfb6:	b95b      	cbnz	r3, cfd0 <ull_conn_rx+0x58>
		if (conn->pause_rx_data) {
    cfb8:	f895 3180 	ldrb.w	r3, [r5, #384]	; 0x180
    cfbc:	079b      	lsls	r3, r3, #30
    cfbe:	d503      	bpl.n	cfc8 <ull_conn_rx+0x50>
			conn->llcp_terminate.reason_final =
    cfc0:	233d      	movs	r3, #61	; 0x3d
    cfc2:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cfc6:	6822      	ldr	r2, [r4, #0]
    cfc8:	2301      	movs	r3, #1
    cfca:	7113      	strb	r3, [r2, #4]
}
    cfcc:	2000      	movs	r0, #0
    cfce:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->pause_rx_data) {
    cfd0:	f895 3180 	ldrb.w	r3, [r5, #384]	; 0x180
    cfd4:	079a      	lsls	r2, r3, #30
    cfd6:	d5ec      	bpl.n	cfb2 <ull_conn_rx+0x3a>
			conn->llcp_terminate.reason_final =
    cfd8:	233d      	movs	r3, #61	; 0x3d
    cfda:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cfde:	6823      	ldr	r3, [r4, #0]
    cfe0:	2201      	movs	r2, #1
    cfe2:	711a      	strb	r2, [r3, #4]
}
    cfe4:	2000      	movs	r0, #0
    cfe6:	bd70      	pop	{r4, r5, r6, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cfe8:	2201      	movs	r2, #1
    cfea:	711a      	strb	r2, [r3, #4]
}
    cfec:	2000      	movs	r0, #0
    cfee:	4770      	bx	lr
    cff0:	20000e08 	.word	0x20000e08

0000cff4 <ull_conn_llcp>:
{
    cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cff6:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    cff8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
{
    cffa:	461d      	mov	r5, r3
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    cffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d000:	4298      	cmp	r0, r3
{
    d002:	460f      	mov	r7, r1
    d004:	4616      	mov	r6, r2
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    d006:	d00c      	beq.n	d022 <ull_conn_llcp+0x2e>
	ull_cp_run(conn);
    d008:	4620      	mov	r0, r4
	conn->llcp.prep.remainder = remainder;
    d00a:	e9c4 7643 	strd	r7, r6, [r4, #268]	; 0x10c
	conn->llcp.prep.lazy = lazy;
    d00e:	f8a4 5114 	strh.w	r5, [r4, #276]	; 0x114
	ull_cp_run(conn);
    d012:	f001 febb 	bl	ed8c <ull_cp_run>
	if (conn->cancel_prepare) {
    d016:	f894 3180 	ldrb.w	r3, [r4, #384]	; 0x180
    d01a:	f013 0001 	ands.w	r0, r3, #1
    d01e:	d10e      	bne.n	d03e <ull_conn_llcp+0x4a>
}
    d020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(conn->lll.handle != LLL_HANDLE_INVALID);
    d022:	4a0a      	ldr	r2, [pc, #40]	; (d04c <ull_conn_llcp+0x58>)
    d024:	490a      	ldr	r1, [pc, #40]	; (d050 <ull_conn_llcp+0x5c>)
    d026:	480b      	ldr	r0, [pc, #44]	; (d054 <ull_conn_llcp+0x60>)
    d028:	f240 3367 	movw	r3, #871	; 0x367
    d02c:	f00c fb07 	bl	1963e <assert_print>
    d030:	4040      	eors	r0, r0
    d032:	f380 8811 	msr	BASEPRI, r0
    d036:	f04f 0003 	mov.w	r0, #3
    d03a:	df02      	svc	2
    d03c:	e7e4      	b.n	d008 <ull_conn_llcp+0x14>
		conn->cancel_prepare = 0U;
    d03e:	f36f 0300 	bfc	r3, #0, #1
    d042:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
		return -ECANCELED;
    d046:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
    d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d04c:	0001e678 	.word	0x0001e678
    d050:	0001e784 	.word	0x0001e784
    d054:	0001e1a4 	.word	0x0001e1a4

0000d058 <ull_conn_tx_demux>:
{
    d058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    d05c:	4f1c      	ldr	r7, [pc, #112]	; (d0d0 <ull_conn_tx_demux+0x78>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d05e:	4e1d      	ldr	r6, [pc, #116]	; (d0d4 <ull_conn_tx_demux+0x7c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    d060:	797a      	ldrb	r2, [r7, #5]
{
    d062:	4680      	mov	r8, r0
	return (void *)(fifo + first * size);
    d064:	f107 0508 	add.w	r5, r7, #8
    d068:	e019      	b.n	d09e <ull_conn_tx_demux+0x46>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d06a:	f7fa fe11 	bl	7c90 <mem_get>
    d06e:	4603      	mov	r3, r0
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
    d070:	30d4      	adds	r0, #212	; 0xd4
	if (conn->lll.handle != handle) {
    d072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    d074:	bb03      	cbnz	r3, d0b8 <ull_conn_tx_demux+0x60>
			ull_tx_q_enqueue_data(&conn->tx_q, tx);
    d076:	6861      	ldr	r1, [r4, #4]
    d078:	f001 fbe6 	bl	e848 <ull_tx_q_enqueue_data>
	uint8_t _first = *first; /* Copy read-index */
    d07c:	793b      	ldrb	r3, [r7, #4]
		MFIFO_DEQUEUE(conn_tx);
    d07e:	797a      	ldrb	r2, [r7, #5]
    d080:	78b9      	ldrb	r1, [r7, #2]
	if (_first == last) {
    d082:	429a      	cmp	r2, r3
	} while (--count);
    d084:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	_first += 1U;
    d088:	f103 0301 	add.w	r3, r3, #1
	if (_first == last) {
    d08c:	d004      	beq.n	d098 <ull_conn_tx_demux+0x40>
	_first += 1U;
    d08e:	b2db      	uxtb	r3, r3
		_first = 0U;
    d090:	4299      	cmp	r1, r3
    d092:	bf08      	it	eq
    d094:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    d096:	713b      	strb	r3, [r7, #4]
    d098:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    d09c:	d016      	beq.n	d0cc <ull_conn_tx_demux+0x74>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    d09e:	793b      	ldrb	r3, [r7, #4]
    d0a0:	783c      	ldrb	r4, [r7, #0]
	if (first == last) {
    d0a2:	4293      	cmp	r3, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d0a4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    d0a8:	4630      	mov	r0, r6
	return (void *)(fifo + first * size);
    d0aa:	fb13 f304 	smulbb	r3, r3, r4
	if (first == last) {
    d0ae:	d00d      	beq.n	d0cc <ull_conn_tx_demux+0x74>
	if (handle >= CONFIG_BT_MAX_CONN) {
    d0b0:	5aea      	ldrh	r2, [r5, r3]
	return (void *)(fifo + first * size);
    d0b2:	195c      	adds	r4, r3, r5
    d0b4:	2a00      	cmp	r2, #0
    d0b6:	d0d8      	beq.n	d06a <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
    d0b8:	6861      	ldr	r1, [r4, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    d0ba:	790b      	ldrb	r3, [r1, #4]
    d0bc:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    d0c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
    d0c4:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    d0c6:	f7fc ff0b 	bl	9ee0 <ll_tx_ack_put>
    d0ca:	e7d7      	b.n	d07c <ull_conn_tx_demux+0x24>
}
    d0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0d0:	200005d0 	.word	0x200005d0
    d0d4:	20000e08 	.word	0x20000e08

0000d0d8 <conn_cleanup>:
{
    d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
    d0dc:	4a3f      	ldr	r2, [pc, #252]	; (d1dc <conn_cleanup+0x104>)
    d0de:	6814      	ldr	r4, [r2, #0]
    d0e0:	42a0      	cmp	r0, r4
    d0e2:	4606      	mov	r6, r0
    d0e4:	460b      	mov	r3, r1
		conn_upd_curr = NULL;
    d0e6:	bf04      	itt	eq
    d0e8:	2100      	moveq	r1, #0
    d0ea:	6011      	streq	r1, [r2, #0]
	rx->hdr.handle = conn->lll.handle;
    d0ec:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    d0ee:	f8a6 015a 	strh.w	r0, [r6, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    d0f2:	2218      	movs	r2, #24
{
    d0f4:	b083      	sub	sp, #12
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
    d0f6:	2101      	movs	r1, #1
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    d0f8:	f886 2158 	strb.w	r2, [r6, #344]	; 0x158
	*((uint8_t *)rx->pdu) = reason;
    d0fc:	f886 3170 	strb.w	r3, [r6, #368]	; 0x170
	ull_cp_state_set(conn, ULL_CP_DISCONNECTED);
    d100:	4630      	mov	r0, r6
    d102:	f001 fe4d 	bl	eda0 <ull_cp_state_set>
	ull_tx_q_resume_data(&conn->tx_q);
    d106:	f106 07d4 	add.w	r7, r6, #212	; 0xd4
	ull_cp_release_nodes(conn);
    d10a:	4630      	mov	r0, r6
    d10c:	f001 fe5c 	bl	edc8 <ull_cp_release_nodes>
	ull_tx_q_resume_data(&conn->tx_q);
    d110:	4638      	mov	r0, r7
    d112:	f001 fb81 	bl	e818 <ull_tx_q_resume_data>
	tx = ull_tx_q_dequeue(&conn->tx_q);
    d116:	4638      	mov	r0, r7
    d118:	f001 fbb6 	bl	e888 <ull_tx_q_dequeue>
	if (tx) {
    d11c:	4604      	mov	r4, r0
    d11e:	2800      	cmp	r0, #0
    d120:	d03a      	beq.n	d198 <conn_cleanup+0xc0>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d122:	7903      	ldrb	r3, [r0, #4]
		link = mem_acquire(&mem_link_tx.free);
    d124:	f8df 90b8 	ldr.w	r9, [pc, #184]	; d1e0 <conn_cleanup+0x108>
		LL_ASSERT(link);
    d128:	f8df b0b8 	ldr.w	fp, [pc, #184]	; d1e4 <conn_cleanup+0x10c>
    d12c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d1e8 <conn_cleanup+0x110>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d130:	f003 0303 	and.w	r3, r3, #3
    d134:	2b03      	cmp	r3, #3
    d136:	bf0c      	ite	eq
    d138:	4603      	moveq	r3, r0
    d13a:	2300      	movne	r3, #0
			tx->next = NULL;
    d13c:	6003      	str	r3, [r0, #0]
		link = mem_acquire(&mem_link_tx.free);
    d13e:	4648      	mov	r0, r9
    d140:	f7fa fd72 	bl	7c28 <mem_acquire>
		LL_ASSERT(link);
    d144:	f106 087c 	add.w	r8, r6, #124	; 0x7c
    d148:	4605      	mov	r5, r0
    d14a:	b1b8      	cbz	r0, d17c <conn_cleanup+0xa4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    d14c:	4621      	mov	r1, r4
    d14e:	4642      	mov	r2, r8
    d150:	4628      	mov	r0, r5
    d152:	f7fa fdcf 	bl	7cf4 <memq_enqueue>
	tx = ull_tx_q_dequeue(&conn->tx_q);
    d156:	4638      	mov	r0, r7
    d158:	f001 fb96 	bl	e888 <ull_tx_q_dequeue>
	if (tx) {
    d15c:	4604      	mov	r4, r0
    d15e:	b1d8      	cbz	r0, d198 <conn_cleanup+0xc0>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d160:	7903      	ldrb	r3, [r0, #4]
    d162:	f003 0303 	and.w	r3, r3, #3
    d166:	2b03      	cmp	r3, #3
    d168:	bf0c      	ite	eq
    d16a:	4603      	moveq	r3, r0
    d16c:	2300      	movne	r3, #0
			tx->next = NULL;
    d16e:	6003      	str	r3, [r0, #0]
		link = mem_acquire(&mem_link_tx.free);
    d170:	4648      	mov	r0, r9
    d172:	f7fa fd59 	bl	7c28 <mem_acquire>
		LL_ASSERT(link);
    d176:	4605      	mov	r5, r0
    d178:	2800      	cmp	r0, #0
    d17a:	d1e7      	bne.n	d14c <conn_cleanup+0x74>
    d17c:	481b      	ldr	r0, [pc, #108]	; (d1ec <conn_cleanup+0x114>)
    d17e:	f240 7305 	movw	r3, #1797	; 0x705
    d182:	465a      	mov	r2, fp
    d184:	4651      	mov	r1, sl
    d186:	f00c fa5a 	bl	1963e <assert_print>
    d18a:	4040      	eors	r0, r0
    d18c:	f380 8811 	msr	BASEPRI, r0
    d190:	f04f 0003 	mov.w	r0, #3
    d194:	df02      	svc	2
    d196:	e7d9      	b.n	d14c <conn_cleanup+0x74>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    d198:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    d19a:	4b15      	ldr	r3, [pc, #84]	; (d1f0 <conn_cleanup+0x118>)
    d19c:	9600      	str	r6, [sp, #0]
    d19e:	3203      	adds	r2, #3
    d1a0:	b2d2      	uxtb	r2, r2
    d1a2:	2101      	movs	r1, #1
    d1a4:	2000      	movs	r0, #0
    d1a6:	f7fc f883 	bl	92b0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d1aa:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    d1ae:	d00c      	beq.n	d1ca <conn_cleanup+0xf2>
    d1b0:	4a0c      	ldr	r2, [pc, #48]	; (d1e4 <conn_cleanup+0x10c>)
    d1b2:	4910      	ldr	r1, [pc, #64]	; (d1f4 <conn_cleanup+0x11c>)
    d1b4:	480d      	ldr	r0, [pc, #52]	; (d1ec <conn_cleanup+0x114>)
    d1b6:	f240 63cb 	movw	r3, #1739	; 0x6cb
    d1ba:	f00c fa40 	bl	1963e <assert_print>
    d1be:	4040      	eors	r0, r0
    d1c0:	f380 8811 	msr	BASEPRI, r0
    d1c4:	f04f 0003 	mov.w	r0, #3
    d1c8:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
    d1ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    d1ce:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
    d1d0:	8533      	strh	r3, [r6, #40]	; 0x28
}
    d1d2:	b003      	add	sp, #12
    d1d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
    d1d8:	f7ff bf3e 	b.w	d058 <ull_conn_tx_demux>
    d1dc:	20001c98 	.word	0x20001c98
    d1e0:	20001bec 	.word	0x20001bec
    d1e4:	0001e678 	.word	0x0001e678
    d1e8:	0001e6c8 	.word	0x0001e6c8
    d1ec:	0001e1a4 	.word	0x0001e1a4
    d1f0:	0000c7a5 	.word	0x0000c7a5
    d1f4:	0001e73c 	.word	0x0001e73c

0000d1f8 <ull_conn_tx_lll_enqueue>:
	while (count--) {
    d1f8:	2900      	cmp	r1, #0
    d1fa:	d03a      	beq.n	d272 <ull_conn_tx_lll_enqueue+0x7a>
{
    d1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d200:	1e4d      	subs	r5, r1, #1
		link = mem_acquire(&mem_link_tx.free);
    d202:	f8df 9070 	ldr.w	r9, [pc, #112]	; d274 <ull_conn_tx_lll_enqueue+0x7c>
		LL_ASSERT(link);
    d206:	f8df b070 	ldr.w	fp, [pc, #112]	; d278 <ull_conn_tx_lll_enqueue+0x80>
    d20a:	f8df a070 	ldr.w	sl, [pc, #112]	; d27c <ull_conn_tx_lll_enqueue+0x84>
    d20e:	4607      	mov	r7, r0
    d210:	b2ed      	uxtb	r5, r5
	tx = ull_tx_q_dequeue(&conn->tx_q);
    d212:	f100 08d4 	add.w	r8, r0, #212	; 0xd4
    d216:	e015      	b.n	d244 <ull_conn_tx_lll_enqueue+0x4c>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d218:	7923      	ldrb	r3, [r4, #4]
    d21a:	f003 0303 	and.w	r3, r3, #3
			tx->next = tx;
    d21e:	2b03      	cmp	r3, #3
    d220:	bf0c      	ite	eq
    d222:	4623      	moveq	r3, r4
    d224:	2300      	movne	r3, #0
    d226:	6023      	str	r3, [r4, #0]
		link = mem_acquire(&mem_link_tx.free);
    d228:	f7fa fcfe 	bl	7c28 <mem_acquire>
		LL_ASSERT(link);
    d22c:	4606      	mov	r6, r0
    d22e:	b190      	cbz	r0, d256 <ull_conn_tx_lll_enqueue+0x5e>
	while (count--) {
    d230:	3d01      	subs	r5, #1
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    d232:	f107 027c 	add.w	r2, r7, #124	; 0x7c
    d236:	4621      	mov	r1, r4
    d238:	4630      	mov	r0, r6
	while (count--) {
    d23a:	b2ed      	uxtb	r5, r5
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    d23c:	f7fa fd5a 	bl	7cf4 <memq_enqueue>
	while (count--) {
    d240:	2dff      	cmp	r5, #255	; 0xff
    d242:	d006      	beq.n	d252 <ull_conn_tx_lll_enqueue+0x5a>
	tx = ull_tx_q_dequeue(&conn->tx_q);
    d244:	4640      	mov	r0, r8
    d246:	f001 fb1f 	bl	e888 <ull_tx_q_dequeue>
    d24a:	4604      	mov	r4, r0
		link = mem_acquire(&mem_link_tx.free);
    d24c:	4648      	mov	r0, r9
	if (tx) {
    d24e:	2c00      	cmp	r4, #0
    d250:	d1e2      	bne.n	d218 <ull_conn_tx_lll_enqueue+0x20>
}
    d252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_ASSERT(link);
    d256:	480a      	ldr	r0, [pc, #40]	; (d280 <ull_conn_tx_lll_enqueue+0x88>)
    d258:	f240 5331 	movw	r3, #1329	; 0x531
    d25c:	465a      	mov	r2, fp
    d25e:	4651      	mov	r1, sl
    d260:	f00c f9ed 	bl	1963e <assert_print>
    d264:	4040      	eors	r0, r0
    d266:	f380 8811 	msr	BASEPRI, r0
    d26a:	f04f 0003 	mov.w	r0, #3
    d26e:	df02      	svc	2
    d270:	e7de      	b.n	d230 <ull_conn_tx_lll_enqueue+0x38>
    d272:	4770      	bx	lr
    d274:	20001bec 	.word	0x20001bec
    d278:	0001e678 	.word	0x0001e678
    d27c:	0001e6c8 	.word	0x0001e6c8
    d280:	0001e1a4 	.word	0x0001e1a4

0000d284 <tx_demux>:
{
    d284:	b510      	push	{r4, lr}
    d286:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
    d288:	2001      	movs	r0, #1
    d28a:	f7ff fee5 	bl	d058 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
    d28e:	4620      	mov	r0, r4
    d290:	2101      	movs	r1, #1
}
    d292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
    d296:	f7ff bfaf 	b.w	d1f8 <ull_conn_tx_lll_enqueue>
    d29a:	bf00      	nop

0000d29c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    d29c:	4901      	ldr	r1, [pc, #4]	; (d2a4 <ull_conn_link_tx_release+0x8>)
    d29e:	f7fa bcdf 	b.w	7c60 <mem_release>
    d2a2:	bf00      	nop
    d2a4:	20001bec 	.word	0x20001bec

0000d2a8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    d2a8:	4b01      	ldr	r3, [pc, #4]	; (d2b0 <ull_conn_ack_last_idx_get+0x8>)
}
    d2aa:	7958      	ldrb	r0, [r3, #5]
    d2ac:	4770      	bx	lr
    d2ae:	bf00      	nop
    d2b0:	20000588 	.word	0x20000588

0000d2b4 <ull_conn_ack_peek>:
{
    d2b4:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    d2b6:	4b0c      	ldr	r3, [pc, #48]	; (d2e8 <ull_conn_ack_peek+0x34>)
    d2b8:	f893 c004 	ldrb.w	ip, [r3, #4]
    d2bc:	f893 e005 	ldrb.w	lr, [r3, #5]
    d2c0:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
    d2c2:	45f4      	cmp	ip, lr
    d2c4:	d00d      	beq.n	d2e2 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
    d2c6:	fb1c fc04 	smulbb	ip, ip, r4
    d2ca:	3308      	adds	r3, #8
	*ack_last = mfifo_conn_ack.l;
    d2cc:	f880 e000 	strb.w	lr, [r0]
    d2d0:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
    d2d4:	f833 300c 	ldrh.w	r3, [r3, ip]
    d2d8:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    d2da:	6843      	ldr	r3, [r0, #4]
    d2dc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    d2de:	6818      	ldr	r0, [r3, #0]
}
    d2e0:	bd10      	pop	{r4, pc}
		return NULL;
    d2e2:	2000      	movs	r0, #0
}
    d2e4:	bd10      	pop	{r4, pc}
    d2e6:	bf00      	nop
    d2e8:	20000588 	.word	0x20000588

0000d2ec <ull_conn_ack_by_last_peek>:
{
    d2ec:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    d2ee:	4b0b      	ldr	r3, [pc, #44]	; (d31c <ull_conn_ack_by_last_peek+0x30>)
    d2f0:	f893 c004 	ldrb.w	ip, [r3, #4]
    d2f4:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
    d2f8:	4584      	cmp	ip, r0
    d2fa:	d00c      	beq.n	d316 <ull_conn_ack_by_last_peek+0x2a>
	return (void *)(fifo + first * size);
    d2fc:	fb1c fc0e 	smulbb	ip, ip, lr
    d300:	3308      	adds	r3, #8
    d302:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
    d306:	f833 300c 	ldrh.w	r3, [r3, ip]
    d30a:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
    d30c:	6843      	ldr	r3, [r0, #4]
    d30e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    d310:	6818      	ldr	r0, [r3, #0]
}
    d312:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    d316:	2000      	movs	r0, #0
    d318:	e7fb      	b.n	d312 <ull_conn_ack_by_last_peek+0x26>
    d31a:	bf00      	nop
    d31c:	20000588 	.word	0x20000588

0000d320 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
    d320:	4b09      	ldr	r3, [pc, #36]	; (d348 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    d322:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
    d324:	795a      	ldrb	r2, [r3, #5]
    d326:	7818      	ldrb	r0, [r3, #0]
    d328:	f893 c002 	ldrb.w	ip, [r3, #2]
    d32c:	428a      	cmp	r2, r1
    d32e:	d009      	beq.n	d344 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
    d330:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
    d332:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
    d336:	b2d2      	uxtb	r2, r2
		_first = 0U;
    d338:	4594      	cmp	ip, r2
    d33a:	bf08      	it	eq
    d33c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    d33e:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
    d340:	711a      	strb	r2, [r3, #4]
	return mem;
    d342:	4770      	bx	lr
		return NULL;
    d344:	2000      	movs	r0, #0
}
    d346:	4770      	bx	lr
    d348:	20000588 	.word	0x20000588

0000d34c <ull_conn_lll_ack_enqueue>:
{
    d34c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    d34e:	4c14      	ldr	r4, [pc, #80]	; (d3a0 <ull_conn_lll_ack_enqueue+0x54>)
    d350:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
    d352:	f894 e002 	ldrb.w	lr, [r4, #2]
    d356:	f894 c004 	ldrb.w	ip, [r4, #4]
    d35a:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
    d35c:	1c53      	adds	r3, r2, #1
    d35e:	b2db      	uxtb	r3, r3
		last = 0U;
    d360:	459e      	cmp	lr, r3
    d362:	bf08      	it	eq
    d364:	2300      	moveq	r3, #0
	if (last == first) {
    d366:	459c      	cmp	ip, r3
    d368:	d009      	beq.n	d37e <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    d36a:	fb12 f205 	smulbb	r2, r2, r5
    d36e:	f104 0c08 	add.w	ip, r4, #8
	lll_tx->handle = handle;
    d372:	f82c 0002 	strh.w	r0, [ip, r2]
    d376:	4462      	add	r2, ip
	lll_tx->node = tx;
    d378:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
    d37a:	7163      	strb	r3, [r4, #5]
}
    d37c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
    d37e:	4a09      	ldr	r2, [pc, #36]	; (d3a4 <ull_conn_lll_ack_enqueue+0x58>)
    d380:	4909      	ldr	r1, [pc, #36]	; (d3a8 <ull_conn_lll_ack_enqueue+0x5c>)
    d382:	480a      	ldr	r0, [pc, #40]	; (d3ac <ull_conn_lll_ack_enqueue+0x60>)
    d384:	f44f 63ae 	mov.w	r3, #1392	; 0x570
    d388:	f00c f959 	bl	1963e <assert_print>
    d38c:	4040      	eors	r0, r0
    d38e:	f380 8811 	msr	BASEPRI, r0
    d392:	f04f 0003 	mov.w	r0, #3
    d396:	df02      	svc	2
	lll_tx->handle = handle;
    d398:	2300      	movs	r3, #0
    d39a:	801b      	strh	r3, [r3, #0]
    d39c:	deff      	udf	#255	; 0xff
    d39e:	bf00      	nop
    d3a0:	20000588 	.word	0x20000588
    d3a4:	0001e678 	.word	0x0001e678
    d3a8:	0001e7fc 	.word	0x0001e7fc
    d3ac:	0001e1a4 	.word	0x0001e1a4

0000d3b0 <ull_conn_tx_ack>:
{
    d3b0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
    d3b2:	7953      	ldrb	r3, [r2, #5]
{
    d3b4:	4614      	mov	r4, r2
    d3b6:	4605      	mov	r5, r0
    d3b8:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
    d3ba:	b36b      	cbz	r3, d418 <ull_conn_tx_ack+0x68>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    d3bc:	7923      	ldrb	r3, [r4, #4]
    d3be:	f003 0203 	and.w	r2, r3, #3
    d3c2:	2a03      	cmp	r2, #3
    d3c4:	d00c      	beq.n	d3e0 <ull_conn_tx_ack+0x30>
	} else if (handle == LLL_HANDLE_INVALID) {
    d3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d3ca:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    d3cc:	bf04      	itt	eq
    d3ce:	f36f 0301 	bfceq	r3, #0, #2
    d3d2:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
    d3d4:	4621      	mov	r1, r4
    d3d6:	4628      	mov	r0, r5
}
    d3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    d3dc:	f7fc bd80 	b.w	9ee0 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
    d3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d3e4:	429d      	cmp	r5, r3
    d3e6:	d125      	bne.n	d434 <ull_conn_tx_ack+0x84>
		if (link->next == (void *)tx) {
    d3e8:	6833      	ldr	r3, [r6, #0]
    d3ea:	429c      	cmp	r4, r3
    d3ec:	d037      	beq.n	d45e <ull_conn_tx_ack+0xae>
		LL_ASSERT(!link->next);
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	d0f0      	beq.n	d3d4 <ull_conn_tx_ack+0x24>
    d3f2:	4a1e      	ldr	r2, [pc, #120]	; (d46c <ull_conn_tx_ack+0xbc>)
    d3f4:	491e      	ldr	r1, [pc, #120]	; (d470 <ull_conn_tx_ack+0xc0>)
    d3f6:	481f      	ldr	r0, [pc, #124]	; (d474 <ull_conn_tx_ack+0xc4>)
    d3f8:	f240 5392 	movw	r3, #1426	; 0x592
    d3fc:	f00c f91f 	bl	1963e <assert_print>
    d400:	4040      	eors	r0, r0
    d402:	f380 8811 	msr	BASEPRI, r0
    d406:	f04f 0003 	mov.w	r0, #3
    d40a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    d40c:	4621      	mov	r1, r4
    d40e:	4628      	mov	r0, r5
}
    d410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    d414:	f7fc bd64 	b.w	9ee0 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
    d418:	4a14      	ldr	r2, [pc, #80]	; (d46c <ull_conn_tx_ack+0xbc>)
    d41a:	4917      	ldr	r1, [pc, #92]	; (d478 <ull_conn_tx_ack+0xc8>)
    d41c:	4815      	ldr	r0, [pc, #84]	; (d474 <ull_conn_tx_ack+0xc4>)
    d41e:	f240 537d 	movw	r3, #1405	; 0x57d
    d422:	f00c f90c 	bl	1963e <assert_print>
    d426:	4040      	eors	r0, r0
    d428:	f380 8811 	msr	BASEPRI, r0
    d42c:	f04f 0003 	mov.w	r0, #3
    d430:	df02      	svc	2
    d432:	e7c3      	b.n	d3bc <ull_conn_tx_ack+0xc>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d434:	462a      	mov	r2, r5
    d436:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    d43a:	4810      	ldr	r0, [pc, #64]	; (d47c <ull_conn_tx_ack+0xcc>)
    d43c:	f7fa fc28 	bl	7c90 <mem_get>
			ull_cp_tx_ack(conn, tx);
    d440:	4621      	mov	r1, r4
    d442:	f001 fe7f 	bl	f144 <ull_cp_tx_ack>
		if (link->next == (void *)tx) {
    d446:	6833      	ldr	r3, [r6, #0]
    d448:	42a3      	cmp	r3, r4
    d44a:	d1d0      	bne.n	d3ee <ull_conn_tx_ack+0x3e>
	if (handle >= CONFIG_BT_MAX_CONN) {
    d44c:	b93d      	cbnz	r5, d45e <ull_conn_tx_ack+0xae>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    d44e:	480b      	ldr	r0, [pc, #44]	; (d47c <ull_conn_tx_ack+0xcc>)
    d450:	462a      	mov	r2, r5
    d452:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    d456:	f7fa fc1b 	bl	7c90 <mem_get>
	if (conn->lll.handle != handle) {
    d45a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    d45c:	b103      	cbz	r3, d460 <ull_conn_tx_ack+0xb0>
		return NULL;
    d45e:	2000      	movs	r0, #0
			ull_cp_release_tx(conn, tx);
    d460:	4621      	mov	r1, r4
}
    d462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			ull_cp_release_tx(conn, tx);
    d466:	f001 bc45 	b.w	ecf4 <ull_cp_release_tx>
    d46a:	bf00      	nop
    d46c:	0001e678 	.word	0x0001e678
    d470:	0001e810 	.word	0x0001e810
    d474:	0001e1a4 	.word	0x0001e1a4
    d478:	0001e804 	.word	0x0001e804
    d47c:	20000e08 	.word	0x20000e08

0000d480 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
    d480:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
    d484:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
	switch (lll->phy_tx_time) {
    d488:	f3c2 1202 	ubfx	r2, r2, #4, #3
    d48c:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
    d48e:	bf14      	ite	ne
    d490:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
    d492:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
    d494:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
	return max_tx_octets;
    d498:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
		max_tx_octets = (lll->dle.eff.max_tx_time >> 3) - 10;
    d49c:	bf14      	ite	ne
    d49e:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->dle.eff.max_tx_time >> 2) - 11;
    d4a0:	3b0b      	subeq	r3, #11
    d4a2:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
    d4a4:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
    d4a6:	bf44      	itt	mi
    d4a8:	3b04      	submi	r3, #4
    d4aa:	b29b      	uxthmi	r3, r3
}
    d4ac:	4298      	cmp	r0, r3
    d4ae:	bf28      	it	cs
    d4b0:	4618      	movcs	r0, r3
    d4b2:	4770      	bx	lr

0000d4b4 <ull_pdu_data_init>:
}
    d4b4:	4770      	bx	lr
    d4b6:	bf00      	nop

0000d4b8 <ull_conn_pause_rx_data>:
	conn->pause_rx_data = 1U;
    d4b8:	f890 3180 	ldrb.w	r3, [r0, #384]	; 0x180
    d4bc:	f043 0302 	orr.w	r3, r3, #2
    d4c0:	f880 3180 	strb.w	r3, [r0, #384]	; 0x180
}
    d4c4:	4770      	bx	lr
    d4c6:	bf00      	nop

0000d4c8 <ull_conn_resume_rx_data>:
	conn->pause_rx_data = 0U;
    d4c8:	f890 3180 	ldrb.w	r3, [r0, #384]	; 0x180
    d4cc:	f36f 0341 	bfc	r3, #1, #1
    d4d0:	f880 3180 	strb.w	r3, [r0, #384]	; 0x180
}
    d4d4:	4770      	bx	lr
    d4d6:	bf00      	nop

0000d4d8 <ull_conn_event_counter>:
    d4d8:	7802      	ldrb	r2, [r0, #0]
		event_counter = lll->event_counter - 1;
    d4da:	8e43      	ldrh	r3, [r0, #50]	; 0x32
	if (ull_ref_get(&conn->ull)) {
    d4dc:	b112      	cbz	r2, d4e4 <ull_conn_event_counter+0xc>
		event_counter = lll->event_counter - 1;
    d4de:	1e58      	subs	r0, r3, #1
    d4e0:	b280      	uxth	r0, r0
    d4e2:	4770      	bx	lr
		event_counter = lll->event_counter + lll->latency_prepare +
    d4e4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
    d4e6:	f8b0 2114 	ldrh.w	r2, [r0, #276]	; 0x114
    d4ea:	1858      	adds	r0, r3, r1
    d4ec:	4410      	add	r0, r2
    d4ee:	b280      	uxth	r0, r0
}
    d4f0:	4770      	bx	lr
    d4f2:	bf00      	nop

0000d4f4 <ull_conn_chan_map_set>:

}
#endif /* CONFIG_BT_PERIPHERAL */

void ull_conn_chan_map_set(struct ll_conn *conn, const uint8_t chm[5])
{
    d4f4:	b538      	push	{r3, r4, r5, lr}
	struct lll_conn *lll = &conn->lll;

	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
    d4f6:	f100 0534 	add.w	r5, r0, #52	; 0x34
{
    d4fa:	4604      	mov	r4, r0
	memcpy(lll->data_chan_map, chm, sizeof(lll->data_chan_map));
    d4fc:	2205      	movs	r2, #5
    d4fe:	4628      	mov	r0, r5
    d500:	f00c fb78 	bl	19bf4 <memcpy>
	lll->data_chan_count = util_ones_count_get(lll->data_chan_map, sizeof(lll->data_chan_map));
    d504:	2105      	movs	r1, #5
    d506:	4628      	mov	r0, r5
    d508:	f7fa fd70 	bl	7fec <util_ones_count_get>
    d50c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    d510:	f360 0305 	bfi	r3, r0, #0, #6
    d514:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
    d518:	bd38      	pop	{r3, r4, r5, pc}
    d51a:	bf00      	nop

0000d51c <ull_dle_max_time_get>:
	 * minimum value for time is 328 us
	 */
	rx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, rx_time);
	tx_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, tx_time);

	*max_rx_time = rx_time;
    d51c:	f44f 73a4 	mov.w	r3, #328	; 0x148
    d520:	800b      	strh	r3, [r1, #0]
	*max_tx_time = tx_time;
    d522:	8013      	strh	r3, [r2, #0]

void ull_dle_max_time_get(struct ll_conn *conn, uint16_t *max_rx_time,
				    uint16_t *max_tx_time)
{
	return dle_max_time_get(conn, max_rx_time, max_tx_time);
}
    d524:	4770      	bx	lr
    d526:	bf00      	nop

0000d528 <ull_dle_update_eff>:
/*
 * TODO: this probably can be optimised for ex. by creating a macro for the
 * ull_dle_update_eff function
 */
uint8_t ull_dle_update_eff(struct ll_conn *conn)
{
    d528:	b500      	push	{lr}
uint8_t ull_dle_update_eff_rx(struct ll_conn *conn)
{
	uint8_t dle_changed = 0U;

	const uint16_t eff_rx_octets =
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
    d52a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    d52e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
    d532:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
    d534:	428a      	cmp	r2, r1
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
    d536:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_rx_time =
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d53a:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
    d53e:	bf28      	it	cs
    d540:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d542:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d546:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
	const uint16_t eff_rx_octets =
    d54a:	2a1b      	cmp	r2, #27
    d54c:	bf38      	it	cc
    d54e:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d550:	2804      	cmp	r0, #4
    d552:	bf14      	ite	ne
    d554:	f44f 70a4 	movne.w	r0, #328	; 0x148
    d558:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d55c:	4561      	cmp	r1, ip
    d55e:	bf28      	it	cs
    d560:	4661      	movcs	r1, ip
	const uint16_t eff_rx_time =
    d562:	4281      	cmp	r1, r0
		    min_eff_rx_time);

	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d564:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
    d568:	bf38      	it	cc
    d56a:	4601      	movcc	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d56c:	458c      	cmp	ip, r1
	}
#else
	conn->lll.dle.eff.max_rx_time = PDU_DC_MAX_US(eff_rx_octets, PHY_1M);
#endif

	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d56e:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d572:	d044      	beq.n	d5fe <ull_dle_update_eff+0xd6>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d574:	4290      	cmp	r0, r2
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
    d576:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d57a:	d001      	beq.n	d580 <ull_dle_update_eff+0x58>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
    d57c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		dle_changed = 1U;
	}
#if defined(CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE)
	/* we delay the update of event length to after the DLE procedure is finishede */
	if (dle_changed) {
		conn->lll.evt_len_upd_delayed = 1;
    d580:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    d584:	f042 0202 	orr.w	r2, r2, #2
    d588:	2001      	movs	r0, #1
    d58a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1

{
	uint8_t dle_changed = 0U;

	const uint16_t eff_tx_octets =
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
    d58e:	f8b3 c058 	ldrh.w	ip, [r3, #88]	; 0x58
    d592:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
		    PDU_DC_PAYLOAD_SIZE_MIN);

#if defined(CONFIG_BT_CTLR_PHY)
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
    d596:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;

	const uint16_t eff_tx_time =
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    d59a:	f8b3 e05c 	ldrh.w	lr, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
    d59e:	4562      	cmp	r2, ip
    d5a0:	bf28      	it	cs
    d5a2:	4662      	movcs	r2, ip
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d5a4:	f001 0107 	and.w	r1, r1, #7
	const uint16_t eff_tx_octets =
    d5a8:	2a1b      	cmp	r2, #27
    d5aa:	bf38      	it	cc
    d5ac:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d5ae:	2904      	cmp	r1, #4
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    d5b0:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d5b4:	bf14      	ite	ne
    d5b6:	f44f 7ca4 	movne.w	ip, #328	; 0x148
    d5ba:	f44f 6c29 	moveq.w	ip, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    d5be:	4571      	cmp	r1, lr
    d5c0:	bf28      	it	cs
    d5c2:	4671      	movcs	r1, lr
	const uint16_t eff_tx_time =
    d5c4:	4561      	cmp	r1, ip
		    min_eff_tx_time);

	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    d5c6:	f8b3 e06c 	ldrh.w	lr, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
    d5ca:	bf38      	it	cc
    d5cc:	4661      	movcc	r1, ip
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    d5ce:	458e      	cmp	lr, r1
	}
#else
	conn->lll.dle.eff.max_tx_time = PDU_DC_MAX_US(eff_tx_octets, PHY_1M);
#endif

	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d5d0:	f8b3 c068 	ldrh.w	ip, [r3, #104]	; 0x68
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    d5d4:	d017      	beq.n	d606 <ull_dle_update_eff+0xde>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d5d6:	4562      	cmp	r2, ip
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
    d5d8:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d5dc:	d001      	beq.n	d5e2 <ull_dle_update_eff+0xba>
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
    d5de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#if defined(CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE)
	if (dle_changed) {
		conn->lll.evt_len_upd = 1U;
	}
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
	conn->lll.evt_len_upd_delayed = 0;
    d5e2:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    d5e6:	f36f 0241 	bfc	r2, #1, #1
    d5ea:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		conn->lll.evt_len_upd = 1U;
    d5ee:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    d5f2:	2001      	movs	r0, #1
    d5f4:	4302      	orrs	r2, r0
    d5f6:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
}
    d5fa:	f85d fb04 	ldr.w	pc, [sp], #4
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d5fe:	4290      	cmp	r0, r2
    d600:	d1bc      	bne.n	d57c <ull_dle_update_eff+0x54>
    d602:	2000      	movs	r0, #0
    d604:	e7c3      	b.n	d58e <ull_dle_update_eff+0x66>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d606:	4562      	cmp	r2, ip
    d608:	d1e9      	bne.n	d5de <ull_dle_update_eff+0xb6>
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
    d60a:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
    d60e:	ea41 0251 	orr.w	r2, r1, r1, lsr #1
    d612:	f002 0201 	and.w	r2, r2, #1
    d616:	f021 0103 	bic.w	r1, r1, #3
    d61a:	430a      	orrs	r2, r1
    d61c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	if (dle_changed) {
    d620:	2800      	cmp	r0, #0
    d622:	d1e4      	bne.n	d5ee <ull_dle_update_eff+0xc6>
}
    d624:	f85d fb04 	ldr.w	pc, [sp], #4

0000d628 <ull_dle_update_eff_rx>:
		MAX(MIN(conn->lll.dle.local.max_rx_octets, conn->lll.dle.remote.max_tx_octets),
    d628:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
    d62c:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
{
    d630:	4603      	mov	r3, r0
	const uint16_t eff_rx_octets =
    d632:	428a      	cmp	r2, r1
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
    d634:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d638:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	const uint16_t eff_rx_octets =
    d63c:	bf28      	it	cs
    d63e:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d640:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d644:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
	const uint16_t eff_rx_octets =
    d648:	2a1b      	cmp	r2, #27
    d64a:	bf38      	it	cc
    d64c:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d64e:	2804      	cmp	r0, #4
    d650:	bf14      	ite	ne
    d652:	f44f 70a4 	movne.w	r0, #328	; 0x148
    d656:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d65a:	4561      	cmp	r1, ip
    d65c:	bf28      	it	cs
    d65e:	4661      	movcs	r1, ip
	const uint16_t eff_rx_time =
    d660:	4281      	cmp	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d662:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	; 0x6e
	const uint16_t eff_rx_time =
    d666:	bf38      	it	cc
    d668:	4601      	movcc	r1, r0
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d66a:	458c      	cmp	ip, r1
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d66c:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d670:	d00d      	beq.n	d68e <ull_dle_update_eff_rx+0x66>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d672:	4290      	cmp	r0, r2
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
    d674:	f8a3 106e 	strh.w	r1, [r3, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d678:	d001      	beq.n	d67e <ull_dle_update_eff_rx+0x56>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
    d67a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		conn->lll.evt_len_upd_delayed = 1;
    d67e:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    d682:	f042 0202 	orr.w	r2, r2, #2
    d686:	2001      	movs	r0, #1
    d688:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
    d68c:	4770      	bx	lr
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d68e:	4290      	cmp	r0, r2
    d690:	d1f3      	bne.n	d67a <ull_dle_update_eff_rx+0x52>
    d692:	2000      	movs	r0, #0
}
    d694:	4770      	bx	lr
    d696:	bf00      	nop

0000d698 <ull_dle_update_eff_tx>:
		MAX(MIN(conn->lll.dle.local.max_tx_octets, conn->lll.dle.remote.max_rx_octets),
    d698:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    d69c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
{
    d6a0:	4603      	mov	r3, r0
	const uint16_t eff_tx_octets =
    d6a2:	428a      	cmp	r2, r1
	unsigned int min_eff_tx_time = (conn->lll.phy_tx == PHY_CODED) ?
    d6a4:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    d6a8:	f8b3 c05c 	ldrh.w	ip, [r3, #92]	; 0x5c
	const uint16_t eff_tx_octets =
    d6ac:	bf28      	it	cs
    d6ae:	460a      	movcs	r2, r1
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d6b0:	f000 0007 	and.w	r0, r0, #7
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    d6b4:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
	const uint16_t eff_tx_octets =
    d6b8:	2a1b      	cmp	r2, #27
    d6ba:	bf38      	it	cc
    d6bc:	221b      	movcc	r2, #27
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d6be:	2804      	cmp	r0, #4
    d6c0:	bf14      	ite	ne
    d6c2:	f44f 70a4 	movne.w	r0, #328	; 0x148
    d6c6:	f44f 6029 	moveq.w	r0, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_tx_time, conn->lll.dle.remote.max_rx_time),
    d6ca:	4561      	cmp	r1, ip
    d6cc:	bf28      	it	cs
    d6ce:	4661      	movcs	r1, ip
	const uint16_t eff_tx_time =
    d6d0:	4281      	cmp	r1, r0
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    d6d2:	f8b3 c06c 	ldrh.w	ip, [r3, #108]	; 0x6c
	const uint16_t eff_tx_time =
    d6d6:	bf38      	it	cc
    d6d8:	4601      	movcc	r1, r0
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    d6da:	458c      	cmp	ip, r1
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d6dc:	f8b3 0068 	ldrh.w	r0, [r3, #104]	; 0x68
	if (eff_tx_time != conn->lll.dle.eff.max_tx_time) {
    d6e0:	d014      	beq.n	d70c <ull_dle_update_eff_tx+0x74>
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d6e2:	4282      	cmp	r2, r0
		conn->lll.dle.eff.max_tx_time = eff_tx_time;
    d6e4:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d6e8:	d001      	beq.n	d6ee <ull_dle_update_eff_tx+0x56>
		conn->lll.dle.eff.max_tx_octets = eff_tx_octets;
    d6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
    d6ee:	f04f 0c01 	mov.w	ip, #1
    d6f2:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
    d6f6:	4660      	mov	r0, ip
    d6f8:	f3c1 0240 	ubfx	r2, r1, #1, #1
    d6fc:	ea42 020c 	orr.w	r2, r2, ip
    d700:	f021 0103 	bic.w	r1, r1, #3
    d704:	430a      	orrs	r2, r1
    d706:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
#endif

	return dle_changed;
}
    d70a:	4770      	bx	lr
	if (eff_tx_octets != conn->lll.dle.eff.max_tx_octets) {
    d70c:	4282      	cmp	r2, r0
    d70e:	d1ec      	bne.n	d6ea <ull_dle_update_eff_tx+0x52>
	conn->lll.evt_len_upd |= conn->lll.evt_len_upd_delayed;
    d710:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
    d714:	2000      	movs	r0, #0
    d716:	f001 0c01 	and.w	ip, r1, #1
    d71a:	e7ed      	b.n	d6f8 <ull_dle_update_eff_tx+0x60>

0000d71c <ull_dle_local_tx_update>:
	uint16_t tx_time_max =
			PDU_DC_MAX_US(LL_LENGTH_OCTETS_TX_MAX, PHY_1M);
#endif /* !CONFIG_BT_CTLR_PHY_CODED */

	/* trim to supported values */
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
    d71c:	291b      	cmp	r1, #27
    d71e:	bf28      	it	cs
    d720:	211b      	movcs	r1, #27
		*tx_octets = LL_LENGTH_OCTETS_TX_MAX;
	}

	if (*tx_time > tx_time_max) {
    d722:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
	*max_tx_time = tx_time;
    d726:	4b06      	ldr	r3, [pc, #24]	; (d740 <ull_dle_local_tx_update+0x24>)
void ull_dle_local_tx_update(struct ll_conn *conn, uint16_t tx_octets, uint16_t tx_time)
{
	/* Trim to supported values */
	ull_len_data_length_trim(&tx_octets, &tx_time);

	conn->lll.dle.default_tx_octets = tx_octets;
    d728:	f8a0 1072 	strh.w	r1, [r0, #114]	; 0x72
	if (*tx_time > tx_time_max) {
    d72c:	bf28      	it	cs
    d72e:	f44f 72a4 	movcs.w	r2, #328	; 0x148

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.default_tx_time = tx_time;
    d732:	f8a0 2070 	strh.w	r2, [r0, #112]	; 0x70
	*max_tx_time = tx_time;
    d736:	65c3      	str	r3, [r0, #92]	; 0x5c
#endif /* CONFIG_BT_CTLR_PHY */

	dle_max_time_get(conn, &conn->lll.dle.local.max_rx_time, &conn->lll.dle.local.max_tx_time);
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
    d738:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
}
    d73c:	4770      	bx	lr
    d73e:	bf00      	nop
    d740:	01480148 	.word	0x01480148

0000d744 <ull_dle_init>:

void ull_dle_init(struct ll_conn *conn, uint8_t phy)
{
    d744:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_CTLR_PHY)
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    d746:	f001 0503 	and.w	r5, r1, #3
    d74a:	3528      	adds	r5, #40	; 0x28
{
    d74c:	4604      	mov	r4, r0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    d74e:	f3c1 0340 	ubfx	r3, r1, #1, #1
	const uint16_t max_time_max = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, phy);
#endif /* CONFIG_BT_CTLR_PHY */

	/* Clear DLE data set */
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
    d752:	221e      	movs	r2, #30
    d754:	2100      	movs	r1, #0
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    d756:	00ed      	lsls	r5, r5, #3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
    d758:	3058      	adds	r0, #88	; 0x58
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    d75a:	40dd      	lsrs	r5, r3
	memset(&conn->lll.dle, 0, sizeof(conn->lll.dle));
    d75c:	f00c fa55 	bl	19c0a <memset>
	/* See BT. 5.2 Spec - Vol 6, Part B, Sect 4.5.10
	 * Default to locally max supported rx/tx length/time
	 */
	ull_dle_local_tx_update(conn, default_tx_octets, default_tx_time);
    d760:	4a31      	ldr	r2, [pc, #196]	; (d828 <ull_dle_init+0xe4>)
    d762:	4b32      	ldr	r3, [pc, #200]	; (d82c <ull_dle_init+0xe8>)
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
    d764:	8812      	ldrh	r2, [r2, #0]
	if (*tx_time > tx_time_max) {
    d766:	881b      	ldrh	r3, [r3, #0]
	if (*tx_octets > LL_LENGTH_OCTETS_TX_MAX) {
    d768:	2a1b      	cmp	r2, #27
    d76a:	bf28      	it	cs
    d76c:	221b      	movcs	r2, #27
	if (*tx_time > tx_time_max) {
    d76e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    d772:	bf28      	it	cs
    d774:	f44f 73a4 	movcs.w	r3, #328	; 0x148
	conn->lll.dle.default_tx_time = tx_time;
    d778:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
	*max_tx_time = tx_time;
    d77c:	f44f 73a4 	mov.w	r3, #328	; 0x148
    d780:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
	unsigned int min_eff_rx_time = (conn->lll.phy_rx == PHY_CODED) ?
    d784:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
	conn->lll.dle.default_tx_octets = tx_octets;
    d788:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
			PDU_DC_PAYLOAD_TIME_MIN_CODED : PDU_DC_PAYLOAD_TIME_MIN;
    d78c:	f003 0307 	and.w	r3, r3, #7
    d790:	2b04      	cmp	r3, #4
    d792:	bf14      	ite	ne
    d794:	f44f 73a4 	movne.w	r3, #328	; 0x148
    d798:	f44f 6329 	moveq.w	r3, #2704	; 0xa90
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d79c:	42ab      	cmp	r3, r5

	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    d79e:	f04f 011b 	mov.w	r1, #27
		MAX(MIN(conn->lll.dle.local.max_rx_time, conn->lll.dle.remote.max_tx_time),
    d7a2:	bf38      	it	cc
    d7a4:	462b      	movcc	r3, r5
	conn->lll.dle.local.max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    d7a6:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d7aa:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
	conn->lll.dle.local.max_tx_octets = conn->lll.dle.default_tx_octets;
    d7ae:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
	const uint16_t eff_rx_time =
    d7b2:	b29b      	uxth	r3, r3
	const uint16_t max_time_min = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, phy);
    d7b4:	b2ae      	uxth	r6, r5
#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.local.max_rx_time = max_time_max;
#endif /* CONFIG_BT_CTLR_PHY */

	/* Default to minimum rx/tx data length/time */
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d7b6:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d7ba:	4299      	cmp	r1, r3
	conn->lll.dle.remote.max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    d7bc:	6622      	str	r2, [r4, #96]	; 0x60
	conn->lll.dle.local.max_rx_time = max_time_max;
    d7be:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d7c2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
	conn->lll.dle.remote.max_rx_octets = PDU_DC_PAYLOAD_SIZE_MIN;

#if defined(CONFIG_BT_CTLR_PHY)
	conn->lll.dle.remote.max_tx_time = max_time_min;
    d7c6:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
	conn->lll.dle.remote.max_rx_time = max_time_min;
    d7ca:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	if (eff_rx_time != conn->lll.dle.eff.max_rx_time) {
    d7ce:	d01c      	beq.n	d80a <ull_dle_init+0xc6>
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d7d0:	2a1b      	cmp	r2, #27
		conn->lll.dle.eff.max_rx_time = eff_rx_time;
    d7d2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d7d6:	d002      	beq.n	d7de <ull_dle_init+0x9a>
		conn->lll.dle.eff.max_rx_octets = eff_rx_octets;
    d7d8:	231b      	movs	r3, #27
    d7da:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		conn->lll.evt_len_upd_delayed = 1;
    d7de:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
    d7e2:	f043 0302 	orr.w	r3, r3, #2
	dle_changed |= ull_dle_update_eff_tx(conn);
    d7e6:	4620      	mov	r0, r4
		conn->lll.evt_len_upd_delayed = 1;
    d7e8:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	dle_changed |= ull_dle_update_eff_tx(conn);
    d7ec:	f7ff ff54 	bl	d698 <ull_dle_update_eff_tx>
		conn->lll.evt_len_upd = 1U;
    d7f0:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1

	/* Check whether the controller should perform a data length update after
	 * connection is established
	 */
#if defined(CONFIG_BT_CTLR_PHY)
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
    d7f4:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
		conn->lll.evt_len_upd = 1U;
    d7f8:	f043 0301 	orr.w	r3, r3, #1
    d7fc:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
    d800:	d00d      	beq.n	d81e <ull_dle_init+0xda>
	     conn->lll.dle.local.max_tx_time != max_time_min)) {
		conn->lll.dle.update = 1;
    d802:	2301      	movs	r3, #1
    d804:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
		    conn->lll.dle.local.max_rx_octets != PDU_DC_PAYLOAD_SIZE_MIN) {
			conn->lll.dle.update = 1;
		}
	}
}
    d808:	bd70      	pop	{r4, r5, r6, pc}
	if (eff_rx_octets != conn->lll.dle.eff.max_rx_octets) {
    d80a:	2a1b      	cmp	r2, #27
    d80c:	d1e4      	bne.n	d7d8 <ull_dle_init+0x94>
	dle_changed |= ull_dle_update_eff_tx(conn);
    d80e:	4620      	mov	r0, r4
    d810:	f7ff ff42 	bl	d698 <ull_dle_update_eff_tx>
	if (dle_changed) {
    d814:	2800      	cmp	r0, #0
    d816:	d1eb      	bne.n	d7f0 <ull_dle_init+0xac>
	if ((conn->lll.dle.local.max_rx_time != max_time_min ||
    d818:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
    d81c:	d1f1      	bne.n	d802 <ull_dle_init+0xbe>
		if (conn->lll.dle.local.max_tx_octets != PDU_DC_PAYLOAD_SIZE_MIN ||
    d81e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    d820:	f1b3 1f1b 	cmp.w	r3, #1769499	; 0x1b001b
    d824:	d1ed      	bne.n	d802 <ull_dle_init+0xbe>
}
    d826:	bd70      	pop	{r4, r5, r6, pc}
    d828:	200026f8 	.word	0x200026f8
    d82c:	200026f6 	.word	0x200026f6

0000d830 <llcp_rp_enc_tx>:
/*
 * LLCP Remote Procedure Encryption FSM
 */

static struct node_tx *llcp_rp_enc_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t opcode)
{
    d830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d832:	4606      	mov	r6, r0
    d834:	460f      	mov	r7, r1
    d836:	4615      	mov	r5, r2
	struct node_tx *tx;
	struct pdu_data *pdu;

	/* Allocate tx node */
	tx = llcp_tx_alloc(conn, ctx);
    d838:	f001 f91c 	bl	ea74 <llcp_tx_alloc>
	LL_ASSERT(tx);
    d83c:	4604      	mov	r4, r0
    d83e:	2800      	cmp	r0, #0
    d840:	d039      	beq.n	d8b6 <llcp_rp_enc_tx+0x86>

	pdu = (struct pdu_data *)tx->pdu;

	/* Encode LL Control PDU */
	switch (opcode) {
    d842:	1f2a      	subs	r2, r5, #4
	pdu = (struct pdu_data *)tx->pdu;
    d844:	1d20      	adds	r0, r4, #4
	switch (opcode) {
    d846:	2a09      	cmp	r2, #9
    d848:	d806      	bhi.n	d858 <llcp_rp_enc_tx+0x28>
    d84a:	e8df f002 	tbb	[pc, r2]
    d84e:	201d      	.short	0x201d
    d850:	05050523 	.word	0x05050523
    d854:	29052605 	.word	0x29052605
		} else {
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
		}
		break;
	default:
		LL_ASSERT(0);
    d858:	4a20      	ldr	r2, [pc, #128]	; (d8dc <llcp_rp_enc_tx+0xac>)
    d85a:	4921      	ldr	r1, [pc, #132]	; (d8e0 <llcp_rp_enc_tx+0xb0>)
    d85c:	4821      	ldr	r0, [pc, #132]	; (d8e4 <llcp_rp_enc_tx+0xb4>)
    d85e:	f240 23cb 	movw	r3, #715	; 0x2cb
    d862:	f00b feec 	bl	1963e <assert_print>
    d866:	4040      	eors	r0, r0
    d868:	f380 8811 	msr	BASEPRI, r0
    d86c:	f04f 0003 	mov.w	r0, #3
    d870:	df02      	svc	2
	}

	ctx->tx_opcode = pdu->llctrl.opcode;
    d872:	79e3      	ldrb	r3, [r4, #7]
    d874:	737b      	strb	r3, [r7, #13]

	/* Enqueue LL Control PDU towards LLL */
	llcp_tx_enqueue(conn, tx);
    d876:	4621      	mov	r1, r4
    d878:	4630      	mov	r0, r6
    d87a:	f001 f911 	bl	eaa0 <llcp_tx_enqueue>

	/* Restart procedure response timeout timer */
	llcp_rr_prt_restart(conn);
    d87e:	4630      	mov	r0, r6
    d880:	f003 ff56 	bl	11730 <llcp_rr_prt_restart>

	return tx;
}
    d884:	4620      	mov	r0, r4
    d886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_enc_rsp(pdu);
    d888:	f002 fe54 	bl	10534 <llcp_pdu_encode_enc_rsp>
		break;
    d88c:	e7f1      	b.n	d872 <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_req(pdu);
    d88e:	f002 fe69 	bl	10564 <llcp_pdu_encode_start_enc_req>
		break;
    d892:	e7ee      	b.n	d872 <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_start_enc_rsp(pdu);
    d894:	f002 fe70 	bl	10578 <llcp_pdu_encode_start_enc_rsp>
		break;
    d898:	e7eb      	b.n	d872 <llcp_rp_enc_tx+0x42>
		llcp_pdu_encode_pause_enc_rsp(pdu);
    d89a:	f002 fe77 	bl	1058c <llcp_pdu_encode_pause_enc_rsp>
		break;
    d89e:	e7e8      	b.n	d872 <llcp_rp_enc_tx+0x42>
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
    d8a0:	f896 3120 	ldrb.w	r3, [r6, #288]	; 0x120
    d8a4:	b11b      	cbz	r3, d8ae <llcp_rp_enc_tx+0x7e>
}

static inline bool feature_ext_rej_ind(struct ll_conn *conn)
{
#if defined(CONFIG_BT_CTLR_EXT_REJ_IND)
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
    d8a6:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
    d8aa:	075b      	lsls	r3, r3, #29
    d8ac:	d411      	bmi.n	d8d2 <llcp_rp_enc_tx+0xa2>
			llcp_pdu_encode_reject_ind(pdu, BT_HCI_ERR_PIN_OR_KEY_MISSING);
    d8ae:	2106      	movs	r1, #6
    d8b0:	f002 fe76 	bl	105a0 <llcp_pdu_encode_reject_ind>
    d8b4:	e7dd      	b.n	d872 <llcp_rp_enc_tx+0x42>
	LL_ASSERT(tx);
    d8b6:	4a09      	ldr	r2, [pc, #36]	; (d8dc <llcp_rp_enc_tx+0xac>)
    d8b8:	490b      	ldr	r1, [pc, #44]	; (d8e8 <llcp_rp_enc_tx+0xb8>)
    d8ba:	480a      	ldr	r0, [pc, #40]	; (d8e4 <llcp_rp_enc_tx+0xb4>)
    d8bc:	f44f 732c 	mov.w	r3, #688	; 0x2b0
    d8c0:	f00b febd 	bl	1963e <assert_print>
    d8c4:	4040      	eors	r0, r0
    d8c6:	f380 8811 	msr	BASEPRI, r0
    d8ca:	f04f 0003 	mov.w	r0, #3
    d8ce:	df02      	svc	2
    d8d0:	e7b7      	b.n	d842 <llcp_rp_enc_tx+0x12>
			llcp_pdu_encode_reject_ext_ind(pdu, PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d8d2:	2206      	movs	r2, #6
    d8d4:	2103      	movs	r1, #3
    d8d6:	f002 fe6f 	bl	105b8 <llcp_pdu_encode_reject_ext_ind>
    d8da:	e7ca      	b.n	d872 <llcp_rp_enc_tx+0x42>
    d8dc:	0001e830 	.word	0x0001e830
    d8e0:	0001e220 	.word	0x0001e220
    d8e4:	0001e1a4 	.word	0x0001e1a4
    d8e8:	0001e800 	.word	0x0001e800

0000d8ec <rp_enc_send_enc_rsp.constprop.0>:
	 * interacts with data outside of LLCP?
	 */
	memcpy(&conn->lll.ccm_rx.iv[4], pdu->llctrl.enc_rsp.ivs, sizeof(pdu->llctrl.enc_rsp.ivs));
}

static void rp_enc_send_enc_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8ee:	4605      	mov	r5, r0
    d8f0:	460c      	mov	r4, r1
				void *param)
{
	struct node_tx *tx;

	if (!llcp_tx_alloc_peek(conn, ctx)) {
    d8f2:	f001 f8b7 	bl	ea64 <llcp_tx_alloc_peek>
    d8f6:	b928      	cbnz	r0, d904 <rp_enc_send_enc_rsp.constprop.0+0x18>
		/* Mark RX node to not release, needed for LTK NTF */
		llcp_rx_node_retain(ctx);
    d8f8:	4620      	mov	r0, r4
    d8fa:	f001 f8f5 	bl	eae8 <llcp_rx_node_retain>
		ctx->state = RP_ENC_STATE_WAIT_TX_ENC_RSP;
    d8fe:	2302      	movs	r3, #2
    d900:	72a3      	strb	r3, [r4, #10]
		rp_enc_store_s(conn, ctx, (struct pdu_data *)tx->pdu);

		rp_enc_ntf_ltk(conn, ctx);
		ctx->state = RP_ENC_STATE_WAIT_LTK_REPLY;
	}
}
    d902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
    d904:	2204      	movs	r2, #4
    d906:	4621      	mov	r1, r4
    d908:	4628      	mov	r0, r5
    d90a:	f7ff ff91 	bl	d830 <llcp_rp_enc_tx>
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
    d90e:	2208      	movs	r2, #8
    d910:	1881      	adds	r1, r0, r2
		tx = llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_ENC_RSP);
    d912:	4606      	mov	r6, r0
	memcpy(&ctx->data.enc.skds, pdu->llctrl.enc_rsp.skds, sizeof(pdu->llctrl.enc_rsp.skds));
    d914:	f104 004b 	add.w	r0, r4, #75	; 0x4b
    d918:	f00c f96c 	bl	19bf4 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4], pdu->llctrl.enc_rsp.ivs, sizeof(pdu->llctrl.enc_rsp.ivs));
    d91c:	f106 0110 	add.w	r1, r6, #16
    d920:	2204      	movs	r2, #4
    d922:	f105 00ac 	add.w	r0, r5, #172	; 0xac
    d926:	f00c f965 	bl	19bf4 <memcpy>
	ntf = ctx->node_ref.rx;
    d92a:	69e6      	ldr	r6, [r4, #28]
	ctx->node_ref.rx = NULL;
    d92c:	2300      	movs	r3, #0
    d92e:	61e3      	str	r3, [r4, #28]
	LL_ASSERT(ntf);
    d930:	b1a6      	cbz	r6, d95c <rp_enc_send_enc_rsp.constprop.0+0x70>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    d932:	2303      	movs	r3, #3
	piggy_back = (ntf->hdr.type != NODE_RX_TYPE_RETAIN);
    d934:	7937      	ldrb	r7, [r6, #4]
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    d936:	7133      	strb	r3, [r6, #4]
	ntf->hdr.handle = conn->lll.handle;
    d938:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    d93a:	80f3      	strh	r3, [r6, #6]
	llcp_ntf_encode_enc_req(ctx, pdu);
    d93c:	f106 011c 	add.w	r1, r6, #28
    d940:	4620      	mov	r0, r4
    d942:	f002 fddf 	bl	10504 <llcp_ntf_encode_enc_req>
	if (!piggy_back) {
    d946:	2f2c      	cmp	r7, #44	; 0x2c
    d948:	d002      	beq.n	d950 <rp_enc_send_enc_rsp.constprop.0+0x64>
		ctx->state = RP_ENC_STATE_WAIT_LTK_REPLY;
    d94a:	2303      	movs	r3, #3
		ctx->state = RP_ENC_STATE_WAIT_TX_ENC_RSP;
    d94c:	72a3      	strb	r3, [r4, #10]
}
    d94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ll_rx_put_sched(ntf->hdr.link, ntf);
    d950:	6830      	ldr	r0, [r6, #0]
    d952:	4631      	mov	r1, r6
    d954:	f7fc fa78 	bl	9e48 <ll_rx_put_sched>
		ctx->state = RP_ENC_STATE_WAIT_LTK_REPLY;
    d958:	2303      	movs	r3, #3
    d95a:	e7f7      	b.n	d94c <rp_enc_send_enc_rsp.constprop.0+0x60>
	LL_ASSERT(ntf);
    d95c:	4a06      	ldr	r2, [pc, #24]	; (d978 <rp_enc_send_enc_rsp.constprop.0+0x8c>)
    d95e:	4907      	ldr	r1, [pc, #28]	; (d97c <rp_enc_send_enc_rsp.constprop.0+0x90>)
    d960:	4807      	ldr	r0, [pc, #28]	; (d980 <rp_enc_send_enc_rsp.constprop.0+0x94>)
    d962:	f240 23e2 	movw	r3, #738	; 0x2e2
    d966:	f00b fe6a 	bl	1963e <assert_print>
    d96a:	4040      	eors	r0, r0
    d96c:	f380 8811 	msr	BASEPRI, r0
    d970:	f04f 0003 	mov.w	r0, #3
    d974:	df02      	svc	2
    d976:	e7dc      	b.n	d932 <rp_enc_send_enc_rsp.constprop.0+0x46>
    d978:	0001e830 	.word	0x0001e830
    d97c:	0001e874 	.word	0x0001e874
    d980:	0001e1a4 	.word	0x0001e1a4

0000d984 <rp_enc_send_start_enc_req.part.0>:

static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    d984:	b570      	push	{r4, r5, r6, lr}
    d986:	460d      	mov	r5, r1
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
    d988:	f100 068f 	add.w	r6, r0, #143	; 0x8f
static void rp_enc_send_start_enc_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
    d98c:	4604      	mov	r4, r0
	ecb_encrypt(&ctx->data.enc.ltk[0], &ctx->data.enc.skd[0], NULL, &conn->lll.ccm_rx.key[0]);
    d98e:	4633      	mov	r3, r6
    d990:	2200      	movs	r2, #0
    d992:	3143      	adds	r1, #67	; 0x43
    d994:	f105 0033 	add.w	r0, r5, #51	; 0x33
    d998:	f006 f986 	bl	13ca8 <ecb_encrypt>
	memcpy(&conn->lll.ccm_tx.key[0], &conn->lll.ccm_rx.key[0], sizeof(conn->lll.ccm_tx.key));
    d99c:	2210      	movs	r2, #16
    d99e:	4631      	mov	r1, r6
    d9a0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    d9a4:	f00c f926 	bl	19bf4 <memcpy>
	memcpy(&conn->lll.ccm_tx.iv[0], &conn->lll.ccm_rx.iv[0], sizeof(conn->lll.ccm_tx.iv));
    d9a8:	2208      	movs	r2, #8
    d9aa:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
    d9ae:	f104 00c9 	add.w	r0, r4, #201	; 0xc9
    d9b2:	f00c f91f 	bl	19bf4 <memcpy>
	conn->lll.ccm_tx.counter = 0U;
    d9b6:	2000      	movs	r0, #0
    d9b8:	2100      	movs	r1, #0
		conn->lll.ccm_rx.direction = 1U;
    d9ba:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
	conn->lll.ccm_tx.counter = 0U;
    d9be:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
		conn->lll.ccm_tx.direction = 0U;
    d9c2:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
	conn->lll.ccm_rx.counter = 0U;
    d9c6:	2300      	movs	r3, #0
		conn->lll.ccm_tx.direction = 0U;
    d9c8:	f363 0100 	bfi	r1, r3, #0, #1
	conn->lll.ccm_rx.counter = 0U;
    d9cc:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
    d9d0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    d9d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    d9d8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
    d9dc:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
    d9e0:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    d9e4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    d9e8:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		conn->lll.ccm_rx.direction = 1U;
    d9ec:	f042 0301 	orr.w	r3, r2, #1
		conn->lll.ccm_tx.direction = 0U;
    d9f0:	f884 10c8 	strb.w	r1, [r4, #200]	; 0xc8
		conn->lll.ccm_rx.direction = 1U;
    d9f4:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
{
	if (!llcp_tx_alloc_peek(conn, ctx)) {
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
	} else {
		enc_setup_lll(conn, ctx, BT_HCI_ROLE_PERIPHERAL);
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_REQ);
    d9f8:	2205      	movs	r2, #5
    d9fa:	4629      	mov	r1, r5
    d9fc:	4620      	mov	r0, r4
    d9fe:	f7ff ff17 	bl	d830 <llcp_rp_enc_tx>
		/* Wait for the LL_START_ENC_RSP */
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
		ctx->state = RP_ENC_STATE_WAIT_RX_START_ENC_RSP;
    da02:	f240 6306 	movw	r3, #1542	; 0x606
    da06:	816b      	strh	r3, [r5, #10]

		/* Rx Decryption enabled */
		conn->lll.enc_rx = 1U;
    da08:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    da0c:	f043 0308 	orr.w	r3, r3, #8
    da10:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}
}
    da14:	bd70      	pop	{r4, r5, r6, pc}
    da16:	bf00      	nop

0000da18 <rp_enc_execute_fsm>:
		break;
	}
}

static void rp_enc_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
    da18:	b570      	push	{r4, r5, r6, lr}
    da1a:	460c      	mov	r4, r1
	switch (ctx->state) {
    da1c:	7a89      	ldrb	r1, [r1, #10]
{
    da1e:	b082      	sub	sp, #8
    da20:	4605      	mov	r5, r0
	switch (ctx->state) {
    da22:	290b      	cmp	r1, #11
    da24:	f200 810c 	bhi.w	dc40 <rp_enc_execute_fsm+0x228>
    da28:	e8df f001 	tbb	[pc, r1]
    da2c:	231a1612 	.word	0x231a1612
    da30:	3b636030 	.word	0x3b636030
    da34:	065d4b46 	.word	0x065d4b46
	switch (evt) {
    da38:	2a08      	cmp	r2, #8
    da3a:	d10f      	bne.n	da5c <rp_enc_execute_fsm+0x44>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
    da3c:	f240 3301 	movw	r3, #769	; 0x301
    da40:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_tx = 0U;
    da42:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    da46:	f36f 1304 	bfc	r3, #4, #1
    da4a:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
		break;
    da4e:	e005      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    da50:	b922      	cbnz	r2, da5c <rp_enc_execute_fsm+0x44>
		ctx->state = RP_ENC_STATE_WAIT_RX_ENC_REQ;
    da52:	2301      	movs	r3, #1
    da54:	72a3      	strb	r3, [r4, #10]
		break;
    da56:	e001      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    da58:	2a01      	cmp	r2, #1
    da5a:	d07d      	beq.n	db58 <rp_enc_execute_fsm+0x140>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    da5c:	b002      	add	sp, #8
    da5e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    da60:	2a00      	cmp	r2, #0
    da62:	d1fb      	bne.n	da5c <rp_enc_execute_fsm+0x44>
		rp_enc_send_enc_rsp(conn, ctx, evt, param);
    da64:	4621      	mov	r1, r4
    da66:	4628      	mov	r0, r5
}
    da68:	b002      	add	sp, #8
    da6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_enc_send_enc_rsp(conn, ctx, evt, param);
    da6e:	f7ff bf3d 	b.w	d8ec <rp_enc_send_enc_rsp.constprop.0>
	switch (evt) {
    da72:	2a03      	cmp	r2, #3
    da74:	d00c      	beq.n	da90 <rp_enc_execute_fsm+0x78>
    da76:	2a04      	cmp	r2, #4
    da78:	d1f0      	bne.n	da5c <rp_enc_execute_fsm+0x44>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    da7a:	4621      	mov	r1, r4
    da7c:	4628      	mov	r0, r5
    da7e:	f000 fff1 	bl	ea64 <llcp_tx_alloc_peek>
    da82:	2800      	cmp	r0, #0
    da84:	d14a      	bne.n	db1c <rp_enc_execute_fsm+0x104>
		ctx->state = RP_ENC_STATE_WAIT_TX_REJECT_IND;
    da86:	2305      	movs	r3, #5
    da88:	72a3      	strb	r3, [r4, #10]
    da8a:	e7e7      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    da8c:	2a00      	cmp	r2, #0
    da8e:	d1e5      	bne.n	da5c <rp_enc_execute_fsm+0x44>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    da90:	4621      	mov	r1, r4
    da92:	4628      	mov	r0, r5
    da94:	f000 ffe6 	bl	ea64 <llcp_tx_alloc_peek>
    da98:	2800      	cmp	r0, #0
    da9a:	d156      	bne.n	db4a <rp_enc_execute_fsm+0x132>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_REQ;
    da9c:	2304      	movs	r3, #4
    da9e:	72a3      	strb	r3, [r4, #10]
    daa0:	e7dc      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    daa2:	2a00      	cmp	r2, #0
    daa4:	d1da      	bne.n	da5c <rp_enc_execute_fsm+0x44>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    daa6:	4621      	mov	r1, r4
    daa8:	4628      	mov	r0, r5
    daaa:	f000 ffdb 	bl	ea64 <llcp_tx_alloc_peek>
    daae:	2800      	cmp	r0, #0
    dab0:	d17b      	bne.n	dbaa <rp_enc_execute_fsm+0x192>
		ctx->state = RP_ENC_STATE_WAIT_TX_START_ENC_RSP;
    dab2:	2307      	movs	r3, #7
    dab4:	72a3      	strb	r3, [r4, #10]
    dab6:	e7d1      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    dab8:	2a00      	cmp	r2, #0
    daba:	d1cf      	bne.n	da5c <rp_enc_execute_fsm+0x44>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_REQ;
    dabc:	2309      	movs	r3, #9
    dabe:	72a3      	strb	r3, [r4, #10]
		break;
    dac0:	e7cc      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    dac2:	2a07      	cmp	r2, #7
    dac4:	d1ca      	bne.n	da5c <rp_enc_execute_fsm+0x44>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    dac6:	4628      	mov	r0, r5
    dac8:	2101      	movs	r1, #1
    daca:	f000 ffed 	bl	eaa8 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
    dace:	4628      	mov	r0, r5
    dad0:	f7ff fcf2 	bl	d4b8 <ull_conn_pause_rx_data>
	if (!llcp_tx_alloc_peek(conn, ctx)) {
    dad4:	4621      	mov	r1, r4
    dad6:	4628      	mov	r0, r5
    dad8:	f000 ffc4 	bl	ea64 <llcp_tx_alloc_peek>
    dadc:	2800      	cmp	r0, #0
    dade:	d17f      	bne.n	dbe0 <rp_enc_execute_fsm+0x1c8>
		ctx->state = RP_ENC_STATE_WAIT_TX_PAUSE_ENC_RSP;
    dae0:	230a      	movs	r3, #10
    dae2:	72a3      	strb	r3, [r4, #10]
    dae4:	e7ba      	b.n	da5c <rp_enc_execute_fsm+0x44>
	switch (evt) {
    dae6:	2a00      	cmp	r2, #0
    dae8:	d1b8      	bne.n	da5c <rp_enc_execute_fsm+0x44>
    daea:	e7f3      	b.n	dad4 <rp_enc_execute_fsm+0xbc>
	switch (evt) {
    daec:	2a00      	cmp	r2, #0
    daee:	d1b5      	bne.n	da5c <rp_enc_execute_fsm+0x44>
    daf0:	e7c3      	b.n	da7a <rp_enc_execute_fsm+0x62>
	switch (evt) {
    daf2:	2a02      	cmp	r2, #2
    daf4:	d1b2      	bne.n	da5c <rp_enc_execute_fsm+0x44>
	ntf = ctx->node_ref.rx;
    daf6:	69e6      	ldr	r6, [r4, #28]
	ctx->node_ref.rx = NULL;
    daf8:	2300      	movs	r3, #0
    dafa:	61e3      	str	r3, [r4, #28]
	LL_ASSERT(ntf);
    dafc:	2e00      	cmp	r6, #0
    dafe:	f000 8091 	beq.w	dc24 <rp_enc_execute_fsm+0x20c>
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    db02:	2303      	movs	r3, #3
    db04:	7133      	strb	r3, [r6, #4]
	ntf->hdr.handle = conn->lll.handle;
    db06:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    db08:	80f3      	strh	r3, [r6, #6]
	if (ctx->proc == PROC_ENCRYPTION_START) {
    db0a:	7a23      	ldrb	r3, [r4, #8]
    db0c:	2b05      	cmp	r3, #5
    db0e:	f000 8084 	beq.w	dc1a <rp_enc_execute_fsm+0x202>
	} else if (ctx->proc == PROC_ENCRYPTION_PAUSE) {
    db12:	2b06      	cmp	r3, #6
    db14:	d173      	bne.n	dbfe <rp_enc_execute_fsm+0x1e6>
		ntf->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    db16:	231a      	movs	r3, #26
    db18:	7133      	strb	r3, [r6, #4]
    db1a:	e7c4      	b.n	daa6 <rp_enc_execute_fsm+0x8e>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_IND);
    db1c:	220d      	movs	r2, #13
    db1e:	4621      	mov	r1, r4
    db20:	4628      	mov	r0, r5
    db22:	f7ff fe85 	bl	d830 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
    db26:	4628      	mov	r0, r5
    db28:	f003 ff96 	bl	11a58 <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    db2c:	2300      	movs	r3, #0
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    db2e:	2101      	movs	r1, #1
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    db30:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    db32:	4628      	mov	r0, r5
    db34:	f000 ffcc 	bl	ead0 <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
    db38:	4628      	mov	r0, r5
    db3a:	f7ff fcc5 	bl	d4c8 <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
    db3e:	4628      	mov	r0, r5
}
    db40:	b002      	add	sp, #8
    db42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_resume(conn);
    db46:	f002 ba11 	b.w	ff6c <llcp_lr_resume>
    db4a:	4621      	mov	r1, r4
    db4c:	4628      	mov	r0, r5
}
    db4e:	b002      	add	sp, #8
    db50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    db54:	f7ff bf16 	b.w	d984 <rp_enc_send_start_enc_req.part.0>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    db58:	4611      	mov	r1, r2
    db5a:	4628      	mov	r0, r5
    db5c:	9301      	str	r3, [sp, #4]
    db5e:	f000 ffa3 	bl	eaa8 <llcp_tx_pause_data>
		ull_conn_pause_rx_data(conn);
    db62:	4628      	mov	r0, r5
    db64:	f7ff fca8 	bl	d4b8 <ull_conn_pause_rx_data>
		llcp_lr_pause(conn);
    db68:	4628      	mov	r0, r5
    db6a:	f002 f9fb 	bl	ff64 <llcp_lr_pause>
	memcpy(ctx->data.enc.rand, pdu->llctrl.enc_req.rand, sizeof(ctx->data.enc.rand));
    db6e:	9b01      	ldr	r3, [sp, #4]
    db70:	2208      	movs	r2, #8
    db72:	1d19      	adds	r1, r3, #4
    db74:	f104 0029 	add.w	r0, r4, #41	; 0x29
    db78:	f00c f83c 	bl	19bf4 <memcpy>
	ctx->data.enc.ediv[0] = pdu->llctrl.enc_req.ediv[0];
    db7c:	9b01      	ldr	r3, [sp, #4]
    db7e:	7b1a      	ldrb	r2, [r3, #12]
    db80:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	ctx->data.enc.ediv[1] = pdu->llctrl.enc_req.ediv[1];
    db84:	7b59      	ldrb	r1, [r3, #13]
    db86:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
	memcpy(&ctx->data.enc.skdm, pdu->llctrl.enc_req.skdm, sizeof(ctx->data.enc.skdm));
    db8a:	2208      	movs	r2, #8
    db8c:	f103 010e 	add.w	r1, r3, #14
    db90:	f104 0043 	add.w	r0, r4, #67	; 0x43
    db94:	f00c f82e 	bl	19bf4 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[0], pdu->llctrl.enc_req.ivm, sizeof(pdu->llctrl.enc_req.ivm));
    db98:	9b01      	ldr	r3, [sp, #4]
    db9a:	2204      	movs	r2, #4
    db9c:	f103 0116 	add.w	r1, r3, #22
    dba0:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    dba4:	f00c f826 	bl	19bf4 <memcpy>
		rp_enc_send_enc_rsp(conn, ctx, evt, param);
    dba8:	e75c      	b.n	da64 <rp_enc_execute_fsm+0x4c>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_START_ENC_RSP);
    dbaa:	2206      	movs	r2, #6
    dbac:	4621      	mov	r1, r4
    dbae:	4628      	mov	r0, r5
    dbb0:	f7ff fe3e 	bl	d830 <llcp_rp_enc_tx>
		llcp_rr_complete(conn);
    dbb4:	4628      	mov	r0, r5
    dbb6:	f003 ff4f 	bl	11a58 <llcp_rr_complete>
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    dbba:	2300      	movs	r3, #0
    dbbc:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_ENCRYPTION);
    dbbe:	2101      	movs	r1, #1
    dbc0:	4628      	mov	r0, r5
    dbc2:	f000 ff85 	bl	ead0 <llcp_tx_resume_data>
		ull_conn_resume_rx_data(conn);
    dbc6:	4628      	mov	r0, r5
    dbc8:	f7ff fc7e 	bl	d4c8 <ull_conn_resume_rx_data>
		llcp_lr_resume(conn);
    dbcc:	4628      	mov	r0, r5
    dbce:	f002 f9cd 	bl	ff6c <llcp_lr_resume>
		conn->lll.enc_tx = 1U;
    dbd2:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    dbd6:	f043 0310 	orr.w	r3, r3, #16
    dbda:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
}
    dbde:	e73d      	b.n	da5c <rp_enc_execute_fsm+0x44>
		llcp_rp_enc_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP);
    dbe0:	220b      	movs	r2, #11
    dbe2:	4621      	mov	r1, r4
    dbe4:	4628      	mov	r0, r5
    dbe6:	f7ff fe23 	bl	d830 <llcp_rp_enc_tx>
		ctx->state = RP_ENC_STATE_WAIT_RX_PAUSE_ENC_RSP;
    dbea:	f640 330b 	movw	r3, #2827	; 0xb0b
    dbee:	8163      	strh	r3, [r4, #10]
		conn->lll.enc_rx = 0U;
    dbf0:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    dbf4:	f36f 03c3 	bfc	r3, #3, #1
    dbf8:	f885 308e 	strb.w	r3, [r5, #142]	; 0x8e
}
    dbfc:	e72e      	b.n	da5c <rp_enc_execute_fsm+0x44>
		LL_ASSERT(0);
    dbfe:	4a17      	ldr	r2, [pc, #92]	; (dc5c <rp_enc_execute_fsm+0x244>)
    dc00:	4917      	ldr	r1, [pc, #92]	; (dc60 <rp_enc_execute_fsm+0x248>)
    dc02:	4818      	ldr	r0, [pc, #96]	; (dc64 <rp_enc_execute_fsm+0x24c>)
    dc04:	f240 330a 	movw	r3, #778	; 0x30a
    dc08:	f00b fd19 	bl	1963e <assert_print>
    dc0c:	4040      	eors	r0, r0
    dc0e:	f380 8811 	msr	BASEPRI, r0
    dc12:	f04f 0003 	mov.w	r0, #3
    dc16:	df02      	svc	2
    dc18:	e745      	b.n	daa6 <rp_enc_execute_fsm+0x8e>
		llcp_pdu_encode_start_enc_rsp(pdu);
    dc1a:	f106 001c 	add.w	r0, r6, #28
    dc1e:	f002 fcab 	bl	10578 <llcp_pdu_encode_start_enc_rsp>
    dc22:	e740      	b.n	daa6 <rp_enc_execute_fsm+0x8e>
	LL_ASSERT(ntf);
    dc24:	4a0d      	ldr	r2, [pc, #52]	; (dc5c <rp_enc_execute_fsm+0x244>)
    dc26:	4910      	ldr	r1, [pc, #64]	; (dc68 <rp_enc_execute_fsm+0x250>)
    dc28:	480e      	ldr	r0, [pc, #56]	; (dc64 <rp_enc_execute_fsm+0x24c>)
    dc2a:	f240 23fb 	movw	r3, #763	; 0x2fb
    dc2e:	f00b fd06 	bl	1963e <assert_print>
    dc32:	4040      	eors	r0, r0
    dc34:	f380 8811 	msr	BASEPRI, r0
    dc38:	f04f 0003 	mov.w	r0, #3
    dc3c:	df02      	svc	2
    dc3e:	e760      	b.n	db02 <rp_enc_execute_fsm+0xea>
		LL_ASSERT(0);
    dc40:	4a06      	ldr	r2, [pc, #24]	; (dc5c <rp_enc_execute_fsm+0x244>)
    dc42:	4907      	ldr	r1, [pc, #28]	; (dc60 <rp_enc_execute_fsm+0x248>)
    dc44:	4807      	ldr	r0, [pc, #28]	; (dc64 <rp_enc_execute_fsm+0x24c>)
    dc46:	f240 4373 	movw	r3, #1139	; 0x473
    dc4a:	f00b fcf8 	bl	1963e <assert_print>
    dc4e:	4040      	eors	r0, r0
    dc50:	f380 8811 	msr	BASEPRI, r0
    dc54:	f04f 0003 	mov.w	r0, #3
    dc58:	df02      	svc	2
}
    dc5a:	e6ff      	b.n	da5c <rp_enc_execute_fsm+0x44>
    dc5c:	0001e830 	.word	0x0001e830
    dc60:	0001e220 	.word	0x0001e220
    dc64:	0001e1a4 	.word	0x0001e1a4
    dc68:	0001e874 	.word	0x0001e874

0000dc6c <llcp_rp_enc_rx>:

void llcp_rp_enc_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
    dc6c:	f892 c01f 	ldrb.w	ip, [r2, #31]
    dc70:	f1ac 0c03 	sub.w	ip, ip, #3
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    dc74:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    dc78:	f1bc 0f08 	cmp.w	ip, #8
    dc7c:	d806      	bhi.n	dc8c <llcp_rp_enc_rx+0x20>
    dc7e:	e8df f00c 	tbb	[pc, ip]
    dc82:	0512      	.short	0x0512
    dc84:	05050f05 	.word	0x05050f05
    dc88:	0c05      	.short	0x0c05
    dc8a:	09          	.byte	0x09
    dc8b:	00          	.byte	0x00
		 * immediately exit the Connection state, and shall transition to the Standby state.
		 * The Host shall be notified that the link has been disconnected with the error
		 * code Connection Terminated Due to MIC Failure (0x3D).
		 */

		conn->llcp_terminate.reason_final = BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;
    dc8c:	233d      	movs	r3, #61	; 0x3d
    dc8e:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	}
}
    dc92:	4770      	bx	lr
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_RSP, pdu);
    dc94:	2208      	movs	r2, #8
    dc96:	f7ff bebf 	b.w	da18 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_PAUSE_ENC_REQ, pdu);
    dc9a:	2207      	movs	r2, #7
    dc9c:	f7ff bebc 	b.w	da18 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_START_ENC_RSP, pdu);
    dca0:	2202      	movs	r2, #2
    dca2:	f7ff beb9 	b.w	da18 <rp_enc_execute_fsm>
		rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_ENC_REQ, pdu);
    dca6:	2201      	movs	r2, #1
    dca8:	f7ff beb6 	b.w	da18 <rp_enc_execute_fsm>

0000dcac <llcp_rp_enc_init_proc>:

void llcp_rp_enc_init_proc(struct proc_ctx *ctx)
{
    dcac:	b508      	push	{r3, lr}
	switch (ctx->proc) {
    dcae:	7a03      	ldrb	r3, [r0, #8]
    dcb0:	2b05      	cmp	r3, #5
    dcb2:	d00f      	beq.n	dcd4 <llcp_rp_enc_init_proc+0x28>
    dcb4:	2b06      	cmp	r3, #6
    dcb6:	d010      	beq.n	dcda <llcp_rp_enc_init_proc+0x2e>
		break;
	case PROC_ENCRYPTION_PAUSE:
		ctx->state = RP_ENC_STATE_ENCRYPTED;
		break;
	default:
		LL_ASSERT(0);
    dcb8:	4a09      	ldr	r2, [pc, #36]	; (dce0 <llcp_rp_enc_init_proc+0x34>)
    dcba:	490a      	ldr	r1, [pc, #40]	; (dce4 <llcp_rp_enc_init_proc+0x38>)
    dcbc:	480a      	ldr	r0, [pc, #40]	; (dce8 <llcp_rp_enc_init_proc+0x3c>)
    dcbe:	f44f 6395 	mov.w	r3, #1192	; 0x4a8
    dcc2:	f00b fcbc 	bl	1963e <assert_print>
    dcc6:	4040      	eors	r0, r0
    dcc8:	f380 8811 	msr	BASEPRI, r0
    dccc:	f04f 0003 	mov.w	r0, #3
    dcd0:	df02      	svc	2
	}
}
    dcd2:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_UNENCRYPTED;
    dcd4:	2300      	movs	r3, #0
    dcd6:	7283      	strb	r3, [r0, #10]
}
    dcd8:	bd08      	pop	{r3, pc}
		ctx->state = RP_ENC_STATE_ENCRYPTED;
    dcda:	2308      	movs	r3, #8
    dcdc:	7283      	strb	r3, [r0, #10]
}
    dcde:	bd08      	pop	{r3, pc}
    dce0:	0001e830 	.word	0x0001e830
    dce4:	0001e220 	.word	0x0001e220
    dce8:	0001e1a4 	.word	0x0001e1a4

0000dcec <llcp_rp_enc_ltk_req_reply>:

void llcp_rp_enc_ltk_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_REPLY, NULL);
    dcec:	2300      	movs	r3, #0
    dcee:	2203      	movs	r2, #3
    dcf0:	f7ff be92 	b.w	da18 <rp_enc_execute_fsm>

0000dcf4 <llcp_rp_enc_ltk_req_neg_reply>:
}

void llcp_rp_enc_ltk_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_LTK_REQ_NEG_REPLY, NULL);
    dcf4:	2300      	movs	r3, #0
    dcf6:	2204      	movs	r2, #4
    dcf8:	f7ff be8e 	b.w	da18 <rp_enc_execute_fsm>

0000dcfc <llcp_rp_enc_ltk_req_reply_allowed>:
}

bool llcp_rp_enc_ltk_req_reply_allowed(struct ll_conn *conn, struct proc_ctx *ctx)
{
	return (ctx->state == RP_ENC_STATE_WAIT_LTK_REPLY);
    dcfc:	7a88      	ldrb	r0, [r1, #10]
}
    dcfe:	f1a0 0003 	sub.w	r0, r0, #3
    dd02:	fab0 f080 	clz	r0, r0
    dd06:	0940      	lsrs	r0, r0, #5
    dd08:	4770      	bx	lr
    dd0a:	bf00      	nop

0000dd0c <llcp_rp_enc_run>:

void llcp_rp_enc_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    dd0c:	4613      	mov	r3, r2
	rp_enc_execute_fsm(conn, ctx, RP_ENC_EVT_RUN, param);
    dd0e:	2200      	movs	r2, #0
    dd10:	f7ff be82 	b.w	da18 <rp_enc_execute_fsm>

0000dd14 <pu_check_update_ind>:
	 */
	return (phy < 5 && phy != 3);
}

static uint8_t pu_check_update_ind(struct ll_conn *conn, struct proc_ctx *ctx)
{
    dd14:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = 0;

	/* Check if either phy selected is invalid */
	if (!phy_valid(ctx->data.pu.c_to_p_phy) || !phy_valid(ctx->data.pu.p_to_c_phy)) {
    dd16:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    dd1a:	f891 2035 	ldrb.w	r2, [r1, #53]	; 0x35
	return (phy < 5 && phy != 3);
    dd1e:	2b04      	cmp	r3, #4
{
    dd20:	460c      	mov	r4, r1
	return (phy < 5 && phy != 3);
    dd22:	d803      	bhi.n	dd2c <pu_check_update_ind+0x18>
    dd24:	2b03      	cmp	r3, #3
    dd26:	d001      	beq.n	dd2c <pu_check_update_ind+0x18>
    dd28:	2a04      	cmp	r2, #4
    dd2a:	d90d      	bls.n	dd48 <pu_check_update_ind+0x34>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
		ret = 1;
	}

	/* Both tx and rx PHY unchanged */
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    dd2c:	4313      	orrs	r3, r2
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    dd2e:	2111      	movs	r1, #17
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    dd30:	f013 0307 	ands.w	r3, r3, #7
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    dd34:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		ret = 1;
    dd38:	f04f 0501 	mov.w	r5, #1
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    dd3c:	d10c      	bne.n	dd58 <pu_check_update_ind+0x44>
		ret = 1;
	} else {
		/* if instant already passed, quit procedure with error */
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
						 ull_conn_event_counter(conn))) {
			ctx->data.pu.error = BT_HCI_ERR_INSTANT_PASSED;
    dd3e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		ret = 1;
    dd42:	2501      	movs	r5, #1
			ret = 1;
		}
	}
	return ret;
}
    dd44:	4628      	mov	r0, r5
    dd46:	bd70      	pop	{r4, r5, r6, pc}
	return (phy < 5 && phy != 3);
    dd48:	2a03      	cmp	r2, #3
    dd4a:	d00d      	beq.n	dd68 <pu_check_update_ind+0x54>
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    dd4c:	4313      	orrs	r3, r2
    dd4e:	f013 0307 	ands.w	r3, r3, #7
	uint8_t ret = 0;
    dd52:	f04f 0500 	mov.w	r5, #0
	if (!((ctx->data.pu.c_to_p_phy | ctx->data.pu.p_to_c_phy) & 0x07)) {
    dd56:	d0f2      	beq.n	dd3e <pu_check_update_ind+0x2a>
		if (is_instant_reached_or_passed(ctx->data.pu.instant,
    dd58:	8e66      	ldrh	r6, [r4, #50]	; 0x32
    dd5a:	f7ff fbbd 	bl	d4d8 <ull_conn_event_counter>
    dd5e:	1b80      	subs	r0, r0, r6
    dd60:	0403      	lsls	r3, r0, #16
    dd62:	d4ef      	bmi.n	dd44 <pu_check_update_ind+0x30>
    dd64:	2328      	movs	r3, #40	; 0x28
    dd66:	e7ea      	b.n	dd3e <pu_check_update_ind+0x2a>
		ctx->data.pu.error = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    dd68:	2311      	movs	r3, #17
    dd6a:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
		ret = 1;
    dd6e:	2501      	movs	r5, #1
    dd70:	e7f2      	b.n	dd58 <pu_check_update_ind+0x44>
    dd72:	bf00      	nop

0000dd74 <pu_update_eff_times>:

	return eff_time;
}

static uint8_t pu_update_eff_times(struct ll_conn *conn, struct proc_ctx *ctx)
{
    dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd76:	460e      	mov	r6, r1
    dd78:	b083      	sub	sp, #12
	struct lll_conn *lll = &conn->lll;
	uint16_t eff_tx_time = lll->dle.eff.max_tx_time;
	uint16_t eff_rx_time = lll->dle.eff.max_rx_time;
	uint16_t max_rx_time, max_tx_time;

	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
    dd7a:	f10d 0206 	add.w	r2, sp, #6
    dd7e:	a901      	add	r1, sp, #4
	uint16_t eff_tx_time = lll->dle.eff.max_tx_time;
    dd80:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
	uint16_t eff_rx_time = lll->dle.eff.max_rx_time;
    dd84:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
{
    dd88:	4604      	mov	r4, r0
	ull_dle_max_time_get(conn, &max_rx_time, &max_tx_time);
    dd8a:	f7ff fbc7 	bl	d51c <ull_dle_max_time_get>

	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
    dd8e:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
    dd92:	2a00      	cmp	r2, #0
    dd94:	d15c      	bne.n	de50 <pu_update_eff_times+0xdc>
    dd96:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    dd9a:	b9fb      	cbnz	r3, dddc <pu_update_eff_times+0x68>
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL))) {
		eff_rx_time =
			pu_calc_eff_time(lll->dle.eff.max_rx_octets, lll->phy_rx, max_rx_time);
	}

	if ((eff_tx_time > lll->dle.eff.max_tx_time) ||
    dd9c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    dda0:	42ab      	cmp	r3, r5
    dda2:	d30e      	bcc.n	ddc2 <pu_update_eff_times+0x4e>
    dda4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dda8:	429a      	cmp	r2, r3
    ddaa:	d30a      	bcc.n	ddc2 <pu_update_eff_times+0x4e>
	    (lll->dle.eff.max_tx_time > max_tx_time) ||
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
    ddac:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
	    (lll->dle.eff.max_tx_time > max_tx_time) ||
    ddb0:	42bb      	cmp	r3, r7
    ddb2:	d306      	bcc.n	ddc2 <pu_update_eff_times+0x4e>
	    (eff_rx_time > lll->dle.eff.max_rx_time) ||
    ddb4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ddb8:	429a      	cmp	r2, r3
    ddba:	d302      	bcc.n	ddc2 <pu_update_eff_times+0x4e>
		lll->evt_len_upd = 1U;
#endif /* CONFIG_BT_CTLR_SLOT_RESERVATION_UPDATE */
		return 1U;
	}

	return 0U;
    ddbc:	2000      	movs	r0, #0
}
    ddbe:	b003      	add	sp, #12
    ddc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->evt_len_upd = 1U;
    ddc2:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
		lll->dle.eff.max_tx_time = eff_tx_time;
    ddc6:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
		lll->evt_len_upd = 1U;
    ddca:	f043 0301 	orr.w	r3, r3, #1
		return 1U;
    ddce:	2001      	movs	r0, #1
		lll->dle.eff.max_rx_time = eff_rx_time;
    ddd0:	f8a4 706e 	strh.w	r7, [r4, #110]	; 0x6e
		lll->evt_len_upd = 1U;
    ddd4:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
}
    ddd8:	b003      	add	sp, #12
    ddda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_CENTRAL))) {
    dddc:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
    dde0:	2800      	cmp	r0, #0
    dde2:	db1d      	blt.n	de20 <pu_update_eff_times+0xac>
			pu_calc_eff_time(lll->dle.eff.max_tx_octets, lll->phy_tx, max_tx_time);
    dde4:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
    dde8:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    ddec:	f001 0303 	and.w	r3, r1, #3
    ddf0:	442b      	add	r3, r5
    ddf2:	330d      	adds	r3, #13
    ddf4:	00db      	lsls	r3, r3, #3
    ddf6:	f3c1 0140 	ubfx	r1, r1, #1, #1
    ddfa:	40cb      	lsrs	r3, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
    ddfc:	b29b      	uxth	r3, r3
	eff_time = MIN(eff_time, default_time);
    ddfe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
    de02:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    de06:	bf38      	it	cc
    de08:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
    de0c:	429d      	cmp	r5, r3
    de0e:	bf28      	it	cs
    de10:	461d      	movcs	r5, r3
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
    de12:	b332      	cbz	r2, de62 <pu_update_eff_times+0xee>
    de14:	2800      	cmp	r0, #0
    de16:	da03      	bge.n	de20 <pu_update_eff_times+0xac>
    de18:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    de1c:	2b00      	cmp	r3, #0
    de1e:	d0bd      	beq.n	dd9c <pu_update_eff_times+0x28>
			pu_calc_eff_time(lll->dle.eff.max_rx_octets, lll->phy_rx, max_rx_time);
    de20:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
    de24:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	eff_time = MIN(eff_time, default_time);
    de28:	f8bd 7004 	ldrh.w	r7, [sp, #4]
	uint16_t payload_time = PDU_DC_MAX_US(max_octets, phy);
    de2c:	f002 0303 	and.w	r3, r2, #3
    de30:	440b      	add	r3, r1
    de32:	330d      	adds	r3, #13
    de34:	00db      	lsls	r3, r3, #3
    de36:	f3c2 0240 	ubfx	r2, r2, #1, #1
    de3a:	40d3      	lsrs	r3, r2
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, payload_time);
    de3c:	b29b      	uxth	r3, r3
    de3e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    de42:	bf38      	it	cc
    de44:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MIN(eff_time, default_time);
    de48:	429f      	cmp	r7, r3
    de4a:	bf28      	it	cs
    de4c:	461f      	movcs	r7, r3
	return eff_time;
    de4e:	e7a5      	b.n	dd9c <pu_update_eff_times+0x28>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL)) ||
    de50:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
    de54:	2800      	cmp	r0, #0
    de56:	dbc5      	blt.n	dde4 <pu_update_eff_times+0x70>
    de58:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    de5c:	2b00      	cmp	r3, #0
    de5e:	d0df      	beq.n	de20 <pu_update_eff_times+0xac>
    de60:	e7c0      	b.n	dde4 <pu_update_eff_times+0x70>
	if ((ctx->data.pu.p_to_c_phy && (lll->role == BT_HCI_ROLE_CENTRAL)) ||
    de62:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    de66:	2b00      	cmp	r3, #0
    de68:	d098      	beq.n	dd9c <pu_update_eff_times+0x28>
	    (ctx->data.pu.c_to_p_phy && (lll->role == BT_HCI_ROLE_PERIPHERAL))) {
    de6a:	2800      	cmp	r0, #0
    de6c:	da96      	bge.n	dd9c <pu_update_eff_times+0x28>
    de6e:	e7d7      	b.n	de20 <pu_update_eff_times+0xac>

0000de70 <pu_ntf>:
	/* Restart procedure response timeout timer */
	llcp_lr_prt_restart(conn);
}

static void pu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
    de70:	b570      	push	{r4, r5, r6, lr}
	struct node_rx_pdu *ntf;
	struct node_rx_pu *pdu;

	/* Piggy-back on stored RX node */
	ntf = ctx->node_ref.rx;
    de72:	69cd      	ldr	r5, [r1, #28]
{
    de74:	460c      	mov	r4, r1
    de76:	4606      	mov	r6, r0
	LL_ASSERT(ntf);
    de78:	2d00      	cmp	r5, #0
    de7a:	d035      	beq.n	dee8 <pu_ntf+0x78>

	if (ctx->data.pu.ntf_pu) {
    de7c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    de80:	07db      	lsls	r3, r3, #31
    de82:	d520      	bpl.n	dec6 <pu_ntf+0x56>
		LL_ASSERT(ntf->hdr.type == NODE_RX_TYPE_RETAIN);
    de84:	792b      	ldrb	r3, [r5, #4]
    de86:	2b2c      	cmp	r3, #44	; 0x2c
    de88:	d120      	bne.n	decc <pu_ntf+0x5c>
		ntf->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    de8a:	231d      	movs	r3, #29
    de8c:	712b      	strb	r3, [r5, #4]
		ntf->hdr.handle = conn->lll.handle;
    de8e:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    de90:	80eb      	strh	r3, [r5, #6]
		pdu = (struct node_rx_pu *)ntf->pdu;

		pdu->status = ctx->data.pu.error;
    de92:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    de96:	772b      	strb	r3, [r5, #28]
		pdu->rx = conn->lll.phy_rx;
    de98:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
    de9c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    dea0:	77ab      	strb	r3, [r5, #30]
		pdu->tx = conn->lll.phy_tx;
    dea2:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    dea6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    deaa:	776b      	strb	r3, [r5, #29]
	}

	/* Enqueue notification towards LL */
#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* only 'put' as the 'sched' is handled when handling DLE ntf */
	ll_rx_put(ntf->hdr.link, ntf);
    deac:	6828      	ldr	r0, [r5, #0]
    deae:	4629      	mov	r1, r5
    deb0:	f7fb ffc0 	bl	9e34 <ll_rx_put>
#else
	ll_rx_put_sched(ntf->hdr.link, ntf);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

	ctx->data.pu.ntf_pu = 0;
    deb4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	ctx->node_ref.rx = NULL;
    deb8:	2200      	movs	r2, #0
	ctx->data.pu.ntf_pu = 0;
    deba:	f36f 0300 	bfc	r3, #0, #1
    debe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	ctx->node_ref.rx = NULL;
    dec2:	61e2      	str	r2, [r4, #28]
}
    dec4:	bd70      	pop	{r4, r5, r6, pc}
		ntf->hdr.type = NODE_RX_TYPE_RELEASE;
    dec6:	2301      	movs	r3, #1
    dec8:	712b      	strb	r3, [r5, #4]
    deca:	e7ef      	b.n	deac <pu_ntf+0x3c>
		LL_ASSERT(ntf->hdr.type == NODE_RX_TYPE_RETAIN);
    decc:	4a0d      	ldr	r2, [pc, #52]	; (df04 <pu_ntf+0x94>)
    dece:	490e      	ldr	r1, [pc, #56]	; (df08 <pu_ntf+0x98>)
    ded0:	480e      	ldr	r0, [pc, #56]	; (df0c <pu_ntf+0x9c>)
    ded2:	f240 13b7 	movw	r3, #439	; 0x1b7
    ded6:	f00b fbb2 	bl	1963e <assert_print>
    deda:	4040      	eors	r0, r0
    dedc:	f380 8811 	msr	BASEPRI, r0
    dee0:	f04f 0003 	mov.w	r0, #3
    dee4:	df02      	svc	2
    dee6:	e7d0      	b.n	de8a <pu_ntf+0x1a>
	LL_ASSERT(ntf);
    dee8:	4a06      	ldr	r2, [pc, #24]	; (df04 <pu_ntf+0x94>)
    deea:	4909      	ldr	r1, [pc, #36]	; (df10 <pu_ntf+0xa0>)
    deec:	4807      	ldr	r0, [pc, #28]	; (df0c <pu_ntf+0x9c>)
    deee:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    def2:	f00b fba4 	bl	1963e <assert_print>
    def6:	4040      	eors	r0, r0
    def8:	f380 8811 	msr	BASEPRI, r0
    defc:	f04f 0003 	mov.w	r0, #3
    df00:	df02      	svc	2
    df02:	e7bb      	b.n	de7c <pu_ntf+0xc>
    df04:	0001e878 	.word	0x0001e878
    df08:	0001e8bc 	.word	0x0001e8bc
    df0c:	0001e1a4 	.word	0x0001e1a4
    df10:	0001e874 	.word	0x0001e874

0000df14 <pu_dle_ntf>:

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
static void pu_dle_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
    df14:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu;

	/* Retrieve DLE ntf node */
	ntf = ctx->data.pu.ntf_dle_node;

	if (!ctx->data.pu.ntf_dle) {
    df16:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
	ntf = ctx->data.pu.ntf_dle_node;
    df1a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	if (!ctx->data.pu.ntf_dle) {
    df1c:	079b      	lsls	r3, r3, #30
{
    df1e:	460c      	mov	r4, r1
	if (!ctx->data.pu.ntf_dle) {
    df20:	d403      	bmi.n	df2a <pu_dle_ntf+0x16>
		if (!ntf) {
    df22:	b1cd      	cbz	r5, df58 <pu_dle_ntf+0x44>
			 * in Central case.
			 */
			return;
		}
		/* Signal to release pre-allocated node in case there is no DLE ntf */
		ntf->hdr.type = NODE_RX_TYPE_RELEASE;
    df24:	2301      	movs	r3, #1
    df26:	712b      	strb	r3, [r5, #4]
    df28:	e00a      	b.n	df40 <pu_dle_ntf+0x2c>
	} else {
		LL_ASSERT(ntf);
    df2a:	4606      	mov	r6, r0
    df2c:	b1ad      	cbz	r5, df5a <pu_dle_ntf+0x46>

		ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    df2e:	2303      	movs	r3, #3
    df30:	712b      	strb	r3, [r5, #4]
		ntf->hdr.handle = conn->lll.handle;
    df32:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    df34:	80eb      	strh	r3, [r5, #6]
		pdu = (struct pdu_data *)ntf->pdu;

		llcp_ntf_encode_length_change(conn, pdu);
    df36:	f105 011c 	add.w	r1, r5, #28
    df3a:	4630      	mov	r0, r6
    df3c:	f002 fc96 	bl	1086c <llcp_ntf_encode_length_change>
	}

	/* Enqueue notification towards LL */
	ll_rx_put_sched(ntf->hdr.link, ntf);
    df40:	6828      	ldr	r0, [r5, #0]
    df42:	4629      	mov	r1, r5
    df44:	f7fb ff80 	bl	9e48 <ll_rx_put_sched>

	ctx->data.pu.ntf_dle = 0;
    df48:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
	ctx->data.pu.ntf_dle_node = NULL;
    df4c:	2200      	movs	r2, #0
	ctx->data.pu.ntf_dle = 0;
    df4e:	f36f 0341 	bfc	r3, #1, #1
    df52:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	ctx->data.pu.ntf_dle_node = NULL;
    df56:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    df58:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(ntf);
    df5a:	4a07      	ldr	r2, [pc, #28]	; (df78 <pu_dle_ntf+0x64>)
    df5c:	4907      	ldr	r1, [pc, #28]	; (df7c <pu_dle_ntf+0x68>)
    df5e:	4808      	ldr	r0, [pc, #32]	; (df80 <pu_dle_ntf+0x6c>)
    df60:	f240 13e3 	movw	r3, #483	; 0x1e3
    df64:	f00b fb6b 	bl	1963e <assert_print>
    df68:	4040      	eors	r0, r0
    df6a:	f380 8811 	msr	BASEPRI, r0
    df6e:	f04f 0003 	mov.w	r0, #3
    df72:	df02      	svc	2
    df74:	e7db      	b.n	df2e <pu_dle_ntf+0x1a>
    df76:	bf00      	nop
    df78:	0001e878 	.word	0x0001e878
    df7c:	0001e874 	.word	0x0001e874
    df80:	0001e1a4 	.word	0x0001e1a4

0000df84 <rp_pu_tx.constprop.0>:
}

/*
 * LLCP Remote Procedure PHY Update FSM
 */
static void rp_pu_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    df84:	b570      	push	{r4, r5, r6, lr}
{
	struct node_tx *tx;
	struct pdu_data *pdu;

	LL_ASSERT(ctx->node_ref.tx);
    df86:	6a0b      	ldr	r3, [r1, #32]
static void rp_pu_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    df88:	460c      	mov	r4, r1
    df8a:	4605      	mov	r5, r0
	LL_ASSERT(ctx->node_ref.tx);
    df8c:	b33b      	cbz	r3, dfde <rp_pu_tx.constprop.0+0x5a>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	if (!llcp_ntf_alloc_is_available()) {
    df8e:	f000 fd7d 	bl	ea8c <llcp_ntf_alloc_is_available>
    df92:	b910      	cbnz	r0, df9a <rp_pu_tx.constprop.0+0x16>
		/* No NTF nodes avail, so we need to hold off TX */
		ctx->state = RP_PU_STATE_WAIT_NTF_AVAIL;
    df94:	2307      	movs	r3, #7
    df96:	72a3      	strb	r3, [r4, #10]
	/* Enqueue LL Control PDU towards LLL */
	llcp_tx_enqueue(conn, tx);

	/* Restart procedure response timeout timer */
	llcp_rr_prt_restart(conn);
}
    df98:	bd70      	pop	{r4, r5, r6, pc}
	ctx->data.pu.ntf_dle_node = llcp_ntf_alloc();
    df9a:	f000 fd7f 	bl	ea9c <llcp_ntf_alloc>
    df9e:	62e0      	str	r0, [r4, #44]	; 0x2c
	LL_ASSERT(ctx->data.pu.ntf_dle_node);
    dfa0:	2800      	cmp	r0, #0
    dfa2:	d032      	beq.n	e00a <rp_pu_tx.constprop.0+0x86>
	switch (ctx->tx_opcode) {
    dfa4:	7b63      	ldrb	r3, [r4, #13]
	tx = ctx->node_ref.tx;
    dfa6:	6a26      	ldr	r6, [r4, #32]
	ctx->node_ref.tx_ack = tx;
    dfa8:	61a6      	str	r6, [r4, #24]
	ctx->node_ref.tx = NULL;
    dfaa:	2200      	movs	r2, #0
	switch (ctx->tx_opcode) {
    dfac:	2b17      	cmp	r3, #23
	ctx->node_ref.tx = NULL;
    dfae:	6222      	str	r2, [r4, #32]
	switch (ctx->tx_opcode) {
    dfb0:	d023      	beq.n	dffa <rp_pu_tx.constprop.0+0x76>
		LL_ASSERT(0);
    dfb2:	4a1d      	ldr	r2, [pc, #116]	; (e028 <rp_pu_tx.constprop.0+0xa4>)
    dfb4:	491d      	ldr	r1, [pc, #116]	; (e02c <rp_pu_tx.constprop.0+0xa8>)
    dfb6:	481e      	ldr	r0, [pc, #120]	; (e030 <rp_pu_tx.constprop.0+0xac>)
    dfb8:	f44f 7374 	mov.w	r3, #976	; 0x3d0
    dfbc:	f00b fb3f 	bl	1963e <assert_print>
    dfc0:	4040      	eors	r0, r0
    dfc2:	f380 8811 	msr	BASEPRI, r0
    dfc6:	f04f 0003 	mov.w	r0, #3
    dfca:	df02      	svc	2
	llcp_tx_enqueue(conn, tx);
    dfcc:	4628      	mov	r0, r5
    dfce:	4631      	mov	r1, r6
    dfd0:	f000 fd66 	bl	eaa0 <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
    dfd4:	4628      	mov	r0, r5
}
    dfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	llcp_rr_prt_restart(conn);
    dfda:	f003 bba9 	b.w	11730 <llcp_rr_prt_restart>
	LL_ASSERT(ctx->node_ref.tx);
    dfde:	4a12      	ldr	r2, [pc, #72]	; (e028 <rp_pu_tx.constprop.0+0xa4>)
    dfe0:	4914      	ldr	r1, [pc, #80]	; (e034 <rp_pu_tx.constprop.0+0xb0>)
    dfe2:	4813      	ldr	r0, [pc, #76]	; (e030 <rp_pu_tx.constprop.0+0xac>)
    dfe4:	f240 33ab 	movw	r3, #939	; 0x3ab
    dfe8:	f00b fb29 	bl	1963e <assert_print>
    dfec:	4040      	eors	r0, r0
    dfee:	f380 8811 	msr	BASEPRI, r0
    dff2:	f04f 0003 	mov.w	r0, #3
    dff6:	df02      	svc	2
    dff8:	e7c9      	b.n	df8e <rp_pu_tx.constprop.0+0xa>
		llcp_pdu_encode_phy_rsp(conn, pdu);
    dffa:	1d31      	adds	r1, r6, #4
    dffc:	4628      	mov	r0, r5
    dffe:	f002 fb15 	bl	1062c <llcp_pdu_encode_phy_rsp>
		ctx->state = RP_PU_STATE_WAIT_TX_ACK_PHY_RSP;
    e002:	f641 0303 	movw	r3, #6147	; 0x1803
    e006:	8163      	strh	r3, [r4, #10]
		break;
    e008:	e7e0      	b.n	dfcc <rp_pu_tx.constprop.0+0x48>
	LL_ASSERT(ctx->data.pu.ntf_dle_node);
    e00a:	4a07      	ldr	r2, [pc, #28]	; (e028 <rp_pu_tx.constprop.0+0xa4>)
    e00c:	490a      	ldr	r1, [pc, #40]	; (e038 <rp_pu_tx.constprop.0+0xb4>)
    e00e:	4808      	ldr	r0, [pc, #32]	; (e030 <rp_pu_tx.constprop.0+0xac>)
    e010:	f240 33b5 	movw	r3, #949	; 0x3b5
    e014:	f00b fb13 	bl	1963e <assert_print>
    e018:	4040      	eors	r0, r0
    e01a:	f380 8811 	msr	BASEPRI, r0
    e01e:	f04f 0003 	mov.w	r0, #3
    e022:	df02      	svc	2
    e024:	e7be      	b.n	dfa4 <rp_pu_tx.constprop.0+0x20>
    e026:	bf00      	nop
    e028:	0001e878 	.word	0x0001e878
    e02c:	0001e220 	.word	0x0001e220
    e030:	0001e1a4 	.word	0x0001e1a4
    e034:	0001e8e4 	.word	0x0001e8e4
    e038:	0001e8f8 	.word	0x0001e8f8

0000e03c <lp_pu_tx.constprop.0>:
static void lp_pu_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e03c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(ctx->node_ref.tx);
    e03e:	6a0b      	ldr	r3, [r1, #32]
static void lp_pu_tx(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e040:	460c      	mov	r4, r1
    e042:	4605      	mov	r5, r0
	LL_ASSERT(ctx->node_ref.tx);
    e044:	2b00      	cmp	r3, #0
    e046:	d058      	beq.n	e0fa <lp_pu_tx.constprop.0+0xbe>
	if (!((ctx->tx_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) &&
    e048:	7b63      	ldrb	r3, [r4, #13]
    e04a:	2b16      	cmp	r3, #22
    e04c:	d12e      	bne.n	e0ac <lp_pu_tx.constprop.0+0x70>
    e04e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    e052:	2b00      	cmp	r3, #0
    e054:	db2a      	blt.n	e0ac <lp_pu_tx.constprop.0+0x70>
	tx = ctx->node_ref.tx;
    e056:	6a26      	ldr	r6, [r4, #32]
	ctx->node_ref.tx_ack = tx;
    e058:	61a6      	str	r6, [r4, #24]
	ctx->node_ref.tx = NULL;
    e05a:	2300      	movs	r3, #0
    e05c:	6223      	str	r3, [r4, #32]
	conn->phy_pref_rx = ctx->data.pu.rx;
    e05e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e062:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
    e066:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    e06a:	f363 02c5 	bfi	r2, r3, #3, #3
    e06e:	f885 2194 	strb.w	r2, [r5, #404]	; 0x194
	conn->phy_pref_tx = ctx->data.pu.tx;
    e072:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    e076:	f895 3194 	ldrb.w	r3, [r5, #404]	; 0x194
    e07a:	f362 0302 	bfi	r3, r2, #0, #3
    e07e:	f885 3194 	strb.w	r3, [r5, #404]	; 0x194
	conn->lll.phy_flags = ctx->data.pu.flags;
    e082:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e086:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    e08a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e08e:	f363 02c3 	bfi	r2, r3, #3, #1
		llcp_pdu_encode_phy_req(ctx, pdu);
    e092:	1d31      	adds	r1, r6, #4
	conn->lll.phy_flags = ctx->data.pu.flags;
    e094:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
		llcp_pdu_encode_phy_req(ctx, pdu);
    e098:	4620      	mov	r0, r4
    e09a:	f002 faa3 	bl	105e4 <llcp_pdu_encode_phy_req>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e09e:	2102      	movs	r1, #2
    e0a0:	4628      	mov	r0, r5
    e0a2:	f000 fd01 	bl	eaa8 <llcp_tx_pause_data>
		ctx->state = LP_PU_STATE_WAIT_TX_ACK_PHY_REQ;
    e0a6:	2302      	movs	r3, #2
    e0a8:	72a3      	strb	r3, [r4, #10]
		break;
    e0aa:	e01d      	b.n	e0e8 <lp_pu_tx.constprop.0+0xac>
		if (!llcp_ntf_alloc_is_available()) {
    e0ac:	f000 fcee 	bl	ea8c <llcp_ntf_alloc_is_available>
    e0b0:	b910      	cbnz	r0, e0b8 <lp_pu_tx.constprop.0+0x7c>
			ctx->state = LP_PU_STATE_WAIT_NTF_AVAIL;
    e0b2:	2307      	movs	r3, #7
    e0b4:	72a3      	strb	r3, [r4, #10]
}
    e0b6:	bd70      	pop	{r4, r5, r6, pc}
		ctx->data.pu.ntf_dle_node = llcp_ntf_alloc();
    e0b8:	f000 fcf0 	bl	ea9c <llcp_ntf_alloc>
    e0bc:	62e0      	str	r0, [r4, #44]	; 0x2c
		LL_ASSERT(ctx->data.pu.ntf_dle_node);
    e0be:	b350      	cbz	r0, e116 <lp_pu_tx.constprop.0+0xda>
	switch (ctx->tx_opcode) {
    e0c0:	7b62      	ldrb	r2, [r4, #13]
	tx = ctx->node_ref.tx;
    e0c2:	6a26      	ldr	r6, [r4, #32]
	ctx->node_ref.tx_ack = tx;
    e0c4:	61a6      	str	r6, [r4, #24]
	ctx->node_ref.tx = NULL;
    e0c6:	2300      	movs	r3, #0
	switch (ctx->tx_opcode) {
    e0c8:	2a16      	cmp	r2, #22
	ctx->node_ref.tx = NULL;
    e0ca:	6223      	str	r3, [r4, #32]
	switch (ctx->tx_opcode) {
    e0cc:	d0c7      	beq.n	e05e <lp_pu_tx.constprop.0+0x22>
		LL_ASSERT(0);
    e0ce:	4a19      	ldr	r2, [pc, #100]	; (e134 <lp_pu_tx.constprop.0+0xf8>)
    e0d0:	4919      	ldr	r1, [pc, #100]	; (e138 <lp_pu_tx.constprop.0+0xfc>)
    e0d2:	481a      	ldr	r0, [pc, #104]	; (e13c <lp_pu_tx.constprop.0+0x100>)
    e0d4:	f240 13a3 	movw	r3, #419	; 0x1a3
    e0d8:	f00b fab1 	bl	1963e <assert_print>
    e0dc:	4040      	eors	r0, r0
    e0de:	f380 8811 	msr	BASEPRI, r0
    e0e2:	f04f 0003 	mov.w	r0, #3
    e0e6:	df02      	svc	2
	llcp_tx_enqueue(conn, tx);
    e0e8:	4628      	mov	r0, r5
    e0ea:	4631      	mov	r1, r6
    e0ec:	f000 fcd8 	bl	eaa0 <llcp_tx_enqueue>
	llcp_lr_prt_restart(conn);
    e0f0:	4628      	mov	r0, r5
}
    e0f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	llcp_lr_prt_restart(conn);
    e0f6:	f001 bf3d 	b.w	ff74 <llcp_lr_prt_restart>
	LL_ASSERT(ctx->node_ref.tx);
    e0fa:	4a0e      	ldr	r2, [pc, #56]	; (e134 <lp_pu_tx.constprop.0+0xf8>)
    e0fc:	4910      	ldr	r1, [pc, #64]	; (e140 <lp_pu_tx.constprop.0+0x104>)
    e0fe:	480f      	ldr	r0, [pc, #60]	; (e13c <lp_pu_tx.constprop.0+0x100>)
    e100:	f240 137d 	movw	r3, #381	; 0x17d
    e104:	f00b fa9b 	bl	1963e <assert_print>
    e108:	4040      	eors	r0, r0
    e10a:	f380 8811 	msr	BASEPRI, r0
    e10e:	f04f 0003 	mov.w	r0, #3
    e112:	df02      	svc	2
    e114:	e798      	b.n	e048 <lp_pu_tx.constprop.0+0xc>
		LL_ASSERT(ctx->data.pu.ntf_dle_node);
    e116:	4a07      	ldr	r2, [pc, #28]	; (e134 <lp_pu_tx.constprop.0+0xf8>)
    e118:	490a      	ldr	r1, [pc, #40]	; (e144 <lp_pu_tx.constprop.0+0x108>)
    e11a:	4808      	ldr	r0, [pc, #32]	; (e13c <lp_pu_tx.constprop.0+0x100>)
    e11c:	f44f 73c4 	mov.w	r3, #392	; 0x188
    e120:	f00b fa8d 	bl	1963e <assert_print>
    e124:	4040      	eors	r0, r0
    e126:	f380 8811 	msr	BASEPRI, r0
    e12a:	f04f 0003 	mov.w	r0, #3
    e12e:	df02      	svc	2
    e130:	e7c6      	b.n	e0c0 <lp_pu_tx.constprop.0+0x84>
    e132:	bf00      	nop
    e134:	0001e878 	.word	0x0001e878
    e138:	0001e220 	.word	0x0001e220
    e13c:	0001e1a4 	.word	0x0001e1a4
    e140:	0001e8e4 	.word	0x0001e8e4
    e144:	0001e8f8 	.word	0x0001e8f8

0000e148 <lp_pu_send_phy_req.constprop.0.isra.0>:
static void lp_pu_send_phy_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e148:	b538      	push	{r3, r4, r5, lr}
    e14a:	4605      	mov	r5, r0
    e14c:	460c      	mov	r4, r1
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
    e14e:	f001 ff01 	bl	ff54 <llcp_lr_ispaused>
    e152:	b110      	cbz	r0, e15a <lp_pu_send_phy_req.constprop.0.isra.0+0x12>
		ctx->state = LP_PU_STATE_WAIT_TX_PHY_REQ;
    e154:	2301      	movs	r3, #1
    e156:	72a3      	strb	r3, [r4, #10]
}
    e158:	bd38      	pop	{r3, r4, r5, pc}
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
    e15a:	4628      	mov	r0, r5
    e15c:	f003 fad6 	bl	1170c <llcp_rr_get_collision>
    e160:	2800      	cmp	r0, #0
    e162:	d1f7      	bne.n	e154 <lp_pu_send_phy_req.constprop.0.isra.0+0xc>
	    !llcp_tx_alloc_peek(conn, ctx) ||
    e164:	4621      	mov	r1, r4
    e166:	4628      	mov	r0, r5
    e168:	f000 fc7c 	bl	ea64 <llcp_tx_alloc_peek>
	if (llcp_lr_ispaused(conn) || llcp_rr_get_collision(conn) ||
    e16c:	2800      	cmp	r0, #0
    e16e:	d0f1      	beq.n	e154 <lp_pu_send_phy_req.constprop.0.isra.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
    e170:	4628      	mov	r0, r5
    e172:	f003 fac9 	bl	11708 <llcp_rr_get_paused_cmd>
	    !llcp_tx_alloc_peek(conn, ctx) ||
    e176:	2807      	cmp	r0, #7
    e178:	d0ec      	beq.n	e154 <lp_pu_send_phy_req.constprop.0.isra.0+0xc>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
    e17a:	4628      	mov	r0, r5
    e17c:	2101      	movs	r1, #1
    e17e:	f003 fabd 	bl	116fc <llcp_rr_set_incompat>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
    e182:	4628      	mov	r0, r5
    e184:	210d      	movs	r1, #13
    e186:	f003 fabd 	bl	11704 <llcp_rr_set_paused_cmd>
		ctx->tx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    e18a:	2316      	movs	r3, #22
		ctx->node_ref.tx = llcp_tx_alloc(conn, ctx);
    e18c:	4621      	mov	r1, r4
		ctx->tx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    e18e:	7363      	strb	r3, [r4, #13]
		ctx->node_ref.tx = llcp_tx_alloc(conn, ctx);
    e190:	4628      	mov	r0, r5
    e192:	f000 fc6f 	bl	ea74 <llcp_tx_alloc>
    e196:	6220      	str	r0, [r4, #32]
		lp_pu_tx(conn, ctx, evt, param);
    e198:	4621      	mov	r1, r4
    e19a:	4628      	mov	r0, r5
}
    e19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lp_pu_tx(conn, ctx, evt, param);
    e1a0:	f7ff bf4c 	b.w	e03c <lp_pu_tx.constprop.0>

0000e1a4 <rp_pu_send_phy_rsp.isra.0>:
	}
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
static void rp_pu_send_phy_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    e1a4:	b538      	push	{r3, r4, r5, lr}
    e1a6:	4605      	mov	r5, r0
    e1a8:	460c      	mov	r4, r1
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
    e1aa:	f003 fab9 	bl	11720 <llcp_rr_ispaused>
    e1ae:	b110      	cbz	r0, e1b6 <rp_pu_send_phy_rsp.isra.0+0x12>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
		ctx->state = RP_PU_STATE_WAIT_TX_PHY_RSP;
    e1b0:	2302      	movs	r3, #2
    e1b2:	72a3      	strb	r3, [r4, #10]
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
		ctx->tx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
		ctx->node_ref.tx = llcp_tx_alloc(conn, ctx);
		rp_pu_tx(conn, ctx, evt, param);
	}
}
    e1b4:	bd38      	pop	{r3, r4, r5, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
    e1b6:	4621      	mov	r1, r4
    e1b8:	4628      	mov	r0, r5
    e1ba:	f000 fc53 	bl	ea64 <llcp_tx_alloc_peek>
    e1be:	2800      	cmp	r0, #0
    e1c0:	d0f6      	beq.n	e1b0 <rp_pu_send_phy_rsp.isra.0+0xc>
	    (llcp_rr_get_paused_cmd(conn) == PROC_PHY_UPDATE)) {
    e1c2:	4628      	mov	r0, r5
    e1c4:	f003 faa0 	bl	11708 <llcp_rr_get_paused_cmd>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx) ||
    e1c8:	2807      	cmp	r0, #7
    e1ca:	d0f1      	beq.n	e1b0 <rp_pu_send_phy_rsp.isra.0+0xc>
		llcp_rr_set_paused_cmd(conn, PROC_CTE_REQ);
    e1cc:	4628      	mov	r0, r5
    e1ce:	210d      	movs	r1, #13
    e1d0:	f003 fa98 	bl	11704 <llcp_rr_set_paused_cmd>
		ctx->tx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e1d4:	2317      	movs	r3, #23
		ctx->node_ref.tx = llcp_tx_alloc(conn, ctx);
    e1d6:	4621      	mov	r1, r4
		ctx->tx_opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    e1d8:	7363      	strb	r3, [r4, #13]
		ctx->node_ref.tx = llcp_tx_alloc(conn, ctx);
    e1da:	4628      	mov	r0, r5
    e1dc:	f000 fc4a 	bl	ea74 <llcp_tx_alloc>
    e1e0:	6220      	str	r0, [r4, #32]
		rp_pu_tx(conn, ctx, evt, param);
    e1e2:	4621      	mov	r1, r4
    e1e4:	4628      	mov	r0, r5
}
    e1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_pu_tx(conn, ctx, evt, param);
    e1ea:	f7ff becb 	b.w	df84 <rp_pu_tx.constprop.0>
    e1ee:	bf00      	nop

0000e1f0 <lp_pu_execute_fsm>:
{
    e1f0:	b570      	push	{r4, r5, r6, lr}
    e1f2:	460c      	mov	r4, r1
	switch (ctx->state) {
    e1f4:	7a89      	ldrb	r1, [r1, #10]
{
    e1f6:	b082      	sub	sp, #8
    e1f8:	4606      	mov	r6, r0
    e1fa:	461d      	mov	r5, r3
	switch (ctx->state) {
    e1fc:	2909      	cmp	r1, #9
    e1fe:	d80b      	bhi.n	e218 <lp_pu_execute_fsm+0x28>
    e200:	e8df f001 	tbb	[pc, r1]
    e204:	0a190505 	.word	0x0a190505
    e208:	6b2e0a0a 	.word	0x6b2e0a0a
    e20c:	a773      	.short	0xa773
	switch (evt) {
    e20e:	2a00      	cmp	r2, #0
    e210:	f000 80b3 	beq.w	e37a <lp_pu_execute_fsm+0x18a>
}
    e214:	b002      	add	sp, #8
    e216:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    e218:	4aa5      	ldr	r2, [pc, #660]	; (e4b0 <lp_pu_execute_fsm+0x2c0>)
    e21a:	49a6      	ldr	r1, [pc, #664]	; (e4b4 <lp_pu_execute_fsm+0x2c4>)
    e21c:	48a6      	ldr	r0, [pc, #664]	; (e4b8 <lp_pu_execute_fsm+0x2c8>)
    e21e:	f240 3367 	movw	r3, #871	; 0x367
    e222:	f00b fa0c 	bl	1963e <assert_print>
    e226:	4040      	eors	r0, r0
    e228:	f380 8811 	msr	BASEPRI, r0
    e22c:	f04f 0003 	mov.w	r0, #3
    e230:	df02      	svc	2
}
    e232:	b002      	add	sp, #8
    e234:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
    e236:	2a03      	cmp	r2, #3
    e238:	d1ec      	bne.n	e214 <lp_pu_execute_fsm+0x24>
		switch (conn->lll.role) {
    e23a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    e23e:	09db      	lsrs	r3, r3, #7
    e240:	f040 80cf 	bne.w	e3e2 <lp_pu_execute_fsm+0x1f2>
			LL_ASSERT(0);
    e244:	4a9a      	ldr	r2, [pc, #616]	; (e4b0 <lp_pu_execute_fsm+0x2c0>)
    e246:	499b      	ldr	r1, [pc, #620]	; (e4b4 <lp_pu_execute_fsm+0x2c4>)
    e248:	489b      	ldr	r0, [pc, #620]	; (e4b8 <lp_pu_execute_fsm+0x2c8>)
    e24a:	f240 238d 	movw	r3, #653	; 0x28d
    e24e:	f00b f9f6 	bl	1963e <assert_print>
    e252:	4040      	eors	r0, r0
    e254:	f380 8811 	msr	BASEPRI, r0
    e258:	f04f 0003 	mov.w	r0, #3
    e25c:	df02      	svc	2
    e25e:	e7d9      	b.n	e214 <lp_pu_execute_fsm+0x24>
	switch (evt) {
    e260:	2a05      	cmp	r2, #5
    e262:	f000 80b1 	beq.w	e3c8 <lp_pu_execute_fsm+0x1d8>
    e266:	2a06      	cmp	r2, #6
    e268:	f000 808d 	beq.w	e386 <lp_pu_execute_fsm+0x196>
    e26c:	2a02      	cmp	r2, #2
    e26e:	d1d1      	bne.n	e214 <lp_pu_execute_fsm+0x24>
		LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
    e270:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    e274:	2b00      	cmp	r3, #0
    e276:	db0c      	blt.n	e292 <lp_pu_execute_fsm+0xa2>
    e278:	4a8d      	ldr	r2, [pc, #564]	; (e4b0 <lp_pu_execute_fsm+0x2c0>)
    e27a:	4990      	ldr	r1, [pc, #576]	; (e4bc <lp_pu_execute_fsm+0x2cc>)
    e27c:	488e      	ldr	r0, [pc, #568]	; (e4b8 <lp_pu_execute_fsm+0x2c8>)
    e27e:	f240 23ce 	movw	r3, #718	; 0x2ce
    e282:	f00b f9dc 	bl	1963e <assert_print>
    e286:	4040      	eors	r0, r0
    e288:	f380 8811 	msr	BASEPRI, r0
    e28c:	f04f 0003 	mov.w	r0, #3
    e290:	df02      	svc	2
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
    e292:	4629      	mov	r1, r5
    e294:	4620      	mov	r0, r4
    e296:	f002 f9df 	bl	10658 <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
    e29a:	4621      	mov	r1, r4
    e29c:	4630      	mov	r0, r6
    e29e:	f7ff fd39 	bl	dd14 <pu_check_update_ind>
    e2a2:	4605      	mov	r5, r0
		llcp_rx_node_retain(ctx);
    e2a4:	4620      	mov	r0, r4
    e2a6:	f000 fc1f 	bl	eae8 <llcp_rx_node_retain>
		if (!end_procedure) {
    e2aa:	2d00      	cmp	r5, #0
    e2ac:	f040 80b3 	bne.w	e416 <lp_pu_execute_fsm+0x226>
			if (ctx->data.pu.p_to_c_phy) {
    e2b0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    e2b4:	b12b      	cbz	r3, e2c2 <lp_pu_execute_fsm+0xd2>
	lll->phy_tx_time = phy_tx;
    e2b6:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
    e2ba:	f363 1206 	bfi	r2, r3, #4, #3
    e2be:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			llcp_lr_prt_stop(conn);
    e2c2:	4630      	mov	r0, r6
    e2c4:	f001 fe60 	bl	ff88 <llcp_lr_prt_stop>
			ctx->state = LP_PU_STATE_WAIT_INSTANT;
    e2c8:	2308      	movs	r3, #8
    e2ca:	72a3      	strb	r3, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e2cc:	2102      	movs	r1, #2
    e2ce:	4630      	mov	r0, r6
}
    e2d0:	b002      	add	sp, #8
    e2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e2d6:	f000 bbfb 	b.w	ead0 <llcp_tx_resume_data>
	switch (evt) {
    e2da:	2a00      	cmp	r2, #0
    e2dc:	d19a      	bne.n	e214 <lp_pu_execute_fsm+0x24>
		lp_pu_tx(conn, ctx, evt, param);
    e2de:	4621      	mov	r1, r4
}
    e2e0:	b002      	add	sp, #8
    e2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_tx(conn, ctx, evt, param);
    e2e6:	f7ff bea9 	b.w	e03c <lp_pu_tx.constprop.0>
	switch (evt) {
    e2ea:	2a00      	cmp	r2, #0
    e2ec:	d192      	bne.n	e214 <lp_pu_execute_fsm+0x24>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
    e2ee:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    e2f0:	f7ff f8f2 	bl	d4d8 <ull_conn_event_counter>
    e2f4:	1b40      	subs	r0, r0, r5
    e2f6:	0403      	lsls	r3, r0, #16
    e2f8:	d48c      	bmi.n	e214 <lp_pu_execute_fsm+0x24>
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    e2fa:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
    e2fe:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
    e302:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
    e306:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    e30a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    e30e:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
    e310:	f000 0e07 	and.w	lr, r0, #7
	const uint8_t old_rx = lll->phy_rx;
    e314:	f003 0c07 	and.w	ip, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    e318:	f2c0 8099 	blt.w	e44e <lp_pu_execute_fsm+0x25e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    e31c:	2100      	movs	r1, #0
    e31e:	4630      	mov	r0, r6
    e320:	f003 f9ec 	bl	116fc <llcp_rr_set_incompat>
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
    e324:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
    e328:	2200      	movs	r2, #0
    e32a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
		ctx->data.pu.ntf_pu = (phy_changed || ctx->data.pu.host_initiated);
    e32e:	09db      	lsrs	r3, r3, #7
    e330:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    e334:	f363 0200 	bfi	r2, r3, #0, #1
    e338:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    e33c:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    e340:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    e344:	f362 1306 	bfi	r3, r2, #4, #3
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
    e348:	2209      	movs	r2, #9
	lll->phy_tx_time = phy_tx;
    e34a:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
    e34e:	72a2      	strb	r2, [r4, #10]
}
    e350:	e760      	b.n	e214 <lp_pu_execute_fsm+0x24>
	switch (evt) {
    e352:	2a04      	cmp	r2, #4
    e354:	f47f af5e 	bne.w	e214 <lp_pu_execute_fsm+0x24>
	pu_ntf(conn, ctx);
    e358:	4621      	mov	r1, r4
    e35a:	f7ff fd89 	bl	de70 <pu_ntf>
	pu_dle_ntf(conn, ctx);
    e35e:	4621      	mov	r1, r4
    e360:	4630      	mov	r0, r6
    e362:	f7ff fdd7 	bl	df14 <pu_dle_ntf>
	llcp_lr_complete(conn);
    e366:	4630      	mov	r0, r6
    e368:	f001 fec2 	bl	100f0 <llcp_lr_complete>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
    e36c:	2100      	movs	r1, #0
    e36e:	4630      	mov	r0, r6
    e370:	f003 f9c8 	bl	11704 <llcp_rr_set_paused_cmd>
	ctx->state = LP_PU_STATE_IDLE;
    e374:	2300      	movs	r3, #0
    e376:	72a3      	strb	r3, [r4, #10]
}
    e378:	e74c      	b.n	e214 <lp_pu_execute_fsm+0x24>
		lp_pu_send_phy_req(conn, ctx, evt, param);
    e37a:	4621      	mov	r1, r4
}
    e37c:	b002      	add	sp, #8
    e37e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lp_pu_send_phy_req(conn, ctx, evt, param);
    e382:	f7ff bee1 	b.w	e148 <lp_pu_send_phy_req.constprop.0.isra.0>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    e386:	2100      	movs	r1, #0
    e388:	f003 f9b8 	bl	116fc <llcp_rr_set_incompat>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
    e38c:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
			ctx->data.pu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    e390:	221a      	movs	r2, #26
    e392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    e396:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
    e39a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
		llcp_rx_node_retain(ctx);
    e39e:	4620      	mov	r0, r4
    e3a0:	f000 fba2 	bl	eae8 <llcp_rx_node_retain>
		ctx->data.pu.ntf_pu = 1;
    e3a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e3a8:	f043 0301 	orr.w	r3, r3, #1
    e3ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    e3b0:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    e3b4:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    e3b8:	f362 1306 	bfi	r3, r2, #4, #3
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
    e3bc:	2209      	movs	r2, #9
	lll->phy_tx_time = phy_tx;
    e3be:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e3c2:	2102      	movs	r1, #2
	ctx->state = LP_PU_STATE_WAIT_INSTANT_ON_AIR;
    e3c4:	72a2      	strb	r2, [r4, #10]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e3c6:	e782      	b.n	e2ce <lp_pu_execute_fsm+0xde>
		llcp_pdu_decode_reject_ext_ind(ctx, (struct pdu_data *)param);
    e3c8:	4629      	mov	r1, r5
    e3ca:	4620      	mov	r0, r4
    e3cc:	f002 f902 	bl	105d4 <llcp_pdu_decode_reject_ext_ind>
		ctx->data.pu.error = ctx->reject_ext_ind.error_code;
    e3d0:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    e3d4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    e3d8:	2100      	movs	r1, #0
    e3da:	4630      	mov	r0, r6
    e3dc:	f003 f98e 	bl	116fc <llcp_rr_set_incompat>
		if (evt == LP_PU_EVT_UNKNOWN) {
    e3e0:	e7dd      	b.n	e39e <lp_pu_execute_fsm+0x1ae>
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e3e2:	4b37      	ldr	r3, [pc, #220]	; (e4c0 <lp_pu_execute_fsm+0x2d0>)
	const uint8_t phys = phy_tx | lll->phy_tx;
    e3e4:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e3e8:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
    e3ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return phy_tx_time[phys];
    e3f0:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e3f2:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
    e3f4:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e3f8:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
    e3fc:	3308      	adds	r3, #8
    e3fe:	446b      	add	r3, sp
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e400:	2102      	movs	r1, #2
	return phy_tx_time[phys];
    e402:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	lll->phy_tx_time = phy_tx;
    e406:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    e40a:	f641 0306 	movw	r3, #6150	; 0x1806
	lll->phy_tx_time = phy_tx;
    e40e:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = LP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    e412:	8163      	strh	r3, [r4, #10]
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e414:	e75b      	b.n	e2ce <lp_pu_execute_fsm+0xde>
			llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    e416:	2100      	movs	r1, #0
    e418:	4630      	mov	r0, r6
    e41a:	f003 f96f 	bl	116fc <llcp_rr_set_incompat>
			if (ctx->data.pu.error != BT_HCI_ERR_SUCCESS) {
    e41e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e422:	b10b      	cbz	r3, e428 <lp_pu_execute_fsm+0x238>
				conn->llcp_terminate.reason_final = ctx->data.pu.error;
    e424:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
			ctx->data.pu.ntf_pu = ctx->data.pu.host_initiated;
    e428:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e42c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    e430:	09db      	lsrs	r3, r3, #7
    e432:	f363 0200 	bfi	r2, r3, #0, #1
    e436:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    e43a:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    e43e:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    e442:	f362 1306 	bfi	r3, r2, #4, #3
    e446:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
}
    e44a:	2309      	movs	r3, #9
    e44c:	e73d      	b.n	e2ca <lp_pu_execute_fsm+0xda>
		if (p_to_c_phy) {
    e44e:	f011 0103 	ands.w	r1, r1, #3
    e452:	d01f      	beq.n	e494 <lp_pu_execute_fsm+0x2a4>
			lll->phy_tx = p_to_c_phy;
    e454:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
    e458:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
    e45c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
    e460:	d023      	beq.n	e4aa <lp_pu_execute_fsm+0x2ba>
			lll->phy_rx = c_to_p_phy;
    e462:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    e466:	458e      	cmp	lr, r1
			lll->phy_rx = c_to_p_phy;
    e468:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    e46c:	d01a      	beq.n	e4a4 <lp_pu_execute_fsm+0x2b4>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
    e46e:	4621      	mov	r1, r4
    e470:	4630      	mov	r0, r6
    e472:	f7ff fc7f 	bl	dd74 <pu_update_eff_times>
    e476:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e47a:	f360 0341 	bfi	r3, r0, #1, #1
    e47e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
    e482:	2100      	movs	r1, #0
    e484:	4630      	mov	r0, r6
    e486:	f003 f939 	bl	116fc <llcp_rr_set_incompat>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
    e48a:	2300      	movs	r3, #0
    e48c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    e490:	2301      	movs	r3, #1
    e492:	e74d      	b.n	e330 <lp_pu_execute_fsm+0x140>
		if (c_to_p_phy) {
    e494:	f012 0203 	ands.w	r2, r2, #3
    e498:	f43f af40 	beq.w	e31c <lp_pu_execute_fsm+0x12c>
			lll->phy_rx = c_to_p_phy;
    e49c:	f362 0302 	bfi	r3, r2, #0, #3
    e4a0:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    e4a4:	4594      	cmp	ip, r2
    e4a6:	d1e2      	bne.n	e46e <lp_pu_execute_fsm+0x27e>
    e4a8:	e738      	b.n	e31c <lp_pu_execute_fsm+0x12c>
    e4aa:	458e      	cmp	lr, r1
    e4ac:	d1df      	bne.n	e46e <lp_pu_execute_fsm+0x27e>
    e4ae:	e735      	b.n	e31c <lp_pu_execute_fsm+0x12c>
    e4b0:	0001e878 	.word	0x0001e878
    e4b4:	0001e220 	.word	0x0001e220
    e4b8:	0001e1a4 	.word	0x0001e1a4
    e4bc:	0001e914 	.word	0x0001e914
    e4c0:	0001dd48 	.word	0x0001dd48

0000e4c4 <rp_pu_execute_fsm>:
	}
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static void rp_pu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
    e4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4c6:	460c      	mov	r4, r1
	switch (ctx->state) {
    e4c8:	7a89      	ldrb	r1, [r1, #10]
{
    e4ca:	b083      	sub	sp, #12
    e4cc:	4606      	mov	r6, r0
    e4ce:	4615      	mov	r5, r2
	switch (ctx->state) {
    e4d0:	2909      	cmp	r1, #9
    e4d2:	d80b      	bhi.n	e4ec <rp_pu_execute_fsm+0x28>
    e4d4:	e8df f001 	tbb	[pc, r1]
    e4d8:	685f1e19 	.word	0x685f1e19
    e4dc:	b1990a0a 	.word	0xb1990a0a
    e4e0:	05ba      	.short	0x05ba
	switch (evt) {
    e4e2:	2d04      	cmp	r5, #4
    e4e4:	f000 80e4 	beq.w	e6b0 <rp_pu_execute_fsm+0x1ec>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    e4e8:	b003      	add	sp, #12
    e4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(0);
    e4ec:	4a90      	ldr	r2, [pc, #576]	; (e730 <rp_pu_execute_fsm+0x26c>)
    e4ee:	4991      	ldr	r1, [pc, #580]	; (e734 <rp_pu_execute_fsm+0x270>)
    e4f0:	4891      	ldr	r0, [pc, #580]	; (e738 <rp_pu_execute_fsm+0x274>)
    e4f2:	f240 5311 	movw	r3, #1297	; 0x511
    e4f6:	f00b f8a2 	bl	1963e <assert_print>
    e4fa:	4040      	eors	r0, r0
    e4fc:	f380 8811 	msr	BASEPRI, r0
    e500:	f04f 0003 	mov.w	r0, #3
    e504:	df02      	svc	2
}
    e506:	b003      	add	sp, #12
    e508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (evt) {
    e50a:	2d00      	cmp	r5, #0
    e50c:	d1ec      	bne.n	e4e8 <rp_pu_execute_fsm+0x24>
		ctx->state = RP_PU_STATE_WAIT_RX_PHY_REQ;
    e50e:	2301      	movs	r3, #1
    e510:	72a3      	strb	r3, [r4, #10]
		break;
    e512:	e7e9      	b.n	e4e8 <rp_pu_execute_fsm+0x24>
	llcp_pdu_decode_phy_req(ctx, (struct pdu_data *)param);
    e514:	4619      	mov	r1, r3
    e516:	4620      	mov	r0, r4
    e518:	f002 f87a 	bl	10610 <llcp_pdu_decode_phy_req>
	ctx->data.pu.rx &= rx;
    e51c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
    e520:	f896 3194 	ldrb.w	r3, [r6, #404]	; 0x194
	ctx->data.pu.rx &= rx;
    e524:	f3c2 00c2 	ubfx	r0, r2, #3, #3
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
    e528:	f3c3 01c2 	ubfx	r1, r3, #3, #3
	ctx->data.pu.tx &= tx;
    e52c:	4001      	ands	r1, r0
	pu_combine_phys(conn, ctx, conn->phy_pref_tx, conn->phy_pref_rx);
    e52e:	f3c3 0302 	ubfx	r3, r3, #0, #3
	ctx->data.pu.tx &= tx;
    e532:	f3c2 0002 	ubfx	r0, r2, #0, #3
    e536:	4003      	ands	r3, r0
    e538:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    e53c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    e540:	4313      	orrs	r3, r2
    e542:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
    e546:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
    e54a:	2b00      	cmp	r3, #0
    e54c:	db0b      	blt.n	e566 <rp_pu_execute_fsm+0xa2>
    e54e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e552:	f013 0f38 	tst.w	r3, #56	; 0x38
    e556:	f040 80a7 	bne.w	e6a8 <rp_pu_execute_fsm+0x1e4>
		ctx->data.pu.tx = 0;
    e55a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    e55e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    e562:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e566:	2102      	movs	r1, #2
    e568:	4630      	mov	r0, r6
    e56a:	f000 fa9d 	bl	eaa8 <llcp_tx_pause_data>
	switch (evt) {
    e56e:	2d01      	cmp	r5, #1
    e570:	d1ba      	bne.n	e4e8 <rp_pu_execute_fsm+0x24>
		switch (conn->lll.role) {
    e572:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    e576:	09db      	lsrs	r3, r3, #7
    e578:	d10f      	bne.n	e59a <rp_pu_execute_fsm+0xd6>
			LL_ASSERT(0);
    e57a:	4a6d      	ldr	r2, [pc, #436]	; (e730 <rp_pu_execute_fsm+0x26c>)
    e57c:	496d      	ldr	r1, [pc, #436]	; (e734 <rp_pu_execute_fsm+0x270>)
    e57e:	486e      	ldr	r0, [pc, #440]	; (e738 <rp_pu_execute_fsm+0x274>)
    e580:	f240 433b 	movw	r3, #1083	; 0x43b
    e584:	f00b f85b 	bl	1963e <assert_print>
    e588:	4040      	eors	r0, r0
    e58a:	f380 8811 	msr	BASEPRI, r0
    e58e:	f04f 0003 	mov.w	r0, #3
    e592:	df02      	svc	2
    e594:	e7a8      	b.n	e4e8 <rp_pu_execute_fsm+0x24>
	switch (evt) {
    e596:	2d00      	cmp	r5, #0
    e598:	d1a6      	bne.n	e4e8 <rp_pu_execute_fsm+0x24>
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
    e59a:	4621      	mov	r1, r4
    e59c:	4630      	mov	r0, r6
}
    e59e:	b003      	add	sp, #12
    e5a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			rp_pu_send_phy_rsp(conn, ctx, evt, param);
    e5a4:	f7ff bdfe 	b.w	e1a4 <rp_pu_send_phy_rsp.isra.0>
	switch (evt) {
    e5a8:	2d02      	cmp	r5, #2
    e5aa:	d19d      	bne.n	e4e8 <rp_pu_execute_fsm+0x24>
			LL_ASSERT(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
    e5ac:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	db0c      	blt.n	e5ce <rp_pu_execute_fsm+0x10a>
    e5b4:	4a5e      	ldr	r2, [pc, #376]	; (e730 <rp_pu_execute_fsm+0x26c>)
    e5b6:	4961      	ldr	r1, [pc, #388]	; (e73c <rp_pu_execute_fsm+0x278>)
    e5b8:	485f      	ldr	r0, [pc, #380]	; (e738 <rp_pu_execute_fsm+0x274>)
    e5ba:	f240 435b 	movw	r3, #1115	; 0x45b
    e5be:	f00b f83e 	bl	1963e <assert_print>
    e5c2:	4040      	eors	r0, r0
    e5c4:	f380 8811 	msr	BASEPRI, r0
    e5c8:	f04f 0003 	mov.w	r0, #3
    e5cc:	df02      	svc	2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e5ce:	4b5c      	ldr	r3, [pc, #368]	; (e740 <rp_pu_execute_fsm+0x27c>)
	const uint8_t phys = phy_tx | lll->phy_tx;
    e5d0:	f896 2076 	ldrb.w	r2, [r6, #118]	; 0x76
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e5d4:	e893 0003 	ldmia.w	r3, {r0, r1}
				conn, pu_select_phy_timing_restrict(conn, ctx->data.pu.tx));
    e5d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return phy_tx_time[phys];
    e5dc:	4313      	orrs	r3, r2
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e5de:	ad02      	add	r5, sp, #8
	return phy_tx_time[phys];
    e5e0:	f003 0307 	and.w	r3, r3, #7
	uint8_t phy_tx_time[8] = { 0,	      PHY_1M,	 PHY_2M,    PHY_1M,
    e5e4:	e905 0003 	stmdb	r5, {r0, r1}
	return phy_tx_time[phys];
    e5e8:	3308      	adds	r3, #8
    e5ea:	446b      	add	r3, sp
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e5ec:	2102      	movs	r1, #2
	return phy_tx_time[phys];
    e5ee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e5f2:	4630      	mov	r0, r6
	lll->phy_tx_time = phy_tx;
    e5f4:	f363 1206 	bfi	r2, r3, #4, #3
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    e5f8:	2306      	movs	r3, #6
	lll->phy_tx_time = phy_tx;
    e5fa:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
			ctx->state = RP_PU_STATE_WAIT_RX_PHY_UPDATE_IND;
    e5fe:	72a3      	strb	r3, [r4, #10]
}
    e600:	b003      	add	sp, #12
    e602:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_PHY_UPDATE);
    e606:	f000 ba63 	b.w	ead0 <llcp_tx_resume_data>
	switch (evt) {
    e60a:	2d03      	cmp	r5, #3
    e60c:	f47f af6c 	bne.w	e4e8 <rp_pu_execute_fsm+0x24>
		llcp_pdu_decode_phy_update_ind(ctx, (struct pdu_data *)param);
    e610:	4619      	mov	r1, r3
    e612:	4620      	mov	r0, r4
    e614:	f002 f820 	bl	10658 <llcp_pdu_decode_phy_update_ind>
		const uint8_t end_procedure = pu_check_update_ind(conn, ctx);
    e618:	4621      	mov	r1, r4
    e61a:	4630      	mov	r0, r6
    e61c:	f7ff fb7a 	bl	dd14 <pu_check_update_ind>
    e620:	4605      	mov	r5, r0
		llcp_rx_node_retain(ctx);
    e622:	4620      	mov	r0, r4
    e624:	f000 fa60 	bl	eae8 <llcp_rx_node_retain>
		if (!end_procedure) {
    e628:	2d00      	cmp	r5, #0
    e62a:	d052      	beq.n	e6d2 <rp_pu_execute_fsm+0x20e>
			if (ctx->data.pu.error == BT_HCI_ERR_INSTANT_PASSED) {
    e62c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e630:	2b28      	cmp	r3, #40	; 0x28
    e632:	d12e      	bne.n	e692 <rp_pu_execute_fsm+0x1ce>
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
    e634:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
    e638:	e02b      	b.n	e692 <rp_pu_execute_fsm+0x1ce>
	switch (evt) {
    e63a:	2d00      	cmp	r5, #0
    e63c:	f47f af54 	bne.w	e4e8 <rp_pu_execute_fsm+0x24>
		rp_pu_tx(conn, ctx, evt, param);
    e640:	4621      	mov	r1, r4
}
    e642:	b003      	add	sp, #12
    e644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		rp_pu_tx(conn, ctx, evt, param);
    e648:	f7ff bc9c 	b.w	df84 <rp_pu_tx.constprop.0>
	switch (evt) {
    e64c:	2d00      	cmp	r5, #0
    e64e:	f47f af4b 	bne.w	e4e8 <rp_pu_execute_fsm+0x24>
	if (is_instant_reached_or_passed(ctx->data.pu.instant, ull_conn_event_counter(conn))) {
    e652:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    e654:	f7fe ff40 	bl	d4d8 <ull_conn_event_counter>
    e658:	1bc0      	subs	r0, r0, r7
    e65a:	0403      	lsls	r3, r0, #16
    e65c:	f53f af44 	bmi.w	e4e8 <rp_pu_execute_fsm+0x24>
		ctx->data.pu.error = BT_HCI_ERR_SUCCESS;
    e660:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    e664:	f996 5039 	ldrsb.w	r5, [r6, #57]	; 0x39
	const uint8_t old_tx = lll->phy_tx;
    e668:	f896 0076 	ldrb.w	r0, [r6, #118]	; 0x76
	const uint8_t old_rx = lll->phy_rx;
    e66c:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
    e670:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    e674:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    e678:	2d00      	cmp	r5, #0
	const uint8_t old_tx = lll->phy_tx;
    e67a:	f000 0c07 	and.w	ip, r0, #7
	const uint8_t old_rx = lll->phy_rx;
    e67e:	f003 0707 	and.w	r7, r3, #7
	} else if (lll->role == BT_HCI_ROLE_PERIPHERAL) {
    e682:	db2c      	blt.n	e6de <rp_pu_execute_fsm+0x21a>
{
    e684:	2200      	movs	r2, #0
		ctx->data.pu.ntf_pu = phy_changed;
    e686:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e68a:	f362 0300 	bfi	r3, r2, #0, #1
    e68e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	pu_set_timing_restrict(conn, conn->lll.phy_tx);
    e692:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    e696:	f3c3 0202 	ubfx	r2, r3, #0, #3
	lll->phy_tx_time = phy_tx;
    e69a:	f362 1306 	bfi	r3, r2, #4, #3
	ctx->state = RP_PU_STATE_WAIT_INSTANT_ON_AIR;
    e69e:	2209      	movs	r2, #9
	lll->phy_tx_time = phy_tx;
    e6a0:	f886 3076 	strb.w	r3, [r6, #118]	; 0x76
	ctx->state = RP_PU_STATE_WAIT_INSTANT_ON_AIR;
    e6a4:	72a2      	strb	r2, [r4, #10]
}
    e6a6:	e71f      	b.n	e4e8 <rp_pu_execute_fsm+0x24>
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL && (!ctx->data.pu.rx || !ctx->data.pu.tx)) {
    e6a8:	075a      	lsls	r2, r3, #29
    e6aa:	f47f af5c 	bne.w	e566 <rp_pu_execute_fsm+0xa2>
    e6ae:	e754      	b.n	e55a <rp_pu_execute_fsm+0x96>
	pu_ntf(conn, ctx);
    e6b0:	4621      	mov	r1, r4
    e6b2:	f7ff fbdd 	bl	de70 <pu_ntf>
	pu_dle_ntf(conn, ctx);
    e6b6:	4621      	mov	r1, r4
    e6b8:	4630      	mov	r0, r6
    e6ba:	f7ff fc2b 	bl	df14 <pu_dle_ntf>
	llcp_rr_complete(conn);
    e6be:	4630      	mov	r0, r6
    e6c0:	f003 f9ca 	bl	11a58 <llcp_rr_complete>
	llcp_rr_set_paused_cmd(conn, PROC_NONE);
    e6c4:	2100      	movs	r1, #0
    e6c6:	4630      	mov	r0, r6
    e6c8:	f003 f81c 	bl	11704 <llcp_rr_set_paused_cmd>
	ctx->state = RP_PU_STATE_IDLE;
    e6cc:	2300      	movs	r3, #0
    e6ce:	72a3      	strb	r3, [r4, #10]
}
    e6d0:	e70a      	b.n	e4e8 <rp_pu_execute_fsm+0x24>
			llcp_rr_prt_stop(conn);
    e6d2:	4630      	mov	r0, r6
    e6d4:	f003 f832 	bl	1173c <llcp_rr_prt_stop>
			ctx->state = RP_PU_STATE_WAIT_INSTANT;
    e6d8:	2308      	movs	r3, #8
    e6da:	72a3      	strb	r3, [r4, #10]
    e6dc:	e704      	b.n	e4e8 <rp_pu_execute_fsm+0x24>
		if (p_to_c_phy) {
    e6de:	f011 0103 	ands.w	r1, r1, #3
    e6e2:	d018      	beq.n	e716 <rp_pu_execute_fsm+0x252>
			lll->phy_tx = p_to_c_phy;
    e6e4:	f361 0002 	bfi	r0, r1, #0, #3
		if (c_to_p_phy) {
    e6e8:	f012 0203 	ands.w	r2, r2, #3
			lll->phy_tx = p_to_c_phy;
    e6ec:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
		if (c_to_p_phy) {
    e6f0:	d01b      	beq.n	e72a <rp_pu_execute_fsm+0x266>
			lll->phy_rx = c_to_p_phy;
    e6f2:	f362 0302 	bfi	r3, r2, #0, #3
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    e6f6:	458c      	cmp	ip, r1
			lll->phy_rx = c_to_p_phy;
    e6f8:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    e6fc:	d012      	beq.n	e724 <rp_pu_execute_fsm+0x260>
			ctx->data.pu.ntf_dle = pu_update_eff_times(conn, ctx);
    e6fe:	4621      	mov	r1, r4
    e700:	4630      	mov	r0, r6
    e702:	f7ff fb37 	bl	dd74 <pu_update_eff_times>
    e706:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e70a:	f360 0341 	bfi	r3, r0, #1, #1
    e70e:	2201      	movs	r2, #1
    e710:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    e714:	e7b7      	b.n	e686 <rp_pu_execute_fsm+0x1c2>
		if (c_to_p_phy) {
    e716:	f012 0203 	ands.w	r2, r2, #3
    e71a:	d0b3      	beq.n	e684 <rp_pu_execute_fsm+0x1c0>
			lll->phy_rx = c_to_p_phy;
    e71c:	f362 0302 	bfi	r3, r2, #0, #3
    e720:	f886 3077 	strb.w	r3, [r6, #119]	; 0x77
	return ((old_tx != lll->phy_tx) || (old_rx != lll->phy_rx));
    e724:	4297      	cmp	r7, r2
    e726:	d1ea      	bne.n	e6fe <rp_pu_execute_fsm+0x23a>
    e728:	e7ac      	b.n	e684 <rp_pu_execute_fsm+0x1c0>
    e72a:	458c      	cmp	ip, r1
    e72c:	d1e7      	bne.n	e6fe <rp_pu_execute_fsm+0x23a>
    e72e:	e7a9      	b.n	e684 <rp_pu_execute_fsm+0x1c0>
    e730:	0001e878 	.word	0x0001e878
    e734:	0001e220 	.word	0x0001e220
    e738:	0001e1a4 	.word	0x0001e1a4
    e73c:	0001e914 	.word	0x0001e914
    e740:	0001dd48 	.word	0x0001dd48

0000e744 <llcp_lp_pu_rx>:
	switch (pdu->llctrl.opcode) {
    e744:	f892 c01f 	ldrb.w	ip, [r2, #31]
    e748:	f1bc 0f11 	cmp.w	ip, #17
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    e74c:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    e750:	d00f      	beq.n	e772 <llcp_lp_pu_rx+0x2e>
    e752:	f1bc 0f18 	cmp.w	ip, #24
    e756:	d012      	beq.n	e77e <llcp_lp_pu_rx+0x3a>
    e758:	f1bc 0f07 	cmp.w	ip, #7
    e75c:	d00c      	beq.n	e778 <llcp_lp_pu_rx+0x34>
{
    e75e:	b510      	push	{r4, lr}
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    e760:	2324      	movs	r3, #36	; 0x24
    e762:	460c      	mov	r4, r1
    e764:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
		llcp_lr_complete(conn);
    e768:	f001 fcc2 	bl	100f0 <llcp_lr_complete>
		ctx->state = LP_PU_STATE_IDLE;
    e76c:	2300      	movs	r3, #0
    e76e:	72a3      	strb	r3, [r4, #10]
}
    e770:	bd10      	pop	{r4, pc}
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_REJECT, pdu);
    e772:	2205      	movs	r2, #5
    e774:	f7ff bd3c 	b.w	e1f0 <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_UNKNOWN, pdu);
    e778:	2206      	movs	r2, #6
    e77a:	f7ff bd39 	b.w	e1f0 <lp_pu_execute_fsm>
		lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_PHY_UPDATE_IND, pdu);
    e77e:	2202      	movs	r2, #2
    e780:	f7ff bd36 	b.w	e1f0 <lp_pu_execute_fsm>

0000e784 <llcp_lp_pu_init_proc>:
	ctx->state = LP_PU_STATE_IDLE;
    e784:	2300      	movs	r3, #0
    e786:	7283      	strb	r3, [r0, #10]
}
    e788:	4770      	bx	lr
    e78a:	bf00      	nop

0000e78c <llcp_lp_pu_run>:
{
    e78c:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_RUN, param);
    e78e:	2200      	movs	r2, #0
    e790:	f7ff bd2e 	b.w	e1f0 <lp_pu_execute_fsm>

0000e794 <llcp_lp_pu_tx_ack>:
{
    e794:	4613      	mov	r3, r2
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_ACK, param);
    e796:	2203      	movs	r2, #3
    e798:	f7ff bd2a 	b.w	e1f0 <lp_pu_execute_fsm>

0000e79c <llcp_lp_pu_tx_ntf>:
	lp_pu_execute_fsm(conn, ctx, LP_PU_EVT_NTF, NULL);
    e79c:	2300      	movs	r3, #0
    e79e:	2204      	movs	r2, #4
    e7a0:	f7ff bd26 	b.w	e1f0 <lp_pu_execute_fsm>

0000e7a4 <llcp_rp_pu_rx>:

void llcp_rp_pu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
    e7a4:	b510      	push	{r4, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
    e7a6:	f892 e01f 	ldrb.w	lr, [r2, #31]
    e7aa:	f1be 0f16 	cmp.w	lr, #22
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
    e7ae:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
    e7b2:	d00b      	beq.n	e7cc <llcp_rp_pu_rx+0x28>
    e7b4:	f1be 0f18 	cmp.w	lr, #24
    e7b8:	d00d      	beq.n	e7d6 <llcp_rp_pu_rx+0x32>
		break;
#endif /* CONFIG_BT_PERIPHERAL */
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    e7ba:	2324      	movs	r3, #36	; 0x24
    e7bc:	460c      	mov	r4, r1
    e7be:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
		llcp_rr_complete(conn);
    e7c2:	f003 f949 	bl	11a58 <llcp_rr_complete>
		ctx->state = RP_PU_STATE_IDLE;
    e7c6:	2300      	movs	r3, #0
    e7c8:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
    e7ca:	bd10      	pop	{r4, pc}
    e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_REQ, pdu);
    e7d0:	2201      	movs	r2, #1
    e7d2:	f7ff be77 	b.w	e4c4 <rp_pu_execute_fsm>
}
    e7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_PHY_UPDATE_IND, pdu);
    e7da:	2203      	movs	r2, #3
    e7dc:	f7ff be72 	b.w	e4c4 <rp_pu_execute_fsm>

0000e7e0 <llcp_rp_pu_init_proc>:

void llcp_rp_pu_init_proc(struct proc_ctx *ctx)
    e7e0:	2300      	movs	r3, #0
    e7e2:	7283      	strb	r3, [r0, #10]
    e7e4:	4770      	bx	lr
    e7e6:	bf00      	nop

0000e7e8 <llcp_rp_pu_run>:
{
	ctx->state = RP_PU_STATE_IDLE;
}

void llcp_rp_pu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    e7e8:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_RUN, param);
    e7ea:	2200      	movs	r2, #0
    e7ec:	f7ff be6a 	b.w	e4c4 <rp_pu_execute_fsm>

0000e7f0 <llcp_rp_pu_tx_ack>:
}

void llcp_rp_pu_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    e7f0:	4613      	mov	r3, r2
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_ACK, param);
    e7f2:	2202      	movs	r2, #2
    e7f4:	f7ff be66 	b.w	e4c4 <rp_pu_execute_fsm>

0000e7f8 <llcp_rp_pu_tx_ntf>:
}

void llcp_rp_pu_tx_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_pu_execute_fsm(conn, ctx, RP_PU_EVT_NTF, NULL);
    e7f8:	2300      	movs	r3, #0
    e7fa:	2204      	movs	r2, #4
    e7fc:	f7ff be62 	b.w	e4c4 <rp_pu_execute_fsm>

0000e800 <ull_tx_q_init>:

#include "ull_tx_queue.h"

void ull_tx_q_init(struct ull_tx_q *queue)
{
	queue->pause_data = 0U;
    e800:	2300      	movs	r3, #0
    e802:	7003      	strb	r3, [r0, #0]
	list->head = NULL;
    e804:	6043      	str	r3, [r0, #4]
    e806:	6083      	str	r3, [r0, #8]
    e808:	60c3      	str	r3, [r0, #12]
    e80a:	6103      	str	r3, [r0, #16]
	sys_slist_init(&queue->tx_list);
	sys_slist_init(&queue->data_list);
}
    e80c:	4770      	bx	lr
    e80e:	bf00      	nop

0000e810 <ull_tx_q_pause_data>:

void ull_tx_q_pause_data(struct ull_tx_q *queue)
{
	queue->pause_data++;
    e810:	7803      	ldrb	r3, [r0, #0]
    e812:	3301      	adds	r3, #1
    e814:	7003      	strb	r3, [r0, #0]
}
    e816:	4770      	bx	lr

0000e818 <ull_tx_q_resume_data>:

void ull_tx_q_resume_data(struct ull_tx_q *queue)
{
	if (queue->pause_data > 0) {
    e818:	7803      	ldrb	r3, [r0, #0]
    e81a:	b95b      	cbnz	r3, e834 <ull_tx_q_resume_data+0x1c>
	return list->head;
    e81c:	68c3      	ldr	r3, [r0, #12]
		queue->pause_data--;
	}

	/* move all paused data to the tail of tx list, only if not empty and no longer paused */
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
    e81e:	b17b      	cbz	r3, e840 <ull_tx_q_resume_data+0x28>
	return list->tail;
    e820:	6902      	ldr	r2, [r0, #16]
Z_GENLIST_APPEND_LIST(slist, snode)
    e822:	b11a      	cbz	r2, e82c <ull_tx_q_resume_data+0x14>
	return list->tail;
    e824:	6881      	ldr	r1, [r0, #8]
Z_GENLIST_APPEND_LIST(slist, snode)
    e826:	b161      	cbz	r1, e842 <ull_tx_q_resume_data+0x2a>
	parent->next = child;
    e828:	600b      	str	r3, [r1, #0]
	list->tail = node;
    e82a:	6082      	str	r2, [r0, #8]
	list->head = NULL;
    e82c:	2300      	movs	r3, #0
    e82e:	60c3      	str	r3, [r0, #12]
    e830:	6103      	str	r3, [r0, #16]
		sys_slist_merge_slist(&queue->tx_list, &queue->data_list);
	}
}
    e832:	4770      	bx	lr
		queue->pause_data--;
    e834:	3b01      	subs	r3, #1
    e836:	b2db      	uxtb	r3, r3
    e838:	7003      	strb	r3, [r0, #0]
	if (!queue->pause_data &&  !sys_slist_is_empty(&queue->data_list)) {
    e83a:	2b00      	cmp	r3, #0
    e83c:	d0ee      	beq.n	e81c <ull_tx_q_resume_data+0x4>
}
    e83e:	4770      	bx	lr
    e840:	4770      	bx	lr
	list->head = node;
    e842:	6043      	str	r3, [r0, #4]
}
    e844:	e7f1      	b.n	e82a <ull_tx_q_resume_data+0x12>
    e846:	bf00      	nop

0000e848 <ull_tx_q_enqueue_data>:

void ull_tx_q_enqueue_data(struct ull_tx_q *queue, struct node_tx *tx)
{
	sys_slist_t *list;

	if (queue->pause_data) {
    e848:	7803      	ldrb	r3, [r0, #0]
    e84a:	b13b      	cbz	r3, e85c <ull_tx_q_enqueue_data+0x14>
	parent->next = child;
    e84c:	2300      	movs	r3, #0
		/* enqueue data pdu into paused data wait list */
		list = &queue->data_list;
    e84e:	300c      	adds	r0, #12
    e850:	600b      	str	r3, [r1, #0]
	return list->tail;
    e852:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    e854:	b143      	cbz	r3, e868 <ull_tx_q_enqueue_data+0x20>
	parent->next = child;
    e856:	6019      	str	r1, [r3, #0]
	list->tail = node;
    e858:	6041      	str	r1, [r0, #4]
		/* enqueue data pdu into tx list */
		list = &queue->tx_list;
	}

	sys_slist_append(list, (sys_snode_t *)tx);
}
    e85a:	4770      	bx	lr
	parent->next = child;
    e85c:	2300      	movs	r3, #0
		list = &queue->tx_list;
    e85e:	3004      	adds	r0, #4
    e860:	600b      	str	r3, [r1, #0]
	return list->tail;
    e862:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
    e864:	2b00      	cmp	r3, #0
    e866:	d1f6      	bne.n	e856 <ull_tx_q_enqueue_data+0xe>
	list->head = node;
    e868:	6001      	str	r1, [r0, #0]
    e86a:	6041      	str	r1, [r0, #4]
}
    e86c:	4770      	bx	lr
    e86e:	bf00      	nop

0000e870 <ull_tx_q_enqueue_ctrl>:
	parent->next = child;
    e870:	2300      	movs	r3, #0
    e872:	600b      	str	r3, [r1, #0]
	return list->tail;
    e874:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
    e876:	b113      	cbz	r3, e87e <ull_tx_q_enqueue_ctrl+0xe>
	parent->next = child;
    e878:	6019      	str	r1, [r3, #0]
	list->tail = node;
    e87a:	6081      	str	r1, [r0, #8]

void ull_tx_q_enqueue_ctrl(struct ull_tx_q *queue, struct node_tx *tx)
{
	/* enqueue ctrl pdu into tx list */
	sys_slist_append(&queue->tx_list, (sys_snode_t *)tx);
}
    e87c:	4770      	bx	lr
	list->head = node;
    e87e:	6041      	str	r1, [r0, #4]
    e880:	6081      	str	r1, [r0, #8]
}
    e882:	4770      	bx	lr

0000e884 <ull_tx_q_peek>:
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_peek_head(&queue->tx_list);

	return tx;
}
    e884:	6840      	ldr	r0, [r0, #4]
    e886:	4770      	bx	lr

0000e888 <ull_tx_q_dequeue>:

struct node_tx *ull_tx_q_dequeue(struct ull_tx_q *queue)
{
    e888:	4603      	mov	r3, r0
	return list->head;
    e88a:	6840      	ldr	r0, [r0, #4]
Z_GENLIST_GET(slist, snode)
    e88c:	b128      	cbz	r0, e89a <ull_tx_q_dequeue+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e88e:	6899      	ldr	r1, [r3, #8]
	return node->next;
    e890:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    e892:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e894:	4288      	cmp	r0, r1
	list->tail = node;
    e896:	bf08      	it	eq
    e898:	609a      	streq	r2, [r3, #8]
	struct node_tx *tx;

	tx = (struct node_tx *)sys_slist_get(&queue->tx_list);

	return tx;
}
    e89a:	4770      	bx	lr

0000e89c <pdu_validate_conn_update_ind>:
#define VALIDATE_PDU_LEN(pdu, type) (pdu->len == PDU_DATA_LLCTRL_LEN(type))

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_conn_update_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_update_ind);
    e89c:	7840      	ldrb	r0, [r0, #1]
}
    e89e:	f1a0 000c 	sub.w	r0, r0, #12
    e8a2:	fab0 f080 	clz	r0, r0
    e8a6:	0940      	lsrs	r0, r0, #5
    e8a8:	4770      	bx	lr
    e8aa:	bf00      	nop

0000e8ac <pdu_validate_chan_map_ind>:

static bool pdu_validate_chan_map_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, chan_map_ind);
    e8ac:	7840      	ldrb	r0, [r0, #1]
}
    e8ae:	f1a0 0008 	sub.w	r0, r0, #8
    e8b2:	fab0 f080 	clz	r0, r0
    e8b6:	0940      	lsrs	r0, r0, #5
    e8b8:	4770      	bx	lr
    e8ba:	bf00      	nop

0000e8bc <pdu_validate_terminate_ind>:
#endif /* CONFIG_BT_PERIPHERAL */

static bool pdu_validate_terminate_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, terminate_ind);
    e8bc:	7840      	ldrb	r0, [r0, #1]
}
    e8be:	f1a0 0002 	sub.w	r0, r0, #2
    e8c2:	fab0 f080 	clz	r0, r0
    e8c6:	0940      	lsrs	r0, r0, #5
    e8c8:	4770      	bx	lr
    e8ca:	bf00      	nop

0000e8cc <pdu_validate_enc_req>:

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_enc_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, enc_req);
    e8cc:	7840      	ldrb	r0, [r0, #1]
}
    e8ce:	f1a0 0017 	sub.w	r0, r0, #23
    e8d2:	fab0 f080 	clz	r0, r0
    e8d6:	0940      	lsrs	r0, r0, #5
    e8d8:	4770      	bx	lr
    e8da:	bf00      	nop

0000e8dc <pdu_validate_start_enc_rsp>:
#endif /* CONFIG_BT_CTLR_LE_ENC && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_LE_ENC) && defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_start_enc_rsp(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, start_enc_rsp);
    e8dc:	7840      	ldrb	r0, [r0, #1]
}
    e8de:	f1a0 0001 	sub.w	r0, r0, #1
    e8e2:	fab0 f080 	clz	r0, r0
    e8e6:	0940      	lsrs	r0, r0, #5
    e8e8:	4770      	bx	lr
    e8ea:	bf00      	nop

0000e8ec <pdu_validate_feature_req>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static bool pdu_validate_feature_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, feature_req);
    e8ec:	7840      	ldrb	r0, [r0, #1]
}
    e8ee:	f1a0 0009 	sub.w	r0, r0, #9
    e8f2:	fab0 f080 	clz	r0, r0
    e8f6:	0940      	lsrs	r0, r0, #5
    e8f8:	4770      	bx	lr
    e8fa:	bf00      	nop

0000e8fc <pdu_validate_version_ind>:
}
#endif

static bool pdu_validate_version_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, version_ind);
    e8fc:	7840      	ldrb	r0, [r0, #1]
}
    e8fe:	f1a0 0006 	sub.w	r0, r0, #6
    e902:	fab0 f080 	clz	r0, r0
    e906:	0940      	lsrs	r0, r0, #5
    e908:	4770      	bx	lr
    e90a:	bf00      	nop

0000e90c <pdu_validate_conn_param_req>:
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static bool pdu_validate_conn_param_req(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, conn_param_req);
    e90c:	7840      	ldrb	r0, [r0, #1]
}
    e90e:	f1a0 0018 	sub.w	r0, r0, #24
    e912:	fab0 f080 	clz	r0, r0
    e916:	0940      	lsrs	r0, r0, #5
    e918:	4770      	bx	lr
    e91a:	bf00      	nop

0000e91c <pdu_validate_reject_ext_ind>:
	return VALIDATE_PDU_LEN(pdu, conn_param_rsp);
}

static bool pdu_validate_reject_ext_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, reject_ext_ind);
    e91c:	7840      	ldrb	r0, [r0, #1]
}
    e91e:	f1a0 0003 	sub.w	r0, r0, #3
    e922:	fab0 f080 	clz	r0, r0
    e926:	0940      	lsrs	r0, r0, #5
    e928:	4770      	bx	lr
    e92a:	bf00      	nop

0000e92c <pdu_validate_phy_upd_ind>:
	return VALIDATE_PDU_LEN(pdu, phy_rsp);
}

static bool pdu_validate_phy_upd_ind(struct pdu_data *pdu)
{
	return VALIDATE_PDU_LEN(pdu, phy_upd_ind);
    e92c:	7840      	ldrb	r0, [r0, #1]
}
    e92e:	f1a0 0005 	sub.w	r0, r0, #5
    e932:	fab0 f080 	clz	r0, r0
    e936:	0940      	lsrs	r0, r0, #5
    e938:	4770      	bx	lr
    e93a:	bf00      	nop

0000e93c <create_procedure>:
{
    e93c:	b570      	push	{r4, r5, r6, lr}
    e93e:	4606      	mov	r6, r0
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
    e940:	4608      	mov	r0, r1
{
    e942:	460d      	mov	r5, r1
	ctx = (struct proc_ctx *)mem_acquire(&owner->free);
    e944:	f7f9 f970 	bl	7c28 <mem_acquire>
	if (ctx) {
    e948:	4604      	mov	r4, r0
    e94a:	b178      	cbz	r0, e96c <create_procedure+0x30>
	ctx->collision = 0U;
    e94c:	2100      	movs	r1, #0
		ctx->owner = owner;
    e94e:	6045      	str	r5, [r0, #4]
	ctx->proc = proc;
    e950:	7206      	strb	r6, [r0, #8]
	ctx->collision = 0U;
    e952:	6101      	str	r1, [r0, #16]
	ctx->done = 0U;
    e954:	6241      	str	r1, [r0, #36]	; 0x24
	ctx->rx_greedy = 0U;
    e956:	7301      	strb	r1, [r0, #12]
	ctx->node_ref.tx_ack = NULL;
    e958:	6181      	str	r1, [r0, #24]
    e95a:	61c1      	str	r1, [r0, #28]
	memset((void *)&ctx->data, 0, sizeof(ctx->data));
    e95c:	222c      	movs	r2, #44	; 0x2c
    e95e:	3028      	adds	r0, #40	; 0x28
    e960:	f00b f953 	bl	19c0a <memset>
	ctx->rx_opcode = ULL_LLCP_INVALID_OPCODE;
    e964:	23ff      	movs	r3, #255	; 0xff
    e966:	72e3      	strb	r3, [r4, #11]
	ctx->tx_opcode = ULL_LLCP_INVALID_OPCODE;
    e968:	7363      	strb	r3, [r4, #13]
	ctx->response_opcode = ULL_LLCP_INVALID_OPCODE;
    e96a:	7263      	strb	r3, [r4, #9]
}
    e96c:	4620      	mov	r0, r4
    e96e:	bd70      	pop	{r4, r5, r6, pc}

0000e970 <pdu_validate_clock_accuracy_rsp>:
{
	return VALIDATE_PDU_LEN(pdu, clock_accuracy_req);
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool pdu_validate_clock_accuracy_rsp(struct pdu_data *pdu)
    e970:	7840      	ldrb	r0, [r0, #1]
    e972:	f1a0 0002 	sub.w	r0, r0, #2
    e976:	fab0 f080 	clz	r0, r0
    e97a:	0940      	lsrs	r0, r0, #5
    e97c:	4770      	bx	lr
    e97e:	bf00      	nop

0000e980 <pdu_validate_unknown_rsp>:
static bool pdu_validate_unknown_rsp(struct pdu_data *pdu)
    e980:	7840      	ldrb	r0, [r0, #1]
    e982:	f1a0 0002 	sub.w	r0, r0, #2
    e986:	fab0 f080 	clz	r0, r0
    e98a:	0940      	lsrs	r0, r0, #5
    e98c:	4770      	bx	lr
    e98e:	bf00      	nop

0000e990 <pdu_validate_pause_enc_req>:
static bool pdu_validate_pause_enc_req(struct pdu_data *pdu)
    e990:	7840      	ldrb	r0, [r0, #1]
    e992:	f1a0 0001 	sub.w	r0, r0, #1
    e996:	fab0 f080 	clz	r0, r0
    e99a:	0940      	lsrs	r0, r0, #5
    e99c:	4770      	bx	lr
    e99e:	bf00      	nop

0000e9a0 <pdu_validate_reject_ind>:
static bool pdu_validate_reject_ind(struct pdu_data *pdu)
    e9a0:	7840      	ldrb	r0, [r0, #1]
    e9a2:	f1a0 0002 	sub.w	r0, r0, #2
    e9a6:	fab0 f080 	clz	r0, r0
    e9aa:	0940      	lsrs	r0, r0, #5
    e9ac:	4770      	bx	lr
    e9ae:	bf00      	nop

0000e9b0 <pdu_validate_conn_param_rsp>:
static bool pdu_validate_conn_param_rsp(struct pdu_data *pdu)
    e9b0:	7840      	ldrb	r0, [r0, #1]
    e9b2:	f1a0 0018 	sub.w	r0, r0, #24
    e9b6:	fab0 f080 	clz	r0, r0
    e9ba:	0940      	lsrs	r0, r0, #5
    e9bc:	4770      	bx	lr
    e9be:	bf00      	nop

0000e9c0 <pdu_validate_ping_req>:
static bool pdu_validate_ping_req(struct pdu_data *pdu)
    e9c0:	7840      	ldrb	r0, [r0, #1]
    e9c2:	f1a0 0001 	sub.w	r0, r0, #1
    e9c6:	fab0 f080 	clz	r0, r0
    e9ca:	0940      	lsrs	r0, r0, #5
    e9cc:	4770      	bx	lr
    e9ce:	bf00      	nop

0000e9d0 <pdu_validate_ping_rsp>:
static bool pdu_validate_ping_rsp(struct pdu_data *pdu)
    e9d0:	7840      	ldrb	r0, [r0, #1]
    e9d2:	f1a0 0001 	sub.w	r0, r0, #1
    e9d6:	fab0 f080 	clz	r0, r0
    e9da:	0940      	lsrs	r0, r0, #5
    e9dc:	4770      	bx	lr
    e9de:	bf00      	nop

0000e9e0 <pdu_validate_length_req>:
static bool pdu_validate_length_req(struct pdu_data *pdu)
    e9e0:	7840      	ldrb	r0, [r0, #1]
    e9e2:	f1a0 0009 	sub.w	r0, r0, #9
    e9e6:	fab0 f080 	clz	r0, r0
    e9ea:	0940      	lsrs	r0, r0, #5
    e9ec:	4770      	bx	lr
    e9ee:	bf00      	nop

0000e9f0 <pdu_validate_length_rsp>:
static bool pdu_validate_length_rsp(struct pdu_data *pdu)
    e9f0:	7840      	ldrb	r0, [r0, #1]
    e9f2:	f1a0 0009 	sub.w	r0, r0, #9
    e9f6:	fab0 f080 	clz	r0, r0
    e9fa:	0940      	lsrs	r0, r0, #5
    e9fc:	4770      	bx	lr
    e9fe:	bf00      	nop

0000ea00 <pdu_validate_phy_req>:
static bool pdu_validate_phy_req(struct pdu_data *pdu)
    ea00:	7840      	ldrb	r0, [r0, #1]
    ea02:	f1a0 0003 	sub.w	r0, r0, #3
    ea06:	fab0 f080 	clz	r0, r0
    ea0a:	0940      	lsrs	r0, r0, #5
    ea0c:	4770      	bx	lr
    ea0e:	bf00      	nop

0000ea10 <pdu_validate_phy_rsp>:
static bool pdu_validate_phy_rsp(struct pdu_data *pdu)
    ea10:	7840      	ldrb	r0, [r0, #1]
    ea12:	f1a0 0003 	sub.w	r0, r0, #3
    ea16:	fab0 f080 	clz	r0, r0
    ea1a:	0940      	lsrs	r0, r0, #5
    ea1c:	4770      	bx	lr
    ea1e:	bf00      	nop

0000ea20 <llcp_proc_ctx_release>:
{
    ea20:	b510      	push	{r4, lr}
	LL_ASSERT(ctx->owner);
    ea22:	6841      	ldr	r1, [r0, #4]
{
    ea24:	4604      	mov	r4, r0
	LL_ASSERT(ctx->owner);
    ea26:	b121      	cbz	r1, ea32 <llcp_proc_ctx_release+0x12>
	mem_release(ctx, &ctx->owner->free);
    ea28:	4620      	mov	r0, r4
}
    ea2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
    ea2e:	f7f9 b917 	b.w	7c60 <mem_release>
	LL_ASSERT(ctx->owner);
    ea32:	4a09      	ldr	r2, [pc, #36]	; (ea58 <llcp_proc_ctx_release+0x38>)
    ea34:	4909      	ldr	r1, [pc, #36]	; (ea5c <llcp_proc_ctx_release+0x3c>)
    ea36:	480a      	ldr	r0, [pc, #40]	; (ea60 <llcp_proc_ctx_release+0x40>)
    ea38:	2361      	movs	r3, #97	; 0x61
    ea3a:	f00a fe00 	bl	1963e <assert_print>
    ea3e:	4040      	eors	r0, r0
    ea40:	f380 8811 	msr	BASEPRI, r0
    ea44:	f04f 0003 	mov.w	r0, #3
    ea48:	df02      	svc	2
	mem_release(ctx, &ctx->owner->free);
    ea4a:	6861      	ldr	r1, [r4, #4]
    ea4c:	4620      	mov	r0, r4
}
    ea4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_release(ctx, &ctx->owner->free);
    ea52:	f7f9 b905 	b.w	7c60 <mem_release>
    ea56:	bf00      	nop
    ea58:	0001e92c 	.word	0x0001e92c
    ea5c:	0001e96c 	.word	0x0001e96c
    ea60:	0001e1a4 	.word	0x0001e1a4

0000ea64 <llcp_tx_alloc_peek>:
	return mem_tx.free != NULL;
    ea64:	4b02      	ldr	r3, [pc, #8]	; (ea70 <llcp_tx_alloc_peek+0xc>)
    ea66:	6818      	ldr	r0, [r3, #0]
}
    ea68:	3800      	subs	r0, #0
    ea6a:	bf18      	it	ne
    ea6c:	2001      	movne	r0, #1
    ea6e:	4770      	bx	lr
    ea70:	20000608 	.word	0x20000608

0000ea74 <llcp_tx_alloc>:
{
    ea74:	b510      	push	{r4, lr}
	tx = (struct node_tx *)mem_acquire(&mem_tx.free);
    ea76:	4804      	ldr	r0, [pc, #16]	; (ea88 <llcp_tx_alloc+0x14>)
    ea78:	f7f9 f8d6 	bl	7c28 <mem_acquire>
    ea7c:	4604      	mov	r4, r0
	ull_pdu_data_init(pdu);
    ea7e:	3004      	adds	r0, #4
    ea80:	f7fe fd18 	bl	d4b4 <ull_pdu_data_init>
}
    ea84:	4620      	mov	r0, r4
    ea86:	bd10      	pop	{r4, pc}
    ea88:	20000608 	.word	0x20000608

0000ea8c <llcp_ntf_alloc_is_available>:
{
    ea8c:	b508      	push	{r3, lr}
	return ll_pdu_rx_alloc_peek(1) != NULL;
    ea8e:	2001      	movs	r0, #1
    ea90:	f7fb f9ee 	bl	9e70 <ll_pdu_rx_alloc_peek>
}
    ea94:	3800      	subs	r0, #0
    ea96:	bf18      	it	ne
    ea98:	2001      	movne	r0, #1
    ea9a:	bd08      	pop	{r3, pc}

0000ea9c <llcp_ntf_alloc>:
	return ll_pdu_rx_alloc();
    ea9c:	f7fb ba0a 	b.w	9eb4 <ll_pdu_rx_alloc>

0000eaa0 <llcp_tx_enqueue>:
	ull_tx_q_enqueue_ctrl(&conn->tx_q, tx);
    eaa0:	30d4      	adds	r0, #212	; 0xd4
    eaa2:	f7ff bee5 	b.w	e870 <ull_tx_q_enqueue_ctrl>
    eaa6:	bf00      	nop

0000eaa8 <llcp_tx_pause_data>:
{
    eaa8:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp.tx_q_pause_data_mask == 0) {
    eaaa:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
{
    eaae:	4605      	mov	r5, r0
    eab0:	460c      	mov	r4, r1
	if (conn->llcp.tx_q_pause_data_mask == 0) {
    eab2:	b11b      	cbz	r3, eabc <llcp_tx_pause_data+0x14>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
    eab4:	431c      	orrs	r4, r3
    eab6:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
    eaba:	bd38      	pop	{r3, r4, r5, pc}
		ull_tx_q_pause_data(&conn->tx_q);
    eabc:	30d4      	adds	r0, #212	; 0xd4
    eabe:	f7ff fea7 	bl	e810 <ull_tx_q_pause_data>
	conn->llcp.tx_q_pause_data_mask |= pause_mask;
    eac2:	f895 3146 	ldrb.w	r3, [r5, #326]	; 0x146
    eac6:	431c      	orrs	r4, r3
    eac8:	f885 4146 	strb.w	r4, [r5, #326]	; 0x146
}
    eacc:	bd38      	pop	{r3, r4, r5, pc}
    eace:	bf00      	nop

0000ead0 <llcp_tx_resume_data>:
	conn->llcp.tx_q_pause_data_mask &= ~resume_mask;
    ead0:	f890 3146 	ldrb.w	r3, [r0, #326]	; 0x146
    ead4:	ea23 0101 	bic.w	r1, r3, r1
    ead8:	f880 1146 	strb.w	r1, [r0, #326]	; 0x146
	if (conn->llcp.tx_q_pause_data_mask == 0) {
    eadc:	b101      	cbz	r1, eae0 <llcp_tx_resume_data+0x10>
}
    eade:	4770      	bx	lr
		ull_tx_q_resume_data(&conn->tx_q);
    eae0:	30d4      	adds	r0, #212	; 0xd4
    eae2:	f7ff be99 	b.w	e818 <ull_tx_q_resume_data>
    eae6:	bf00      	nop

0000eae8 <llcp_rx_node_retain>:
{
    eae8:	b510      	push	{r4, lr}
	LL_ASSERT(ctx->node_ref.rx);
    eaea:	69c3      	ldr	r3, [r0, #28]
{
    eaec:	4604      	mov	r4, r0
	LL_ASSERT(ctx->node_ref.rx);
    eaee:	b12b      	cbz	r3, eafc <llcp_rx_node_retain+0x14>
	ctx->node_ref.rx->hdr.type = NODE_RX_TYPE_RETAIN;
    eaf0:	222c      	movs	r2, #44	; 0x2c
    eaf2:	711a      	strb	r2, [r3, #4]
	ctx->node_ref.rx->hdr.link = ctx->node_ref.link;
    eaf4:	69e3      	ldr	r3, [r4, #28]
    eaf6:	6962      	ldr	r2, [r4, #20]
    eaf8:	601a      	str	r2, [r3, #0]
}
    eafa:	bd10      	pop	{r4, pc}
	LL_ASSERT(ctx->node_ref.rx);
    eafc:	4a07      	ldr	r2, [pc, #28]	; (eb1c <llcp_rx_node_retain+0x34>)
    eafe:	4908      	ldr	r1, [pc, #32]	; (eb20 <llcp_rx_node_retain+0x38>)
    eb00:	4808      	ldr	r0, [pc, #32]	; (eb24 <llcp_rx_node_retain+0x3c>)
    eb02:	f240 131d 	movw	r3, #285	; 0x11d
    eb06:	f00a fd9a 	bl	1963e <assert_print>
    eb0a:	4040      	eors	r0, r0
    eb0c:	f380 8811 	msr	BASEPRI, r0
    eb10:	f04f 0003 	mov.w	r0, #3
    eb14:	df02      	svc	2
	ctx->node_ref.rx->hdr.type = NODE_RX_TYPE_RETAIN;
    eb16:	69e3      	ldr	r3, [r4, #28]
    eb18:	e7ea      	b.n	eaf0 <llcp_rx_node_retain+0x8>
    eb1a:	bf00      	nop
    eb1c:	0001e92c 	.word	0x0001e92c
    eb20:	0001e978 	.word	0x0001e978
    eb24:	0001e1a4 	.word	0x0001e1a4

0000eb28 <llcp_nodes_release>:
	if (ctx->node_ref.rx && ctx->node_ref.rx->hdr.type == NODE_RX_TYPE_RETAIN) {
    eb28:	69cb      	ldr	r3, [r1, #28]
    eb2a:	b113      	cbz	r3, eb32 <llcp_nodes_release+0xa>
    eb2c:	791a      	ldrb	r2, [r3, #4]
    eb2e:	2a2c      	cmp	r2, #44	; 0x2c
    eb30:	d00b      	beq.n	eb4a <llcp_nodes_release+0x22>
	if (ctx->proc == PROC_PHY_UPDATE && ctx->data.pu.ntf_dle_node) {
    eb32:	7a0b      	ldrb	r3, [r1, #8]
    eb34:	2b07      	cmp	r3, #7
    eb36:	d012      	beq.n	eb5e <llcp_nodes_release+0x36>
	if (ctx->node_ref.tx) {
    eb38:	6a0b      	ldr	r3, [r1, #32]
    eb3a:	b12b      	cbz	r3, eb48 <llcp_nodes_release+0x20>
		ctx->node_ref.tx->next = conn->llcp.tx_node_release;
    eb3c:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
    eb40:	601a      	str	r2, [r3, #0]
		conn->llcp.tx_node_release = ctx->node_ref.tx;
    eb42:	6a0b      	ldr	r3, [r1, #32]
    eb44:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
}
    eb48:	4770      	bx	lr
		ctx->node_ref.rx->hdr.link->mem = conn->llcp.rx_node_release;
    eb4a:	681b      	ldr	r3, [r3, #0]
    eb4c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    eb50:	605a      	str	r2, [r3, #4]
		conn->llcp.rx_node_release = ctx->node_ref.rx;
    eb52:	69cb      	ldr	r3, [r1, #28]
    eb54:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
	if (ctx->proc == PROC_PHY_UPDATE && ctx->data.pu.ntf_dle_node) {
    eb58:	7a0b      	ldrb	r3, [r1, #8]
    eb5a:	2b07      	cmp	r3, #7
    eb5c:	d1ec      	bne.n	eb38 <llcp_nodes_release+0x10>
    eb5e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    eb60:	2b00      	cmp	r3, #0
    eb62:	d0e9      	beq.n	eb38 <llcp_nodes_release+0x10>
		ctx->data.pu.ntf_dle_node->hdr.link->mem = conn->llcp.rx_node_release;
    eb64:	681b      	ldr	r3, [r3, #0]
    eb66:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    eb6a:	605a      	str	r2, [r3, #4]
		conn->llcp.rx_node_release = ctx->data.pu.ntf_dle_node;
    eb6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    eb6e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
    eb72:	e7e1      	b.n	eb38 <llcp_nodes_release+0x10>

0000eb74 <llcp_create_local_procedure>:
{
    eb74:	b510      	push	{r4, lr}
	ctx = create_procedure(proc, &mem_local_ctx);
    eb76:	4916      	ldr	r1, [pc, #88]	; (ebd0 <llcp_create_local_procedure+0x5c>)
    eb78:	f7ff fee0 	bl	e93c <create_procedure>
	if (!ctx) {
    eb7c:	4604      	mov	r4, r0
    eb7e:	b168      	cbz	r0, eb9c <llcp_create_local_procedure+0x28>
	switch (ctx->proc) {
    eb80:	7a03      	ldrb	r3, [r0, #8]
    eb82:	3b01      	subs	r3, #1
    eb84:	2b0b      	cmp	r3, #11
    eb86:	d80f      	bhi.n	eba8 <llcp_create_local_procedure+0x34>
    eb88:	e8df f003 	tbb	[pc, r3]
    eb8c:	06060606 	.word	0x06060606
    eb90:	0a1d0e0e 	.word	0x0a1d0e0e
    eb94:	060e060a 	.word	0x060e060a
		llcp_lp_comm_init_proc(ctx);
    eb98:	f001 f888 	bl	fcac <llcp_lp_comm_init_proc>
}
    eb9c:	4620      	mov	r0, r4
    eb9e:	bd10      	pop	{r4, pc}
		llcp_lp_cu_init_proc(ctx);
    eba0:	f002 fbc8 	bl	11334 <llcp_lp_cu_init_proc>
}
    eba4:	4620      	mov	r0, r4
    eba6:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    eba8:	4a0a      	ldr	r2, [pc, #40]	; (ebd4 <llcp_create_local_procedure+0x60>)
    ebaa:	490b      	ldr	r1, [pc, #44]	; (ebd8 <llcp_create_local_procedure+0x64>)
    ebac:	480b      	ldr	r0, [pc, #44]	; (ebdc <llcp_create_local_procedure+0x68>)
    ebae:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    ebb2:	f00a fd44 	bl	1963e <assert_print>
    ebb6:	4040      	eors	r0, r0
    ebb8:	f380 8811 	msr	BASEPRI, r0
    ebbc:	f04f 0003 	mov.w	r0, #3
    ebc0:	df02      	svc	2
}
    ebc2:	4620      	mov	r0, r4
    ebc4:	bd10      	pop	{r4, pc}
		llcp_lp_pu_init_proc(ctx);
    ebc6:	f7ff fddd 	bl	e784 <llcp_lp_pu_init_proc>
}
    ebca:	4620      	mov	r0, r4
    ebcc:	bd10      	pop	{r4, pc}
    ebce:	bf00      	nop
    ebd0:	20000600 	.word	0x20000600
    ebd4:	0001e92c 	.word	0x0001e92c
    ebd8:	0001e220 	.word	0x0001e220
    ebdc:	0001e1a4 	.word	0x0001e1a4

0000ebe0 <llcp_create_remote_procedure>:
{
    ebe0:	b510      	push	{r4, lr}
	ctx = create_procedure(proc, &mem_remote_ctx);
    ebe2:	4917      	ldr	r1, [pc, #92]	; (ec40 <llcp_create_remote_procedure+0x60>)
    ebe4:	f7ff feaa 	bl	e93c <create_procedure>
	if (!ctx) {
    ebe8:	4604      	mov	r4, r0
    ebea:	b168      	cbz	r0, ec08 <llcp_create_remote_procedure+0x28>
	switch (ctx->proc) {
    ebec:	7a03      	ldrb	r3, [r0, #8]
    ebee:	2b0c      	cmp	r3, #12
    ebf0:	d818      	bhi.n	ec24 <llcp_create_remote_procedure+0x44>
    ebf2:	e8df f003 	tbb	[pc, r3]
    ebf6:	0709      	.short	0x0709
    ebf8:	0b070707 	.word	0x0b070707
    ebfc:	0e0e140b 	.word	0x0e0e140b
    ec00:	1107      	.short	0x1107
    ec02:	07          	.byte	0x07
    ec03:	00          	.byte	0x00
		llcp_rp_comm_init_proc(ctx);
    ec04:	f001 f864 	bl	fcd0 <llcp_rp_comm_init_proc>
}
    ec08:	4620      	mov	r0, r4
    ec0a:	bd10      	pop	{r4, pc}
		llcp_rp_enc_init_proc(ctx);
    ec0c:	f7ff f84e 	bl	dcac <llcp_rp_enc_init_proc>
		break;
    ec10:	e7fa      	b.n	ec08 <llcp_create_remote_procedure+0x28>
		llcp_rp_cu_init_proc(ctx);
    ec12:	f002 fbbd 	bl	11390 <llcp_rp_cu_init_proc>
		break;
    ec16:	e7f7      	b.n	ec08 <llcp_create_remote_procedure+0x28>
		llcp_rp_chmu_init_proc(ctx);
    ec18:	f002 fc0e 	bl	11438 <llcp_rp_chmu_init_proc>
		break;
    ec1c:	e7f4      	b.n	ec08 <llcp_create_remote_procedure+0x28>
		llcp_rp_pu_init_proc(ctx);
    ec1e:	f7ff fddf 	bl	e7e0 <llcp_rp_pu_init_proc>
		break;
    ec22:	e7f1      	b.n	ec08 <llcp_create_remote_procedure+0x28>
		LL_ASSERT(0);
    ec24:	4a07      	ldr	r2, [pc, #28]	; (ec44 <llcp_create_remote_procedure+0x64>)
    ec26:	4908      	ldr	r1, [pc, #32]	; (ec48 <llcp_create_remote_procedure+0x68>)
    ec28:	4808      	ldr	r0, [pc, #32]	; (ec4c <llcp_create_remote_procedure+0x6c>)
    ec2a:	f240 13fd 	movw	r3, #509	; 0x1fd
    ec2e:	f00a fd06 	bl	1963e <assert_print>
    ec32:	4040      	eors	r0, r0
    ec34:	f380 8811 	msr	BASEPRI, r0
    ec38:	f04f 0003 	mov.w	r0, #3
    ec3c:	df02      	svc	2
		break;
    ec3e:	e7e3      	b.n	ec08 <llcp_create_remote_procedure+0x28>
    ec40:	200005f8 	.word	0x200005f8
    ec44:	0001e92c 	.word	0x0001e92c
    ec48:	0001e220 	.word	0x0001e220
    ec4c:	0001e1a4 	.word	0x0001e1a4

0000ec50 <ull_cp_init>:
{
    ec50:	b510      	push	{r4, lr}
	mem_init(mem_local_ctx.pool, PROC_CTX_BUF_SIZE,
    ec52:	4b0a      	ldr	r3, [pc, #40]	; (ec7c <ull_cp_init+0x2c>)
    ec54:	2206      	movs	r2, #6
    ec56:	6858      	ldr	r0, [r3, #4]
    ec58:	2158      	movs	r1, #88	; 0x58
    ec5a:	f7f8 ffb5 	bl	7bc8 <mem_init>
	mem_init(mem_remote_ctx.pool, PROC_CTX_BUF_SIZE,
    ec5e:	4b08      	ldr	r3, [pc, #32]	; (ec80 <ull_cp_init+0x30>)
    ec60:	2201      	movs	r2, #1
    ec62:	6858      	ldr	r0, [r3, #4]
    ec64:	2158      	movs	r1, #88	; 0x58
    ec66:	f7f8 ffaf 	bl	7bc8 <mem_init>
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
    ec6a:	4b06      	ldr	r3, [pc, #24]	; (ec84 <ull_cp_init+0x34>)
}
    ec6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mem_init(mem_tx.pool, TX_CTRL_BUF_SIZE, LLCP_TX_CTRL_BUF_COUNT, &mem_tx.free);
    ec70:	6858      	ldr	r0, [r3, #4]
    ec72:	2204      	movs	r2, #4
    ec74:	212c      	movs	r1, #44	; 0x2c
    ec76:	f7f8 bfa7 	b.w	7bc8 <mem_init>
    ec7a:	bf00      	nop
    ec7c:	20000600 	.word	0x20000600
    ec80:	200005f8 	.word	0x200005f8
    ec84:	20000608 	.word	0x20000608

0000ec88 <ull_llcp_init>:
{
    ec88:	b538      	push	{r3, r4, r5, lr}
    ec8a:	4604      	mov	r4, r0
	list->head = NULL;
    ec8c:	2500      	movs	r5, #0
	llcp_lr_init(conn);
    ec8e:	f001 f9f1 	bl	10074 <llcp_lr_init>
	llcp_rr_init(conn);
    ec92:	4620      	mov	r0, r4
	list->tail = NULL;
    ec94:	e9c4 553a 	strd	r5, r5, [r4, #232]	; 0xe8
	conn->llcp.local.pause = 0U;
    ec98:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
	llcp_rr_init(conn);
    ec9c:	f002 fed0 	bl	11a40 <llcp_rr_init>
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
    eca0:	2207      	movs	r2, #7
    eca2:	4629      	mov	r1, r5
    eca4:	e9c4 553e 	strd	r5, r5, [r4, #248]	; 0xf8
	conn->llcp.remote.incompat = INCOMPAT_NO_COLLISION;
    eca8:	f884 5106 	strb.w	r5, [r4, #262]	; 0x106
	conn->llcp.remote.pause = 0U;
    ecac:	f8a4 5104 	strh.w	r5, [r4, #260]	; 0x104
	conn->llcp.prt_reload = 0U;
    ecb0:	f8a4 5108 	strh.w	r5, [r4, #264]	; 0x108
	memset(&conn->llcp.vex, 0, sizeof(conn->llcp.vex));
    ecb4:	f504 708c 	add.w	r0, r4, #280	; 0x118
    ecb8:	f00a ffa7 	bl	19c0a <memset>
	memset(&conn->llcp.muc, 0, sizeof(conn->llcp.muc));
    ecbc:	2202      	movs	r2, #2
    ecbe:	4629      	mov	r1, r5
    ecc0:	f504 709c 	add.w	r0, r4, #312	; 0x138
    ecc4:	f00a ffa1 	bl	19c0a <memset>
	memset(&conn->llcp.fex, 0, sizeof(conn->llcp.fex));
    ecc8:	2218      	movs	r2, #24
    ecca:	4629      	mov	r1, r5
    eccc:	f504 7090 	add.w	r0, r4, #288	; 0x120
    ecd0:	f00a ff9b 	bl	19c0a <memset>
	conn->llcp.fex.features_used = ll_feat_get();
    ecd4:	f7fa fb78 	bl	93c8 <ll_feat_get>
	conn->lll.enc_rx = 0U;
    ecd8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	conn->llcp.tx_q_pause_data_mask = 0;
    ecdc:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
	conn->llcp.fex.features_used = ll_feat_get();
    ece0:	e9c4 014c 	strd	r0, r1, [r4, #304]	; 0x130
	conn->llcp.rx_node_release = NULL;
    ece4:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
	conn->lll.enc_rx = 0U;
    ece8:	f023 0318 	bic.w	r3, r3, #24
    ecec:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->lll.event_counter = 0;
    ecf0:	8665      	strh	r5, [r4, #50]	; 0x32
}
    ecf2:	bd38      	pop	{r3, r4, r5, pc}

0000ecf4 <ull_cp_release_tx>:
	mem_release(tx, &mem_tx.free);
    ecf4:	4608      	mov	r0, r1
    ecf6:	4901      	ldr	r1, [pc, #4]	; (ecfc <ull_cp_release_tx+0x8>)
    ecf8:	f7f8 bfb2 	b.w	7c60 <mem_release>
    ecfc:	20000608 	.word	0x20000608

0000ed00 <ull_cp_prt_elapse>:
{
    ed00:	b538      	push	{r3, r4, r5, lr}
	if (*expire != 0U) {
    ed02:	f8b0 50f2 	ldrh.w	r5, [r0, #242]	; 0xf2
{
    ed06:	4603      	mov	r3, r0
    ed08:	4614      	mov	r4, r2
	if (*expire != 0U) {
    ed0a:	b125      	cbz	r5, ed16 <ull_cp_prt_elapse+0x16>
		if (*expire > elapsed_event) {
    ed0c:	42a9      	cmp	r1, r5
    ed0e:	d20e      	bcs.n	ed2e <ull_cp_prt_elapse+0x2e>
			*expire -= elapsed_event;
    ed10:	1a6d      	subs	r5, r5, r1
    ed12:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	if (*expire != 0U) {
    ed16:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
    ed1a:	b122      	cbz	r2, ed26 <ull_cp_prt_elapse+0x26>
		if (*expire > elapsed_event) {
    ed1c:	4291      	cmp	r1, r2
    ed1e:	d20d      	bcs.n	ed3c <ull_cp_prt_elapse+0x3c>
			*expire -= elapsed_event;
    ed20:	1a52      	subs	r2, r2, r1
    ed22:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	return 0;
    ed26:	2300      	movs	r3, #0
    ed28:	4618      	mov	r0, r3
			*error_code = ctx->data.term.error_code;
    ed2a:	7023      	strb	r3, [r4, #0]
}
    ed2c:	bd38      	pop	{r3, r4, r5, pc}
		ctx = llcp_lr_peek(conn);
    ed2e:	f001 f8b1 	bl	fe94 <llcp_lr_peek>
		LL_ASSERT(ctx);
    ed32:	4605      	mov	r5, r0
    ed34:	b158      	cbz	r0, ed4e <ull_cp_prt_elapse+0x4e>
		if (ctx->proc == PROC_TERMINATE) {
    ed36:	7a2b      	ldrb	r3, [r5, #8]
    ed38:	2b0a      	cmp	r3, #10
    ed3a:	d003      	beq.n	ed44 <ull_cp_prt_elapse+0x44>
	return 0;
    ed3c:	2322      	movs	r3, #34	; 0x22
		return -ETIMEDOUT;
    ed3e:	f06f 0073 	mvn.w	r0, #115	; 0x73
    ed42:	e7f2      	b.n	ed2a <ull_cp_prt_elapse+0x2a>
			*error_code = ctx->data.term.error_code;
    ed44:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
		return -ETIMEDOUT;
    ed48:	f06f 0073 	mvn.w	r0, #115	; 0x73
    ed4c:	e7ed      	b.n	ed2a <ull_cp_prt_elapse+0x2a>
		LL_ASSERT(ctx);
    ed4e:	4a07      	ldr	r2, [pc, #28]	; (ed6c <ull_cp_prt_elapse+0x6c>)
    ed50:	4907      	ldr	r1, [pc, #28]	; (ed70 <ull_cp_prt_elapse+0x70>)
    ed52:	4808      	ldr	r0, [pc, #32]	; (ed74 <ull_cp_prt_elapse+0x74>)
    ed54:	f240 2382 	movw	r3, #642	; 0x282
    ed58:	f00a fc71 	bl	1963e <assert_print>
    ed5c:	4040      	eors	r0, r0
    ed5e:	f380 8811 	msr	BASEPRI, r0
    ed62:	f04f 0003 	mov.w	r0, #3
    ed66:	df02      	svc	2
    ed68:	e7e5      	b.n	ed36 <ull_cp_prt_elapse+0x36>
    ed6a:	bf00      	nop
    ed6c:	0001e92c 	.word	0x0001e92c
    ed70:	0001e98c 	.word	0x0001e98c
    ed74:	0001e1a4 	.word	0x0001e1a4

0000ed78 <ull_cp_prt_reload_set>:
	conn->llcp.prt_reload = RADIO_CONN_EVENTS((40U * 1000U * 1000U), conn_intv_us);
    ed78:	4b03      	ldr	r3, [pc, #12]	; (ed88 <ull_cp_prt_reload_set+0x10>)
    ed7a:	440b      	add	r3, r1
    ed7c:	fbb3 f3f1 	udiv	r3, r3, r1
    ed80:	f8a0 3108 	strh.w	r3, [r0, #264]	; 0x108
}
    ed84:	4770      	bx	lr
    ed86:	bf00      	nop
    ed88:	026259ff 	.word	0x026259ff

0000ed8c <ull_cp_run>:
{
    ed8c:	b510      	push	{r4, lr}
    ed8e:	4604      	mov	r4, r0
	llcp_rr_run(conn);
    ed90:	f002 fe5e 	bl	11a50 <llcp_rr_run>
	llcp_lr_run(conn);
    ed94:	4620      	mov	r0, r4
}
    ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	llcp_lr_run(conn);
    ed9a:	f001 b973 	b.w	10084 <llcp_lr_run>
    ed9e:	bf00      	nop

0000eda0 <ull_cp_state_set>:
{
    eda0:	b510      	push	{r4, lr}
    eda2:	4604      	mov	r4, r0
	switch (state) {
    eda4:	b111      	cbz	r1, edac <ull_cp_state_set+0xc>
    eda6:	2901      	cmp	r1, #1
    eda8:	d007      	beq.n	edba <ull_cp_state_set+0x1a>
}
    edaa:	bd10      	pop	{r4, pc}
		llcp_rr_connect(conn);
    edac:	f002 fe58 	bl	11a60 <llcp_rr_connect>
		llcp_lr_connect(conn);
    edb0:	4620      	mov	r0, r4
}
    edb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_connect(conn);
    edb6:	f001 b9c3 	b.w	10140 <llcp_lr_connect>
		llcp_rr_disconnect(conn);
    edba:	f002 fe55 	bl	11a68 <llcp_rr_disconnect>
		llcp_lr_disconnect(conn);
    edbe:	4620      	mov	r0, r4
}
    edc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_lr_disconnect(conn);
    edc4:	f001 b9de 	b.w	10184 <llcp_lr_disconnect>

0000edc8 <ull_cp_release_nodes>:
{
    edc8:	b570      	push	{r4, r5, r6, lr}
	rx = conn->llcp.rx_node_release;
    edca:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
{
    edce:	4606      	mov	r6, r0
	while (rx) {
    edd0:	b144      	cbz	r4, ede4 <ull_cp_release_nodes+0x1c>
		hdr->type = NODE_RX_TYPE_RELEASE;
    edd2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
    edd4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    edd6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    edd8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
    edda:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    eddc:	f7fb f82a 	bl	9e34 <ll_rx_put>
	while (rx) {
    ede0:	2c00      	cmp	r4, #0
    ede2:	d1f7      	bne.n	edd4 <ull_cp_release_nodes+0xc>
	tx = conn->llcp.tx_node_release;
    ede4:	f8d6 414c 	ldr.w	r4, [r6, #332]	; 0x14c
	conn->llcp.rx_node_release = NULL;
    ede8:	2300      	movs	r3, #0
    edea:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
	while (tx) {
    edee:	b13c      	cbz	r4, ee00 <ull_cp_release_nodes+0x38>
	mem_release(tx, &mem_tx.free);
    edf0:	4d05      	ldr	r5, [pc, #20]	; (ee08 <ull_cp_release_nodes+0x40>)
		tx = tx->next;
    edf2:	4620      	mov	r0, r4
    edf4:	6824      	ldr	r4, [r4, #0]
	mem_release(tx, &mem_tx.free);
    edf6:	4629      	mov	r1, r5
    edf8:	f7f8 ff32 	bl	7c60 <mem_release>
	while (tx) {
    edfc:	2c00      	cmp	r4, #0
    edfe:	d1f8      	bne.n	edf2 <ull_cp_release_nodes+0x2a>
	conn->llcp.tx_node_release = NULL;
    ee00:	2300      	movs	r3, #0
    ee02:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
}
    ee06:	bd70      	pop	{r4, r5, r6, pc}
    ee08:	20000608 	.word	0x20000608

0000ee0c <ull_cp_min_used_chans>:
	if (conn->lll.role != BT_HCI_ROLE_PERIPHERAL) {
    ee0c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    ee10:	2b00      	cmp	r3, #0
    ee12:	da13      	bge.n	ee3c <ull_cp_min_used_chans+0x30>
{
    ee14:	b570      	push	{r4, r5, r6, lr}
    ee16:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_MIN_USED_CHANS);
    ee18:	2003      	movs	r0, #3
    ee1a:	460e      	mov	r6, r1
    ee1c:	4615      	mov	r5, r2
    ee1e:	f7ff fea9 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    ee22:	4601      	mov	r1, r0
    ee24:	b140      	cbz	r0, ee38 <ull_cp_min_used_chans+0x2c>
	ctx->data.muc.phys = phys;
    ee26:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
	ctx->data.muc.min_used_chans = min_used_chans;
    ee2a:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
	llcp_lr_enqueue(conn, ctx);
    ee2e:	4620      	mov	r0, r4
    ee30:	f000 fffc 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    ee34:	2000      	movs	r0, #0
}
    ee36:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee38:	200c      	movs	r0, #12
}
    ee3a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee3c:	200c      	movs	r0, #12
}
    ee3e:	4770      	bx	lr

0000ee40 <ull_cp_le_ping>:
{
    ee40:	b510      	push	{r4, lr}
    ee42:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_LE_PING);
    ee44:	2001      	movs	r0, #1
    ee46:	f7ff fe95 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    ee4a:	b128      	cbz	r0, ee58 <ull_cp_le_ping+0x18>
    ee4c:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
    ee4e:	4620      	mov	r0, r4
    ee50:	f000 ffec 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    ee54:	2000      	movs	r0, #0
}
    ee56:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee58:	200c      	movs	r0, #12
}
    ee5a:	bd10      	pop	{r4, pc}

0000ee5c <ull_cp_feature_exchange>:
{
    ee5c:	b538      	push	{r3, r4, r5, lr}
    ee5e:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_FEATURE_EXCHANGE);
    ee60:	2002      	movs	r0, #2
{
    ee62:	460d      	mov	r5, r1
	ctx = llcp_create_local_procedure(PROC_FEATURE_EXCHANGE);
    ee64:	f7ff fe86 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    ee68:	b158      	cbz	r0, ee82 <ull_cp_feature_exchange+0x26>
	ctx->data.fex.host_initiated = host_initiated;
    ee6a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    ee6e:	f365 0300 	bfi	r3, r5, #0, #1
	llcp_lr_enqueue(conn, ctx);
    ee72:	4601      	mov	r1, r0
	ctx->data.fex.host_initiated = host_initiated;
    ee74:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	llcp_lr_enqueue(conn, ctx);
    ee78:	4620      	mov	r0, r4
    ee7a:	f000 ffd7 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    ee7e:	2000      	movs	r0, #0
}
    ee80:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ee82:	200c      	movs	r0, #12
}
    ee84:	bd38      	pop	{r3, r4, r5, pc}
    ee86:	bf00      	nop

0000ee88 <ull_cp_version_exchange>:
{
    ee88:	b510      	push	{r4, lr}
    ee8a:	4604      	mov	r4, r0
	ctx = llcp_create_local_procedure(PROC_VERSION_EXCHANGE);
    ee8c:	2004      	movs	r0, #4
    ee8e:	f7ff fe71 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    ee92:	b128      	cbz	r0, eea0 <ull_cp_version_exchange+0x18>
    ee94:	4601      	mov	r1, r0
	llcp_lr_enqueue(conn, ctx);
    ee96:	4620      	mov	r0, r4
    ee98:	f000 ffc8 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    ee9c:	2000      	movs	r0, #0
}
    ee9e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    eea0:	200c      	movs	r0, #12
}
    eea2:	bd10      	pop	{r4, pc}

0000eea4 <ull_cp_phy_update>:
{
    eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eea8:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
    eeaa:	2007      	movs	r0, #7
{
    eeac:	f89d 6018 	ldrb.w	r6, [sp, #24]
    eeb0:	4688      	mov	r8, r1
    eeb2:	4617      	mov	r7, r2
    eeb4:	461c      	mov	r4, r3
	ctx = llcp_create_local_procedure(PROC_PHY_UPDATE);
    eeb6:	f7ff fe5d 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    eeba:	b1a8      	cbz	r0, eee8 <ull_cp_phy_update+0x44>
	ctx->data.pu.tx = tx;
    eebc:	00e3      	lsls	r3, r4, #3
    eebe:	f008 0807 	and.w	r8, r8, #7
    eec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    eec6:	01bf      	lsls	r7, r7, #6
    eec8:	ea43 0308 	orr.w	r3, r3, r8
    eecc:	f007 0740 	and.w	r7, r7, #64	; 0x40
    eed0:	433b      	orrs	r3, r7
    eed2:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
    eed6:	4601      	mov	r1, r0
    eed8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	llcp_lr_enqueue(conn, ctx);
    eedc:	4628      	mov	r0, r5
    eede:	f000 ffa5 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    eee2:	2000      	movs	r0, #0
}
    eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    eee8:	200c      	movs	r0, #12
}
    eeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eeee:	bf00      	nop

0000eef0 <ull_cp_terminate>:
{
    eef0:	b538      	push	{r3, r4, r5, lr}
    eef2:	4604      	mov	r4, r0
    eef4:	460d      	mov	r5, r1
	llcp_lr_terminate(conn);
    eef6:	f001 f99b 	bl	10230 <llcp_lr_terminate>
	llcp_rr_terminate(conn);
    eefa:	4620      	mov	r0, r4
    eefc:	f002 fe10 	bl	11b20 <llcp_rr_terminate>
	ctx = llcp_create_local_procedure(PROC_TERMINATE);
    ef00:	200a      	movs	r0, #10
    ef02:	f7ff fe37 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    ef06:	b138      	cbz	r0, ef18 <ull_cp_terminate+0x28>
    ef08:	4601      	mov	r1, r0
	ctx->data.term.error_code = error_code;
    ef0a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
	llcp_lr_enqueue(conn, ctx);
    ef0e:	4620      	mov	r0, r4
    ef10:	f000 ff8c 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    ef14:	2000      	movs	r0, #0
}
    ef16:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ef18:	200c      	movs	r0, #12
}
    ef1a:	bd38      	pop	{r3, r4, r5, pc}

0000ef1c <ull_cp_chan_map_update_pending>:
{
    ef1c:	b508      	push	{r3, lr}
	if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
    ef1e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    ef22:	2b00      	cmp	r3, #0
    ef24:	db08      	blt.n	ef38 <ull_cp_chan_map_update_pending+0x1c>
		ctx = llcp_lr_peek(conn);
    ef26:	f000 ffb5 	bl	fe94 <llcp_lr_peek>
	if (ctx && ctx->proc == PROC_CHAN_MAP_UPDATE) {
    ef2a:	b120      	cbz	r0, ef36 <ull_cp_chan_map_update_pending+0x1a>
    ef2c:	7a03      	ldrb	r3, [r0, #8]
    ef2e:	2b0b      	cmp	r3, #11
		return ctx->data.chmu.chm;
    ef30:	bf0c      	ite	eq
    ef32:	302a      	addeq	r0, #42	; 0x2a
	return NULL;
    ef34:	2000      	movne	r0, #0
}
    ef36:	bd08      	pop	{r3, pc}
		ctx = llcp_rr_peek(conn);
    ef38:	f002 fbee 	bl	11718 <llcp_rr_peek>
    ef3c:	e7f5      	b.n	ef2a <ull_cp_chan_map_update_pending+0xe>
    ef3e:	bf00      	nop

0000ef40 <ull_cp_data_length_update>:
{
    ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef42:	4605      	mov	r5, r0
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
    ef44:	200c      	movs	r0, #12
{
    ef46:	460e      	mov	r6, r1
    ef48:	4617      	mov	r7, r2
	ctx = llcp_create_local_procedure(PROC_DATA_LENGTH_UPDATE);
    ef4a:	f7ff fe13 	bl	eb74 <llcp_create_local_procedure>
	if (!ctx) {
    ef4e:	b158      	cbz	r0, ef68 <ull_cp_data_length_update+0x28>
    ef50:	4604      	mov	r4, r0
	ull_dle_local_tx_update(conn, max_tx_octets, max_tx_time);
    ef52:	463a      	mov	r2, r7
    ef54:	4631      	mov	r1, r6
    ef56:	4628      	mov	r0, r5
    ef58:	f7fe fbe0 	bl	d71c <ull_dle_local_tx_update>
	llcp_lr_enqueue(conn, ctx);
    ef5c:	4628      	mov	r0, r5
    ef5e:	4621      	mov	r1, r4
    ef60:	f000 ff64 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    ef64:	2000      	movs	r0, #0
}
    ef66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    ef68:	200c      	movs	r0, #12
}
    ef6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ef6c <ull_cp_ltk_req_reply>:
{
    ef6c:	b570      	push	{r4, r5, r6, lr}
    ef6e:	4605      	mov	r5, r0
    ef70:	460e      	mov	r6, r1
	ctx = llcp_rr_peek(conn);
    ef72:	f002 fbd1 	bl	11718 <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    ef76:	b120      	cbz	r0, ef82 <ull_cp_ltk_req_reply+0x16>
    ef78:	7a03      	ldrb	r3, [r0, #8]
    ef7a:	3b05      	subs	r3, #5
    ef7c:	2b01      	cmp	r3, #1
    ef7e:	4604      	mov	r4, r0
    ef80:	d901      	bls.n	ef86 <ull_cp_ltk_req_reply+0x1a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    ef82:	200c      	movs	r0, #12
}
    ef84:	bd70      	pop	{r4, r5, r6, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
    ef86:	4601      	mov	r1, r0
    ef88:	4628      	mov	r0, r5
    ef8a:	f7fe feb7 	bl	dcfc <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    ef8e:	2800      	cmp	r0, #0
    ef90:	d0f7      	beq.n	ef82 <ull_cp_ltk_req_reply+0x16>
		memcpy(ctx->data.enc.ltk, ltk, sizeof(ctx->data.enc.ltk));
    ef92:	2210      	movs	r2, #16
    ef94:	4631      	mov	r1, r6
    ef96:	f104 0033 	add.w	r0, r4, #51	; 0x33
    ef9a:	f00a fe2b 	bl	19bf4 <memcpy>
		llcp_rp_enc_ltk_req_reply(conn, ctx);
    ef9e:	4628      	mov	r0, r5
    efa0:	4621      	mov	r1, r4
    efa2:	f7fe fea3 	bl	dcec <llcp_rp_enc_ltk_req_reply>
		return BT_HCI_ERR_SUCCESS;
    efa6:	2000      	movs	r0, #0
}
    efa8:	bd70      	pop	{r4, r5, r6, pc}
    efaa:	bf00      	nop

0000efac <ull_cp_ltk_req_neq_reply>:
{
    efac:	b538      	push	{r3, r4, r5, lr}
    efae:	4605      	mov	r5, r0
	ctx = llcp_rr_peek(conn);
    efb0:	f002 fbb2 	bl	11718 <llcp_rr_peek>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    efb4:	b120      	cbz	r0, efc0 <ull_cp_ltk_req_neq_reply+0x14>
    efb6:	7a03      	ldrb	r3, [r0, #8]
    efb8:	3b05      	subs	r3, #5
    efba:	2b01      	cmp	r3, #1
    efbc:	4604      	mov	r4, r0
    efbe:	d901      	bls.n	efc4 <ull_cp_ltk_req_neq_reply+0x18>
	return BT_HCI_ERR_CMD_DISALLOWED;
    efc0:	200c      	movs	r0, #12
}
    efc2:	bd38      	pop	{r3, r4, r5, pc}
	    llcp_rp_enc_ltk_req_reply_allowed(conn, ctx)) {
    efc4:	4601      	mov	r1, r0
    efc6:	4628      	mov	r0, r5
    efc8:	f7fe fe98 	bl	dcfc <llcp_rp_enc_ltk_req_reply_allowed>
	if (ctx && (ctx->proc == PROC_ENCRYPTION_START || ctx->proc == PROC_ENCRYPTION_PAUSE) &&
    efcc:	2800      	cmp	r0, #0
    efce:	d0f7      	beq.n	efc0 <ull_cp_ltk_req_neq_reply+0x14>
		llcp_rp_enc_ltk_req_neg_reply(conn, ctx);
    efd0:	4628      	mov	r0, r5
    efd2:	4621      	mov	r1, r4
    efd4:	f7fe fe8e 	bl	dcf4 <llcp_rp_enc_ltk_req_neg_reply>
		return BT_HCI_ERR_SUCCESS;
    efd8:	2000      	movs	r0, #0
}
    efda:	bd38      	pop	{r3, r4, r5, pc}

0000efdc <ull_cp_conn_update>:
{
    efdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efe0:	4605      	mov	r5, r0
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_CONN_PARAM_REQ) != 0;
    efe2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    efe6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    efea:	9e09      	ldr	r6, [sp, #36]	; 0x24
    efec:	469a      	mov	sl, r3
	if (feature_conn_param_req(conn)) {
    efee:	0783      	lsls	r3, r0, #30
{
    eff0:	4688      	mov	r8, r1
    eff2:	4617      	mov	r7, r2
	if (feature_conn_param_req(conn)) {
    eff4:	d435      	bmi.n	f062 <ull_cp_conn_update+0x86>
	} else if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
    eff6:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    effa:	2b00      	cmp	r3, #0
    effc:	db50      	blt.n	f0a0 <ull_cp_conn_update+0xc4>
		ctx = llcp_create_local_procedure(PROC_CONN_UPDATE);
    effe:	2008      	movs	r0, #8
    f000:	f7ff fdb8 	bl	eb74 <llcp_create_local_procedure>
    f004:	4604      	mov	r4, r0
	if (!ctx) {
    f006:	2c00      	cmp	r4, #0
    f008:	d057      	beq.n	f0ba <ull_cp_conn_update+0xde>
	if (ctx->proc == PROC_CONN_UPDATE) {
    f00a:	7a23      	ldrb	r3, [r4, #8]
    f00c:	2b08      	cmp	r3, #8
    f00e:	d02d      	beq.n	f06c <ull_cp_conn_update+0x90>
	} else if (ctx->proc == PROC_CONN_PARAM_REQ) {
    f010:	2b09      	cmp	r3, #9
    f012:	d137      	bne.n	f084 <ull_cp_conn_update+0xa8>
		ctx->data.cu.interval_min = interval_min;
    f014:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
		ctx->data.cu.interval_max = interval_max;
    f018:	8627      	strh	r7, [r4, #48]	; 0x30
		ctx->data.cu.latency = latency;
    f01a:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
		ctx->data.cu.timeout = timeout;
    f01e:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
    f022:	2e00      	cmp	r6, #0
    f024:	d03f      	beq.n	f0a6 <ull_cp_conn_update+0xca>
    f026:	8833      	ldrh	r3, [r6, #0]
    f028:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		ctx->data.cu.offsets[1] = offsets ? offsets[1] : 0xffff;
    f02c:	8873      	ldrh	r3, [r6, #2]
    f02e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		ctx->data.cu.offsets[2] = offsets ? offsets[2] : 0xffff;
    f032:	88b3      	ldrh	r3, [r6, #4]
    f034:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		ctx->data.cu.offsets[3] = offsets ? offsets[3] : 0xffff;
    f038:	88f3      	ldrh	r3, [r6, #6]
    f03a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
    f03e:	8933      	ldrh	r3, [r6, #8]
    f040:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
    f044:	8973      	ldrh	r3, [r6, #10]
    f046:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    f04a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    f04e:	2b00      	cmp	r3, #0
    f050:	da11      	bge.n	f076 <ull_cp_conn_update+0x9a>
			uint16_t handle = ll_conn_handle_get(conn);
    f052:	4628      	mov	r0, r5
    f054:	f7fd fcdc 	bl	ca10 <ll_conn_handle_get>
    f058:	4601      	mov	r1, r0
			ull_periph_latency_cancel(conn, handle);
    f05a:	4628      	mov	r0, r5
    f05c:	f002 fe22 	bl	11ca4 <ull_periph_latency_cancel>
    f060:	e009      	b.n	f076 <ull_cp_conn_update+0x9a>
		ctx = llcp_create_local_procedure(PROC_CONN_PARAM_REQ);
    f062:	2009      	movs	r0, #9
    f064:	f7ff fd86 	bl	eb74 <llcp_create_local_procedure>
    f068:	4604      	mov	r4, r0
    f06a:	e7cc      	b.n	f006 <ull_cp_conn_update+0x2a>
		ctx->data.cu.interval_max = interval_max;
    f06c:	8627      	strh	r7, [r4, #48]	; 0x30
		ctx->data.cu.latency = latency;
    f06e:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
		ctx->data.cu.timeout = timeout;
    f072:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
	llcp_lr_enqueue(conn, ctx);
    f076:	4628      	mov	r0, r5
    f078:	4621      	mov	r1, r4
    f07a:	f000 fed7 	bl	fe2c <llcp_lr_enqueue>
	return BT_HCI_ERR_SUCCESS;
    f07e:	2000      	movs	r0, #0
}
    f080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(0); /* Unknown procedure */
    f084:	4a0e      	ldr	r2, [pc, #56]	; (f0c0 <ull_cp_conn_update+0xe4>)
    f086:	490f      	ldr	r1, [pc, #60]	; (f0c4 <ull_cp_conn_update+0xe8>)
    f088:	480f      	ldr	r0, [pc, #60]	; (f0c8 <ull_cp_conn_update+0xec>)
    f08a:	f240 437e 	movw	r3, #1150	; 0x47e
    f08e:	f00a fad6 	bl	1963e <assert_print>
    f092:	4040      	eors	r0, r0
    f094:	f380 8811 	msr	BASEPRI, r0
    f098:	f04f 0003 	mov.w	r0, #3
    f09c:	df02      	svc	2
    f09e:	e7ea      	b.n	f076 <ull_cp_conn_update+0x9a>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    f0a0:	201a      	movs	r0, #26
}
    f0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ctx->data.cu.offsets[0] = offsets ? offsets[0] : 0x0000;
    f0a6:	4a09      	ldr	r2, [pc, #36]	; (f0cc <ull_cp_conn_update+0xf0>)
    f0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f0ac:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
		ctx->data.cu.offsets[4] = offsets ? offsets[4] : 0xffff;
    f0b0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ctx->data.cu.offsets[5] = offsets ? offsets[5] : 0xffff;
    f0b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f0b8:	e7c5      	b.n	f046 <ull_cp_conn_update+0x6a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f0ba:	200c      	movs	r0, #12
    f0bc:	e7e0      	b.n	f080 <ull_cp_conn_update+0xa4>
    f0be:	bf00      	nop
    f0c0:	0001e92c 	.word	0x0001e92c
    f0c4:	0001e220 	.word	0x0001e220
    f0c8:	0001e1a4 	.word	0x0001e1a4
    f0cc:	ffff0000 	.word	0xffff0000

0000f0d0 <ull_cp_remote_dle_pending>:
{
    f0d0:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
    f0d2:	f002 fb21 	bl	11718 <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_DATA_LENGTH_UPDATE);
    f0d6:	b128      	cbz	r0, f0e4 <ull_cp_remote_dle_pending+0x14>
    f0d8:	7a00      	ldrb	r0, [r0, #8]
    f0da:	f1a0 000c 	sub.w	r0, r0, #12
    f0de:	fab0 f080 	clz	r0, r0
    f0e2:	0940      	lsrs	r0, r0, #5
}
    f0e4:	bd08      	pop	{r3, pc}
    f0e6:	bf00      	nop

0000f0e8 <ull_cp_conn_param_req_reply>:
{
    f0e8:	b510      	push	{r4, lr}
    f0ea:	4604      	mov	r4, r0
	ctx = llcp_rr_peek(conn);
    f0ec:	f002 fb14 	bl	11718 <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
    f0f0:	b110      	cbz	r0, f0f8 <ull_cp_conn_param_req_reply+0x10>
    f0f2:	7a03      	ldrb	r3, [r0, #8]
    f0f4:	2b09      	cmp	r3, #9
    f0f6:	d000      	beq.n	f0fa <ull_cp_conn_param_req_reply+0x12>
}
    f0f8:	bd10      	pop	{r4, pc}
		llcp_rp_conn_param_req_reply(conn, ctx);
    f0fa:	4601      	mov	r1, r0
    f0fc:	4620      	mov	r0, r4
}
    f0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rp_conn_param_req_reply(conn, ctx);
    f102:	f002 b94d 	b.w	113a0 <llcp_rp_conn_param_req_reply>
    f106:	bf00      	nop

0000f108 <ull_cp_conn_param_req_neg_reply>:
{
    f108:	b538      	push	{r3, r4, r5, lr}
    f10a:	4604      	mov	r4, r0
    f10c:	460d      	mov	r5, r1
	ctx = llcp_rr_peek(conn);
    f10e:	f002 fb03 	bl	11718 <llcp_rr_peek>
	if (ctx && ctx->proc == PROC_CONN_PARAM_REQ) {
    f112:	b110      	cbz	r0, f11a <ull_cp_conn_param_req_neg_reply+0x12>
    f114:	7a03      	ldrb	r3, [r0, #8]
    f116:	2b09      	cmp	r3, #9
    f118:	d000      	beq.n	f11c <ull_cp_conn_param_req_neg_reply+0x14>
}
    f11a:	bd38      	pop	{r3, r4, r5, pc}
		ctx->data.cu.error = error_code;
    f11c:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
    f120:	4601      	mov	r1, r0
    f122:	4620      	mov	r0, r4
}
    f124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rp_conn_param_req_neg_reply(conn, ctx);
    f128:	f002 b93e 	b.w	113a8 <llcp_rp_conn_param_req_neg_reply>

0000f12c <ull_cp_remote_cpr_pending>:
{
    f12c:	b508      	push	{r3, lr}
	ctx = llcp_rr_peek(conn);
    f12e:	f002 faf3 	bl	11718 <llcp_rr_peek>
	return (ctx && ctx->proc == PROC_CONN_PARAM_REQ);
    f132:	b128      	cbz	r0, f140 <ull_cp_remote_cpr_pending+0x14>
    f134:	7a00      	ldrb	r0, [r0, #8]
    f136:	f1a0 0009 	sub.w	r0, r0, #9
    f13a:	fab0 f080 	clz	r0, r0
    f13e:	0940      	lsrs	r0, r0, #5
}
    f140:	bd08      	pop	{r3, pc}
    f142:	bf00      	nop

0000f144 <ull_cp_tx_ack>:
	/* consider unsupported and unknows PDUs as valid */
	return true;
}

void ull_cp_tx_ack(struct ll_conn *conn, struct node_tx *tx)
{
    f144:	b538      	push	{r3, r4, r5, lr}
    f146:	4605      	mov	r5, r0
    f148:	460c      	mov	r4, r1
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
    f14a:	f000 fea3 	bl	fe94 <llcp_lr_peek>
	if (ctx && ctx->node_ref.tx_ack == tx) {
    f14e:	b110      	cbz	r0, f156 <ull_cp_tx_ack+0x12>
    f150:	6983      	ldr	r3, [r0, #24]
    f152:	42a3      	cmp	r3, r4
    f154:	d00e      	beq.n	f174 <ull_cp_tx_ack+0x30>
		/* TX ack re. local request */
		llcp_lr_tx_ack(conn, ctx, tx);
	}

	ctx = llcp_rr_peek(conn);
    f156:	4628      	mov	r0, r5
    f158:	f002 fade 	bl	11718 <llcp_rr_peek>
	if (ctx && ctx->node_ref.tx_ack == tx) {
    f15c:	b110      	cbz	r0, f164 <ull_cp_tx_ack+0x20>
    f15e:	6983      	ldr	r3, [r0, #24]
    f160:	42a3      	cmp	r3, r4
    f162:	d000      	beq.n	f166 <ull_cp_tx_ack+0x22>
		/* TX ack re. remote response */
		llcp_rr_tx_ack(conn, ctx, tx);
	}
}
    f164:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rr_tx_ack(conn, ctx, tx);
    f166:	4622      	mov	r2, r4
    f168:	4601      	mov	r1, r0
    f16a:	4628      	mov	r0, r5
}
    f16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_rr_tx_ack(conn, ctx, tx);
    f170:	f002 bc3c 	b.w	119ec <llcp_rr_tx_ack>
		llcp_lr_tx_ack(conn, ctx, tx);
    f174:	4601      	mov	r1, r0
    f176:	4622      	mov	r2, r4
    f178:	4628      	mov	r0, r5
    f17a:	f000 ff45 	bl	10008 <llcp_lr_tx_ack>
    f17e:	e7ea      	b.n	f156 <ull_cp_tx_ack+0x12>

0000f180 <ull_cp_tx_ntf>:

void ull_cp_tx_ntf(struct ll_conn *conn)
{
    f180:	b510      	push	{r4, lr}
    f182:	4604      	mov	r4, r0
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
    f184:	f000 fe86 	bl	fe94 <llcp_lr_peek>
	if (ctx) {
    f188:	b118      	cbz	r0, f192 <ull_cp_tx_ntf+0x12>
    f18a:	4601      	mov	r1, r0
		/* TX notifications towards Host */
		llcp_lr_tx_ntf(conn, ctx);
    f18c:	4620      	mov	r0, r4
    f18e:	f000 ff5f 	bl	10050 <llcp_lr_tx_ntf>
	}

	ctx = llcp_rr_peek(conn);
    f192:	4620      	mov	r0, r4
    f194:	f002 fac0 	bl	11718 <llcp_rr_peek>
	if (ctx) {
    f198:	4601      	mov	r1, r0
    f19a:	b120      	cbz	r0, f1a6 <ull_cp_tx_ntf+0x26>
		/* TX notifications towards Host */
		llcp_rr_tx_ntf(conn, ctx);
    f19c:	4620      	mov	r0, r4
	}
}
    f19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		llcp_rr_tx_ntf(conn, ctx);
    f1a2:	f002 bc3b 	b.w	11a1c <llcp_rr_tx_ntf>
}
    f1a6:	bd10      	pop	{r4, pc}

0000f1a8 <ull_cp_rx>:

void ull_cp_rx(struct ll_conn *conn, memq_link_t *link, struct node_rx_pdu *rx)
{
    f1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pdu->len < 1) {
    f1ac:	7f53      	ldrb	r3, [r2, #29]
{
    f1ae:	4614      	mov	r4, r2
    f1b0:	4605      	mov	r5, r0
    f1b2:	460e      	mov	r6, r1
	if (pdu->len < 1) {
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	d03f      	beq.n	f238 <ull_cp_rx+0x90>
	if (pdu->llctrl.opcode < ARRAY_SIZE(pdu_validate)) {
    f1b8:	7fd3      	ldrb	r3, [r2, #31]
    f1ba:	2b1e      	cmp	r3, #30
    f1bc:	d929      	bls.n	f212 <ull_cp_rx+0x6a>
		/*  Process LL_TERMINATE_IND PDU's as new procedure */
		ctx_l = NULL;
		ctx_r = NULL;
	} else {
		/* Query local and remote activity */
		ctx_l = llcp_lr_peek(conn);
    f1be:	4628      	mov	r0, r5
    f1c0:	f000 fe68 	bl	fe94 <llcp_lr_peek>
    f1c4:	4607      	mov	r7, r0
		ctx_r = llcp_rr_peek(conn);
    f1c6:	4628      	mov	r0, r5
    f1c8:	f002 faa6 	bl	11718 <llcp_rr_peek>
    f1cc:	4601      	mov	r1, r0
	}

	if (ctx_l) {
    f1ce:	2f00      	cmp	r7, #0
    f1d0:	d05e      	beq.n	f290 <ull_cp_rx+0xe8>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f1d2:	7afa      	ldrb	r2, [r7, #11]
    f1d4:	7fe3      	ldrb	r3, [r4, #31]
		/* Local active procedure */

		if (ctx_r) {
    f1d6:	2800      	cmp	r0, #0
    f1d8:	d048      	beq.n	f26c <ull_cp_rx+0xc4>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f1da:	4293      	cmp	r3, r2
    f1dc:	7ac0      	ldrb	r0, [r0, #11]
    f1de:	d051      	beq.n	f284 <ull_cp_rx+0xdc>
    f1e0:	7b3a      	ldrb	r2, [r7, #12]
    f1e2:	2a00      	cmp	r2, #0
    f1e4:	d05d      	beq.n	f2a2 <ull_cp_rx+0xfa>
    f1e6:	4298      	cmp	r0, r3
    f1e8:	d04e      	beq.n	f288 <ull_cp_rx+0xe0>
    f1ea:	7b0a      	ldrb	r2, [r1, #12]
    f1ec:	2a00      	cmp	r2, #0
    f1ee:	d14b      	bne.n	f288 <ull_cp_rx+0xe0>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    f1f0:	2b07      	cmp	r3, #7
    f1f2:	d06d      	beq.n	f2d0 <ull_cp_rx+0x128>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    f1f4:	2b11      	cmp	r3, #17
    f1f6:	d104      	bne.n	f202 <ull_cp_rx+0x5a>
    f1f8:	7b4a      	ldrb	r2, [r1, #13]
    f1fa:	f894 3020 	ldrb.w	r3, [r4, #32]
    f1fe:	429a      	cmp	r2, r3
    f200:	d042      	beq.n	f288 <ull_cp_rx+0xe0>
				 * Expected local procedure PDU
				 * No remote active procedure
				 */

				/* Process PDU in local procedure */
				llcp_lr_rx(conn, ctx_l, link, rx);
    f202:	4623      	mov	r3, r4
    f204:	4632      	mov	r2, r6
    f206:	4639      	mov	r1, r7
    f208:	4628      	mov	r0, r5
		 */

		/* Process PDU as a new remote request */
		llcp_rr_new(conn, link, rx, pdu_valid);
	}
}
    f20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				llcp_lr_rx(conn, ctx_l, link, rx);
    f20e:	f000 bebf 	b.w	ff90 <llcp_lr_rx>
		cb = pdu_validate[pdu->llctrl.opcode].validate_cb;
    f212:	4a44      	ldr	r2, [pc, #272]	; (f324 <ull_cp_rx+0x17c>)
    f214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
		if (cb) {
    f218:	b122      	cbz	r2, f224 <ull_cp_rx+0x7c>
			return cb(pdu);
    f21a:	f104 001c 	add.w	r0, r4, #28
    f21e:	4790      	blx	r2
	if (!pdu_valid) {
    f220:	b160      	cbz	r0, f23c <ull_cp_rx+0x94>
	return pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
    f222:	7fe3      	ldrb	r3, [r4, #31]
	} else if (pdu_is_terminate(pdu)) {
    f224:	2b02      	cmp	r3, #2
    f226:	d1ca      	bne.n	f1be <ull_cp_rx+0x16>
				llcp_rr_new(conn, link, rx, true);
    f228:	2301      	movs	r3, #1
		llcp_rr_new(conn, link, rx, pdu_valid);
    f22a:	4622      	mov	r2, r4
    f22c:	4631      	mov	r1, r6
    f22e:	4628      	mov	r0, r5
}
    f230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		llcp_rr_new(conn, link, rx, pdu_valid);
    f234:	f002 bc1c 	b.w	11a70 <llcp_rr_new>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f238:	23ff      	movs	r3, #255	; 0xff
    f23a:	77d3      	strb	r3, [r2, #31]
		ctx = llcp_lr_peek(conn);
    f23c:	4628      	mov	r0, r5
    f23e:	f000 fe29 	bl	fe94 <llcp_lr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
    f242:	b128      	cbz	r0, f250 <ull_cp_rx+0xa8>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f244:	7fe2      	ldrb	r2, [r4, #31]
    f246:	7ac3      	ldrb	r3, [r0, #11]
    f248:	429a      	cmp	r2, r3
    f24a:	d00d      	beq.n	f268 <ull_cp_rx+0xc0>
    f24c:	7b03      	ldrb	r3, [r0, #12]
    f24e:	b95b      	cbnz	r3, f268 <ull_cp_rx+0xc0>
		ctx = llcp_rr_peek(conn);
    f250:	4628      	mov	r0, r5
    f252:	f002 fa61 	bl	11718 <llcp_rr_peek>
		if (ctx && pdu_is_expected(pdu, ctx)) {
    f256:	2800      	cmp	r0, #0
    f258:	d050      	beq.n	f2fc <ull_cp_rx+0x154>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f25a:	7fe2      	ldrb	r2, [r4, #31]
    f25c:	7ac3      	ldrb	r3, [r0, #11]
    f25e:	429a      	cmp	r2, r3
    f260:	d002      	beq.n	f268 <ull_cp_rx+0xc0>
    f262:	7b03      	ldrb	r3, [r0, #12]
    f264:	2b00      	cmp	r3, #0
    f266:	d0e0      	beq.n	f22a <ull_cp_rx+0x82>
}
    f268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f26c:	4293      	cmp	r3, r2
    f26e:	d0c8      	beq.n	f202 <ull_cp_rx+0x5a>
    f270:	7b3a      	ldrb	r2, [r7, #12]
    f272:	2a00      	cmp	r2, #0
    f274:	d1c5      	bne.n	f202 <ull_cp_rx+0x5a>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    f276:	2b07      	cmp	r3, #7
    f278:	d04d      	beq.n	f316 <ull_cp_rx+0x16e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    f27a:	2b11      	cmp	r3, #17
    f27c:	d04b      	beq.n	f316 <ull_cp_rx+0x16e>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
    f27e:	2b0d      	cmp	r3, #13
    f280:	d0bf      	beq.n	f202 <ull_cp_rx+0x5a>
    f282:	e7d1      	b.n	f228 <ull_cp_rx+0x80>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f284:	4298      	cmp	r0, r3
    f286:	d11c      	bne.n	f2c2 <ull_cp_rx+0x11a>
				conn->llcp_terminate.reason_final =
    f288:	231f      	movs	r3, #31
    f28a:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
    f28e:	e7eb      	b.n	f268 <ull_cp_rx+0xc0>
	} else if (ctx_r) {
    f290:	2800      	cmp	r0, #0
    f292:	d0c9      	beq.n	f228 <ull_cp_rx+0x80>
		llcp_rr_rx(conn, ctx_r, link, rx);
    f294:	4623      	mov	r3, r4
    f296:	4632      	mov	r2, r6
    f298:	4628      	mov	r0, r5
}
    f29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		llcp_rr_rx(conn, ctx_r, link, rx);
    f29e:	f002 bb5f 	b.w	11960 <llcp_rr_rx>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    f2a2:	2b07      	cmp	r3, #7
    f2a4:	d02c      	beq.n	f300 <ull_cp_rx+0x158>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    f2a6:	2b11      	cmp	r3, #17
    f2a8:	d018      	beq.n	f2dc <ull_cp_rx+0x134>
	return (pdu_is_reject_ext(pdu, ctx) || pdu_is_reject(pdu, ctx));
    f2aa:	f1b3 020d 	subs.w	r2, r3, #13
    f2ae:	bf18      	it	ne
    f2b0:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f2b2:	4298      	cmp	r0, r3
    f2b4:	d01f      	beq.n	f2f6 <ull_cp_rx+0x14e>
    f2b6:	7b0b      	ldrb	r3, [r1, #12]
    f2b8:	b9eb      	cbnz	r3, f2f6 <ull_cp_rx+0x14e>
			if (unexpected_l == unexpected_r) {
    f2ba:	2a00      	cmp	r2, #0
    f2bc:	d0a1      	beq.n	f202 <ull_cp_rx+0x5a>
				conn->llcp_terminate.reason_final =
    f2be:	2324      	movs	r3, #36	; 0x24
    f2c0:	e7e3      	b.n	f28a <ull_cp_rx+0xe2>
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f2c2:	7b0a      	ldrb	r2, [r1, #12]
    f2c4:	2a00      	cmp	r2, #0
    f2c6:	d1df      	bne.n	f288 <ull_cp_rx+0xe0>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    f2c8:	2b07      	cmp	r3, #7
    f2ca:	d095      	beq.n	f1f8 <ull_cp_rx+0x50>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    f2cc:	2b11      	cmp	r3, #17
    f2ce:	d198      	bne.n	f202 <ull_cp_rx+0x5a>
    f2d0:	7b4b      	ldrb	r3, [r1, #13]
    f2d2:	f894 2020 	ldrb.w	r2, [r4, #32]
    f2d6:	429a      	cmp	r2, r3
    f2d8:	d0d6      	beq.n	f288 <ull_cp_rx+0xe0>
    f2da:	e792      	b.n	f202 <ull_cp_rx+0x5a>
    f2dc:	7b7a      	ldrb	r2, [r7, #13]
    f2de:	f894 3020 	ldrb.w	r3, [r4, #32]
    f2e2:	1ad2      	subs	r2, r2, r3
    f2e4:	bf18      	it	ne
    f2e6:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f2e8:	2811      	cmp	r0, #17
    f2ea:	d004      	beq.n	f2f6 <ull_cp_rx+0x14e>
    f2ec:	7b08      	ldrb	r0, [r1, #12]
    f2ee:	b910      	cbnz	r0, f2f6 <ull_cp_rx+0x14e>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    f2f0:	7b48      	ldrb	r0, [r1, #13]
    f2f2:	4298      	cmp	r0, r3
    f2f4:	d1e1      	bne.n	f2ba <ull_cp_rx+0x112>
			if (unexpected_l == unexpected_r) {
    f2f6:	2a00      	cmp	r2, #0
    f2f8:	d1cc      	bne.n	f294 <ull_cp_rx+0xec>
    f2fa:	e7c5      	b.n	f288 <ull_cp_rx+0xe0>
    f2fc:	4603      	mov	r3, r0
    f2fe:	e794      	b.n	f22a <ull_cp_rx+0x82>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    f300:	7b7a      	ldrb	r2, [r7, #13]
    f302:	f894 3020 	ldrb.w	r3, [r4, #32]
    f306:	1ad2      	subs	r2, r2, r3
    f308:	bf18      	it	ne
    f30a:	2201      	movne	r2, #1
	return (ctx->rx_opcode == pdu->llctrl.opcode || ctx->rx_greedy);
    f30c:	2807      	cmp	r0, #7
    f30e:	d1ed      	bne.n	f2ec <ull_cp_rx+0x144>
			if (unexpected_l == unexpected_r) {
    f310:	2a00      	cmp	r2, #0
    f312:	d1bf      	bne.n	f294 <ull_cp_rx+0xec>
    f314:	e7b8      	b.n	f288 <ull_cp_rx+0xe0>
	return ((pdu->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND) &&
    f316:	7b7a      	ldrb	r2, [r7, #13]
    f318:	f894 3020 	ldrb.w	r3, [r4, #32]
    f31c:	429a      	cmp	r2, r3
    f31e:	d183      	bne.n	f228 <ull_cp_rx+0x80>
    f320:	e76f      	b.n	f202 <ull_cp_rx+0x5a>
    f322:	bf00      	nop
    f324:	0001e990 	.word	0x0001e990

0000f328 <lp_comm_tx>:
/*
 * LLCP Local Procedure Common FSM
 */

static void lp_comm_tx(struct ll_conn *conn, struct proc_ctx *ctx)
{
    f328:	b570      	push	{r4, r5, r6, lr}
    f32a:	4606      	mov	r6, r0
    f32c:	460c      	mov	r4, r1
	struct node_tx *tx;
	struct pdu_data *pdu;

	/* Allocate tx node */
	tx = llcp_tx_alloc(conn, ctx);
    f32e:	f7ff fba1 	bl	ea74 <llcp_tx_alloc>
	LL_ASSERT(tx);
    f332:	4605      	mov	r5, r0
    f334:	2800      	cmp	r0, #0
    f336:	d060      	beq.n	f3fa <lp_comm_tx+0xd2>

	pdu = (struct pdu_data *)tx->pdu;

	/* Encode LL Control PDU */
	switch (ctx->proc) {
    f338:	7a23      	ldrb	r3, [r4, #8]
    f33a:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
    f33c:	1d29      	adds	r1, r5, #4
	switch (ctx->proc) {
    f33e:	2b0b      	cmp	r3, #11
    f340:	d807      	bhi.n	f352 <lp_comm_tx+0x2a>
    f342:	e8df f003 	tbb	[pc, r3]
    f346:	2620      	.short	0x2620
    f348:	0606332c 	.word	0x0606332c
    f34c:	39060606 	.word	0x39060606
    f350:	4006      	.short	0x4006
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_CLOCK_ACCURACY_RSP;
		break;
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
	default:
		/* Unknown procedure */
		LL_ASSERT(0);
    f352:	4a30      	ldr	r2, [pc, #192]	; (f414 <lp_comm_tx+0xec>)
    f354:	4930      	ldr	r1, [pc, #192]	; (f418 <lp_comm_tx+0xf0>)
    f356:	4831      	ldr	r0, [pc, #196]	; (f41c <lp_comm_tx+0xf4>)
    f358:	23d1      	movs	r3, #209	; 0xd1
    f35a:	f00a f970 	bl	1963e <assert_print>
    f35e:	4040      	eors	r0, r0
    f360:	f380 8811 	msr	BASEPRI, r0
    f364:	f04f 0003 	mov.w	r0, #3
    f368:	df02      	svc	2
	}

	ctx->tx_opcode = pdu->llctrl.opcode;
    f36a:	79eb      	ldrb	r3, [r5, #7]
    f36c:	7363      	strb	r3, [r4, #13]

	/* Enqueue LL Control PDU towards LLL */
	llcp_tx_enqueue(conn, tx);
    f36e:	4629      	mov	r1, r5
    f370:	4630      	mov	r0, r6
    f372:	f7ff fb95 	bl	eaa0 <llcp_tx_enqueue>

	/* Restart procedure response timeout timer */
	if (ctx->proc != PROC_TERMINATE) {
    f376:	7a23      	ldrb	r3, [r4, #8]
    f378:	2b0a      	cmp	r3, #10
    f37a:	d02a      	beq.n	f3d2 <lp_comm_tx+0xaa>
		/* Use normal timeout value of 40s */
		llcp_lr_prt_restart(conn);
    f37c:	4630      	mov	r0, r6
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
			(conn->supervision_timeout * 10U * 1000U),
			conn_interval_us);
		llcp_lr_prt_restart_with_value(conn, sto_reload);
	}
}
    f37e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart(conn);
    f382:	f000 bdf7 	b.w	ff74 <llcp_lr_prt_restart>
		llcp_pdu_encode_ping_req(pdu);
    f386:	4608      	mov	r0, r1
    f388:	f000 ff70 	bl	1026c <llcp_pdu_encode_ping_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    f38c:	2313      	movs	r3, #19
    f38e:	72e3      	strb	r3, [r4, #11]
		break;
    f390:	e7eb      	b.n	f36a <lp_comm_tx+0x42>
		llcp_pdu_encode_feature_req(conn, pdu);
    f392:	4630      	mov	r0, r6
    f394:	f000 ff9e 	bl	102d4 <llcp_pdu_encode_feature_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    f398:	2309      	movs	r3, #9
    f39a:	72e3      	strb	r3, [r4, #11]
		break;
    f39c:	e7e5      	b.n	f36a <lp_comm_tx+0x42>
		llcp_pdu_encode_min_used_chans_ind(ctx, pdu);
    f39e:	4620      	mov	r0, r4
    f3a0:	f001 f856 	bl	10450 <llcp_pdu_encode_min_used_chans_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f3a4:	23ff      	movs	r3, #255	; 0xff
		ctx->node_ref.tx_ack = tx;
    f3a6:	61a5      	str	r5, [r4, #24]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f3a8:	72e3      	strb	r3, [r4, #11]
		break;
    f3aa:	e7de      	b.n	f36a <lp_comm_tx+0x42>
		llcp_pdu_encode_version_ind(pdu);
    f3ac:	4608      	mov	r0, r1
    f3ae:	f001 f871 	bl	10494 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    f3b2:	230c      	movs	r3, #12
    f3b4:	72e3      	strb	r3, [r4, #11]
		break;
    f3b6:	e7d8      	b.n	f36a <lp_comm_tx+0x42>
		llcp_pdu_encode_terminate_ind(ctx, pdu);
    f3b8:	4620      	mov	r0, r4
    f3ba:	f001 f85b 	bl	10474 <llcp_pdu_encode_terminate_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f3be:	23ff      	movs	r3, #255	; 0xff
		ctx->node_ref.tx_ack = tx;
    f3c0:	61a5      	str	r5, [r4, #24]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f3c2:	72e3      	strb	r3, [r4, #11]
		break;
    f3c4:	e7d1      	b.n	f36a <lp_comm_tx+0x42>
		llcp_pdu_encode_length_req(conn, pdu);
    f3c6:	4630      	mov	r0, r6
    f3c8:	f001 fa20 	bl	1080c <llcp_pdu_encode_length_req>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    f3cc:	2315      	movs	r3, #21
    f3ce:	72e3      	strb	r3, [r4, #11]
		break;
    f3d0:	e7cb      	b.n	f36a <lp_comm_tx+0x42>
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    f3d2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
    f3d4:	f8b6 118c 	ldrh.w	r1, [r6, #396]	; 0x18c
		const uint32_t conn_interval_us = conn->lll.interval * CONN_INT_UNIT_US;
    f3d8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f3dc:	fb02 f303 	mul.w	r3, r2, r3
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
    f3e0:	f242 7210 	movw	r2, #10000	; 0x2710
    f3e4:	fb02 3101 	mla	r1, r2, r1, r3
    f3e8:	3901      	subs	r1, #1
		llcp_lr_prt_restart_with_value(conn, sto_reload);
    f3ea:	4630      	mov	r0, r6
		const uint16_t sto_reload = RADIO_CONN_EVENTS(
    f3ec:	fbb1 f1f3 	udiv	r1, r1, r3
}
    f3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		llcp_lr_prt_restart_with_value(conn, sto_reload);
    f3f4:	b289      	uxth	r1, r1
    f3f6:	f000 bdc3 	b.w	ff80 <llcp_lr_prt_restart_with_value>
	LL_ASSERT(tx);
    f3fa:	4a06      	ldr	r2, [pc, #24]	; (f414 <lp_comm_tx+0xec>)
    f3fc:	4908      	ldr	r1, [pc, #32]	; (f420 <lp_comm_tx+0xf8>)
    f3fe:	4807      	ldr	r0, [pc, #28]	; (f41c <lp_comm_tx+0xf4>)
    f400:	2396      	movs	r3, #150	; 0x96
    f402:	f00a f91c 	bl	1963e <assert_print>
    f406:	4040      	eors	r0, r0
    f408:	f380 8811 	msr	BASEPRI, r0
    f40c:	f04f 0003 	mov.w	r0, #3
    f410:	df02      	svc	2
    f412:	e791      	b.n	f338 <lp_comm_tx+0x10>
    f414:	0001ea0c 	.word	0x0001ea0c
    f418:	0001e220 	.word	0x0001e220
    f41c:	0001e1a4 	.word	0x0001e1a4
    f420:	0001e800 	.word	0x0001e800

0000f424 <rp_comm_tx_proxy>:
	ll_rx_put_sched(ntf->hdr.link, ntf);
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static bool rp_comm_tx_proxy(struct ll_conn *conn, struct proc_ctx *ctx, const bool complete)
{
    f424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f428:	4607      	mov	r7, r0
    f42a:	460c      	mov	r4, r1
    f42c:	4616      	mov	r6, r2
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f42e:	f002 f977 	bl	11720 <llcp_rr_ispaused>
    f432:	b128      	cbz	r0, f440 <rp_comm_tx_proxy+0x1c>
		ctx->state = RP_COMMON_STATE_WAIT_TX;
    f434:	2303      	movs	r3, #3
    f436:	72a3      	strb	r3, [r4, #10]
		return false;
    f438:	2500      	movs	r5, #0
		llcp_rr_complete(conn);
		ctx->state = RP_COMMON_STATE_IDLE;
	}

	return true;
}
    f43a:	4628      	mov	r0, r5
    f43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f440:	4621      	mov	r1, r4
    f442:	4638      	mov	r0, r7
    f444:	f7ff fb0e 	bl	ea64 <llcp_tx_alloc_peek>
    f448:	4605      	mov	r5, r0
    f44a:	2800      	cmp	r0, #0
    f44c:	d0f2      	beq.n	f434 <rp_comm_tx_proxy+0x10>
	tx = llcp_tx_alloc(conn, ctx);
    f44e:	4621      	mov	r1, r4
    f450:	4638      	mov	r0, r7
    f452:	f7ff fb0f 	bl	ea74 <llcp_tx_alloc>
	LL_ASSERT(tx);
    f456:	4680      	mov	r8, r0
    f458:	b370      	cbz	r0, f4b8 <rp_comm_tx_proxy+0x94>
	switch (ctx->proc) {
    f45a:	7a23      	ldrb	r3, [r4, #8]
    f45c:	3b01      	subs	r3, #1
	pdu = (struct pdu_data *)tx->pdu;
    f45e:	f108 0104 	add.w	r1, r8, #4
	switch (ctx->proc) {
    f462:	2b0b      	cmp	r3, #11
    f464:	d807      	bhi.n	f476 <rp_comm_tx_proxy+0x52>
    f466:	e8df f003 	tbb	[pc, r3]
    f46a:	4335      	.short	0x4335
    f46c:	06064906 	.word	0x06064906
    f470:	06060606 	.word	0x06060606
    f474:	3b06      	.short	0x3b06
		LL_ASSERT(0);
    f476:	4a24      	ldr	r2, [pc, #144]	; (f508 <rp_comm_tx_proxy+0xe4>)
    f478:	4924      	ldr	r1, [pc, #144]	; (f50c <rp_comm_tx_proxy+0xe8>)
    f47a:	4825      	ldr	r0, [pc, #148]	; (f510 <rp_comm_tx_proxy+0xec>)
    f47c:	f240 4353 	movw	r3, #1107	; 0x453
    f480:	f00a f8dd 	bl	1963e <assert_print>
    f484:	4040      	eors	r0, r0
    f486:	f380 8811 	msr	BASEPRI, r0
    f48a:	f04f 0003 	mov.w	r0, #3
    f48e:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
    f490:	f898 3007 	ldrb.w	r3, [r8, #7]
    f494:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
    f496:	4641      	mov	r1, r8
    f498:	4638      	mov	r0, r7
    f49a:	f7ff fb01 	bl	eaa0 <llcp_tx_enqueue>
	llcp_rr_prt_restart(conn);
    f49e:	4638      	mov	r0, r7
    f4a0:	f002 f946 	bl	11730 <llcp_rr_prt_restart>
	ctx->state = RP_COMMON_STATE_WAIT_TX_ACK;
    f4a4:	2304      	movs	r3, #4
    f4a6:	72a3      	strb	r3, [r4, #10]
	if (complete) {
    f4a8:	2e00      	cmp	r6, #0
    f4aa:	d0c6      	beq.n	f43a <rp_comm_tx_proxy+0x16>
		llcp_rr_complete(conn);
    f4ac:	4638      	mov	r0, r7
    f4ae:	f002 fad3 	bl	11a58 <llcp_rr_complete>
		ctx->state = RP_COMMON_STATE_IDLE;
    f4b2:	2300      	movs	r3, #0
    f4b4:	72a3      	strb	r3, [r4, #10]
    f4b6:	e7c0      	b.n	f43a <rp_comm_tx_proxy+0x16>
	LL_ASSERT(tx);
    f4b8:	4a13      	ldr	r2, [pc, #76]	; (f508 <rp_comm_tx_proxy+0xe4>)
    f4ba:	4916      	ldr	r1, [pc, #88]	; (f514 <rp_comm_tx_proxy+0xf0>)
    f4bc:	4814      	ldr	r0, [pc, #80]	; (f510 <rp_comm_tx_proxy+0xec>)
    f4be:	f240 430d 	movw	r3, #1037	; 0x40d
    f4c2:	f00a f8bc 	bl	1963e <assert_print>
    f4c6:	4040      	eors	r0, r0
    f4c8:	f380 8811 	msr	BASEPRI, r0
    f4cc:	f04f 0003 	mov.w	r0, #3
    f4d0:	df02      	svc	2
    f4d2:	e7c2      	b.n	f45a <rp_comm_tx_proxy+0x36>
		llcp_pdu_encode_ping_rsp(pdu);
    f4d4:	4608      	mov	r0, r1
    f4d6:	f000 fed3 	bl	10280 <llcp_pdu_encode_ping_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f4da:	23ff      	movs	r3, #255	; 0xff
    f4dc:	72e3      	strb	r3, [r4, #11]
		break;
    f4de:	e7d7      	b.n	f490 <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_length_rsp(conn, pdu);
    f4e0:	4638      	mov	r0, r7
    f4e2:	f001 f9ab 	bl	1083c <llcp_pdu_encode_length_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f4e6:	23ff      	movs	r3, #255	; 0xff
		ctx->node_ref.tx_ack = tx;
    f4e8:	f8c4 8018 	str.w	r8, [r4, #24]
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f4ec:	72e3      	strb	r3, [r4, #11]
		break;
    f4ee:	e7cf      	b.n	f490 <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_feature_rsp(conn, pdu);
    f4f0:	4638      	mov	r0, r7
    f4f2:	f000 ff13 	bl	1031c <llcp_pdu_encode_feature_rsp>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f4f6:	23ff      	movs	r3, #255	; 0xff
    f4f8:	72e3      	strb	r3, [r4, #11]
		break;
    f4fa:	e7c9      	b.n	f490 <rp_comm_tx_proxy+0x6c>
		llcp_pdu_encode_version_ind(pdu);
    f4fc:	4608      	mov	r0, r1
    f4fe:	f000 ffc9 	bl	10494 <llcp_pdu_encode_version_ind>
		ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
    f502:	23ff      	movs	r3, #255	; 0xff
    f504:	72e3      	strb	r3, [r4, #11]
		break;
    f506:	e7c3      	b.n	f490 <rp_comm_tx_proxy+0x6c>
    f508:	0001ea0c 	.word	0x0001ea0c
    f50c:	0001e220 	.word	0x0001e220
    f510:	0001e1a4 	.word	0x0001e1a4
    f514:	0001e800 	.word	0x0001e800

0000f518 <rp_comm_send_rsp.constprop.0>:

static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    f518:	b538      	push	{r3, r4, r5, lr}
{
	switch (ctx->proc) {
    f51a:	7a0b      	ldrb	r3, [r1, #8]
    f51c:	3b01      	subs	r3, #1
static void rp_comm_send_rsp(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    f51e:	460c      	mov	r4, r1
    f520:	4605      	mov	r5, r0
	switch (ctx->proc) {
    f522:	2b0b      	cmp	r3, #11
    f524:	d80c      	bhi.n	f540 <rp_comm_send_rsp.constprop.0+0x28>
    f526:	e8df f003 	tbb	[pc, r3]
    f52a:	0606      	.short	0x0606
    f52c:	0b0b270b 	.word	0x0b0b270b
    f530:	190b0b0b 	.word	0x190b0b0b
    f534:	220b      	.short	0x220b
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
	default:
		/* Unknown procedure */
		LL_ASSERT(0);
	}
}
    f536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, true);
    f53a:	2201      	movs	r2, #1
    f53c:	f7ff bf72 	b.w	f424 <rp_comm_tx_proxy>
		LL_ASSERT(0);
    f540:	4a16      	ldr	r2, [pc, #88]	; (f59c <rp_comm_send_rsp.constprop.0+0x84>)
    f542:	4917      	ldr	r1, [pc, #92]	; (f5a0 <__kernel_ram_size>)
    f544:	4817      	ldr	r0, [pc, #92]	; (f5a4 <__kernel_ram_size+0x4>)
    f546:	f240 5302 	movw	r3, #1282	; 0x502
    f54a:	f00a f878 	bl	1963e <assert_print>
    f54e:	4040      	eors	r0, r0
    f550:	f380 8811 	msr	BASEPRI, r0
    f554:	f04f 0003 	mov.w	r0, #3
    f558:	df02      	svc	2
}
    f55a:	bd38      	pop	{r3, r4, r5, pc}
	llcp_rr_complete(conn);
    f55c:	f002 fa7c 	bl	11a58 <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    f560:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	ctx->state = RP_COMMON_STATE_IDLE;
    f564:	2200      	movs	r2, #0
    f566:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    f568:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
}
    f56c:	bd38      	pop	{r3, r4, r5, pc}
    f56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		rp_comm_tx_proxy(conn, ctx, false);
    f572:	2200      	movs	r2, #0
    f574:	f7ff bf56 	b.w	f424 <rp_comm_tx_proxy>
		if (!conn->llcp.vex.sent) {
    f578:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    f57c:	b943      	cbnz	r3, f590 <rp_comm_send_rsp.constprop.0+0x78>
			if (rp_comm_tx_proxy(conn, ctx, true)) {
    f57e:	2201      	movs	r2, #1
    f580:	f7ff ff50 	bl	f424 <rp_comm_tx_proxy>
    f584:	2800      	cmp	r0, #0
    f586:	d0e8      	beq.n	f55a <rp_comm_send_rsp.constprop.0+0x42>
				conn->llcp.vex.sent = 1;
    f588:	2301      	movs	r3, #1
    f58a:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
}
    f58e:	bd38      	pop	{r3, r4, r5, pc}
			llcp_rr_complete(conn);
    f590:	f002 fa62 	bl	11a58 <llcp_rr_complete>
			ctx->state = RP_COMMON_STATE_IDLE;
    f594:	2300      	movs	r3, #0
    f596:	72a3      	strb	r3, [r4, #10]
}
    f598:	bd38      	pop	{r3, r4, r5, pc}
    f59a:	bf00      	nop
    f59c:	0001ea0c 	.word	0x0001ea0c
    f5a0:	0001e220 	.word	0x0001e220
    f5a4:	0001e1a4 	.word	0x0001e1a4

0000f5a8 <rp_comm_execute_fsm>:
	}
}

static void rp_comm_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
				void *param)
{
    f5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5aa:	460c      	mov	r4, r1
	switch (ctx->state) {
    f5ac:	7a89      	ldrb	r1, [r1, #10]
{
    f5ae:	4605      	mov	r5, r0
	switch (ctx->state) {
    f5b0:	2904      	cmp	r1, #4
    f5b2:	f200 80d0 	bhi.w	f756 <rp_comm_execute_fsm+0x1ae>
    f5b6:	e8df f001 	tbb	[pc, r1]
    f5ba:	0b06      	.short	0x0b06
    f5bc:	2d1e      	.short	0x2d1e
    f5be:	03          	.byte	0x03
    f5bf:	00          	.byte	0x00
	switch (evt) {
    f5c0:	2a01      	cmp	r2, #1
    f5c2:	d02f      	beq.n	f624 <rp_comm_execute_fsm+0x7c>
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
    f5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
    f5c6:	2a00      	cmp	r2, #0
    f5c8:	d1fc      	bne.n	f5c4 <rp_comm_execute_fsm+0x1c>
		ctx->state = RP_COMMON_STATE_WAIT_RX;
    f5ca:	2301      	movs	r3, #1
    f5cc:	72a3      	strb	r3, [r4, #10]
}
    f5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
    f5d0:	2a02      	cmp	r2, #2
    f5d2:	d1f7      	bne.n	f5c4 <rp_comm_execute_fsm+0x1c>
	ctx->response_opcode = pdu->llctrl.opcode;
    f5d4:	78da      	ldrb	r2, [r3, #3]
    f5d6:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
    f5d8:	3a02      	subs	r2, #2
    f5da:	2a12      	cmp	r2, #18
    f5dc:	d860      	bhi.n	f6a0 <rp_comm_execute_fsm+0xf8>
    f5de:	e8df f002 	tbb	[pc, r2]
    f5e2:	5f83      	.short	0x5f83
    f5e4:	5f5f5f5f 	.word	0x5f5f5f5f
    f5e8:	5f5f5f7e 	.word	0x5f5f5f7e
    f5ec:	5f5f5f8c 	.word	0x5f5f5f8c
    f5f0:	5f1b5f5f 	.word	0x5f1b5f5f
    f5f4:	6d          	.byte	0x6d
    f5f5:	00          	.byte	0x00
	switch (evt) {
    f5f6:	2a00      	cmp	r2, #0
    f5f8:	d1e4      	bne.n	f5c4 <rp_comm_execute_fsm+0x1c>
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
    f5fa:	7a23      	ldrb	r3, [r4, #8]
    f5fc:	2b0a      	cmp	r3, #10
    f5fe:	d141      	bne.n	f684 <rp_comm_execute_fsm+0xdc>
	llcp_rr_complete(conn);
    f600:	4628      	mov	r0, r5
    f602:	f002 fa29 	bl	11a58 <llcp_rr_complete>
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    f606:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	ctx->state = RP_COMMON_STATE_IDLE;
    f60a:	2200      	movs	r2, #0
    f60c:	72a2      	strb	r2, [r4, #10]
	conn->llcp_terminate.reason_final = ctx->data.term.error_code;
    f60e:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
}
    f612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
    f614:	2a00      	cmp	r2, #0
    f616:	d1d5      	bne.n	f5c4 <rp_comm_execute_fsm+0x1c>
		rp_comm_send_rsp(conn, ctx, evt, param);
    f618:	4621      	mov	r1, r4
    f61a:	4628      	mov	r0, r5
}
    f61c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		rp_comm_send_rsp(conn, ctx, evt, param);
    f620:	f7ff bf7a 	b.w	f518 <rp_comm_send_rsp.constprop.0>
		switch (ctx->proc) {
    f624:	7a23      	ldrb	r3, [r4, #8]
    f626:	2b0c      	cmp	r3, #12
    f628:	d1cc      	bne.n	f5c4 <rp_comm_execute_fsm+0x1c>
			uint8_t dle_changed = ull_dle_update_eff_tx(conn);
    f62a:	4628      	mov	r0, r5
    f62c:	f7fe f834 	bl	d698 <ull_dle_update_eff_tx>
			dle_changed |= ctx->data.dle.ntf_dle;
    f630:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    f634:	2104      	movs	r1, #4
			dle_changed |= ctx->data.dle.ntf_dle;
    f636:	ea40 0603 	orr.w	r6, r0, r3
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    f63a:	4628      	mov	r0, r5
    f63c:	f7ff fa48 	bl	ead0 <llcp_tx_resume_data>
	ntf = ctx->node_ref.rx;
    f640:	69e7      	ldr	r7, [r4, #28]
			dle_changed |= ctx->data.dle.ntf_dle;
    f642:	b2f6      	uxtb	r6, r6
	LL_ASSERT(ntf);
    f644:	2f00      	cmp	r7, #0
    f646:	d078      	beq.n	f73a <rp_comm_execute_fsm+0x192>
	LL_ASSERT(ntf->hdr.type == NODE_RX_TYPE_RETAIN);
    f648:	793b      	ldrb	r3, [r7, #4]
    f64a:	2b2c      	cmp	r3, #44	; 0x2c
    f64c:	d00c      	beq.n	f668 <rp_comm_execute_fsm+0xc0>
    f64e:	4a49      	ldr	r2, [pc, #292]	; (f774 <rp_comm_execute_fsm+0x1cc>)
    f650:	4949      	ldr	r1, [pc, #292]	; (f778 <rp_comm_execute_fsm+0x1d0>)
    f652:	484a      	ldr	r0, [pc, #296]	; (f77c <rp_comm_execute_fsm+0x1d4>)
    f654:	f240 4375 	movw	r3, #1141	; 0x475
    f658:	f009 fff1 	bl	1963e <assert_print>
    f65c:	4040      	eors	r0, r0
    f65e:	f380 8811 	msr	BASEPRI, r0
    f662:	f04f 0003 	mov.w	r0, #3
    f666:	df02      	svc	2
	if (generate_ntf) {
    f668:	2e00      	cmp	r6, #0
    f66a:	d14b      	bne.n	f704 <rp_comm_execute_fsm+0x15c>
	ntf->hdr.type = NODE_RX_TYPE_RELEASE;
    f66c:	2301      	movs	r3, #1
    f66e:	713b      	strb	r3, [r7, #4]
	ll_rx_put_sched(ntf->hdr.link, ntf);
    f670:	6838      	ldr	r0, [r7, #0]
    f672:	4639      	mov	r1, r7
    f674:	f7fa fbe8 	bl	9e48 <ll_rx_put_sched>
			llcp_rr_complete(conn);
    f678:	4628      	mov	r0, r5
    f67a:	f002 f9ed 	bl	11a58 <llcp_rr_complete>
			ctx->state = RP_COMMON_STATE_IDLE;
    f67e:	2300      	movs	r3, #0
    f680:	72a3      	strb	r3, [r4, #10]
}
    f682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(ctx->proc == PROC_TERMINATE);
    f684:	4a3b      	ldr	r2, [pc, #236]	; (f774 <rp_comm_execute_fsm+0x1cc>)
    f686:	493e      	ldr	r1, [pc, #248]	; (f780 <rp_comm_execute_fsm+0x1d8>)
    f688:	483c      	ldr	r0, [pc, #240]	; (f77c <rp_comm_execute_fsm+0x1d4>)
    f68a:	f44f 63a3 	mov.w	r3, #1304	; 0x518
    f68e:	f009 ffd6 	bl	1963e <assert_print>
    f692:	4040      	eors	r0, r0
    f694:	f380 8811 	msr	BASEPRI, r0
    f698:	f04f 0003 	mov.w	r0, #3
    f69c:	df02      	svc	2
    f69e:	e7af      	b.n	f600 <rp_comm_execute_fsm+0x58>
		LL_ASSERT(0);
    f6a0:	4a34      	ldr	r2, [pc, #208]	; (f774 <rp_comm_execute_fsm+0x1cc>)
    f6a2:	4938      	ldr	r1, [pc, #224]	; (f784 <rp_comm_execute_fsm+0x1dc>)
    f6a4:	4835      	ldr	r0, [pc, #212]	; (f77c <rp_comm_execute_fsm+0x1d4>)
    f6a6:	f240 4302 	movw	r3, #1026	; 0x402
    f6aa:	f009 ffc8 	bl	1963e <assert_print>
    f6ae:	4040      	eors	r0, r0
    f6b0:	f380 8811 	msr	BASEPRI, r0
    f6b4:	f04f 0003 	mov.w	r0, #3
    f6b8:	df02      	svc	2
    f6ba:	e7ad      	b.n	f618 <rp_comm_execute_fsm+0x70>
		llcp_pdu_decode_length_req(conn, pdu);
    f6bc:	4619      	mov	r1, r3
    f6be:	4628      	mov	r0, r5
    f6c0:	f001 f8ec 	bl	1089c <llcp_pdu_decode_length_req>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    f6c4:	2104      	movs	r1, #4
    f6c6:	4628      	mov	r0, r5
    f6c8:	f7ff f9ee 	bl	eaa8 <llcp_tx_pause_data>
		ctx->data.dle.ntf_dle = ull_dle_update_eff_rx(conn);
    f6cc:	4628      	mov	r0, r5
    f6ce:	f7fd ffab 	bl	d628 <ull_dle_update_eff_rx>
    f6d2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
		llcp_rx_node_retain(ctx);
    f6d6:	4620      	mov	r0, r4
    f6d8:	f7ff fa06 	bl	eae8 <llcp_rx_node_retain>
		break;
    f6dc:	e79c      	b.n	f618 <rp_comm_execute_fsm+0x70>
		llcp_pdu_decode_feature_req(conn, pdu);
    f6de:	4619      	mov	r1, r3
    f6e0:	4628      	mov	r0, r5
    f6e2:	f000 fe5b 	bl	1039c <llcp_pdu_decode_feature_req>
		if (feature_phy_coded(conn)) {
    f6e6:	e797      	b.n	f618 <rp_comm_execute_fsm+0x70>
		llcp_pdu_decode_terminate_ind(ctx, pdu);
    f6e8:	4619      	mov	r1, r3
    f6ea:	4620      	mov	r0, r4
    f6ec:	f000 fece 	bl	1048c <llcp_pdu_decode_terminate_ind>
		llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_TERMINATE);
    f6f0:	2108      	movs	r1, #8
    f6f2:	4628      	mov	r0, r5
    f6f4:	f7ff f9d8 	bl	eaa8 <llcp_tx_pause_data>
		break;
    f6f8:	e78e      	b.n	f618 <rp_comm_execute_fsm+0x70>
		llcp_pdu_decode_version_ind(conn, pdu);
    f6fa:	4619      	mov	r1, r3
    f6fc:	4628      	mov	r0, r5
    f6fe:	f000 fef1 	bl	104e4 <llcp_pdu_decode_version_ind>
		break;
    f702:	e789      	b.n	f618 <rp_comm_execute_fsm+0x70>
		ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    f704:	2303      	movs	r3, #3
    f706:	713b      	strb	r3, [r7, #4]
		ntf->hdr.handle = conn->lll.handle;
    f708:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    f70a:	80fb      	strh	r3, [r7, #6]
		LL_ASSERT(ctx->proc == PROC_DATA_LENGTH_UPDATE);
    f70c:	7a23      	ldrb	r3, [r4, #8]
    f70e:	2b0c      	cmp	r3, #12
		pdu = (struct pdu_data *)ntf->pdu;
    f710:	f107 061c 	add.w	r6, r7, #28
		LL_ASSERT(ctx->proc == PROC_DATA_LENGTH_UPDATE);
    f714:	d00c      	beq.n	f730 <rp_comm_execute_fsm+0x188>
    f716:	4a17      	ldr	r2, [pc, #92]	; (f774 <rp_comm_execute_fsm+0x1cc>)
    f718:	491b      	ldr	r1, [pc, #108]	; (f788 <rp_comm_execute_fsm+0x1e0>)
    f71a:	4818      	ldr	r0, [pc, #96]	; (f77c <rp_comm_execute_fsm+0x1d4>)
    f71c:	f240 437e 	movw	r3, #1150	; 0x47e
    f720:	f009 ff8d 	bl	1963e <assert_print>
    f724:	4040      	eors	r0, r0
    f726:	f380 8811 	msr	BASEPRI, r0
    f72a:	f04f 0003 	mov.w	r0, #3
    f72e:	df02      	svc	2
		llcp_ntf_encode_length_change(conn, pdu);
    f730:	4631      	mov	r1, r6
    f732:	4628      	mov	r0, r5
    f734:	f001 f89a 	bl	1086c <llcp_ntf_encode_length_change>
    f738:	e79a      	b.n	f670 <rp_comm_execute_fsm+0xc8>
	LL_ASSERT(ntf);
    f73a:	4a0e      	ldr	r2, [pc, #56]	; (f774 <rp_comm_execute_fsm+0x1cc>)
    f73c:	4913      	ldr	r1, [pc, #76]	; (f78c <rp_comm_execute_fsm+0x1e4>)
    f73e:	480f      	ldr	r0, [pc, #60]	; (f77c <rp_comm_execute_fsm+0x1d4>)
    f740:	f240 4372 	movw	r3, #1138	; 0x472
    f744:	f009 ff7b 	bl	1963e <assert_print>
    f748:	4040      	eors	r0, r0
    f74a:	f380 8811 	msr	BASEPRI, r0
    f74e:	f04f 0003 	mov.w	r0, #3
    f752:	df02      	svc	2
    f754:	e778      	b.n	f648 <rp_comm_execute_fsm+0xa0>
		LL_ASSERT(0);
    f756:	4a07      	ldr	r2, [pc, #28]	; (f774 <rp_comm_execute_fsm+0x1cc>)
    f758:	490a      	ldr	r1, [pc, #40]	; (f784 <rp_comm_execute_fsm+0x1dc>)
    f75a:	4808      	ldr	r0, [pc, #32]	; (f77c <rp_comm_execute_fsm+0x1d4>)
    f75c:	f240 537e 	movw	r3, #1406	; 0x57e
    f760:	f009 ff6d 	bl	1963e <assert_print>
    f764:	4040      	eors	r0, r0
    f766:	f380 8811 	msr	BASEPRI, r0
    f76a:	f04f 0003 	mov.w	r0, #3
    f76e:	df02      	svc	2
}
    f770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f772:	bf00      	nop
    f774:	0001ea0c 	.word	0x0001ea0c
    f778:	0001e8bc 	.word	0x0001e8bc
    f77c:	0001e1a4 	.word	0x0001e1a4
    f780:	0001ea54 	.word	0x0001ea54
    f784:	0001e220 	.word	0x0001e220
    f788:	0001ea70 	.word	0x0001ea70
    f78c:	0001e874 	.word	0x0001e874

0000f790 <lp_comm_ntf>:
{
    f790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ntf = ctx->node_ref.rx;
    f792:	69cf      	ldr	r7, [r1, #28]
	ctx->node_ref.rx = NULL;
    f794:	2600      	movs	r6, #0
{
    f796:	460c      	mov	r4, r1
    f798:	4605      	mov	r5, r0
	ctx->node_ref.rx = NULL;
    f79a:	61ce      	str	r6, [r1, #28]
	if (!ntf) {
    f79c:	2f00      	cmp	r7, #0
    f79e:	d055      	beq.n	f84c <lp_comm_ntf+0xbc>
	uint8_t piggy_back = 1U;
    f7a0:	2601      	movs	r6, #1
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    f7a2:	2303      	movs	r3, #3
    f7a4:	713b      	strb	r3, [r7, #4]
	ntf->hdr.handle = conn->lll.handle;
    f7a6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    f7a8:	80fb      	strh	r3, [r7, #6]
	switch (ctx->proc) {
    f7aa:	7a23      	ldrb	r3, [r4, #8]
    f7ac:	2b04      	cmp	r3, #4
	pdu = (struct pdu_data *)ntf->pdu;
    f7ae:	f107 011c 	add.w	r1, r7, #28
	switch (ctx->proc) {
    f7b2:	d02e      	beq.n	f812 <lp_comm_ntf+0x82>
    f7b4:	2b0c      	cmp	r3, #12
    f7b6:	d028      	beq.n	f80a <lp_comm_ntf+0x7a>
    f7b8:	2b02      	cmp	r3, #2
    f7ba:	d014      	beq.n	f7e6 <lp_comm_ntf+0x56>
		LL_ASSERT(0);
    f7bc:	4a2d      	ldr	r2, [pc, #180]	; (f874 <lp_comm_ntf+0xe4>)
    f7be:	492e      	ldr	r1, [pc, #184]	; (f878 <lp_comm_ntf+0xe8>)
    f7c0:	482e      	ldr	r0, [pc, #184]	; (f87c <lp_comm_ntf+0xec>)
    f7c2:	f240 139f 	movw	r3, #415	; 0x19f
    f7c6:	f009 ff3a 	bl	1963e <assert_print>
    f7ca:	4040      	eors	r0, r0
    f7cc:	f380 8811 	msr	BASEPRI, r0
    f7d0:	f04f 0003 	mov.w	r0, #3
    f7d4:	df02      	svc	2
	if (!piggy_back) {
    f7d6:	b106      	cbz	r6, f7da <lp_comm_ntf+0x4a>
}
    f7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ll_rx_put_sched(ntf->hdr.link, ntf);
    f7da:	6838      	ldr	r0, [r7, #0]
    f7dc:	4639      	mov	r1, r7
}
    f7de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_put_sched(ntf->hdr.link, ntf);
    f7e2:	f7fa bb31 	b.w	9e48 <ll_rx_put_sched>
	switch (ctx->response_opcode) {
    f7e6:	7a63      	ldrb	r3, [r4, #9]
    f7e8:	2b07      	cmp	r3, #7
    f7ea:	d02b      	beq.n	f844 <lp_comm_ntf+0xb4>
    f7ec:	2b09      	cmp	r3, #9
    f7ee:	d021      	beq.n	f834 <lp_comm_ntf+0xa4>
		LL_ASSERT(0);
    f7f0:	4a20      	ldr	r2, [pc, #128]	; (f874 <lp_comm_ntf+0xe4>)
    f7f2:	4921      	ldr	r1, [pc, #132]	; (f878 <lp_comm_ntf+0xe8>)
    f7f4:	4821      	ldr	r0, [pc, #132]	; (f87c <lp_comm_ntf+0xec>)
    f7f6:	23f6      	movs	r3, #246	; 0xf6
    f7f8:	f009 ff21 	bl	1963e <assert_print>
    f7fc:	4040      	eors	r0, r0
    f7fe:	f380 8811 	msr	BASEPRI, r0
    f802:	f04f 0003 	mov.w	r0, #3
    f806:	df02      	svc	2
    f808:	e7e5      	b.n	f7d6 <lp_comm_ntf+0x46>
	llcp_ntf_encode_length_change(conn, pdu);
    f80a:	4628      	mov	r0, r5
    f80c:	f001 f82e 	bl	1086c <llcp_ntf_encode_length_change>
}
    f810:	e7e1      	b.n	f7d6 <lp_comm_ntf+0x46>
	switch (ctx->response_opcode) {
    f812:	7a63      	ldrb	r3, [r4, #9]
    f814:	2b0c      	cmp	r3, #12
    f816:	d011      	beq.n	f83c <lp_comm_ntf+0xac>
		LL_ASSERT(0);
    f818:	4a16      	ldr	r2, [pc, #88]	; (f874 <lp_comm_ntf+0xe4>)
    f81a:	4917      	ldr	r1, [pc, #92]	; (f878 <lp_comm_ntf+0xe8>)
    f81c:	4817      	ldr	r0, [pc, #92]	; (f87c <lp_comm_ntf+0xec>)
    f81e:	f240 1303 	movw	r3, #259	; 0x103
    f822:	f009 ff0c 	bl	1963e <assert_print>
    f826:	4040      	eors	r0, r0
    f828:	f380 8811 	msr	BASEPRI, r0
    f82c:	f04f 0003 	mov.w	r0, #3
    f830:	df02      	svc	2
    f832:	e7d0      	b.n	f7d6 <lp_comm_ntf+0x46>
		llcp_ntf_encode_feature_rsp(conn, pdu);
    f834:	4628      	mov	r0, r5
    f836:	f000 fd93 	bl	10360 <llcp_ntf_encode_feature_rsp>
		break;
    f83a:	e7cc      	b.n	f7d6 <lp_comm_ntf+0x46>
		llcp_ntf_encode_version_ind(conn, pdu);
    f83c:	4628      	mov	r0, r5
    f83e:	f000 fe3b 	bl	104b8 <llcp_ntf_encode_version_ind>
		break;
    f842:	e7c8      	b.n	f7d6 <lp_comm_ntf+0x46>
		llcp_ntf_encode_unknown_rsp(ctx, pdu);
    f844:	4620      	mov	r0, r4
    f846:	f000 fd37 	bl	102b8 <llcp_ntf_encode_unknown_rsp>
		break;
    f84a:	e7c4      	b.n	f7d6 <lp_comm_ntf+0x46>
		ntf = llcp_ntf_alloc();
    f84c:	f7ff f926 	bl	ea9c <llcp_ntf_alloc>
		LL_ASSERT(ntf);
    f850:	4607      	mov	r7, r0
    f852:	2800      	cmp	r0, #0
    f854:	d1a5      	bne.n	f7a2 <lp_comm_ntf+0x12>
    f856:	4a07      	ldr	r2, [pc, #28]	; (f874 <lp_comm_ntf+0xe4>)
    f858:	4909      	ldr	r1, [pc, #36]	; (f880 <lp_comm_ntf+0xf0>)
    f85a:	4808      	ldr	r0, [pc, #32]	; (f87c <lp_comm_ntf+0xec>)
    f85c:	f44f 73c0 	mov.w	r3, #384	; 0x180
    f860:	f009 feed 	bl	1963e <assert_print>
    f864:	4040      	eors	r0, r0
    f866:	f380 8811 	msr	BASEPRI, r0
    f86a:	f04f 0003 	mov.w	r0, #3
    f86e:	df02      	svc	2
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
    f870:	713f      	strb	r7, [r7, #4]
    f872:	deff      	udf	#255	; 0xff
    f874:	0001ea0c 	.word	0x0001ea0c
    f878:	0001e220 	.word	0x0001e220
    f87c:	0001e1a4 	.word	0x0001e1a4
    f880:	0001e874 	.word	0x0001e874

0000f884 <lp_comm_complete.constprop.0>:
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    f884:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
    f886:	7a0b      	ldrb	r3, [r1, #8]
    f888:	3b01      	subs	r3, #1
static void lp_comm_complete(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    f88a:	460c      	mov	r4, r1
    f88c:	4605      	mov	r5, r0
	switch (ctx->proc) {
    f88e:	2b0b      	cmp	r3, #11
    f890:	d815      	bhi.n	f8be <lp_comm_complete.constprop.0+0x3a>
    f892:	e8df f003 	tbb	[pc, r3]
    f896:	2206      	.short	0x2206
    f898:	1414300e 	.word	0x1414300e
    f89c:	3f141414 	.word	0x3f141414
    f8a0:	4714      	.short	0x4714
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
    f8a2:	7a4b      	ldrb	r3, [r1, #9]
    f8a4:	2b07      	cmp	r3, #7
    f8a6:	d004      	beq.n	f8b2 <lp_comm_complete.constprop.0+0x2e>
    f8a8:	2b13      	cmp	r3, #19
    f8aa:	d002      	beq.n	f8b2 <lp_comm_complete.constprop.0+0x2e>
	conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
    f8ac:	2324      	movs	r3, #36	; 0x24
    f8ae:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
	llcp_lr_complete(conn);
    f8b2:	4628      	mov	r0, r5
    f8b4:	f000 fc1c 	bl	100f0 <llcp_lr_complete>
	ctx->state = LP_COMMON_STATE_IDLE;
    f8b8:	2300      	movs	r3, #0
    f8ba:	72a3      	strb	r3, [r4, #10]
}
    f8bc:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(0);
    f8be:	4a31      	ldr	r2, [pc, #196]	; (f984 <lp_comm_complete.constprop.0+0x100>)
    f8c0:	4931      	ldr	r1, [pc, #196]	; (f988 <lp_comm_complete.constprop.0+0x104>)
    f8c2:	4832      	ldr	r0, [pc, #200]	; (f98c <lp_comm_complete.constprop.0+0x108>)
    f8c4:	f44f 7310 	mov.w	r3, #576	; 0x240
    f8c8:	f009 feb9 	bl	1963e <assert_print>
    f8cc:	4040      	eors	r0, r0
    f8ce:	f380 8811 	msr	BASEPRI, r0
    f8d2:	f04f 0003 	mov.w	r0, #3
    f8d6:	df02      	svc	2
}
    f8d8:	bd38      	pop	{r3, r4, r5, pc}
		if ((ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP ||
    f8da:	7a4b      	ldrb	r3, [r1, #9]
    f8dc:	2b07      	cmp	r3, #7
    f8de:	d001      	beq.n	f8e4 <lp_comm_complete.constprop.0+0x60>
    f8e0:	2b09      	cmp	r3, #9
    f8e2:	d1e3      	bne.n	f8ac <lp_comm_complete.constprop.0+0x28>
			if (ctx->data.fex.host_initiated) {
    f8e4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f8e8:	07db      	lsls	r3, r3, #31
    f8ea:	d5e2      	bpl.n	f8b2 <lp_comm_complete.constprop.0+0x2e>
				lp_comm_ntf(conn, ctx);
    f8ec:	4621      	mov	r1, r4
    f8ee:	4628      	mov	r0, r5
    f8f0:	f7ff ff4e 	bl	f790 <lp_comm_ntf>
    f8f4:	e7dd      	b.n	f8b2 <lp_comm_complete.constprop.0+0x2e>
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_VERSION_IND) {
    f8f6:	7a4b      	ldrb	r3, [r1, #9]
    f8f8:	2b0c      	cmp	r3, #12
    f8fa:	d1d7      	bne.n	f8ac <lp_comm_complete.constprop.0+0x28>
			if (ctx->node_ref.rx || llcp_ntf_alloc_is_available()) {
    f8fc:	69cb      	ldr	r3, [r1, #28]
    f8fe:	b393      	cbz	r3, f966 <lp_comm_complete.constprop.0+0xe2>
				lp_comm_ntf(conn, ctx);
    f900:	4621      	mov	r1, r4
    f902:	4628      	mov	r0, r5
    f904:	f7ff ff44 	bl	f790 <lp_comm_ntf>
				llcp_lr_complete(conn);
    f908:	4628      	mov	r0, r5
    f90a:	f000 fbf1 	bl	100f0 <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
    f90e:	2300      	movs	r3, #0
    f910:	72a3      	strb	r3, [r4, #10]
}
    f912:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lr_complete(conn);
    f914:	f000 fbec 	bl	100f0 <llcp_lr_complete>
		ctx->state = LP_COMMON_STATE_IDLE;
    f918:	2200      	movs	r2, #0
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    f91a:	2316      	movs	r3, #22
		ctx->state = LP_COMMON_STATE_IDLE;
    f91c:	72a2      	strb	r2, [r4, #10]
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    f91e:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
}
    f922:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    f924:	7a4b      	ldrb	r3, [r1, #9]
    f926:	2b15      	cmp	r3, #21
    f928:	d016      	beq.n	f958 <lp_comm_complete.constprop.0+0xd4>
		} else if (ctx->response_opcode == PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) {
    f92a:	2b07      	cmp	r3, #7
    f92c:	d1be      	bne.n	f8ac <lp_comm_complete.constprop.0+0x28>
	conn->llcp.fex.features_used &= ~ll_feat_mask;
    f92e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
    f932:	f023 0320 	bic.w	r3, r3, #32
    f936:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
			llcp_lr_complete(conn);
    f93a:	f000 fbd9 	bl	100f0 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
    f93e:	2300      	movs	r3, #0
    f940:	72a3      	strb	r3, [r4, #10]
		if (!ull_cp_remote_dle_pending(conn)) {
    f942:	4628      	mov	r0, r5
    f944:	f7ff fbc4 	bl	f0d0 <ull_cp_remote_dle_pending>
    f948:	2800      	cmp	r0, #0
    f94a:	d1b7      	bne.n	f8bc <lp_comm_complete.constprop.0+0x38>
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    f94c:	4628      	mov	r0, r5
    f94e:	2104      	movs	r1, #4
}
    f950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			llcp_tx_resume_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    f954:	f7ff b8bc 	b.w	ead0 <llcp_tx_resume_data>
			uint8_t dle_changed = ull_dle_update_eff(conn);
    f958:	f7fd fde6 	bl	d528 <ull_dle_update_eff>
			if (dle_changed) {
    f95c:	b968      	cbnz	r0, f97a <lp_comm_complete.constprop.0+0xf6>
			llcp_lr_complete(conn);
    f95e:	4628      	mov	r0, r5
    f960:	f000 fbc6 	bl	100f0 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
    f964:	e7eb      	b.n	f93e <lp_comm_complete.constprop.0+0xba>
			if (ctx->node_ref.rx || llcp_ntf_alloc_is_available()) {
    f966:	f7ff f891 	bl	ea8c <llcp_ntf_alloc_is_available>
    f96a:	2800      	cmp	r0, #0
    f96c:	d1c8      	bne.n	f900 <lp_comm_complete.constprop.0+0x7c>
				llcp_lr_prt_restart(conn);
    f96e:	4628      	mov	r0, r5
    f970:	f000 fb00 	bl	ff74 <llcp_lr_prt_restart>
				ctx->state = LP_COMMON_STATE_WAIT_NTF_AVAIL;
    f974:	2304      	movs	r3, #4
    f976:	72a3      	strb	r3, [r4, #10]
}
    f978:	bd38      	pop	{r3, r4, r5, pc}
				lp_comm_ntf(conn, ctx);
    f97a:	4621      	mov	r1, r4
    f97c:	4628      	mov	r0, r5
    f97e:	f7ff ff07 	bl	f790 <lp_comm_ntf>
    f982:	e7ec      	b.n	f95e <lp_comm_complete.constprop.0+0xda>
    f984:	0001ea0c 	.word	0x0001ea0c
    f988:	0001e220 	.word	0x0001e220
    f98c:	0001e1a4 	.word	0x0001e1a4

0000f990 <lp_comm_send_req.constprop.0.isra.0>:
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    f990:	b570      	push	{r4, r5, r6, lr}
	switch (ctx->proc) {
    f992:	7a0e      	ldrb	r6, [r1, #8]
    f994:	1e73      	subs	r3, r6, #1
static void lp_comm_send_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
    f996:	460c      	mov	r4, r1
    f998:	4605      	mov	r5, r0
	switch (ctx->proc) {
    f99a:	2b0b      	cmp	r3, #11
    f99c:	d807      	bhi.n	f9ae <lp_comm_send_req.constprop.0.isra.0+0x1e>
    f99e:	e8df f003 	tbb	[pc, r3]
    f9a2:	1b14      	.short	0x1b14
    f9a4:	0606432f 	.word	0x0606432f
    f9a8:	60060606 	.word	0x60060606
    f9ac:	6e06      	.short	0x6e06
		LL_ASSERT(0);
    f9ae:	4a50      	ldr	r2, [pc, #320]	; (faf0 <lp_comm_send_req.constprop.0.isra.0+0x160>)
    f9b0:	4950      	ldr	r1, [pc, #320]	; (faf4 <lp_comm_send_req.constprop.0.isra.0+0x164>)
    f9b2:	4851      	ldr	r0, [pc, #324]	; (faf8 <lp_comm_send_req.constprop.0.isra.0+0x168>)
    f9b4:	f240 23bf 	movw	r3, #703	; 0x2bf
    f9b8:	f009 fe41 	bl	1963e <assert_print>
    f9bc:	4040      	eors	r0, r0
    f9be:	f380 8811 	msr	BASEPRI, r0
    f9c2:	f04f 0003 	mov.w	r0, #3
    f9c6:	df02      	svc	2
}
    f9c8:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f9ca:	f000 fac3 	bl	ff54 <llcp_lr_ispaused>
    f9ce:	2800      	cmp	r0, #0
    f9d0:	d07c      	beq.n	facc <lp_comm_send_req.constprop.0.isra.0+0x13c>
		ctx->state = LP_COMMON_STATE_WAIT_TX;
    f9d2:	2301      	movs	r3, #1
    f9d4:	72a3      	strb	r3, [r4, #10]
}
    f9d6:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    f9d8:	f000 fabc 	bl	ff54 <llcp_lr_ispaused>
    f9dc:	2800      	cmp	r0, #0
    f9de:	d1f8      	bne.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
    f9e0:	4621      	mov	r1, r4
    f9e2:	4628      	mov	r0, r5
    f9e4:	f7ff f83e 	bl	ea64 <llcp_tx_alloc_peek>
    f9e8:	2800      	cmp	r0, #0
    f9ea:	d0f2      	beq.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    f9ec:	4621      	mov	r1, r4
    f9ee:	4628      	mov	r0, r5
    f9f0:	f7ff fc9a 	bl	f328 <lp_comm_tx>
		ctx->state = ctx->node_ref.tx_ack ?
    f9f4:	69a3      	ldr	r3, [r4, #24]
    f9f6:	2b00      	cmp	r3, #0
    f9f8:	bf08      	it	eq
    f9fa:	2603      	moveq	r6, #3
    f9fc:	72a6      	strb	r6, [r4, #10]
}
    f9fe:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fa00:	f000 faa8 	bl	ff54 <llcp_lr_ispaused>
    fa04:	2800      	cmp	r0, #0
    fa06:	d1e4      	bne.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
    fa08:	4621      	mov	r1, r4
    fa0a:	4628      	mov	r0, r5
    fa0c:	f7ff f82a 	bl	ea64 <llcp_tx_alloc_peek>
    fa10:	2800      	cmp	r0, #0
    fa12:	d0de      	beq.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    fa14:	4621      	mov	r1, r4
    fa16:	4628      	mov	r0, r5
    fa18:	f7ff fc86 	bl	f328 <lp_comm_tx>
		ctx->state = ctx->node_ref.tx_ack ?
    fa1c:	69a3      	ldr	r3, [r4, #24]
    fa1e:	2b00      	cmp	r3, #0
    fa20:	bf18      	it	ne
    fa22:	2602      	movne	r6, #2
    fa24:	72a6      	strb	r6, [r4, #10]
}
    fa26:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->llcp.vex.sent) {
    fa28:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	d13f      	bne.n	fab0 <lp_comm_send_req.constprop.0.isra.0+0x120>
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fa30:	f000 fa90 	bl	ff54 <llcp_lr_ispaused>
    fa34:	2800      	cmp	r0, #0
    fa36:	d1cc      	bne.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
    fa38:	4621      	mov	r1, r4
    fa3a:	4628      	mov	r0, r5
    fa3c:	f7ff f812 	bl	ea64 <llcp_tx_alloc_peek>
    fa40:	2800      	cmp	r0, #0
    fa42:	d0c6      	beq.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    fa44:	4621      	mov	r1, r4
    fa46:	4628      	mov	r0, r5
    fa48:	f7ff fc6e 	bl	f328 <lp_comm_tx>
		ctx->state = ctx->node_ref.tx_ack ?
    fa4c:	69a2      	ldr	r2, [r4, #24]
    fa4e:	2a00      	cmp	r2, #0
				conn->llcp.vex.sent = 1;
    fa50:	f04f 0301 	mov.w	r3, #1
		ctx->state = ctx->node_ref.tx_ack ?
    fa54:	bf0c      	ite	eq
    fa56:	2203      	moveq	r2, #3
    fa58:	2202      	movne	r2, #2
    fa5a:	72a2      	strb	r2, [r4, #10]
				conn->llcp.vex.sent = 1;
    fa5c:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
}
    fa60:	bd70      	pop	{r4, r5, r6, pc}
		if (!llcp_tx_alloc_peek(conn, ctx)) {
    fa62:	f7fe ffff 	bl	ea64 <llcp_tx_alloc_peek>
    fa66:	2800      	cmp	r0, #0
    fa68:	d0b3      	beq.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
			lp_comm_tx(conn, ctx);
    fa6a:	4621      	mov	r1, r4
    fa6c:	4628      	mov	r0, r5
    fa6e:	f7ff fc5b 	bl	f328 <lp_comm_tx>
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    fa72:	2216      	movs	r2, #22
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
    fa74:	2302      	movs	r3, #2
			ctx->data.term.error_code = BT_HCI_ERR_LOCALHOST_TERM_CONN;
    fa76:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
			ctx->state = LP_COMMON_STATE_WAIT_TX_ACK;
    fa7a:	72a3      	strb	r3, [r4, #10]
}
    fa7c:	bd70      	pop	{r4, r5, r6, pc}
		if (!ull_cp_remote_dle_pending(conn)) {
    fa7e:	f7ff fb27 	bl	f0d0 <ull_cp_remote_dle_pending>
    fa82:	b9e8      	cbnz	r0, fac0 <lp_comm_send_req.constprop.0.isra.0+0x130>
			if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    fa84:	4628      	mov	r0, r5
    fa86:	f000 fa65 	bl	ff54 <llcp_lr_ispaused>
    fa8a:	2800      	cmp	r0, #0
    fa8c:	d1a1      	bne.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
    fa8e:	4621      	mov	r1, r4
    fa90:	4628      	mov	r0, r5
    fa92:	f7fe ffe7 	bl	ea64 <llcp_tx_alloc_peek>
    fa96:	2800      	cmp	r0, #0
    fa98:	d09b      	beq.n	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
				llcp_tx_pause_data(conn, LLCP_TX_QUEUE_PAUSE_DATA_DATA_LENGTH);
    fa9a:	2104      	movs	r1, #4
    fa9c:	4628      	mov	r0, r5
    fa9e:	f7ff f803 	bl	eaa8 <llcp_tx_pause_data>
				lp_comm_tx(conn, ctx);
    faa2:	4621      	mov	r1, r4
    faa4:	4628      	mov	r0, r5
    faa6:	f7ff fc3f 	bl	f328 <lp_comm_tx>
				ctx->state = LP_COMMON_STATE_WAIT_RX;
    faaa:	2303      	movs	r3, #3
    faac:	72a3      	strb	r3, [r4, #10]
}
    faae:	bd70      	pop	{r4, r5, r6, pc}
			ctx->response_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    fab0:	220c      	movs	r2, #12
			ctx->node_ref.rx = NULL;
    fab2:	2300      	movs	r3, #0
			ctx->response_opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    fab4:	724a      	strb	r2, [r1, #9]
			ctx->node_ref.rx = NULL;
    fab6:	61cb      	str	r3, [r1, #28]
}
    fab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			lp_comm_complete(conn, ctx, evt, param);
    fabc:	f7ff bee2 	b.w	f884 <lp_comm_complete.constprop.0>
			llcp_lr_complete(conn);
    fac0:	4628      	mov	r0, r5
    fac2:	f000 fb15 	bl	100f0 <llcp_lr_complete>
			ctx->state = LP_COMMON_STATE_IDLE;
    fac6:	2300      	movs	r3, #0
    fac8:	72a3      	strb	r3, [r4, #10]
}
    faca:	bd70      	pop	{r4, r5, r6, pc}
	if (extra_cond || llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
    facc:	4621      	mov	r1, r4
    face:	4628      	mov	r0, r5
    fad0:	f7fe ffc8 	bl	ea64 <llcp_tx_alloc_peek>
    fad4:	2800      	cmp	r0, #0
    fad6:	f43f af7c 	beq.w	f9d2 <lp_comm_send_req.constprop.0.isra.0+0x42>
		lp_comm_tx(conn, ctx);
    fada:	4621      	mov	r1, r4
    fadc:	4628      	mov	r0, r5
    fade:	f7ff fc23 	bl	f328 <lp_comm_tx>
		ctx->state = ctx->node_ref.tx_ack ?
    fae2:	69a3      	ldr	r3, [r4, #24]
    fae4:	2b00      	cmp	r3, #0
    fae6:	bf0c      	ite	eq
    fae8:	2303      	moveq	r3, #3
    faea:	2302      	movne	r3, #2
    faec:	72a3      	strb	r3, [r4, #10]
}
    faee:	bd70      	pop	{r4, r5, r6, pc}
    faf0:	0001ea0c 	.word	0x0001ea0c
    faf4:	0001e220 	.word	0x0001e220
    faf8:	0001e1a4 	.word	0x0001e1a4

0000fafc <lp_comm_execute_fsm>:
{
    fafc:	b530      	push	{r4, r5, lr}
    fafe:	460c      	mov	r4, r1
	switch (ctx->state) {
    fb00:	7a89      	ldrb	r1, [r1, #10]
{
    fb02:	b083      	sub	sp, #12
    fb04:	4605      	mov	r5, r0
	switch (ctx->state) {
    fb06:	2904      	cmp	r1, #4
    fb08:	f200 80b2 	bhi.w	fc70 <lp_comm_execute_fsm+0x174>
    fb0c:	e8df f001 	tbb	[pc, r1]
    fb10:	291b0303 	.word	0x291b0303
    fb14:	07          	.byte	0x07
    fb15:	00          	.byte	0x00
	switch (evt) {
    fb16:	2a00      	cmp	r2, #0
    fb18:	d05e      	beq.n	fbd8 <lp_comm_execute_fsm+0xdc>
}
    fb1a:	b003      	add	sp, #12
    fb1c:	bd30      	pop	{r4, r5, pc}
	switch (evt) {
    fb1e:	2a00      	cmp	r2, #0
    fb20:	d1fb      	bne.n	fb1a <lp_comm_execute_fsm+0x1e>
		switch (ctx->proc) {
    fb22:	7a23      	ldrb	r3, [r4, #8]
    fb24:	2b04      	cmp	r3, #4
    fb26:	f000 8093 	beq.w	fc50 <lp_comm_execute_fsm+0x154>
			LL_ASSERT(0);
    fb2a:	4a58      	ldr	r2, [pc, #352]	; (fc8c <lp_comm_execute_fsm+0x190>)
    fb2c:	4958      	ldr	r1, [pc, #352]	; (fc90 <lp_comm_execute_fsm+0x194>)
    fb2e:	4859      	ldr	r0, [pc, #356]	; (fc94 <lp_comm_execute_fsm+0x198>)
    fb30:	f44f 735b 	mov.w	r3, #876	; 0x36c
    fb34:	f009 fd83 	bl	1963e <assert_print>
    fb38:	4040      	eors	r0, r0
    fb3a:	f380 8811 	msr	BASEPRI, r0
    fb3e:	f04f 0003 	mov.w	r0, #3
    fb42:	df02      	svc	2
			break;
    fb44:	e7e9      	b.n	fb1a <lp_comm_execute_fsm+0x1e>
	switch (evt) {
    fb46:	2a05      	cmp	r2, #5
    fb48:	d1e7      	bne.n	fb1a <lp_comm_execute_fsm+0x1e>
		switch (ctx->proc) {
    fb4a:	7a23      	ldrb	r3, [r4, #8]
    fb4c:	2b03      	cmp	r3, #3
    fb4e:	d001      	beq.n	fb54 <lp_comm_execute_fsm+0x58>
    fb50:	2b0a      	cmp	r3, #10
    fb52:	d1e2      	bne.n	fb1a <lp_comm_execute_fsm+0x1e>
			lp_comm_complete(conn, ctx, evt, param);
    fb54:	4621      	mov	r1, r4
    fb56:	4628      	mov	r0, r5
}
    fb58:	b003      	add	sp, #12
    fb5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			lp_comm_complete(conn, ctx, evt, param);
    fb5e:	f7ff be91 	b.w	f884 <lp_comm_complete.constprop.0>
	switch (evt) {
    fb62:	2a01      	cmp	r2, #1
    fb64:	d1d9      	bne.n	fb1a <lp_comm_execute_fsm+0x1e>
	ctx->response_opcode = pdu->llctrl.opcode;
    fb66:	78da      	ldrb	r2, [r3, #3]
    fb68:	7262      	strb	r2, [r4, #9]
	switch (pdu->llctrl.opcode) {
    fb6a:	3a02      	subs	r2, #2
    fb6c:	2a17      	cmp	r2, #23
    fb6e:	d83a      	bhi.n	fbe6 <lp_comm_execute_fsm+0xea>
    fb70:	a101      	add	r1, pc, #4	; (adr r1, fb78 <lp_comm_execute_fsm+0x7c>)
    fb72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    fb76:	bf00      	nop
    fb78:	0000fc35 	.word	0x0000fc35
    fb7c:	0000fbe7 	.word	0x0000fbe7
    fb80:	0000fbe7 	.word	0x0000fbe7
    fb84:	0000fbe7 	.word	0x0000fbe7
    fb88:	0000fbe7 	.word	0x0000fbe7
    fb8c:	0000fc2b 	.word	0x0000fc2b
    fb90:	0000fbe7 	.word	0x0000fbe7
    fb94:	0000fc21 	.word	0x0000fc21
    fb98:	0000fbe7 	.word	0x0000fbe7
    fb9c:	0000fbe7 	.word	0x0000fbe7
    fba0:	0000fc17 	.word	0x0000fc17
    fba4:	0000fb55 	.word	0x0000fb55
    fba8:	0000fbe7 	.word	0x0000fbe7
    fbac:	0000fbe7 	.word	0x0000fbe7
    fbb0:	0000fbe7 	.word	0x0000fbe7
    fbb4:	0000fc0d 	.word	0x0000fc0d
    fbb8:	0000fbe7 	.word	0x0000fbe7
    fbbc:	0000fb55 	.word	0x0000fb55
    fbc0:	0000fbe7 	.word	0x0000fbe7
    fbc4:	0000fc03 	.word	0x0000fc03
    fbc8:	0000fbe7 	.word	0x0000fbe7
    fbcc:	0000fbe7 	.word	0x0000fbe7
    fbd0:	0000fbe7 	.word	0x0000fbe7
    fbd4:	0000fb55 	.word	0x0000fb55
		lp_comm_send_req(conn, ctx, evt, param);
    fbd8:	4621      	mov	r1, r4
    fbda:	4628      	mov	r0, r5
}
    fbdc:	b003      	add	sp, #12
    fbde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		lp_comm_send_req(conn, ctx, evt, param);
    fbe2:	f7ff bed5 	b.w	f990 <lp_comm_send_req.constprop.0.isra.0>
		LL_ASSERT(0);
    fbe6:	4a29      	ldr	r2, [pc, #164]	; (fc8c <lp_comm_execute_fsm+0x190>)
    fbe8:	4929      	ldr	r1, [pc, #164]	; (fc90 <lp_comm_execute_fsm+0x194>)
    fbea:	482a      	ldr	r0, [pc, #168]	; (fc94 <lp_comm_execute_fsm+0x198>)
    fbec:	f240 333f 	movw	r3, #831	; 0x33f
    fbf0:	f009 fd25 	bl	1963e <assert_print>
    fbf4:	4040      	eors	r0, r0
    fbf6:	f380 8811 	msr	BASEPRI, r0
    fbfa:	f04f 0003 	mov.w	r0, #3
    fbfe:	df02      	svc	2
    fc00:	e7a8      	b.n	fb54 <lp_comm_execute_fsm+0x58>
		llcp_pdu_decode_length_rsp(conn, pdu);
    fc02:	4619      	mov	r1, r3
    fc04:	4628      	mov	r0, r5
    fc06:	f000 fe71 	bl	108ec <llcp_pdu_decode_length_rsp>
		break;
    fc0a:	e7a3      	b.n	fb54 <lp_comm_execute_fsm+0x58>
		llcp_pdu_decode_reject_ext_ind(ctx, pdu);
    fc0c:	4619      	mov	r1, r3
    fc0e:	4620      	mov	r0, r4
    fc10:	f000 fce0 	bl	105d4 <llcp_pdu_decode_reject_ext_ind>
		break;
    fc14:	e79e      	b.n	fb54 <lp_comm_execute_fsm+0x58>
		llcp_pdu_decode_version_ind(conn, pdu);
    fc16:	4619      	mov	r1, r3
    fc18:	4628      	mov	r0, r5
    fc1a:	f000 fc63 	bl	104e4 <llcp_pdu_decode_version_ind>
		break;
    fc1e:	e799      	b.n	fb54 <lp_comm_execute_fsm+0x58>
		llcp_pdu_decode_feature_rsp(conn, pdu);
    fc20:	4619      	mov	r1, r3
    fc22:	4628      	mov	r0, r5
    fc24:	f000 fbe8 	bl	103f8 <llcp_pdu_decode_feature_rsp>
		if (feature_phy_coded(conn)) {
    fc28:	e794      	b.n	fb54 <lp_comm_execute_fsm+0x58>
		llcp_pdu_decode_unknown_rsp(ctx, pdu);
    fc2a:	4619      	mov	r1, r3
    fc2c:	4620      	mov	r0, r4
    fc2e:	f000 fb3f 	bl	102b0 <llcp_pdu_decode_unknown_rsp>
		break;
    fc32:	e78f      	b.n	fb54 <lp_comm_execute_fsm+0x58>
		LL_ASSERT(0);
    fc34:	4a15      	ldr	r2, [pc, #84]	; (fc8c <lp_comm_execute_fsm+0x190>)
    fc36:	4916      	ldr	r1, [pc, #88]	; (fc90 <lp_comm_execute_fsm+0x194>)
    fc38:	4816      	ldr	r0, [pc, #88]	; (fc94 <lp_comm_execute_fsm+0x198>)
    fc3a:	f240 3326 	movw	r3, #806	; 0x326
    fc3e:	f009 fcfe 	bl	1963e <assert_print>
    fc42:	4040      	eors	r0, r0
    fc44:	f380 8811 	msr	BASEPRI, r0
    fc48:	f04f 0003 	mov.w	r0, #3
    fc4c:	df02      	svc	2
		break;
    fc4e:	e781      	b.n	fb54 <lp_comm_execute_fsm+0x58>
			if (llcp_ntf_alloc_is_available()) {
    fc50:	9201      	str	r2, [sp, #4]
    fc52:	f7fe ff1b 	bl	ea8c <llcp_ntf_alloc_is_available>
    fc56:	2800      	cmp	r0, #0
    fc58:	f43f af5f 	beq.w	fb1a <lp_comm_execute_fsm+0x1e>
				lp_comm_ntf(conn, ctx);
    fc5c:	4621      	mov	r1, r4
    fc5e:	4628      	mov	r0, r5
    fc60:	f7ff fd96 	bl	f790 <lp_comm_ntf>
				llcp_lr_complete(conn);
    fc64:	4628      	mov	r0, r5
    fc66:	f000 fa43 	bl	100f0 <llcp_lr_complete>
				ctx->state = LP_COMMON_STATE_IDLE;
    fc6a:	9a01      	ldr	r2, [sp, #4]
    fc6c:	72a2      	strb	r2, [r4, #10]
    fc6e:	e754      	b.n	fb1a <lp_comm_execute_fsm+0x1e>
		LL_ASSERT(0);
    fc70:	4a06      	ldr	r2, [pc, #24]	; (fc8c <lp_comm_execute_fsm+0x190>)
    fc72:	4907      	ldr	r1, [pc, #28]	; (fc90 <lp_comm_execute_fsm+0x194>)
    fc74:	4807      	ldr	r0, [pc, #28]	; (fc94 <lp_comm_execute_fsm+0x198>)
    fc76:	f240 338a 	movw	r3, #906	; 0x38a
    fc7a:	f009 fce0 	bl	1963e <assert_print>
    fc7e:	4040      	eors	r0, r0
    fc80:	f380 8811 	msr	BASEPRI, r0
    fc84:	f04f 0003 	mov.w	r0, #3
    fc88:	df02      	svc	2
}
    fc8a:	e746      	b.n	fb1a <lp_comm_execute_fsm+0x1e>
    fc8c:	0001ea0c 	.word	0x0001ea0c
    fc90:	0001e220 	.word	0x0001e220
    fc94:	0001e1a4 	.word	0x0001e1a4

0000fc98 <llcp_lp_comm_tx_ack>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_ACK, tx->pdu);
    fc98:	1d13      	adds	r3, r2, #4
    fc9a:	2205      	movs	r2, #5
    fc9c:	f7ff bf2e 	b.w	fafc <lp_comm_execute_fsm>

0000fca0 <llcp_lp_comm_rx>:
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RESPONSE, rx->pdu);
    fca0:	f102 031c 	add.w	r3, r2, #28
    fca4:	2201      	movs	r2, #1
    fca6:	f7ff bf29 	b.w	fafc <lp_comm_execute_fsm>
    fcaa:	bf00      	nop

0000fcac <llcp_lp_comm_init_proc>:
	ctx->state = LP_COMMON_STATE_IDLE;
    fcac:	2300      	movs	r3, #0
    fcae:	7283      	strb	r3, [r0, #10]
}
    fcb0:	4770      	bx	lr
    fcb2:	bf00      	nop

0000fcb4 <llcp_lp_comm_run>:
{
    fcb4:	4613      	mov	r3, r2
	lp_comm_execute_fsm(conn, ctx, LP_COMMON_EVT_RUN, param);
    fcb6:	2200      	movs	r2, #0
    fcb8:	f7ff bf20 	b.w	fafc <lp_comm_execute_fsm>

0000fcbc <llcp_rp_comm_rx>:

void llcp_rp_comm_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_REQUEST, rx->pdu);
    fcbc:	f102 031c 	add.w	r3, r2, #28
    fcc0:	2202      	movs	r2, #2
    fcc2:	f7ff bc71 	b.w	f5a8 <rp_comm_execute_fsm>
    fcc6:	bf00      	nop

0000fcc8 <llcp_rp_comm_tx_ack>:
}

void llcp_rp_comm_tx_ack(struct ll_conn *conn, struct proc_ctx *ctx, struct node_tx *tx)
{
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_ACK, tx->pdu);
    fcc8:	1d13      	adds	r3, r2, #4
    fcca:	2201      	movs	r2, #1
    fccc:	f7ff bc6c 	b.w	f5a8 <rp_comm_execute_fsm>

0000fcd0 <llcp_rp_comm_init_proc>:
}

void llcp_rp_comm_init_proc(struct proc_ctx *ctx)
    fcd0:	2300      	movs	r3, #0
    fcd2:	7283      	strb	r3, [r0, #10]
    fcd4:	4770      	bx	lr
    fcd6:	bf00      	nop

0000fcd8 <llcp_rp_comm_run>:
{
	ctx->state = RP_COMMON_STATE_IDLE;
}

void llcp_rp_comm_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
    fcd8:	4613      	mov	r3, r2
	rp_comm_execute_fsm(conn, ctx, RP_COMMON_EVT_RUN, param);
    fcda:	2200      	movs	r2, #0
    fcdc:	f7ff bc64 	b.w	f5a8 <rp_comm_execute_fsm>

0000fce0 <lr_dequeue>:

	shared_data_access_unlock(key);
}

static struct proc_ctx *lr_dequeue(struct ll_conn *conn)
{
    fce0:	b570      	push	{r4, r5, r6, lr}
    fce2:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
    fce4:	f004 fc7c 	bl	145e0 <mayfly_is_running>
    fce8:	b168      	cbz	r0, fd06 <lr_dequeue+0x26>
	return list->head;
    fcea:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
    fcee:	b145      	cbz	r5, fd02 <lr_dequeue+0x22>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fcf0:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
    fcf4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    fcf6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fcfa:	4295      	cmp	r5, r2
	list->tail = node;
    fcfc:	bf08      	it	eq
    fcfe:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	ctx = (struct proc_ctx *)sys_slist_get(&conn->llcp.local.pend_proc_list);

	shared_data_access_unlock(key);

	return ctx;
}
    fd02:	4628      	mov	r0, r5
    fd04:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fd06:	4605      	mov	r5, r0
    fd08:	2101      	movs	r1, #1
    fd0a:	2003      	movs	r0, #3
    fd0c:	f004 fc0a 	bl	14524 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fd10:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fd12:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fd14:	2101      	movs	r1, #1
    fd16:	2003      	movs	r0, #3
    fd18:	f7f8 f82e 	bl	7d78 <mayfly_enable>
	return list->head;
    fd1c:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
    fd20:	b145      	cbz	r5, fd34 <lr_dequeue+0x54>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fd22:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	return node->next;
    fd26:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    fd28:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fd2c:	4295      	cmp	r5, r2
	list->tail = node;
    fd2e:	bf08      	it	eq
    fd30:	f8c4 30ec 	streq.w	r3, [r4, #236]	; 0xec
	if (key) {
    fd34:	2e00      	cmp	r6, #0
    fd36:	d0e4      	beq.n	fd02 <lr_dequeue+0x22>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    fd38:	2201      	movs	r2, #1
    fd3a:	4611      	mov	r1, r2
    fd3c:	2003      	movs	r0, #3
    fd3e:	f7f8 f81b 	bl	7d78 <mayfly_enable>
}
    fd42:	4628      	mov	r0, r5
    fd44:	bd70      	pop	{r4, r5, r6, pc}
    fd46:	bf00      	nop

0000fd48 <lr_act_complete>:

	llcp_lr_check_done(conn, ctx);
}

static void lr_act_complete(struct ll_conn *conn)
{
    fd48:	b570      	push	{r4, r5, r6, lr}
    fd4a:	4604      	mov	r4, r0
	if (mayfly_is_running()) {
    fd4c:	f004 fc48 	bl	145e0 <mayfly_is_running>
    fd50:	b140      	cbz	r0, fd64 <lr_act_complete+0x1c>
	return list->head;
    fd52:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	struct proc_ctx *ctx;

	ctx = llcp_lr_peek(conn);
	LL_ASSERT(ctx != NULL);
    fd56:	b1dd      	cbz	r5, fd90 <lr_act_complete+0x48>
	conn->llcp.local.prt_expire = 0U;
    fd58:	2200      	movs	r2, #0

	/* Stop procedure response timeout timer */
	llcp_lr_prt_stop(conn);

	/* Mark the procedure as safe to delete */
	ctx->done = 1U;
    fd5a:	2301      	movs	r3, #1
	conn->llcp.local.prt_expire = 0U;
    fd5c:	f8a4 20f2 	strh.w	r2, [r4, #242]	; 0xf2
	ctx->done = 1U;
    fd60:	626b      	str	r3, [r5, #36]	; 0x24
}
    fd62:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fd64:	4605      	mov	r5, r0
    fd66:	2101      	movs	r1, #1
    fd68:	2003      	movs	r0, #3
    fd6a:	f004 fbdb 	bl	14524 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fd6e:	462a      	mov	r2, r5
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fd70:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fd72:	2101      	movs	r1, #1
    fd74:	2003      	movs	r0, #3
    fd76:	f7f7 ffff 	bl	7d78 <mayfly_enable>
    fd7a:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
	if (key) {
    fd7e:	2e00      	cmp	r6, #0
    fd80:	d0e9      	beq.n	fd56 <lr_act_complete+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    fd82:	2201      	movs	r2, #1
    fd84:	4611      	mov	r1, r2
    fd86:	2003      	movs	r0, #3
    fd88:	f7f7 fff6 	bl	7d78 <mayfly_enable>
	LL_ASSERT(ctx != NULL);
    fd8c:	2d00      	cmp	r5, #0
    fd8e:	d1e3      	bne.n	fd58 <lr_act_complete+0x10>
    fd90:	4a06      	ldr	r2, [pc, #24]	; (fdac <lr_act_complete+0x64>)
    fd92:	4907      	ldr	r1, [pc, #28]	; (fdb0 <lr_act_complete+0x68>)
    fd94:	4807      	ldr	r0, [pc, #28]	; (fdb4 <lr_act_complete+0x6c>)
    fd96:	f240 13c9 	movw	r3, #457	; 0x1c9
    fd9a:	f009 fc50 	bl	1963e <assert_print>
    fd9e:	4040      	eors	r0, r0
    fda0:	f380 8811 	msr	BASEPRI, r0
    fda4:	f04f 0003 	mov.w	r0, #3
    fda8:	df02      	svc	2
    fdaa:	e7d5      	b.n	fd58 <lr_act_complete+0x10>
    fdac:	0001ea98 	.word	0x0001ea98
    fdb0:	0001eae0 	.word	0x0001eae0
    fdb4:	0001e1a4 	.word	0x0001e1a4

0000fdb8 <llcp_lr_check_done.part.0>:
void llcp_lr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
    fdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fdba:	4605      	mov	r5, r0
    fdbc:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
    fdbe:	f004 fc0f 	bl	145e0 <mayfly_is_running>
    fdc2:	b1b8      	cbz	r0, fdf4 <llcp_lr_check_done.part.0+0x3c>
    fdc4:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
		LL_ASSERT(ctx_header == ctx);
    fdc8:	42b4      	cmp	r4, r6
    fdca:	d00b      	beq.n	fde4 <llcp_lr_check_done.part.0+0x2c>
    fdcc:	4a14      	ldr	r2, [pc, #80]	; (fe20 <llcp_lr_check_done.part.0+0x68>)
    fdce:	4915      	ldr	r1, [pc, #84]	; (fe24 <llcp_lr_check_done.part.0+0x6c>)
    fdd0:	4815      	ldr	r0, [pc, #84]	; (fe28 <llcp_lr_check_done.part.0+0x70>)
    fdd2:	2352      	movs	r3, #82	; 0x52
    fdd4:	f009 fc33 	bl	1963e <assert_print>
    fdd8:	4040      	eors	r0, r0
    fdda:	f380 8811 	msr	BASEPRI, r0
    fdde:	f04f 0003 	mov.w	r0, #3
    fde2:	df02      	svc	2
		lr_dequeue(conn);
    fde4:	4628      	mov	r0, r5
    fde6:	f7ff ff7b 	bl	fce0 <lr_dequeue>
		llcp_proc_ctx_release(ctx);
    fdea:	4620      	mov	r0, r4
}
    fdec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_proc_ctx_release(ctx);
    fdf0:	f7fe be16 	b.w	ea20 <llcp_proc_ctx_release>
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fdf4:	4606      	mov	r6, r0
    fdf6:	2101      	movs	r1, #1
    fdf8:	2003      	movs	r0, #3
    fdfa:	f004 fb93 	bl	14524 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fdfe:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fe00:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fe02:	2101      	movs	r1, #1
    fe04:	2003      	movs	r0, #3
    fe06:	f7f7 ffb7 	bl	7d78 <mayfly_enable>
    fe0a:	f8d5 60e8 	ldr.w	r6, [r5, #232]	; 0xe8
	if (key) {
    fe0e:	2f00      	cmp	r7, #0
    fe10:	d0da      	beq.n	fdc8 <llcp_lr_check_done.part.0+0x10>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    fe12:	2201      	movs	r2, #1
    fe14:	4611      	mov	r1, r2
    fe16:	2003      	movs	r0, #3
    fe18:	f7f7 ffae 	bl	7d78 <mayfly_enable>
    fe1c:	e7d4      	b.n	fdc8 <llcp_lr_check_done.part.0+0x10>
    fe1e:	bf00      	nop
    fe20:	0001ea98 	.word	0x0001ea98
    fe24:	0001eaf4 	.word	0x0001eaf4
    fe28:	0001e1a4 	.word	0x0001e1a4

0000fe2c <llcp_lr_enqueue>:
{
    fe2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe2e:	4605      	mov	r5, r0
    fe30:	460c      	mov	r4, r1
	if (mayfly_is_running()) {
    fe32:	f004 fbd5 	bl	145e0 <mayfly_is_running>
    fe36:	b140      	cbz	r0, fe4a <llcp_lr_enqueue+0x1e>
	parent->next = child;
    fe38:	2300      	movs	r3, #0
    fe3a:	6023      	str	r3, [r4, #0]
	return list->tail;
    fe3c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
    fe40:	b1f3      	cbz	r3, fe80 <llcp_lr_enqueue+0x54>
	parent->next = child;
    fe42:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fe44:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
    fe48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fe4a:	4606      	mov	r6, r0
    fe4c:	2101      	movs	r1, #1
    fe4e:	2003      	movs	r0, #3
    fe50:	f004 fb68 	bl	14524 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fe54:	4632      	mov	r2, r6
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fe56:	4607      	mov	r7, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    fe58:	2101      	movs	r1, #1
    fe5a:	2003      	movs	r0, #3
    fe5c:	f7f7 ff8c 	bl	7d78 <mayfly_enable>
	parent->next = child;
    fe60:	6026      	str	r6, [r4, #0]
	return list->tail;
    fe62:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
    fe66:	b183      	cbz	r3, fe8a <llcp_lr_enqueue+0x5e>
	parent->next = child;
    fe68:	601c      	str	r4, [r3, #0]
	list->tail = node;
    fe6a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
	if (key) {
    fe6e:	2f00      	cmp	r7, #0
    fe70:	d0ea      	beq.n	fe48 <llcp_lr_enqueue+0x1c>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    fe72:	2201      	movs	r2, #1
}
    fe74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    fe78:	4611      	mov	r1, r2
    fe7a:	2003      	movs	r0, #3
    fe7c:	f7f7 bf7c 	b.w	7d78 <mayfly_enable>
	list->head = node;
    fe80:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
    fe84:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
    fe88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe8a:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
    fe8e:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
}
    fe92:	e7ec      	b.n	fe6e <llcp_lr_enqueue+0x42>

0000fe94 <llcp_lr_peek>:
{
    fe94:	b570      	push	{r4, r5, r6, lr}
    fe96:	4605      	mov	r5, r0
	if (mayfly_is_running()) {
    fe98:	f004 fba2 	bl	145e0 <mayfly_is_running>
    fe9c:	b118      	cbz	r0, fea6 <llcp_lr_peek+0x12>
	return list->head;
    fe9e:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
}
    fea2:	4620      	mov	r0, r4
    fea4:	bd70      	pop	{r4, r5, r6, pc}
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    fea6:	4604      	mov	r4, r0
    fea8:	2101      	movs	r1, #1
    feaa:	2003      	movs	r0, #3
    feac:	f004 fb3a 	bl	14524 <mayfly_is_enabled>
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    feb0:	4622      	mov	r2, r4
	enabled = mayfly_is_enabled(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH) != 0U;
    feb2:	4606      	mov	r6, r0
	mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U);
    feb4:	2101      	movs	r1, #1
    feb6:	2003      	movs	r0, #3
    feb8:	f7f7 ff5e 	bl	7d78 <mayfly_enable>
    febc:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
	if (key) {
    fec0:	2e00      	cmp	r6, #0
    fec2:	d0ee      	beq.n	fea2 <llcp_lr_peek+0xe>
		mayfly_enable(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 1U);
    fec4:	2201      	movs	r2, #1
    fec6:	4611      	mov	r1, r2
    fec8:	2003      	movs	r0, #3
    feca:	f7f7 ff55 	bl	7d78 <mayfly_enable>
}
    fece:	4620      	mov	r0, r4
    fed0:	bd70      	pop	{r4, r5, r6, pc}
    fed2:	bf00      	nop

0000fed4 <lr_act_run>:
{
    fed4:	b538      	push	{r3, r4, r5, lr}
    fed6:	4605      	mov	r5, r0
	ctx = llcp_lr_peek(conn);
    fed8:	f7ff ffdc 	bl	fe94 <llcp_lr_peek>
	switch (ctx->proc) {
    fedc:	7a03      	ldrb	r3, [r0, #8]
    fede:	3b01      	subs	r3, #1
	ctx = llcp_lr_peek(conn);
    fee0:	4604      	mov	r4, r0
	switch (ctx->proc) {
    fee2:	2b0b      	cmp	r3, #11
    fee4:	d81b      	bhi.n	ff1e <lr_act_run+0x4a>
    fee6:	e8df f003 	tbb	[pc, r3]
    feea:	0606      	.short	0x0606
    feec:	1a1a0606 	.word	0x1a1a0606
    fef0:	06141428 	.word	0x06141428
    fef4:	061a      	.short	0x061a
		llcp_lp_comm_run(conn, ctx, NULL);
    fef6:	4601      	mov	r1, r0
    fef8:	2200      	movs	r2, #0
    fefa:	4628      	mov	r0, r5
    fefc:	f7ff feda 	bl	fcb4 <llcp_lp_comm_run>
	if (ctx->done) {
    ff00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ff02:	b903      	cbnz	r3, ff06 <lr_act_run+0x32>
}
    ff04:	bd38      	pop	{r3, r4, r5, pc}
    ff06:	4621      	mov	r1, r4
    ff08:	4628      	mov	r0, r5
    ff0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ff0e:	f7ff bf53 	b.w	fdb8 <llcp_lr_check_done.part.0>
		llcp_lp_cu_run(conn, ctx, NULL);
    ff12:	4601      	mov	r1, r0
    ff14:	2200      	movs	r2, #0
    ff16:	4628      	mov	r0, r5
    ff18:	f001 fa10 	bl	1133c <llcp_lp_cu_run>
		break;
    ff1c:	e7f0      	b.n	ff00 <lr_act_run+0x2c>
		LL_ASSERT(0);
    ff1e:	4a0a      	ldr	r2, [pc, #40]	; (ff48 <lr_act_run+0x74>)
    ff20:	490a      	ldr	r1, [pc, #40]	; (ff4c <lr_act_run+0x78>)
    ff22:	480b      	ldr	r0, [pc, #44]	; (ff50 <lr_act_run+0x7c>)
    ff24:	f240 13bd 	movw	r3, #445	; 0x1bd
    ff28:	f009 fb89 	bl	1963e <assert_print>
    ff2c:	4040      	eors	r0, r0
    ff2e:	f380 8811 	msr	BASEPRI, r0
    ff32:	f04f 0003 	mov.w	r0, #3
    ff36:	df02      	svc	2
		break;
    ff38:	e7e2      	b.n	ff00 <lr_act_run+0x2c>
		llcp_lp_pu_run(conn, ctx, NULL);
    ff3a:	4601      	mov	r1, r0
    ff3c:	2200      	movs	r2, #0
    ff3e:	4628      	mov	r0, r5
    ff40:	f7fe fc24 	bl	e78c <llcp_lp_pu_run>
		break;
    ff44:	e7dc      	b.n	ff00 <lr_act_run+0x2c>
    ff46:	bf00      	nop
    ff48:	0001ea98 	.word	0x0001ea98
    ff4c:	0001e220 	.word	0x0001e220
    ff50:	0001e1a4 	.word	0x0001e1a4

0000ff54 <llcp_lr_ispaused>:
	return conn->llcp.local.pause == 1U;
    ff54:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
}
    ff58:	f1a0 0001 	sub.w	r0, r0, #1
    ff5c:	fab0 f080 	clz	r0, r0
    ff60:	0940      	lsrs	r0, r0, #5
    ff62:	4770      	bx	lr

0000ff64 <llcp_lr_pause>:
	conn->llcp.local.pause = 1U;
    ff64:	2301      	movs	r3, #1
    ff66:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
    ff6a:	4770      	bx	lr

0000ff6c <llcp_lr_resume>:
	conn->llcp.local.pause = 0U;
    ff6c:	2300      	movs	r3, #0
    ff6e:	f880 30f4 	strb.w	r3, [r0, #244]	; 0xf4
}
    ff72:	4770      	bx	lr

0000ff74 <llcp_lr_prt_restart>:
	conn->llcp.local.prt_expire = conn->llcp.prt_reload;
    ff74:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
    ff78:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
    ff7c:	4770      	bx	lr
    ff7e:	bf00      	nop

0000ff80 <llcp_lr_prt_restart_with_value>:
	conn->llcp.local.prt_expire = value;
    ff80:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
}
    ff84:	4770      	bx	lr
    ff86:	bf00      	nop

0000ff88 <llcp_lr_prt_stop>:
	conn->llcp.local.prt_expire = 0U;
    ff88:	2300      	movs	r3, #0
    ff8a:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
    ff8e:	4770      	bx	lr

0000ff90 <llcp_lr_rx>:
{
    ff90:	b538      	push	{r3, r4, r5, lr}
    ff92:	460c      	mov	r4, r1
	switch (ctx->proc) {
    ff94:	7a09      	ldrb	r1, [r1, #8]
	ctx->node_ref.rx = rx;
    ff96:	61e3      	str	r3, [r4, #28]
	switch (ctx->proc) {
    ff98:	3901      	subs	r1, #1
{
    ff9a:	4605      	mov	r5, r0
	ctx->node_ref.link = link;
    ff9c:	6162      	str	r2, [r4, #20]
	switch (ctx->proc) {
    ff9e:	290b      	cmp	r1, #11
    ffa0:	d819      	bhi.n	ffd6 <llcp_lr_rx+0x46>
    ffa2:	e8df f001 	tbb	[pc, r1]
    ffa6:	0606      	.short	0x0606
    ffa8:	18180606 	.word	0x18180606
    ffac:	06131326 	.word	0x06131326
    ffb0:	0618      	.short	0x0618
		llcp_lp_comm_rx(conn, ctx, rx);
    ffb2:	461a      	mov	r2, r3
    ffb4:	4621      	mov	r1, r4
    ffb6:	f7ff fe73 	bl	fca0 <llcp_lp_comm_rx>
	if (ctx->done) {
    ffba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ffbc:	b903      	cbnz	r3, ffc0 <llcp_lr_rx+0x30>
}
    ffbe:	bd38      	pop	{r3, r4, r5, pc}
    ffc0:	4621      	mov	r1, r4
    ffc2:	4628      	mov	r0, r5
    ffc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ffc8:	f7ff bef6 	b.w	fdb8 <llcp_lr_check_done.part.0>
		llcp_lp_cu_rx(conn, ctx, rx);
    ffcc:	461a      	mov	r2, r3
    ffce:	4621      	mov	r1, r4
    ffd0:	f001 f95c 	bl	1128c <llcp_lp_cu_rx>
		break;
    ffd4:	e7f1      	b.n	ffba <llcp_lr_rx+0x2a>
		LL_ASSERT(0);
    ffd6:	4a09      	ldr	r2, [pc, #36]	; (fffc <llcp_lr_rx+0x6c>)
    ffd8:	4909      	ldr	r1, [pc, #36]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ffda:	480a      	ldr	r0, [pc, #40]	; (10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>)
    ffdc:	f240 1337 	movw	r3, #311	; 0x137
    ffe0:	f009 fb2d 	bl	1963e <assert_print>
    ffe4:	4040      	eors	r0, r0
    ffe6:	f380 8811 	msr	BASEPRI, r0
    ffea:	f04f 0003 	mov.w	r0, #3
    ffee:	df02      	svc	2
		break;
    fff0:	e7e3      	b.n	ffba <llcp_lr_rx+0x2a>
		llcp_lp_pu_rx(conn, ctx, rx);
    fff2:	461a      	mov	r2, r3
    fff4:	4621      	mov	r1, r4
    fff6:	f7fe fba5 	bl	e744 <llcp_lp_pu_rx>
		break;
    fffa:	e7de      	b.n	ffba <llcp_lr_rx+0x2a>
    fffc:	0001ea98 	.word	0x0001ea98
   10000:	0001e220 	.word	0x0001e220
   10004:	0001e1a4 	.word	0x0001e1a4

00010008 <llcp_lr_tx_ack>:
{
   10008:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   1000a:	7a0b      	ldrb	r3, [r1, #8]
   1000c:	3b03      	subs	r3, #3
{
   1000e:	460c      	mov	r4, r1
   10010:	4605      	mov	r5, r0
	switch (ctx->proc) {
   10012:	2b09      	cmp	r3, #9
   10014:	d809      	bhi.n	1002a <llcp_lr_tx_ack+0x22>
   10016:	e8df f003 	tbb	[pc, r3]
   1001a:	0805      	.short	0x0805
   1001c:	080d0808 	.word	0x080d0808
   10020:	05080508 	.word	0x05080508
		llcp_lp_comm_tx_ack(conn, ctx, tx);
   10024:	4621      	mov	r1, r4
   10026:	f7ff fe37 	bl	fc98 <llcp_lp_comm_tx_ack>
	if (ctx->done) {
   1002a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	ctx->node_ref.tx_ack = NULL;
   1002c:	2200      	movs	r2, #0
   1002e:	61a2      	str	r2, [r4, #24]
	if (ctx->done) {
   10030:	b943      	cbnz	r3, 10044 <llcp_lr_tx_ack+0x3c>
}
   10032:	bd38      	pop	{r3, r4, r5, pc}
		llcp_lp_pu_tx_ack(conn, ctx, tx);
   10034:	4621      	mov	r1, r4
   10036:	f7fe fbad 	bl	e794 <llcp_lp_pu_tx_ack>
	if (ctx->done) {
   1003a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	ctx->node_ref.tx_ack = NULL;
   1003c:	2200      	movs	r2, #0
   1003e:	61a2      	str	r2, [r4, #24]
	if (ctx->done) {
   10040:	2b00      	cmp	r3, #0
   10042:	d0f6      	beq.n	10032 <llcp_lr_tx_ack+0x2a>
   10044:	4621      	mov	r1, r4
   10046:	4628      	mov	r0, r5
}
   10048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1004c:	f7ff beb4 	b.w	fdb8 <llcp_lr_check_done.part.0>

00010050 <llcp_lr_tx_ntf>:
{
   10050:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   10052:	7a0b      	ldrb	r3, [r1, #8]
   10054:	2b07      	cmp	r3, #7
{
   10056:	460c      	mov	r4, r1
   10058:	4605      	mov	r5, r0
	switch (ctx->proc) {
   1005a:	d008      	beq.n	1006e <llcp_lr_tx_ntf+0x1e>
	if (ctx->done) {
   1005c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1005e:	b903      	cbnz	r3, 10062 <llcp_lr_tx_ntf+0x12>
}
   10060:	bd38      	pop	{r3, r4, r5, pc}
   10062:	4621      	mov	r1, r4
   10064:	4628      	mov	r0, r5
   10066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1006a:	f7ff bea5 	b.w	fdb8 <llcp_lr_check_done.part.0>
		llcp_lp_pu_tx_ntf(conn, ctx);
   1006e:	f7fe fb95 	bl	e79c <llcp_lp_pu_tx_ntf>
		break;
   10072:	e7f3      	b.n	1005c <llcp_lr_tx_ntf+0xc>

00010074 <llcp_lr_init>:
	conn->llcp.local.state = state;
   10074:	2202      	movs	r2, #2
}

void llcp_lr_init(struct ll_conn *conn)
{
	lr_set_state(conn, LR_STATE_DISCONNECT);
	conn->llcp.local.prt_expire = 0U;
   10076:	2300      	movs	r3, #0
	conn->llcp.local.state = state;
   10078:	f880 20f0 	strb.w	r2, [r0, #240]	; 0xf0
	conn->llcp.local.prt_expire = 0U;
   1007c:	f8a0 30f2 	strh.w	r3, [r0, #242]	; 0xf2
}
   10080:	4770      	bx	lr
   10082:	bf00      	nop

00010084 <llcp_lr_run>:

void llcp_lr_run(struct ll_conn *conn)
{
   10084:	b538      	push	{r3, r4, r5, lr}
	switch (conn->llcp.local.state) {
   10086:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
{
   1008a:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   1008c:	2b03      	cmp	r3, #3
   1008e:	d81a      	bhi.n	100c6 <llcp_lr_run+0x42>
   10090:	e8df f003 	tbb	[pc, r3]
   10094:	100f1002 	.word	0x100f1002
		ctx = llcp_lr_peek(conn);
   10098:	f7ff fefc 	bl	fe94 <llcp_lr_peek>
		if (ctx) {
   1009c:	b148      	cbz	r0, 100b2 <llcp_lr_run+0x2e>
			const enum llcp_proc curr_proc = ctx->proc;
   1009e:	7a05      	ldrb	r5, [r0, #8]
			lr_act_run(conn);
   100a0:	4620      	mov	r0, r4
   100a2:	f7ff ff17 	bl	fed4 <lr_act_run>
			if (curr_proc != PROC_TERMINATE) {
   100a6:	2d0a      	cmp	r5, #10
	conn->llcp.local.state = state;
   100a8:	bf14      	ite	ne
   100aa:	2301      	movne	r3, #1
   100ac:	2303      	moveq	r3, #3
   100ae:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	lr_execute_fsm(conn, LR_EVT_RUN, NULL);
}
   100b2:	bd38      	pop	{r3, r4, r5, pc}
		if (llcp_lr_peek(conn)) {
   100b4:	f7ff feee 	bl	fe94 <llcp_lr_peek>
   100b8:	2800      	cmp	r0, #0
   100ba:	d0fa      	beq.n	100b2 <llcp_lr_run+0x2e>
			lr_act_run(conn);
   100bc:	4620      	mov	r0, r4
}
   100be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			lr_act_run(conn);
   100c2:	f7ff bf07 	b.w	fed4 <lr_act_run>
		LL_ASSERT(0);
   100c6:	4a07      	ldr	r2, [pc, #28]	; (100e4 <llcp_lr_run+0x60>)
   100c8:	4907      	ldr	r1, [pc, #28]	; (100e8 <llcp_lr_run+0x64>)
   100ca:	4808      	ldr	r0, [pc, #32]	; (100ec <llcp_lr_run+0x68>)
   100cc:	f240 234b 	movw	r3, #587	; 0x24b
   100d0:	f009 fab5 	bl	1963e <assert_print>
   100d4:	4040      	eors	r0, r0
   100d6:	f380 8811 	msr	BASEPRI, r0
   100da:	f04f 0003 	mov.w	r0, #3
   100de:	df02      	svc	2
}
   100e0:	bd38      	pop	{r3, r4, r5, pc}
   100e2:	bf00      	nop
   100e4:	0001ea98 	.word	0x0001ea98
   100e8:	0001e220 	.word	0x0001e220
   100ec:	0001e1a4 	.word	0x0001e1a4

000100f0 <llcp_lr_complete>:

void llcp_lr_complete(struct ll_conn *conn)
{
   100f0:	b510      	push	{r4, lr}
	switch (conn->llcp.local.state) {
   100f2:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
{
   100f6:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   100f8:	2b03      	cmp	r3, #3
   100fa:	d80d      	bhi.n	10118 <llcp_lr_complete+0x28>
   100fc:	e8df f003 	tbb	[pc, r3]
   10100:	02070208 	.word	0x02070208
		lr_act_complete(conn);
   10104:	f7ff fe20 	bl	fd48 <lr_act_complete>
	conn->llcp.local.state = state;
   10108:	2300      	movs	r3, #0
   1010a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	lr_execute_fsm(conn, LR_EVT_COMPLETE, NULL);
}
   1010e:	bd10      	pop	{r4, pc}
   10110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lr_act_complete(conn);
   10114:	f7ff be18 	b.w	fd48 <lr_act_complete>
		LL_ASSERT(0);
   10118:	4a06      	ldr	r2, [pc, #24]	; (10134 <llcp_lr_complete+0x44>)
   1011a:	4907      	ldr	r1, [pc, #28]	; (10138 <llcp_lr_complete+0x48>)
   1011c:	4807      	ldr	r0, [pc, #28]	; (1013c <llcp_lr_complete+0x4c>)
   1011e:	f240 234b 	movw	r3, #587	; 0x24b
   10122:	f009 fa8c 	bl	1963e <assert_print>
   10126:	4040      	eors	r0, r0
   10128:	f380 8811 	msr	BASEPRI, r0
   1012c:	f04f 0003 	mov.w	r0, #3
   10130:	df02      	svc	2
}
   10132:	bd10      	pop	{r4, pc}
   10134:	0001ea98 	.word	0x0001ea98
   10138:	0001e220 	.word	0x0001e220
   1013c:	0001e1a4 	.word	0x0001e1a4

00010140 <llcp_lr_connect>:

void llcp_lr_connect(struct ll_conn *conn)
{
   10140:	b508      	push	{r3, lr}
	switch (conn->llcp.local.state) {
   10142:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   10146:	2b02      	cmp	r3, #2
   10148:	d011      	beq.n	1016e <llcp_lr_connect+0x2e>
   1014a:	d800      	bhi.n	1014e <llcp_lr_connect+0xe>
	lr_execute_fsm(conn, LR_EVT_CONNECT, NULL);
}
   1014c:	bd08      	pop	{r3, pc}
	switch (conn->llcp.local.state) {
   1014e:	2b03      	cmp	r3, #3
   10150:	d0fc      	beq.n	1014c <llcp_lr_connect+0xc>
		LL_ASSERT(0);
   10152:	4a09      	ldr	r2, [pc, #36]	; (10178 <llcp_lr_connect+0x38>)
   10154:	4909      	ldr	r1, [pc, #36]	; (1017c <llcp_lr_connect+0x3c>)
   10156:	480a      	ldr	r0, [pc, #40]	; (10180 <llcp_lr_connect+0x40>)
   10158:	f240 234b 	movw	r3, #587	; 0x24b
   1015c:	f009 fa6f 	bl	1963e <assert_print>
   10160:	4040      	eors	r0, r0
   10162:	f380 8811 	msr	BASEPRI, r0
   10166:	f04f 0003 	mov.w	r0, #3
   1016a:	df02      	svc	2
}
   1016c:	bd08      	pop	{r3, pc}
	conn->llcp.local.state = state;
   1016e:	2300      	movs	r3, #0
   10170:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
}
   10174:	bd08      	pop	{r3, pc}
   10176:	bf00      	nop
   10178:	0001ea98 	.word	0x0001ea98
   1017c:	0001e220 	.word	0x0001e220
   10180:	0001e1a4 	.word	0x0001e1a4

00010184 <llcp_lr_disconnect>:

void llcp_lr_disconnect(struct ll_conn *conn)
{
   10184:	b538      	push	{r3, r4, r5, lr}
	switch (conn->llcp.local.state) {
   10186:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
{
   1018a:	4604      	mov	r4, r0
	switch (conn->llcp.local.state) {
   1018c:	2b03      	cmp	r3, #3
   1018e:	d83a      	bhi.n	10206 <llcp_lr_disconnect+0x82>
   10190:	e8df f003 	tbb	[pc, r3]
   10194:	13122609 	.word	0x13122609
		llcp_nodes_release(conn, ctx);
   10198:	4620      	mov	r0, r4
   1019a:	4629      	mov	r1, r5
   1019c:	f7fe fcc4 	bl	eb28 <llcp_nodes_release>
		llcp_proc_ctx_release(ctx);
   101a0:	4628      	mov	r0, r5
   101a2:	f7fe fc3d 	bl	ea20 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   101a6:	4620      	mov	r0, r4
   101a8:	f7ff fd9a 	bl	fce0 <lr_dequeue>
	while (ctx) {
   101ac:	4605      	mov	r5, r0
   101ae:	2800      	cmp	r0, #0
   101b0:	d1f2      	bne.n	10198 <llcp_lr_disconnect+0x14>
	conn->llcp.local.state = state;
   101b2:	2302      	movs	r3, #2
   101b4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	lr_execute_fsm(conn, LR_EVT_DISCONNECT, NULL);
}
   101b8:	bd38      	pop	{r3, r4, r5, pc}
	ctx = lr_dequeue(conn);
   101ba:	f7ff fd91 	bl	fce0 <lr_dequeue>
	while (ctx) {
   101be:	4605      	mov	r5, r0
   101c0:	2800      	cmp	r0, #0
   101c2:	d0f6      	beq.n	101b2 <llcp_lr_disconnect+0x2e>
		llcp_nodes_release(conn, ctx);
   101c4:	4629      	mov	r1, r5
   101c6:	4620      	mov	r0, r4
   101c8:	f7fe fcae 	bl	eb28 <llcp_nodes_release>
		llcp_proc_ctx_release(ctx);
   101cc:	4628      	mov	r0, r5
   101ce:	f7fe fc27 	bl	ea20 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   101d2:	4620      	mov	r0, r4
   101d4:	f7ff fd84 	bl	fce0 <lr_dequeue>
	while (ctx) {
   101d8:	4605      	mov	r5, r0
   101da:	2800      	cmp	r0, #0
   101dc:	d1f2      	bne.n	101c4 <llcp_lr_disconnect+0x40>
   101de:	e7e8      	b.n	101b2 <llcp_lr_disconnect+0x2e>
	ctx = lr_dequeue(conn);
   101e0:	f7ff fd7e 	bl	fce0 <lr_dequeue>
	while (ctx) {
   101e4:	4605      	mov	r5, r0
   101e6:	2800      	cmp	r0, #0
   101e8:	d0e3      	beq.n	101b2 <llcp_lr_disconnect+0x2e>
		llcp_nodes_release(conn, ctx);
   101ea:	4629      	mov	r1, r5
   101ec:	4620      	mov	r0, r4
   101ee:	f7fe fc9b 	bl	eb28 <llcp_nodes_release>
		llcp_proc_ctx_release(ctx);
   101f2:	4628      	mov	r0, r5
   101f4:	f7fe fc14 	bl	ea20 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   101f8:	4620      	mov	r0, r4
   101fa:	f7ff fd71 	bl	fce0 <lr_dequeue>
	while (ctx) {
   101fe:	4605      	mov	r5, r0
   10200:	2800      	cmp	r0, #0
   10202:	d1f2      	bne.n	101ea <llcp_lr_disconnect+0x66>
   10204:	e7d5      	b.n	101b2 <llcp_lr_disconnect+0x2e>
		LL_ASSERT(0);
   10206:	4a07      	ldr	r2, [pc, #28]	; (10224 <llcp_lr_disconnect+0xa0>)
   10208:	4907      	ldr	r1, [pc, #28]	; (10228 <llcp_lr_disconnect+0xa4>)
   1020a:	4808      	ldr	r0, [pc, #32]	; (1022c <llcp_lr_disconnect+0xa8>)
   1020c:	f240 234b 	movw	r3, #587	; 0x24b
   10210:	f009 fa15 	bl	1963e <assert_print>
   10214:	4040      	eors	r0, r0
   10216:	f380 8811 	msr	BASEPRI, r0
   1021a:	f04f 0003 	mov.w	r0, #3
   1021e:	df02      	svc	2
}
   10220:	bd38      	pop	{r3, r4, r5, pc}
   10222:	bf00      	nop
   10224:	0001ea98 	.word	0x0001ea98
   10228:	0001e220 	.word	0x0001e220
   1022c:	0001e1a4 	.word	0x0001e1a4

00010230 <llcp_lr_terminate>:

void llcp_lr_terminate(struct ll_conn *conn)
{
   10230:	b538      	push	{r3, r4, r5, lr}
   10232:	4605      	mov	r5, r0
	ctx = lr_dequeue(conn);
   10234:	f7ff fd54 	bl	fce0 <lr_dequeue>
	while (ctx) {
   10238:	b168      	cbz	r0, 10256 <llcp_lr_terminate+0x26>
   1023a:	4604      	mov	r4, r0
		llcp_nodes_release(conn, ctx);
   1023c:	4621      	mov	r1, r4
   1023e:	4628      	mov	r0, r5
   10240:	f7fe fc72 	bl	eb28 <llcp_nodes_release>
		llcp_proc_ctx_release(ctx);
   10244:	4620      	mov	r0, r4
   10246:	f7fe fbeb 	bl	ea20 <llcp_proc_ctx_release>
		ctx = lr_dequeue(conn);
   1024a:	4628      	mov	r0, r5
   1024c:	f7ff fd48 	bl	fce0 <lr_dequeue>
	while (ctx) {
   10250:	4604      	mov	r4, r0
   10252:	2800      	cmp	r0, #0
   10254:	d1f2      	bne.n	1023c <llcp_lr_terminate+0xc>
	conn->llcp.local.prt_expire = 0U;
   10256:	2400      	movs	r4, #0
   10258:	f8a5 40f2 	strh.w	r4, [r5, #242]	; 0xf2

	llcp_lr_flush_procedures(conn);
	llcp_lr_prt_stop(conn);
	llcp_rr_set_incompat(conn, 0U);
   1025c:	4621      	mov	r1, r4
   1025e:	4628      	mov	r0, r5
   10260:	f001 fa4c 	bl	116fc <llcp_rr_set_incompat>
	conn->llcp.local.state = state;
   10264:	f885 40f0 	strb.w	r4, [r5, #240]	; 0xf0
	lr_set_state(conn, LR_STATE_IDLE);
}
   10268:	bd38      	pop	{r3, r4, r5, pc}
   1026a:	bf00      	nop

0001026c <llcp_pdu_encode_ping_req>:
 * LE Ping Procedure Helpers
 */

void llcp_pdu_encode_ping_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1026c:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
   1026e:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   10270:	2212      	movs	r2, #18
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10272:	f043 0303 	orr.w	r3, r3, #3
   10276:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_req);
   10278:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1027a:	70c2      	strb	r2, [r0, #3]
}
   1027c:	4770      	bx	lr
   1027e:	bf00      	nop

00010280 <llcp_pdu_encode_ping_rsp>:

void llcp_pdu_encode_ping_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10280:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
   10282:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   10284:	2213      	movs	r2, #19
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10286:	f043 0303 	orr.w	r3, r3, #3
   1028a:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(ping_rsp);
   1028c:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1028e:	70c2      	strb	r2, [r0, #3]
}
   10290:	4770      	bx	lr
   10292:	bf00      	nop

00010294 <llcp_pdu_encode_unknown_rsp>:
 * Unknown response helper
 */

void llcp_pdu_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10294:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   10296:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1029a:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1029e:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102a0:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   102a2:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   102a6:	70ca      	strb	r2, [r1, #3]

	pdu->llctrl.unknown_rsp.type = ctx->unknown_response.type;
   102a8:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   102ac:	710b      	strb	r3, [r1, #4]
}
   102ae:	4770      	bx	lr

000102b0 <llcp_pdu_decode_unknown_rsp>:

void llcp_pdu_decode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->unknown_response.type = pdu->llctrl.unknown_rsp.type;
   102b0:	790b      	ldrb	r3, [r1, #4]
   102b2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
   102b6:	4770      	bx	lr

000102b8 <llcp_ntf_encode_unknown_rsp>:

void llcp_ntf_encode_unknown_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_unknown_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102b8:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   102ba:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102be:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   102c2:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102c4:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(unknown_rsp);
   102c6:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   102ca:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.unknown_rsp;
	p->type = ctx->unknown_response.type;
   102cc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   102d0:	710b      	strb	r3, [r1, #4]
}
   102d2:	4770      	bx	lr

000102d4 <llcp_pdu_encode_feature_req>:

	*featuresout = feat;
}

void llcp_pdu_encode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   102d4:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_feature_req *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102d6:	780b      	ldrb	r3, [r1, #0]
{
   102d8:	460c      	mov	r4, r1
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
   102da:	2209      	movs	r2, #9
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
   102dc:	2108      	movs	r1, #8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102de:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_REQ;
   102e2:	70e1      	strb	r1, [r4, #3]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_req);
   102e4:	7062      	strb	r2, [r4, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   102e6:	7023      	strb	r3, [r4, #0]

#if defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) && defined(CONFIG_BT_PERIPHERAL)
	if (conn->lll.role == BT_HCI_ROLE_PERIPHERAL) {
   102e8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PER_INIT_FEAT_XCHG;
   102ec:	2b00      	cmp	r3, #0
   102ee:	bfac      	ite	ge
   102f0:	460b      	movge	r3, r1
   102f2:	230e      	movlt	r3, #14
   102f4:	70e3      	strb	r3, [r4, #3]
	}
#endif /* CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG && CONFIG_BT_PERIPHERAL */

	p = &pdu->llctrl.feature_req;
	sys_put_le64(ll_feat_get(), p->features);
   102f6:	f7f9 f867 	bl	93c8 <ll_feat_get>
	dst[0] = val;
   102fa:	2200      	movs	r2, #0
   102fc:	f361 0207 	bfi	r2, r1, #0, #8
	dst[1] = val >> 8;
   10300:	f3c1 2c07 	ubfx	ip, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   10304:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   10306:	f36c 220f 	bfi	r2, ip, #8, #8
   1030a:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
   1030e:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   10310:	f363 621f 	bfi	r2, r3, #24, #8
   10314:	6060      	str	r0, [r4, #4]
   10316:	60a2      	str	r2, [r4, #8]
}
   10318:	bd10      	pop	{r4, pc}
   1031a:	bf00      	nop

0001031c <llcp_pdu_encode_feature_rsp>:

void llcp_pdu_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
   1031c:	b538      	push	{r3, r4, r5, lr}
   1031e:	460c      	mov	r4, r1
   10320:	4605      	mov	r5, r0
	struct pdu_data_llctrl_feature_rsp *p;
	uint64_t feature_rsp = ll_feat_get();
   10322:	f7f9 f851 	bl	93c8 <ll_feat_get>

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10326:	7823      	ldrb	r3, [r4, #0]
   10328:	f043 0303 	orr.w	r3, r3, #3
   1032c:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   1032e:	2309      	movs	r3, #9
   10330:	7063      	strb	r3, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   10332:	70e3      	strb	r3, [r4, #3]

	/*
	 * we only filter on octet 0, remaining 7 octets are the features
	 * we support, as defined in LL_FEAT
	 */
	feature_rsp &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   10334:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   10338:	7221      	strb	r1, [r4, #8]
   1033a:	f063 03ff 	orn	r3, r3, #255	; 0xff
   1033e:	4018      	ands	r0, r3
	sys_put_le16(val >> 16, &dst[2]);
   10340:	0c02      	lsrs	r2, r0, #16
   10342:	0c0b      	lsrs	r3, r1, #16
	dst[1] = val >> 8;
   10344:	f3c0 2507 	ubfx	r5, r0, #8, #8
	dst[0] = val;
   10348:	7120      	strb	r0, [r4, #4]
	dst[1] = val >> 8;
   1034a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1034e:	0a10      	lsrs	r0, r2, #8
	dst[0] = val;
   10350:	71a2      	strb	r2, [r4, #6]
	dst[1] = val >> 8;
   10352:	0a1a      	lsrs	r2, r3, #8
   10354:	71e0      	strb	r0, [r4, #7]
   10356:	7165      	strb	r5, [r4, #5]
   10358:	7261      	strb	r1, [r4, #9]
	dst[0] = val;
   1035a:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   1035c:	72e2      	strb	r2, [r4, #11]

	sys_put_le64(feature_rsp, p->features);
}
   1035e:	bd38      	pop	{r3, r4, r5, pc}

00010360 <llcp_ntf_encode_feature_rsp>:

void llcp_ntf_encode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_feature_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10360:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   10362:	2209      	movs	r2, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10364:	f043 0303 	orr.w	r3, r3, #3
   10368:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(feature_rsp);
   1036a:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1036c:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.feature_rsp;

	sys_put_le64(conn->llcp.fex.features_peer, p->features);
   1036e:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   10372:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   10374:	f3c2 2c07 	ubfx	ip, r2, #8, #8
	dst[0] = val;
   10378:	710a      	strb	r2, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1037a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1037c:	f881 c005 	strb.w	ip, [r1, #5]
	dst[0] = val;
   10380:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   10382:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
   10386:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   10388:	f3c3 2007 	ubfx	r0, r3, #8, #8
   1038c:	0a13      	lsrs	r3, r2, #8
   1038e:	f881 c007 	strb.w	ip, [r1, #7]
   10392:	7248      	strb	r0, [r1, #9]
	dst[0] = val;
   10394:	728a      	strb	r2, [r1, #10]
	dst[1] = val >> 8;
   10396:	72cb      	strb	r3, [r1, #11]
}
   10398:	4770      	bx	lr
   1039a:	bf00      	nop

0001039c <llcp_pdu_decode_feature_req>:

	return ll_feat_get() & x;
}

void llcp_pdu_decode_feature_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   1039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   103a0:	684b      	ldr	r3, [r1, #4]
	feat &= LL_FEAT_BIT_MASK_VALID;
   103a2:	4f14      	ldr	r7, [pc, #80]	; (103f4 <llcp_pdu_decode_feature_req+0x58>)
   103a4:	688e      	ldr	r6, [r1, #8]
	     (featureset >> BT_LE_FEAT_BIT_CIS_PERIPHERAL)) & 0x01;
   103a6:	0f5a      	lsrs	r2, r3, #29
	x = ((featureset >> BT_LE_FEAT_BIT_CIS_CENTRAL) ^
   103a8:	ea82 7213 	eor.w	r2, r2, r3, lsr #28
   103ac:	f002 0201 	and.w	r2, r2, #1
	feat &= LL_FEAT_BIT_MASK_VALID;
   103b0:	401f      	ands	r7, r3
	x = ((featureset >> BT_LE_FEAT_BIT_CIS_CENTRAL) ^
   103b2:	2100      	movs	r1, #0
   103b4:	1893      	adds	r3, r2, r2
   103b6:	4149      	adcs	r1, r1
   103b8:	189b      	adds	r3, r3, r2
{
   103ba:	4605      	mov	r5, r0
   103bc:	f141 0800 	adc.w	r8, r1, #0
	x ^= featureset;
   103c0:	ea87 7403 	eor.w	r4, r7, r3, lsl #28
	return ll_feat_get() & x;
   103c4:	f7f9 f800 	bl	93c8 <ll_feat_get>
   103c8:	ea04 0300 	and.w	r3, r4, r0
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_req.features, &featureset);
	conn->llcp.fex.features_used = features_used(featureset);
   103cc:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   103d0:	f063 03ff 	orn	r3, r3, #255	; 0xff
	feat &= LL_FEAT_BIT_MASK_VALID;
   103d4:	f006 06ef 	and.w	r6, r6, #239	; 0xef
	featureset &= (FEAT_FILT_OCTET0 | conn->llcp.fex.features_used);
   103d8:	403b      	ands	r3, r7
	x ^= featureset;
   103da:	ea46 7808 	orr.w	r8, r6, r8, lsl #28
	conn->llcp.fex.features_peer = featureset;
   103de:	e9c5 364a 	strd	r3, r6, [r5, #296]	; 0x128
	return ll_feat_get() & x;
   103e2:	ea08 0101 	and.w	r1, r8, r1

	conn->llcp.fex.valid = 1;
   103e6:	2201      	movs	r2, #1
	conn->llcp.fex.features_used = features_used(featureset);
   103e8:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
	conn->llcp.fex.valid = 1;
   103ec:	f885 2120 	strb.w	r2, [r5, #288]	; 0x120
}
   103f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103f4:	f787cf2f 	.word	0xf787cf2f

000103f8 <llcp_pdu_decode_feature_rsp>:

void llcp_pdu_decode_feature_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
   103f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103fc:	684a      	ldr	r2, [r1, #4]
	feat &= LL_FEAT_BIT_MASK_VALID;
   103fe:	4f13      	ldr	r7, [pc, #76]	; (1044c <llcp_pdu_decode_feature_rsp+0x54>)
   10400:	688e      	ldr	r6, [r1, #8]
	     (featureset >> BT_LE_FEAT_BIT_CIS_PERIPHERAL)) & 0x01;
   10402:	0f53      	lsrs	r3, r2, #29
	x = ((featureset >> BT_LE_FEAT_BIT_CIS_CENTRAL) ^
   10404:	ea83 7312 	eor.w	r3, r3, r2, lsr #28
   10408:	f003 0301 	and.w	r3, r3, #1
   1040c:	18d9      	adds	r1, r3, r3
	feat &= LL_FEAT_BIT_MASK_VALID;
   1040e:	ea07 0702 	and.w	r7, r7, r2
	x = ((featureset >> BT_LE_FEAT_BIT_CIS_CENTRAL) ^
   10412:	f04f 0200 	mov.w	r2, #0
   10416:	4152      	adcs	r2, r2
   10418:	18c9      	adds	r1, r1, r3
{
   1041a:	4605      	mov	r5, r0
   1041c:	f142 0400 	adc.w	r4, r2, #0
	x ^= featureset;
   10420:	ea87 7801 	eor.w	r8, r7, r1, lsl #28
	return ll_feat_get() & x;
   10424:	f7f8 ffd0 	bl	93c8 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK_VALID;
   10428:	f006 06ef 	and.w	r6, r6, #239	; 0xef
	x ^= featureset;
   1042c:	ea46 7404 	orr.w	r4, r6, r4, lsl #28
	uint64_t featureset;

	feature_filter(pdu->llctrl.feature_rsp.features, &featureset);
	conn->llcp.fex.features_used = features_used(featureset);
	conn->llcp.fex.features_peer = featureset;
   10430:	e9c5 764a 	strd	r7, r6, [r5, #296]	; 0x128
	return ll_feat_get() & x;
   10434:	ea08 0000 	and.w	r0, r8, r0
   10438:	400c      	ands	r4, r1
	conn->llcp.fex.valid = 1;
   1043a:	2301      	movs	r3, #1
	conn->llcp.fex.features_used = features_used(featureset);
   1043c:	f8c5 0130 	str.w	r0, [r5, #304]	; 0x130
   10440:	f8c5 4134 	str.w	r4, [r5, #308]	; 0x134
	conn->llcp.fex.valid = 1;
   10444:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
}
   10448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1044c:	f787cf2f 	.word	0xf787cf2f

00010450 <llcp_pdu_encode_min_used_chans_ind>:
#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_min_used_chans_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_min_used_chans_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10450:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
   10452:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10456:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
   1045a:	2219      	movs	r2, #25
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1045c:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(min_used_chans_ind);
   1045e:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND;
   10462:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.min_used_chans_ind;
	p->phys = ctx->data.muc.phys;
   10464:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10468:	710b      	strb	r3, [r1, #4]
	p->min_used_chans = ctx->data.muc.min_used_chans;
   1046a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1046e:	714b      	strb	r3, [r1, #5]
}
   10470:	4770      	bx	lr
   10472:	bf00      	nop

00010474 <llcp_pdu_encode_terminate_ind>:
 */
void llcp_pdu_encode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_terminate_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10474:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
   10476:	2202      	movs	r2, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10478:	f043 0303 	orr.w	r3, r3, #3
   1047c:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(terminate_ind);
   1047e:	704a      	strb	r2, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
   10480:	70ca      	strb	r2, [r1, #3]
	p = &pdu->llctrl.terminate_ind;
	p->error_code = ctx->data.term.error_code;
   10482:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10486:	710b      	strb	r3, [r1, #4]
}
   10488:	4770      	bx	lr
   1048a:	bf00      	nop

0001048c <llcp_pdu_decode_terminate_ind>:

void llcp_pdu_decode_terminate_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.term.error_code = pdu->llctrl.terminate_ind.error_code;
   1048c:	790b      	ldrb	r3, [r1, #4]
   1048e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
   10492:	4770      	bx	lr

00010494 <llcp_pdu_encode_version_ind>:
{
	uint16_t cid;
	uint16_t svn;
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10494:	7803      	ldrb	r3, [r0, #0]

	p = &pdu->llctrl.version_ind;
	p->version_number = LL_VERSION_NUMBER;
	cid = sys_cpu_to_le16(ll_settings_company_id());
	svn = sys_cpu_to_le16(ll_settings_subversion_number());
	p->company_id = cid;
   10496:	4a07      	ldr	r2, [pc, #28]	; (104b4 <llcp_pdu_encode_version_ind+0x20>)
   10498:	f8c0 2005 	str.w	r2, [r0, #5]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   1049c:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   104a0:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   104a4:	f640 510c 	movw	r1, #3340	; 0xd0c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   104a8:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   104aa:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   104ae:	f8a0 1003 	strh.w	r1, [r0, #3]
	p->sub_version_number = svn;
}
   104b2:	4770      	bx	lr
   104b4:	ffff05f1 	.word	0xffff05f1

000104b8 <llcp_ntf_encode_version_ind>:

void llcp_ntf_encode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_version_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   104b8:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   104ba:	f04f 0c06 	mov.w	ip, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   104be:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   104c2:	220c      	movs	r2, #12
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   104c4:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(version_ind);
   104c6:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   104ca:	70ca      	strb	r2, [r1, #3]

	p = &pdu->llctrl.version_ind;
	p->version_number = conn->llcp.vex.cached.version_number;
   104cc:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
   104d0:	710b      	strb	r3, [r1, #4]
	p->company_id = sys_cpu_to_le16(conn->llcp.vex.cached.company_id);
   104d2:	f8b0 311b 	ldrh.w	r3, [r0, #283]	; 0x11b
   104d6:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->sub_version_number = sys_cpu_to_le16(conn->llcp.vex.cached.sub_version_number);
   104da:	f8b0 311d 	ldrh.w	r3, [r0, #285]	; 0x11d
   104de:	f8a1 3007 	strh.w	r3, [r1, #7]
}
   104e2:	4770      	bx	lr

000104e4 <llcp_pdu_decode_version_ind>:

void llcp_pdu_decode_version_ind(struct ll_conn *conn, struct pdu_data *pdu)
{
	conn->llcp.vex.valid = 1;
   104e4:	2301      	movs	r3, #1
   104e6:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	conn->llcp.vex.cached.version_number = pdu->llctrl.version_ind.version_number;
   104ea:	790b      	ldrb	r3, [r1, #4]
   104ec:	f880 311a 	strb.w	r3, [r0, #282]	; 0x11a
	conn->llcp.vex.cached.company_id = sys_le16_to_cpu(pdu->llctrl.version_ind.company_id);
   104f0:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   104f4:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
	conn->llcp.vex.cached.sub_version_number =
		sys_le16_to_cpu(pdu->llctrl.version_ind.sub_version_number);
   104f8:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.vex.cached.sub_version_number =
   104fc:	f8a0 311d 	strh.w	r3, [r0, #285]	; 0x11d
}
   10500:	4770      	bx	lr
   10502:	bf00      	nop

00010504 <llcp_ntf_encode_enc_req>:
}
#endif /* CONFIG_BT_CENTRAL */

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_ntf_encode_enc_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
   10504:	b538      	push	{r3, r4, r5, lr}
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10506:	780b      	ldrb	r3, [r1, #0]
{
   10508:	460c      	mov	r4, r1
   1050a:	4605      	mov	r5, r0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1050c:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
   10510:	2117      	movs	r1, #23
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   10512:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10514:	7023      	strb	r3, [r4, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_req);
   10516:	7061      	strb	r1, [r4, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   10518:	70e2      	strb	r2, [r4, #3]
	memcpy(p->rand, ctx->data.enc.rand, sizeof(p->rand));
   1051a:	f100 0129 	add.w	r1, r0, #41	; 0x29
   1051e:	2208      	movs	r2, #8
   10520:	1d20      	adds	r0, r4, #4
   10522:	f009 fb67 	bl	19bf4 <memcpy>
	p->ediv[0] = ctx->data.enc.ediv[0];
   10526:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1052a:	7323      	strb	r3, [r4, #12]
	p->ediv[1] = ctx->data.enc.ediv[1];
   1052c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   10530:	7363      	strb	r3, [r4, #13]
	encode_enc_req(ctx, pdu);
}
   10532:	bd38      	pop	{r3, r4, r5, pc}

00010534 <llcp_pdu_encode_enc_rsp>:

void llcp_pdu_encode_enc_rsp(struct pdu_data *pdu)
{
   10534:	b510      	push	{r4, lr}
	struct pdu_data_llctrl_enc_rsp *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10536:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
   10538:	210d      	movs	r1, #13
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1053a:	2204      	movs	r2, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1053c:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(enc_rsp);
   10540:	7041      	strb	r1, [r0, #1]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10542:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   10544:	70c2      	strb	r2, [r0, #3]
	p = &pdu->llctrl.enc_rsp;
	/* Optimal getting random data, p->ivs is packed right after p->skds */
	BUILD_ASSERT(offsetof(struct pdu_data_llctrl_enc_rsp, ivs) ==
		     offsetof(struct pdu_data_llctrl_enc_rsp, skds) + sizeof(p->skds),
		     "Member IVS must be after member SKDS");
	csrand_get(p->skds, sizeof(p->skds) + sizeof(p->ivs));
   10546:	1884      	adds	r4, r0, r2
	if (k_is_in_isr()) {
   10548:	f00c fcc3 	bl	1ced2 <k_is_in_isr>
		return lll_csrand_isr_get(buf, len);
   1054c:	210c      	movs	r1, #12
	if (k_is_in_isr()) {
   1054e:	b120      	cbz	r0, 1055a <llcp_pdu_encode_enc_rsp+0x26>
		return lll_csrand_isr_get(buf, len);
   10550:	4620      	mov	r0, r4
}
   10552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_isr_get(buf, len);
   10556:	f001 bf5b 	b.w	12410 <lll_csrand_isr_get>
		return lll_csrand_get(buf, len);
   1055a:	4620      	mov	r0, r4
}
   1055c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return lll_csrand_get(buf, len);
   10560:	f001 bf4c 	b.w	123fc <lll_csrand_get>

00010564 <llcp_pdu_encode_start_enc_req>:

void llcp_pdu_encode_start_enc_req(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10564:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
   10566:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
   10568:	2205      	movs	r2, #5
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1056a:	f043 0303 	orr.w	r3, r3, #3
   1056e:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_req);
   10570:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_REQ;
   10572:	70c2      	strb	r2, [r0, #3]
}
   10574:	4770      	bx	lr
   10576:	bf00      	nop

00010578 <llcp_pdu_encode_start_enc_rsp>:
#endif /* CONFIG_BT_PERIPHERAL */

void llcp_pdu_encode_start_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10578:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
   1057a:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1057c:	2206      	movs	r2, #6
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1057e:	f043 0303 	orr.w	r3, r3, #3
   10582:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(start_enc_rsp);
   10584:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   10586:	70c2      	strb	r2, [r0, #3]
}
   10588:	4770      	bx	lr
   1058a:	bf00      	nop

0001058c <llcp_pdu_encode_pause_enc_rsp>:
}
#endif /* CONFIG_BT_CENTRAL */

void llcp_pdu_encode_pause_enc_rsp(struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1058c:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
   1058e:	2101      	movs	r1, #1
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   10590:	220b      	movs	r2, #11
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10592:	f043 0303 	orr.w	r3, r3, #3
   10596:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(pause_enc_rsp);
   10598:	7041      	strb	r1, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1059a:	70c2      	strb	r2, [r0, #3]
}
   1059c:	4770      	bx	lr
   1059e:	bf00      	nop

000105a0 <llcp_pdu_encode_reject_ind>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

void llcp_pdu_encode_reject_ind(struct pdu_data *pdu, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105a0:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
	pdu->llctrl.reject_ind.error_code = error_code;
   105a2:	7101      	strb	r1, [r0, #4]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
   105a4:	f04f 0c02 	mov.w	ip, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105a8:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   105ac:	220d      	movs	r2, #13
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105ae:	7003      	strb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ind);
   105b0:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   105b4:	70c2      	strb	r2, [r0, #3]
}
   105b6:	4770      	bx	lr

000105b8 <llcp_pdu_encode_reject_ext_ind>:

void llcp_pdu_encode_reject_ext_ind(struct pdu_data *pdu, uint8_t reject_opcode, uint8_t error_code)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105b8:	7803      	ldrb	r3, [r0, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   105ba:	7101      	strb	r1, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105bc:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
   105c0:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105c4:	7003      	strb	r3, [r0, #0]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   105c6:	2311      	movs	r3, #17
	pdu->len = PDU_DATA_LLCTRL_LEN(reject_ext_ind);
   105c8:	f880 c001 	strb.w	ip, [r0, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   105cc:	70c3      	strb	r3, [r0, #3]
	pdu->llctrl.reject_ext_ind.error_code = error_code;
   105ce:	7142      	strb	r2, [r0, #5]
}
   105d0:	4770      	bx	lr
   105d2:	bf00      	nop

000105d4 <llcp_pdu_decode_reject_ext_ind>:

void llcp_pdu_decode_reject_ext_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->reject_ext_ind.reject_opcode = pdu->llctrl.reject_ext_ind.reject_opcode;
   105d4:	790b      	ldrb	r3, [r1, #4]
   105d6:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
	ctx->reject_ext_ind.error_code = pdu->llctrl.reject_ext_ind.error_code;
   105da:	794b      	ldrb	r3, [r1, #5]
   105dc:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
   105e0:	4770      	bx	lr
   105e2:	bf00      	nop

000105e4 <llcp_pdu_encode_phy_req>:
 * PHY Update Procedure Helper
 */

void llcp_pdu_encode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105e4:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
   105e6:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105ea:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   105ee:	2216      	movs	r2, #22
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   105f0:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_req);
   105f2:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   105f6:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_req.rx_phys = ctx->data.pu.rx;
   105f8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   105fc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10600:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_req.tx_phys = ctx->data.pu.tx;
   10602:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10606:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1060a:	710b      	strb	r3, [r1, #4]
}
   1060c:	4770      	bx	lr
   1060e:	bf00      	nop

00010610 <llcp_pdu_decode_phy_req>:

void llcp_pdu_decode_phy_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.rx = pdu->llctrl.phy_req.tx_phys;
   10610:	790a      	ldrb	r2, [r1, #4]
   10612:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10616:	f362 03c5 	bfi	r3, r2, #3, #3
   1061a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	ctx->data.pu.tx = pdu->llctrl.phy_req.rx_phys;
   1061e:	794a      	ldrb	r2, [r1, #5]
   10620:	f362 0302 	bfi	r3, r2, #0, #3
   10624:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
   10628:	4770      	bx	lr
   1062a:	bf00      	nop

0001062c <llcp_pdu_encode_phy_rsp>:

#if defined(CONFIG_BT_PERIPHERAL)
void llcp_pdu_encode_phy_rsp(struct ll_conn *conn, struct pdu_data *pdu)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1062c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
   1062e:	f04f 0c03 	mov.w	ip, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10632:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   10636:	2217      	movs	r2, #23
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10638:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(phy_rsp);
   1063a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1063e:	70ca      	strb	r2, [r1, #3]
	pdu->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   10640:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   10644:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10648:	714b      	strb	r3, [r1, #5]
	pdu->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1064a:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   1064e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10652:	710b      	strb	r3, [r1, #4]
}
   10654:	4770      	bx	lr
   10656:	bf00      	nop

00010658 <llcp_pdu_decode_phy_update_ind>:
void llcp_pdu_decode_phy_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.pu.instant = sys_le16_to_cpu(pdu->llctrl.phy_upd_ind.instant);
   10658:	88cb      	ldrh	r3, [r1, #6]
   1065a:	8643      	strh	r3, [r0, #50]	; 0x32
	ctx->data.pu.c_to_p_phy = pdu->llctrl.phy_upd_ind.c_to_p_phy;
   1065c:	790b      	ldrb	r3, [r1, #4]
   1065e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
	ctx->data.pu.p_to_c_phy = pdu->llctrl.phy_upd_ind.p_to_c_phy;
   10662:	794b      	ldrb	r3, [r1, #5]
   10664:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
   10668:	4770      	bx	lr
   1066a:	bf00      	nop

0001066c <llcp_pdu_encode_conn_param_req>:
 */
static void encode_conn_param_req_rsp_common(struct proc_ctx *ctx, struct pdu_data *pdu,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p,
					     uint8_t opcode)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1066c:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   1066e:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10672:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   10676:	220f      	movs	r2, #15
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10678:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   1067a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   1067e:	70ca      	strb	r2, [r1, #3]

	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
   10680:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   10682:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
   10684:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10686:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   10688:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   1068a:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   1068c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1068e:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
   10690:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   10694:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
   10696:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   10698:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
   1069c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   106a0:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
   106a4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   106a8:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
   106ac:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   106b0:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
   106b4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   106b8:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
   106bc:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   106c0:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
   106c4:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   106c8:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ);
}
   106cc:	4770      	bx	lr
   106ce:	bf00      	nop

000106d0 <llcp_pdu_encode_conn_param_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   106d0:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   106d2:	f04f 0c18 	mov.w	ip, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   106d6:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   106da:	2210      	movs	r2, #16
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   106dc:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_conn_param_req_rsp_common) + 1U;
   106de:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   106e2:	70ca      	strb	r2, [r1, #3]
	p->interval_min = sys_cpu_to_le16(ctx->data.cu.interval_min);
   106e4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   106e6:	808b      	strh	r3, [r1, #4]
	p->interval_max = sys_cpu_to_le16(ctx->data.cu.interval_max);
   106e8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   106ea:	80cb      	strh	r3, [r1, #6]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   106ec:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   106ee:	810b      	strh	r3, [r1, #8]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   106f0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   106f2:	814b      	strh	r3, [r1, #10]
	p->preferred_periodicity = ctx->data.cu.preferred_periodicity;
   106f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   106f8:	730b      	strb	r3, [r1, #12]
	p->reference_conn_event_count = sys_cpu_to_le16(ctx->data.cu.reference_conn_event_count);
   106fa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   106fc:	f8a1 300d 	strh.w	r3, [r1, #13]
	p->offset0 = sys_cpu_to_le16(ctx->data.cu.offsets[0]);
   10700:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10704:	f8a1 300f 	strh.w	r3, [r1, #15]
	p->offset1 = sys_cpu_to_le16(ctx->data.cu.offsets[1]);
   10708:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1070c:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset2 = sys_cpu_to_le16(ctx->data.cu.offsets[2]);
   10710:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10714:	f8a1 3013 	strh.w	r3, [r1, #19]
	p->offset3 = sys_cpu_to_le16(ctx->data.cu.offsets[3]);
   10718:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   1071c:	f8a1 3015 	strh.w	r3, [r1, #21]
	p->offset4 = sys_cpu_to_le16(ctx->data.cu.offsets[4]);
   10720:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   10724:	f8a1 3017 	strh.w	r3, [r1, #23]
	p->offset5 = sys_cpu_to_le16(ctx->data.cu.offsets[5]);
   10728:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   1072c:	f8a1 3019 	strh.w	r3, [r1, #25]
void llcp_pdu_encode_conn_param_rsp(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	encode_conn_param_req_rsp_common(ctx, pdu,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_rsp,
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
}
   10730:	4770      	bx	lr
   10732:	bf00      	nop

00010734 <llcp_pdu_decode_conn_param_req>:

static void decode_conn_param_req_rsp_common(struct proc_ctx *ctx,
					     struct pdu_data_llctrl_conn_param_req_rsp_common *p)
{
	ctx->data.cu.interval_min = sys_le16_to_cpu(p->interval_min);
   10734:	888b      	ldrh	r3, [r1, #4]
   10736:	85c3      	strh	r3, [r0, #46]	; 0x2e
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval_max);
   10738:	88cb      	ldrh	r3, [r1, #6]
   1073a:	8603      	strh	r3, [r0, #48]	; 0x30
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
   1073c:	890b      	ldrh	r3, [r1, #8]
   1073e:	8643      	strh	r3, [r0, #50]	; 0x32
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
   10740:	894b      	ldrh	r3, [r1, #10]
   10742:	8683      	strh	r3, [r0, #52]	; 0x34
	ctx->data.cu.preferred_periodicity = p->preferred_periodicity;
   10744:	7b0b      	ldrb	r3, [r1, #12]
   10746:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	ctx->data.cu.reference_conn_event_count = sys_le16_to_cpu(p->reference_conn_event_count);
   1074a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1074e:	87c3      	strh	r3, [r0, #62]	; 0x3e
	ctx->data.cu.offsets[0] = sys_le16_to_cpu(p->offset0);
   10750:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   10754:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ctx->data.cu.offsets[1] = sys_le16_to_cpu(p->offset1);
   10758:	f8b1 3011 	ldrh.w	r3, [r1, #17]
   1075c:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	ctx->data.cu.offsets[2] = sys_le16_to_cpu(p->offset2);
   10760:	f8b1 3013 	ldrh.w	r3, [r1, #19]
   10764:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	ctx->data.cu.offsets[3] = sys_le16_to_cpu(p->offset3);
   10768:	f8b1 3015 	ldrh.w	r3, [r1, #21]
   1076c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	ctx->data.cu.offsets[4] = sys_le16_to_cpu(p->offset4);
   10770:	f8b1 3017 	ldrh.w	r3, [r1, #23]
   10774:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	ctx->data.cu.offsets[5] = sys_le16_to_cpu(p->offset5);
   10778:	f8b1 3019 	ldrh.w	r3, [r1, #25]
   1077c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a

void llcp_pdu_decode_conn_param_req(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	decode_conn_param_req_rsp_common(ctx,
		(struct pdu_data_llctrl_conn_param_req_rsp_common *)&pdu->llctrl.conn_param_req);
}
   10780:	4770      	bx	lr
   10782:	bf00      	nop

00010784 <llcp_pdu_encode_conn_update_ind>:

void llcp_pdu_encode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10784:	780b      	ldrb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   10786:	2200      	movs	r2, #0
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10788:	f043 0303 	orr.w	r3, r3, #3
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
   1078c:	f04f 0c0c 	mov.w	ip, #12
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   10790:	70ca      	strb	r2, [r1, #3]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10792:	700b      	strb	r3, [r1, #0]
	pdu->len = PDU_DATA_LLCTRL_LEN(conn_update_ind);
   10794:	f881 c001 	strb.w	ip, [r1, #1]

	p = (void *)&pdu->llctrl.conn_update_ind;
	p->win_size = ctx->data.cu.win_size;
   10798:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   1079c:	710b      	strb	r3, [r1, #4]
	p->win_offset = sys_cpu_to_le16(ctx->data.cu.win_offset_us / CONN_INT_UNIT_US);
   1079e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   107a0:	4a09      	ldr	r2, [pc, #36]	; (107c8 <llcp_pdu_encode_conn_update_ind+0x44>)
   107a2:	fba2 2303 	umull	r2, r3, r2, r3
   107a6:	0a9b      	lsrs	r3, r3, #10
   107a8:	f8a1 3005 	strh.w	r3, [r1, #5]
	p->latency = sys_cpu_to_le16(ctx->data.cu.latency);
   107ac:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   107ae:	f8a1 3009 	strh.w	r3, [r1, #9]
	p->interval = sys_cpu_to_le16(ctx->data.cu.interval_max);
   107b2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   107b4:	f8a1 3007 	strh.w	r3, [r1, #7]
	p->timeout = sys_cpu_to_le16(ctx->data.cu.timeout);
   107b8:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   107ba:	f8a1 300b 	strh.w	r3, [r1, #11]
	p->instant = sys_cpu_to_le16(ctx->data.cu.instant);
   107be:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   107c0:	f8a1 300d 	strh.w	r3, [r1, #13]
}
   107c4:	4770      	bx	lr
   107c6:	bf00      	nop
   107c8:	d1b71759 	.word	0xd1b71759

000107cc <llcp_pdu_decode_conn_update_ind>:
void llcp_pdu_decode_conn_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	struct pdu_data_llctrl_conn_update_ind *p;

	p = (void *)&pdu->llctrl.conn_update_ind;
	ctx->data.cu.win_size = p->win_size;
   107cc:	790b      	ldrb	r3, [r1, #4]
   107ce:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	ctx->data.cu.win_offset_us = sys_le16_to_cpu(p->win_offset) * CONN_INT_UNIT_US;
   107d2:	f8b1 3005 	ldrh.w	r3, [r1, #5]
   107d6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   107da:	fb02 f303 	mul.w	r3, r2, r3
   107de:	6383      	str	r3, [r0, #56]	; 0x38
	ctx->data.cu.latency = sys_le16_to_cpu(p->latency);
   107e0:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   107e4:	8643      	strh	r3, [r0, #50]	; 0x32
	ctx->data.cu.interval_max = sys_le16_to_cpu(p->interval);
   107e6:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   107ea:	8603      	strh	r3, [r0, #48]	; 0x30
	ctx->data.cu.timeout = sys_le16_to_cpu(p->timeout);
   107ec:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   107f0:	8683      	strh	r3, [r0, #52]	; 0x34
	ctx->data.cu.instant = sys_le16_to_cpu(p->instant);
   107f2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   107f6:	8583      	strh	r3, [r0, #44]	; 0x2c
}
   107f8:	4770      	bx	lr
   107fa:	bf00      	nop

000107fc <llcp_pdu_decode_chan_map_update_ind>:
	memcpy(p->chm, ctx->data.chmu.chm, sizeof(p->chm));
}

void llcp_pdu_decode_chan_map_update_ind(struct proc_ctx *ctx, struct pdu_data *pdu)
{
	ctx->data.chmu.instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   107fc:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   10800:	8503      	strh	r3, [r0, #40]	; 0x28
	memcpy(ctx->data.chmu.chm, pdu->llctrl.chan_map_ind.chm, sizeof(ctx->data.chmu.chm));
   10802:	2205      	movs	r2, #5
   10804:	3104      	adds	r1, #4
   10806:	302a      	adds	r0, #42	; 0x2a
   10808:	f009 b9f4 	b.w	19bf4 <memcpy>

0001080c <llcp_pdu_encode_length_req>:
static void encode_length_req_rsp_common(struct pdu_data *pdu,
					 struct pdu_data_llctrl_length_req_rsp_common *p,
					 const uint8_t opcode,
					 const struct data_pdu_length *dle)
{
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1080c:	780b      	ldrb	r3, [r1, #0]
	/* The '+ 1U' is to count in opcode octet, the first member of struct pdu_data_llctrl */
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   1080e:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10812:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   10816:	2214      	movs	r2, #20
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10818:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   1081a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   1081e:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   10820:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
   10824:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   10826:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   1082a:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   1082c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   10830:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   10832:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   10836:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req,
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
		&conn->lll.dle.local);
}
   10838:	4770      	bx	lr
   1083a:	bf00      	nop

0001083c <llcp_pdu_encode_length_rsp>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1083c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   1083e:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10842:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   10846:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10848:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   1084a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   1084e:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   10850:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
   10854:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   10856:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
   1085a:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   1085c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   10860:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   10862:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
   10866:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.local);
}
   10868:	4770      	bx	lr
   1086a:	bf00      	nop

0001086c <llcp_ntf_encode_length_change>:
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1086c:	780b      	ldrb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   1086e:	f04f 0c09 	mov.w	ip, #9
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10872:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = opcode;
   10876:	2215      	movs	r2, #21
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10878:	700b      	strb	r3, [r1, #0]
	pdu->len = sizeof(struct pdu_data_llctrl_length_req_rsp_common) + 1U;
   1087a:	f881 c001 	strb.w	ip, [r1, #1]
	pdu->llctrl.opcode = opcode;
   1087e:	70ca      	strb	r2, [r1, #3]
	p->max_rx_octets = sys_cpu_to_le16(dle->max_rx_octets);
   10880:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   10884:	808b      	strh	r3, [r1, #4]
	p->max_tx_octets = sys_cpu_to_le16(dle->max_tx_octets);
   10886:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   1088a:	810b      	strh	r3, [r1, #8]
	p->max_rx_time = sys_cpu_to_le16(dle->max_rx_time);
   1088c:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
   10890:	80cb      	strh	r3, [r1, #6]
	p->max_tx_time = sys_cpu_to_le16(dle->max_tx_time);
   10892:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
   10896:	814b      	strh	r3, [r1, #10]
{
	encode_length_req_rsp_common(pdu,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_rsp,
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP,
		&conn->lll.dle.eff);
}
   10898:	4770      	bx	lr
   1089a:	bf00      	nop

0001089c <llcp_pdu_decode_length_req>:
static void decode_length_req_rsp_common(struct ll_conn *conn,
					 struct pdu_data_llctrl_length_req_rsp_common *p)
{
	struct data_pdu_length remote;

	remote.max_rx_octets = sys_le16_to_cpu(p->max_rx_octets);
   1089c:	888b      	ldrh	r3, [r1, #4]
	if (!IN_RANGE(remote->max_rx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
   1089e:	f1a3 021b 	sub.w	r2, r3, #27
   108a2:	2ae0      	cmp	r2, #224	; 0xe0
   108a4:	d821      	bhi.n	108ea <llcp_pdu_decode_length_req+0x4e>
	remote.max_tx_octets = sys_le16_to_cpu(p->max_tx_octets);
   108a6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
	if (!IN_RANGE(remote->max_tx_octets, PDU_DC_PAYLOAD_SIZE_MIN,
   108aa:	f1ac 021b 	sub.w	r2, ip, #27
   108ae:	2ae0      	cmp	r2, #224	; 0xe0
   108b0:	d81b      	bhi.n	108ea <llcp_pdu_decode_length_req+0x4e>

	conn->lll.dle.remote = remote;
}

void llcp_pdu_decode_length_req(struct ll_conn *conn, struct pdu_data *pdu)
{
   108b2:	b530      	push	{r4, r5, lr}
	remote.max_rx_time = sys_le16_to_cpu(p->max_rx_time);
   108b4:	88cd      	ldrh	r5, [r1, #6]
	if (!IN_RANGE(remote->max_rx_time, PDU_DC_PAYLOAD_TIME_MIN,
   108b6:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
   108ba:	f244 1e48 	movw	lr, #16712	; 0x4148
   108be:	b292      	uxth	r2, r2
   108c0:	4572      	cmp	r2, lr
   108c2:	d811      	bhi.n	108e8 <llcp_pdu_decode_length_req+0x4c>
	remote.max_tx_time = sys_le16_to_cpu(p->max_tx_time);
   108c4:	894a      	ldrh	r2, [r1, #10]
   108c6:	2100      	movs	r1, #0
   108c8:	460c      	mov	r4, r1
   108ca:	f362 040f 	bfi	r4, r2, #0, #16
	if (!IN_RANGE(remote->max_tx_time, PDU_DC_PAYLOAD_TIME_MIN,
   108ce:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
   108d2:	f36c 010f 	bfi	r1, ip, #0, #16
   108d6:	b292      	uxth	r2, r2
   108d8:	f363 411f 	bfi	r1, r3, #16, #16
   108dc:	f365 441f 	bfi	r4, r5, #16, #16
   108e0:	4572      	cmp	r2, lr
	conn->lll.dle.remote = remote;
   108e2:	bf98      	it	ls
   108e4:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
	decode_length_req_rsp_common(conn,
		(struct pdu_data_llctrl_length_req_rsp_common *)&pdu->llctrl.length_req);
}
   108e8:	bd30      	pop	{r4, r5, pc}
   108ea:	4770      	bx	lr

000108ec <llcp_pdu_decode_length_rsp>:

void llcp_pdu_decode_length_rsp(struct ll_conn *conn, struct pdu_data *pdu)
   108ec:	888b      	ldrh	r3, [r1, #4]
   108ee:	f1a3 021b 	sub.w	r2, r3, #27
   108f2:	2ae0      	cmp	r2, #224	; 0xe0
   108f4:	d821      	bhi.n	1093a <llcp_pdu_decode_length_rsp+0x4e>
   108f6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   108fa:	f1ac 021b 	sub.w	r2, ip, #27
   108fe:	2ae0      	cmp	r2, #224	; 0xe0
   10900:	d81b      	bhi.n	1093a <llcp_pdu_decode_length_rsp+0x4e>
   10902:	b530      	push	{r4, r5, lr}
   10904:	88cd      	ldrh	r5, [r1, #6]
   10906:	f5a5 72a4 	sub.w	r2, r5, #328	; 0x148
   1090a:	f244 1e48 	movw	lr, #16712	; 0x4148
   1090e:	b292      	uxth	r2, r2
   10910:	4572      	cmp	r2, lr
   10912:	d811      	bhi.n	10938 <llcp_pdu_decode_length_rsp+0x4c>
   10914:	894a      	ldrh	r2, [r1, #10]
   10916:	2100      	movs	r1, #0
   10918:	460c      	mov	r4, r1
   1091a:	f362 040f 	bfi	r4, r2, #0, #16
   1091e:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
   10922:	f36c 010f 	bfi	r1, ip, #0, #16
   10926:	b292      	uxth	r2, r2
   10928:	f363 411f 	bfi	r1, r3, #16, #16
   1092c:	f365 441f 	bfi	r4, r5, #16, #16
   10930:	4572      	cmp	r2, lr
   10932:	bf98      	it	ls
   10934:	e9c0 1418 	strdls	r1, r4, [r0, #96]	; 0x60
   10938:	bd30      	pop	{r4, r5, pc}
   1093a:	4770      	bx	lr

0001093c <cu_ntf>:
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
		(ctx->data.cu.params_changed != 0U));
}

static void cu_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   1093c:	b570      	push	{r4, r5, r6, lr}
	struct node_rx_pdu *ntf;
	struct node_rx_cu *pdu;
	uint8_t piggy_back;

	/* Allocate ntf node */
	ntf = ctx->node_ref.rx;
   1093e:	69cc      	ldr	r4, [r1, #28]
	ctx->node_ref.rx = NULL;
   10940:	2300      	movs	r3, #0
{
   10942:	460d      	mov	r5, r1
   10944:	4606      	mov	r6, r0
	ctx->node_ref.rx = NULL;
   10946:	61cb      	str	r3, [r1, #28]
	LL_ASSERT(ntf);
   10948:	b304      	cbz	r4, 1098c <cu_ntf+0x50>

	piggy_back = (ntf->hdr.type != NODE_RX_TYPE_RETAIN);

	ntf->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1094a:	2319      	movs	r3, #25
	piggy_back = (ntf->hdr.type != NODE_RX_TYPE_RETAIN);
   1094c:	7922      	ldrb	r2, [r4, #4]
	ntf->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1094e:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   10950:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   10952:	80e3      	strh	r3, [r4, #6]
	pdu = (struct node_rx_cu *)ntf->pdu;

	pdu->status = ctx->data.cu.error;
   10954:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   10958:	7723      	strb	r3, [r4, #28]
	if (!ctx->data.cu.error) {
   1095a:	b943      	cbnz	r3, 1096e <cu_ntf+0x32>
		pdu->interval = ctx->data.cu.interval_max;
   1095c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   1095e:	83e3      	strh	r3, [r4, #30]
		pdu->latency = ctx->data.cu.latency;
   10960:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   10962:	8423      	strh	r3, [r4, #32]
		pdu->timeout = ctx->data.cu.timeout;
   10964:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   10966:	8463      	strh	r3, [r4, #34]	; 0x22
		pdu->interval = conn->lll.interval;
		pdu->latency = conn->lll.latency;
		pdu->timeout = conn->supervision_timeout;
	}

	if (!piggy_back) {
   10968:	2a2c      	cmp	r2, #44	; 0x2c
   1096a:	d009      	beq.n	10980 <cu_ntf+0x44>
		/* Enqueue notification towards LL, unless piggy-backing,
		 * in which case this is done on the rx return path
		 */
		ll_rx_put_sched(ntf->hdr.link, ntf);
	}
}
   1096c:	bd70      	pop	{r4, r5, r6, pc}
		pdu->interval = conn->lll.interval;
   1096e:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   10970:	83e3      	strh	r3, [r4, #30]
		pdu->latency = conn->lll.latency;
   10972:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
   10974:	8423      	strh	r3, [r4, #32]
		pdu->timeout = conn->supervision_timeout;
   10976:	f8b6 318c 	ldrh.w	r3, [r6, #396]	; 0x18c
		pdu->timeout = ctx->data.cu.timeout;
   1097a:	8463      	strh	r3, [r4, #34]	; 0x22
	if (!piggy_back) {
   1097c:	2a2c      	cmp	r2, #44	; 0x2c
   1097e:	d1f5      	bne.n	1096c <cu_ntf+0x30>
		ll_rx_put_sched(ntf->hdr.link, ntf);
   10980:	6820      	ldr	r0, [r4, #0]
   10982:	4621      	mov	r1, r4
}
   10984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ll_rx_put_sched(ntf->hdr.link, ntf);
   10988:	f7f9 ba5e 	b.w	9e48 <ll_rx_put_sched>
	LL_ASSERT(ntf);
   1098c:	4a06      	ldr	r2, [pc, #24]	; (109a8 <cu_ntf+0x6c>)
   1098e:	4907      	ldr	r1, [pc, #28]	; (109ac <cu_ntf+0x70>)
   10990:	4807      	ldr	r0, [pc, #28]	; (109b0 <cu_ntf+0x74>)
   10992:	23f7      	movs	r3, #247	; 0xf7
   10994:	f008 fe53 	bl	1963e <assert_print>
   10998:	4040      	eors	r0, r0
   1099a:	f380 8811 	msr	BASEPRI, r0
   1099e:	f04f 0003 	mov.w	r0, #3
   109a2:	df02      	svc	2
   109a4:	e7d1      	b.n	1094a <cu_ntf+0xe>
   109a6:	bf00      	nop
   109a8:	0001eb08 	.word	0x0001eb08
   109ac:	0001e874 	.word	0x0001e874
   109b0:	0001e1a4 	.word	0x0001e1a4

000109b4 <rp_cu_conn_param_req_ntf>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
static void rp_cu_conn_param_req_ntf(struct ll_conn *conn, struct proc_ctx *ctx)
{
   109b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct pdu_data *pdu;
	uint8_t piggy_back;


	/* Allocate ntf node */
	ntf = ctx->node_ref.rx;
   109b6:	69cc      	ldr	r4, [r1, #28]
	ctx->node_ref.rx = NULL;
   109b8:	2300      	movs	r3, #0
{
   109ba:	460d      	mov	r5, r1
   109bc:	4606      	mov	r6, r0
	ctx->node_ref.rx = NULL;
   109be:	61cb      	str	r3, [r1, #28]
	LL_ASSERT(ntf);
   109c0:	b194      	cbz	r4, 109e8 <rp_cu_conn_param_req_ntf+0x34>

	piggy_back = (ntf->hdr.type != NODE_RX_TYPE_RETAIN);

	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   109c2:	2303      	movs	r3, #3
	piggy_back = (ntf->hdr.type != NODE_RX_TYPE_RETAIN);
   109c4:	7927      	ldrb	r7, [r4, #4]
	ntf->hdr.type = NODE_RX_TYPE_DC_PDU;
   109c6:	7123      	strb	r3, [r4, #4]
	ntf->hdr.handle = conn->lll.handle;
   109c8:	8d33      	ldrh	r3, [r6, #40]	; 0x28
   109ca:	80e3      	strh	r3, [r4, #6]
	pdu = (struct pdu_data *)ntf->pdu;

	llcp_pdu_encode_conn_param_req(ctx, pdu);
   109cc:	f104 011c 	add.w	r1, r4, #28
   109d0:	4628      	mov	r0, r5
   109d2:	f7ff fe4b 	bl	1066c <llcp_pdu_encode_conn_param_req>

	if (!piggy_back) {
   109d6:	2f2c      	cmp	r7, #44	; 0x2c
   109d8:	d000      	beq.n	109dc <rp_cu_conn_param_req_ntf+0x28>
		/* Enqueue notification towards LL, unless piggy-backing,
		 * in which case this is done on the rx return path
		 */
		ll_rx_put_sched(ntf->hdr.link, ntf);
	}
}
   109da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ll_rx_put_sched(ntf->hdr.link, ntf);
   109dc:	6820      	ldr	r0, [r4, #0]
   109de:	4621      	mov	r1, r4
}
   109e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_put_sched(ntf->hdr.link, ntf);
   109e4:	f7f9 ba30 	b.w	9e48 <ll_rx_put_sched>
	LL_ASSERT(ntf);
   109e8:	4a06      	ldr	r2, [pc, #24]	; (10a04 <rp_cu_conn_param_req_ntf+0x50>)
   109ea:	4907      	ldr	r1, [pc, #28]	; (10a08 <rp_cu_conn_param_req_ntf+0x54>)
   109ec:	4807      	ldr	r0, [pc, #28]	; (10a0c <rp_cu_conn_param_req_ntf+0x58>)
   109ee:	f240 332a 	movw	r3, #810	; 0x32a
   109f2:	f008 fe24 	bl	1963e <assert_print>
   109f6:	4040      	eors	r0, r0
   109f8:	f380 8811 	msr	BASEPRI, r0
   109fc:	f04f 0003 	mov.w	r0, #3
   10a00:	df02      	svc	2
   10a02:	e7de      	b.n	109c2 <rp_cu_conn_param_req_ntf+0xe>
   10a04:	0001eb08 	.word	0x0001eb08
   10a08:	0001e874 	.word	0x0001e874
   10a0c:	0001e1a4 	.word	0x0001e1a4

00010a10 <cu_update_conn_parameters>:
{
   10a10:	b530      	push	{r4, r5, lr}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10a12:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	ctx->data.cu.params_changed = cu_have_params_changed(
   10a14:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
   10a16:	8e4c      	ldrh	r4, [r1, #50]	; 0x32
   10a18:	8e8d      	ldrh	r5, [r1, #52]	; 0x34
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10a1a:	4293      	cmp	r3, r2
{
   10a1c:	b085      	sub	sp, #20
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10a1e:	d102      	bne.n	10a26 <cu_update_conn_parameters+0x16>
   10a20:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10a22:	42a3      	cmp	r3, r4
   10a24:	d014      	beq.n	10a50 <cu_update_conn_parameters+0x40>
   10a26:	2301      	movs	r3, #1
	ctx->data.cu.params_changed = cu_have_params_changed(
   10a28:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	ull_conn_update_parameters(conn, (ctx->proc == PROC_CONN_UPDATE), ctx->data.cu.win_size,
   10a2c:	9502      	str	r5, [sp, #8]
   10a2e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   10a30:	e9cd 2400 	strd	r2, r4, [sp]
   10a34:	7a0c      	ldrb	r4, [r1, #8]
   10a36:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
   10a3a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
   10a3c:	9103      	str	r1, [sp, #12]
   10a3e:	f1a4 0108 	sub.w	r1, r4, #8
   10a42:	fab1 f181 	clz	r1, r1
   10a46:	0949      	lsrs	r1, r1, #5
   10a48:	f7f0 ff22 	bl	1890 <ull_conn_update_parameters>
}
   10a4c:	b005      	add	sp, #20
   10a4e:	bd30      	pop	{r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10a50:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
	ctx->data.cu.params_changed = cu_have_params_changed(
   10a54:	1b5b      	subs	r3, r3, r5
   10a56:	bf18      	it	ne
   10a58:	2301      	movne	r3, #1
   10a5a:	e7e5      	b.n	10a28 <cu_update_conn_parameters+0x18>

00010a5c <rp_cu_tx>:
{
   10a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx = ctx->node_ref.tx;
   10a5e:	6a0d      	ldr	r5, [r1, #32]
	ctx->node_ref.tx = NULL;
   10a60:	2300      	movs	r3, #0
{
   10a62:	460c      	mov	r4, r1
   10a64:	4607      	mov	r7, r0
   10a66:	4616      	mov	r6, r2
	ctx->node_ref.tx = NULL;
   10a68:	620b      	str	r3, [r1, #32]
	if (!tx) {
   10a6a:	2d00      	cmp	r5, #0
   10a6c:	d03d      	beq.n	10aea <rp_cu_tx+0x8e>
	pdu = (struct pdu_data *)tx->pdu;
   10a6e:	1d29      	adds	r1, r5, #4
	switch (opcode) {
   10a70:	2e11      	cmp	r6, #17
   10a72:	d80a      	bhi.n	10a8a <rp_cu_tx+0x2e>
   10a74:	e8df f006 	tbb	[pc, r6]
   10a78:	0909092c 	.word	0x0909092c
   10a7c:	28090909 	.word	0x28090909
   10a80:	09090909 	.word	0x09090909
   10a84:	09090909 	.word	0x09090909
   10a88:	2030      	.short	0x2030
		LL_ASSERT(0);
   10a8a:	4a21      	ldr	r2, [pc, #132]	; (10b10 <rp_cu_tx+0xb4>)
   10a8c:	4921      	ldr	r1, [pc, #132]	; (10b14 <rp_cu_tx+0xb8>)
   10a8e:	4822      	ldr	r0, [pc, #136]	; (10b18 <rp_cu_tx+0xbc>)
   10a90:	f240 330e 	movw	r3, #782	; 0x30e
   10a94:	f008 fdd3 	bl	1963e <assert_print>
   10a98:	4040      	eors	r0, r0
   10a9a:	f380 8811 	msr	BASEPRI, r0
   10a9e:	f04f 0003 	mov.w	r0, #3
   10aa2:	df02      	svc	2
	ctx->tx_opcode = pdu->llctrl.opcode;
   10aa4:	79eb      	ldrb	r3, [r5, #7]
   10aa6:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   10aa8:	4629      	mov	r1, r5
   10aaa:	4638      	mov	r0, r7
   10aac:	f7fd fff8 	bl	eaa0 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   10ab0:	7a23      	ldrb	r3, [r4, #8]
   10ab2:	2b09      	cmp	r3, #9
   10ab4:	d014      	beq.n	10ae0 <rp_cu_tx+0x84>
}
   10ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   10ab8:	4608      	mov	r0, r1
   10aba:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   10abe:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   10ac2:	f7ff fd79 	bl	105b8 <llcp_pdu_encode_reject_ext_ind>
		break;
   10ac6:	e7ed      	b.n	10aa4 <rp_cu_tx+0x48>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
   10ac8:	4620      	mov	r0, r4
   10aca:	f7ff fbe3 	bl	10294 <llcp_pdu_encode_unknown_rsp>
		break;
   10ace:	e7e9      	b.n	10aa4 <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_update_ind(ctx, pdu);
   10ad0:	4620      	mov	r0, r4
   10ad2:	f7ff fe57 	bl	10784 <llcp_pdu_encode_conn_update_ind>
		break;
   10ad6:	e7e5      	b.n	10aa4 <rp_cu_tx+0x48>
		llcp_pdu_encode_conn_param_rsp(ctx, pdu);
   10ad8:	4620      	mov	r0, r4
   10ada:	f7ff fdf9 	bl	106d0 <llcp_pdu_encode_conn_param_rsp>
		break;
   10ade:	e7e1      	b.n	10aa4 <rp_cu_tx+0x48>
		llcp_rr_prt_restart(conn);
   10ae0:	4638      	mov	r0, r7
}
   10ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		llcp_rr_prt_restart(conn);
   10ae6:	f000 be23 	b.w	11730 <llcp_rr_prt_restart>
		tx = llcp_tx_alloc(conn, ctx);
   10aea:	f7fd ffc3 	bl	ea74 <llcp_tx_alloc>
		LL_ASSERT(tx);
   10aee:	4605      	mov	r5, r0
   10af0:	2800      	cmp	r0, #0
   10af2:	d1bc      	bne.n	10a6e <rp_cu_tx+0x12>
   10af4:	4a06      	ldr	r2, [pc, #24]	; (10b10 <rp_cu_tx+0xb4>)
   10af6:	4909      	ldr	r1, [pc, #36]	; (10b1c <rp_cu_tx+0xc0>)
   10af8:	4807      	ldr	r0, [pc, #28]	; (10b18 <rp_cu_tx+0xbc>)
   10afa:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   10afe:	f008 fd9e 	bl	1963e <assert_print>
   10b02:	4040      	eors	r0, r0
   10b04:	f380 8811 	msr	BASEPRI, r0
   10b08:	f04f 0003 	mov.w	r0, #3
   10b0c:	df02      	svc	2
   10b0e:	e7ae      	b.n	10a6e <rp_cu_tx+0x12>
   10b10:	0001eb08 	.word	0x0001eb08
   10b14:	0001e220 	.word	0x0001e220
   10b18:	0001e1a4 	.word	0x0001e1a4
   10b1c:	0001e800 	.word	0x0001e800

00010b20 <rp_cu_send_conn_update_ind_finalize.constprop.0>:
	}
#endif /* defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) */
	ctx->state = RP_CU_STATE_IDLE;
}

static void rp_cu_send_conn_update_ind_finalize(struct ll_conn *conn, struct proc_ctx *ctx,
   10b20:	b538      	push	{r3, r4, r5, lr}
						uint8_t evt, void *param)
{
	/* Central role path, should not get here with !=NULL rx-node reference */
	LL_ASSERT(ctx->node_ref.rx == NULL);
   10b22:	69cb      	ldr	r3, [r1, #28]
static void rp_cu_send_conn_update_ind_finalize(struct ll_conn *conn, struct proc_ctx *ctx,
   10b24:	460c      	mov	r4, r1
   10b26:	4605      	mov	r5, r0
	LL_ASSERT(ctx->node_ref.rx == NULL);
   10b28:	b163      	cbz	r3, 10b44 <rp_cu_send_conn_update_ind_finalize.constprop.0+0x24>
   10b2a:	4a1f      	ldr	r2, [pc, #124]	; (10ba8 <rp_cu_send_conn_update_ind_finalize.constprop.0+0x88>)
   10b2c:	491f      	ldr	r1, [pc, #124]	; (10bac <rp_cu_send_conn_update_ind_finalize.constprop.0+0x8c>)
   10b2e:	4820      	ldr	r0, [pc, #128]	; (10bb0 <rp_cu_send_conn_update_ind_finalize.constprop.0+0x90>)
   10b30:	f44f 7353 	mov.w	r3, #844	; 0x34c
   10b34:	f008 fd83 	bl	1963e <assert_print>
   10b38:	4040      	eors	r0, r0
   10b3a:	f380 8811 	msr	BASEPRI, r0
   10b3e:	f04f 0003 	mov.w	r0, #3
   10b42:	df02      	svc	2
	/* We pre-alloc NTF node */
	ctx->node_ref.rx = llcp_ntf_alloc();
   10b44:	f7fd ffaa 	bl	ea9c <llcp_ntf_alloc>

	/* Signal put/sched on NTF - ie non-RX node piggy */
	ctx->node_ref.rx->hdr.type = NODE_RX_TYPE_RETAIN;
   10b48:	232c      	movs	r3, #44	; 0x2c
	ctx->node_ref.rx = llcp_ntf_alloc();
   10b4a:	61e0      	str	r0, [r4, #28]
	ctx->node_ref.rx->hdr.type = NODE_RX_TYPE_RETAIN;
   10b4c:	7103      	strb	r3, [r0, #4]
	const uint8_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
   10b4e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	ctx->data.cu.win_size = 1U;
   10b52:	2101      	movs	r1, #1
	ctx->data.cu.win_offset_us = 0U;
   10b54:	2300      	movs	r3, #0
	ctx->data.cu.win_size = 1U;
   10b56:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	ctx->data.cu.win_offset_us = 0U;
   10b5a:	63a3      	str	r3, [r4, #56]	; 0x38
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   10b5c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	if (preferred_periodicity) {
   10b5e:	b14a      	cbz	r2, 10b74 <rp_cu_send_conn_update_ind_finalize.constprop.0+0x54>
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   10b60:	fbb1 f3f2 	udiv	r3, r1, r2
   10b64:	fb13 f302 	smulbb	r3, r3, r2
		if (interval_max >= ctx->data.cu.interval_min) {
   10b68:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		const uint16_t interval_max = (ctx->data.cu.interval_max / preferred_periodicity) *
   10b6a:	b29b      	uxth	r3, r3
		if (interval_max >= ctx->data.cu.interval_min) {
   10b6c:	429a      	cmp	r2, r3
			ctx->data.cu.interval_max = interval_max;
   10b6e:	bf9c      	itt	ls
   10b70:	8623      	strhls	r3, [r4, #48]	; 0x30
   10b72:	4619      	movls	r1, r3
	if (ctx->data.cu.offsets[0] <= ctx->data.cu.interval_max) {
   10b74:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
   10b78:	428b      	cmp	r3, r1
   10b7a:	d804      	bhi.n	10b86 <rp_cu_send_conn_update_ind_finalize.constprop.0+0x66>
		ctx->data.cu.win_offset_us = ctx->data.cu.offsets[0] * CONN_INT_UNIT_US;
   10b7c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10b80:	fb02 f303 	mul.w	r3, r2, r3
   10b84:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->data.cu.instant = ull_conn_event_counter(conn) + conn->lll.latency +
   10b86:	4628      	mov	r0, r5
   10b88:	f7fc fca6 	bl	d4d8 <ull_conn_event_counter>
   10b8c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10b8e:	3306      	adds	r3, #6
   10b90:	4418      	add	r0, r3
   10b92:	85a0      	strh	r0, [r4, #44]	; 0x2c

	cu_prepare_update_ind(conn, ctx);
	rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND);
   10b94:	2200      	movs	r2, #0
   10b96:	4621      	mov	r1, r4
   10b98:	4628      	mov	r0, r5
   10b9a:	f7ff ff5f 	bl	10a5c <rp_cu_tx>
	ctx->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
	ctx->state = RP_CU_STATE_WAIT_INSTANT;
   10b9e:	f64f 730b 	movw	r3, #65291	; 0xff0b
   10ba2:	8163      	strh	r3, [r4, #10]
}
   10ba4:	bd38      	pop	{r3, r4, r5, pc}
   10ba6:	bf00      	nop
   10ba8:	0001eb08 	.word	0x0001eb08
   10bac:	0001eb54 	.word	0x0001eb54
   10bb0:	0001e1a4 	.word	0x0001e1a4

00010bb4 <lp_cu_send_conn_param_req.constprop.0>:
static void lp_cu_send_conn_param_req(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   10bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
   10bb8:	4e38      	ldr	r6, [pc, #224]	; (10c9c <lp_cu_send_conn_param_req.constprop.0+0xe8>)
   10bba:	6833      	ldr	r3, [r6, #0]
   10bbc:	4604      	mov	r4, r0
   10bbe:	460d      	mov	r5, r1
   10bc0:	b12b      	cbz	r3, 10bce <lp_cu_send_conn_param_req.constprop.0+0x1a>
   10bc2:	4283      	cmp	r3, r0
   10bc4:	d003      	beq.n	10bce <lp_cu_send_conn_param_req.constprop.0+0x1a>
		ctx->state = LP_CU_STATE_WAIT_TX_CONN_PARAM_REQ;
   10bc6:	2301      	movs	r3, #1
   10bc8:	72ab      	strb	r3, [r5, #10]
}
   10bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
   10bce:	4620      	mov	r0, r4
   10bd0:	f7ff f9c0 	bl	ff54 <llcp_lr_ispaused>
   10bd4:	2800      	cmp	r0, #0
   10bd6:	d1f6      	bne.n	10bc6 <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10bd8:	4620      	mov	r0, r4
   10bda:	f000 fd97 	bl	1170c <llcp_rr_get_collision>
	if (cpr_active_is_set(conn) || llcp_lr_ispaused(conn) ||
   10bde:	4607      	mov	r7, r0
   10be0:	2800      	cmp	r0, #0
   10be2:	d1f0      	bne.n	10bc6 <lp_cu_send_conn_param_req.constprop.0+0x12>
	     llcp_rr_get_collision(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10be4:	4629      	mov	r1, r5
   10be6:	4620      	mov	r0, r4
   10be8:	f7fd ff3c 	bl	ea64 <llcp_tx_alloc_peek>
   10bec:	2800      	cmp	r0, #0
   10bee:	d0ea      	beq.n	10bc6 <lp_cu_send_conn_param_req.constprop.0+0x12>
		uint16_t event_counter = ull_conn_event_counter(conn);
   10bf0:	4620      	mov	r0, r4
   10bf2:	f7fc fc71 	bl	d4d8 <ull_conn_event_counter>
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   10bf6:	2101      	movs	r1, #1
		uint16_t event_counter = ull_conn_event_counter(conn);
   10bf8:	4680      	mov	r8, r0
		llcp_rr_set_incompat(conn, INCOMPAT_RESOLVABLE);
   10bfa:	4620      	mov	r0, r4
   10bfc:	f000 fd7e 	bl	116fc <llcp_rr_set_incompat>
		ctx->data.cu.reference_conn_event_count = event_counter;
   10c00:	f8a5 803e 	strh.w	r8, [r5, #62]	; 0x3e
	tx = ctx->node_ref.tx;
   10c04:	f8d5 8020 	ldr.w	r8, [r5, #32]
		ctx->data.cu.preferred_periodicity = 0U;
   10c08:	f885 703c 	strb.w	r7, [r5, #60]	; 0x3c
	conn_upd_curr = conn;
   10c0c:	6034      	str	r4, [r6, #0]
	ctx->node_ref.tx = NULL;
   10c0e:	622f      	str	r7, [r5, #32]
	if (!tx) {
   10c10:	f1b8 0f00 	cmp.w	r8, #0
   10c14:	d027      	beq.n	10c66 <lp_cu_send_conn_param_req.constprop.0+0xb2>
		llcp_pdu_encode_conn_param_req(ctx, pdu);
   10c16:	f108 0104 	add.w	r1, r8, #4
   10c1a:	4628      	mov	r0, r5
   10c1c:	f7ff fd26 	bl	1066c <llcp_pdu_encode_conn_param_req>
	ctx->tx_opcode = pdu->llctrl.opcode;
   10c20:	f898 3007 	ldrb.w	r3, [r8, #7]
   10c24:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   10c26:	4641      	mov	r1, r8
   10c28:	4620      	mov	r0, r4
   10c2a:	f7fd ff39 	bl	eaa0 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   10c2e:	7a2b      	ldrb	r3, [r5, #8]
   10c30:	2b09      	cmp	r3, #9
   10c32:	d014      	beq.n	10c5e <lp_cu_send_conn_param_req.constprop.0+0xaa>
		switch (conn->lll.role) {
   10c34:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   10c38:	09db      	lsrs	r3, r3, #7
   10c3a:	d002      	beq.n	10c42 <lp_cu_send_conn_param_req.constprop.0+0x8e>
			ctx->state = LP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   10c3c:	2304      	movs	r3, #4
   10c3e:	816b      	strh	r3, [r5, #10]
			break;
   10c40:	e7c3      	b.n	10bca <lp_cu_send_conn_param_req.constprop.0+0x16>
			LL_ASSERT(0);
   10c42:	4a17      	ldr	r2, [pc, #92]	; (10ca0 <lp_cu_send_conn_param_req.constprop.0+0xec>)
   10c44:	4917      	ldr	r1, [pc, #92]	; (10ca4 <lp_cu_send_conn_param_req.constprop.0+0xf0>)
   10c46:	4818      	ldr	r0, [pc, #96]	; (10ca8 <lp_cu_send_conn_param_req.constprop.0+0xf4>)
   10c48:	f240 138b 	movw	r3, #395	; 0x18b
   10c4c:	f008 fcf7 	bl	1963e <assert_print>
   10c50:	4040      	eors	r0, r0
   10c52:	f380 8811 	msr	BASEPRI, r0
   10c56:	f04f 0003 	mov.w	r0, #3
   10c5a:	df02      	svc	2
}
   10c5c:	e7b5      	b.n	10bca <lp_cu_send_conn_param_req.constprop.0+0x16>
		llcp_lr_prt_restart(conn);
   10c5e:	4620      	mov	r0, r4
   10c60:	f7ff f988 	bl	ff74 <llcp_lr_prt_restart>
   10c64:	e7e6      	b.n	10c34 <lp_cu_send_conn_param_req.constprop.0+0x80>
		tx = llcp_tx_alloc(conn, ctx);
   10c66:	4629      	mov	r1, r5
   10c68:	4620      	mov	r0, r4
   10c6a:	f7fd ff03 	bl	ea74 <llcp_tx_alloc>
		LL_ASSERT(tx);
   10c6e:	4680      	mov	r8, r0
   10c70:	2800      	cmp	r0, #0
   10c72:	d1d0      	bne.n	10c16 <lp_cu_send_conn_param_req.constprop.0+0x62>
   10c74:	4a0a      	ldr	r2, [pc, #40]	; (10ca0 <lp_cu_send_conn_param_req.constprop.0+0xec>)
   10c76:	490d      	ldr	r1, [pc, #52]	; (10cac <lp_cu_send_conn_param_req.constprop.0+0xf8>)
   10c78:	480b      	ldr	r0, [pc, #44]	; (10ca8 <lp_cu_send_conn_param_req.constprop.0+0xf4>)
   10c7a:	f240 131f 	movw	r3, #287	; 0x11f
   10c7e:	f008 fcde 	bl	1963e <assert_print>
   10c82:	4040      	eors	r0, r0
   10c84:	f380 8811 	msr	BASEPRI, r0
   10c88:	f04f 0003 	mov.w	r0, #3
   10c8c:	df02      	svc	2
		llcp_pdu_encode_conn_param_req(ctx, pdu);
   10c8e:	2104      	movs	r1, #4
   10c90:	4628      	mov	r0, r5
   10c92:	f7ff fceb 	bl	1066c <llcp_pdu_encode_conn_param_req>
	ctx->tx_opcode = pdu->llctrl.opcode;
   10c96:	f898 3007 	ldrb.w	r3, [r8, #7]
   10c9a:	deff      	udf	#255	; 0xff
   10c9c:	20001c98 	.word	0x20001c98
   10ca0:	0001eb08 	.word	0x0001eb08
   10ca4:	0001e220 	.word	0x0001e220
   10ca8:	0001e1a4 	.word	0x0001e1a4
   10cac:	0001e800 	.word	0x0001e800

00010cb0 <rp_cu_send_conn_update_ind.constprop.0.isra.0>:

static void rp_cu_send_conn_update_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   10cb0:	b538      	push	{r3, r4, r5, lr}
   10cb2:	4605      	mov	r5, r0
   10cb4:	460c      	mov	r4, r1
				       void *param)
{
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10cb6:	f000 fd33 	bl	11720 <llcp_rr_ispaused>
   10cba:	b110      	cbz	r0, 10cc2 <rp_cu_send_conn_update_ind.constprop.0.isra.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_UPDATE_IND;
   10cbc:	2309      	movs	r3, #9
   10cbe:	72a3      	strb	r3, [r4, #10]
			ctx->state = RP_CU_STATE_WAIT_NTF_AVAIL;
		} else {
			rp_cu_send_conn_update_ind_finalize(conn, ctx, evt, param);
		}
	}
}
   10cc0:	bd38      	pop	{r3, r4, r5, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10cc2:	4621      	mov	r1, r4
   10cc4:	4628      	mov	r0, r5
   10cc6:	f7fd fecd 	bl	ea64 <llcp_tx_alloc_peek>
   10cca:	2800      	cmp	r0, #0
   10ccc:	d0f6      	beq.n	10cbc <rp_cu_send_conn_update_ind.constprop.0.isra.0+0xc>
		ctx->node_ref.tx = llcp_tx_alloc(conn, ctx);
   10cce:	4621      	mov	r1, r4
   10cd0:	4628      	mov	r0, r5
   10cd2:	f7fd fecf 	bl	ea74 <llcp_tx_alloc>
   10cd6:	6220      	str	r0, [r4, #32]
		if (!llcp_ntf_alloc_is_available()) {
   10cd8:	f7fd fed8 	bl	ea8c <llcp_ntf_alloc_is_available>
   10cdc:	b910      	cbnz	r0, 10ce4 <rp_cu_send_conn_update_ind.constprop.0.isra.0+0x34>
			ctx->state = RP_CU_STATE_WAIT_NTF_AVAIL;
   10cde:	230c      	movs	r3, #12
   10ce0:	72a3      	strb	r3, [r4, #10]
}
   10ce2:	bd38      	pop	{r3, r4, r5, pc}
			rp_cu_send_conn_update_ind_finalize(conn, ctx, evt, param);
   10ce4:	4621      	mov	r1, r4
   10ce6:	4628      	mov	r0, r5
}
   10ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			rp_cu_send_conn_update_ind_finalize(conn, ctx, evt, param);
   10cec:	f7ff bf18 	b.w	10b20 <rp_cu_send_conn_update_ind_finalize.constprop.0>

00010cf0 <rp_cu_check_instant.constprop.0>:
		/* Ignore other evts */
		break;
	}
}

static void rp_cu_check_instant(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   10cf0:	b570      	push	{r4, r5, r6, lr}
   10cf2:	460c      	mov	r4, r1
   10cf4:	4605      	mov	r5, r0
				void *param)
{
	uint16_t event_counter = ull_conn_event_counter(conn);
   10cf6:	f7fc fbef 	bl	d4d8 <ull_conn_event_counter>

	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
   10cfa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10cfc:	1ac3      	subs	r3, r0, r3
   10cfe:	041b      	lsls	r3, r3, #16
   10d00:	d500      	bpl.n	10d04 <rp_cu_check_instant.constprop.0+0x14>
			ll_rx_put_sched(ctx->node_ref.rx->hdr.link, ctx->node_ref.rx);
			ctx->node_ref.rx = NULL;
		}
		rp_cu_complete(conn, ctx);
	}
}
   10d02:	bd70      	pop	{r4, r5, r6, pc}
		cu_update_conn_parameters(conn, ctx);
   10d04:	4621      	mov	r1, r4
   10d06:	4628      	mov	r0, r5
   10d08:	f7ff fe82 	bl	10a10 <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
   10d0c:	7a23      	ldrb	r3, [r4, #8]
   10d0e:	2b09      	cmp	r3, #9
   10d10:	d019      	beq.n	10d46 <rp_cu_check_instant.constprop.0+0x56>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   10d12:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
   10d16:	bb06      	cbnz	r6, 10d5a <rp_cu_check_instant.constprop.0+0x6a>
			ctx->node_ref.rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10d18:	69e3      	ldr	r3, [r4, #28]
   10d1a:	2201      	movs	r2, #1
   10d1c:	711a      	strb	r2, [r3, #4]
			ll_rx_put_sched(ctx->node_ref.rx->hdr.link, ctx->node_ref.rx);
   10d1e:	69e1      	ldr	r1, [r4, #28]
   10d20:	6808      	ldr	r0, [r1, #0]
   10d22:	f7f9 f891 	bl	9e48 <ll_rx_put_sched>
			ctx->node_ref.rx = NULL;
   10d26:	61e6      	str	r6, [r4, #28]
	llcp_rr_complete(conn);
   10d28:	4628      	mov	r0, r5
   10d2a:	f000 fe95 	bl	11a58 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   10d2e:	7a23      	ldrb	r3, [r4, #8]
   10d30:	2b09      	cmp	r3, #9
   10d32:	d105      	bne.n	10d40 <rp_cu_check_instant.constprop.0+0x50>
	if (conn == conn_upd_curr) {
   10d34:	4b0d      	ldr	r3, [pc, #52]	; (10d6c <rp_cu_check_instant.constprop.0+0x7c>)
   10d36:	681a      	ldr	r2, [r3, #0]
   10d38:	4295      	cmp	r5, r2
		conn_upd_curr = NULL;
   10d3a:	bf04      	itt	eq
   10d3c:	2200      	moveq	r2, #0
   10d3e:	601a      	streq	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   10d40:	2300      	movs	r3, #0
   10d42:	72a3      	strb	r3, [r4, #10]
}
   10d44:	bd70      	pop	{r4, r5, r6, pc}
			llcp_rr_prt_stop(conn);
   10d46:	4628      	mov	r0, r5
   10d48:	f000 fcf8 	bl	1173c <llcp_rr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   10d4c:	7a23      	ldrb	r3, [r4, #8]
   10d4e:	2b09      	cmp	r3, #9
   10d50:	d1df      	bne.n	10d12 <rp_cu_check_instant.constprop.0+0x22>
   10d52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10d56:	2b00      	cmp	r3, #0
   10d58:	d0db      	beq.n	10d12 <rp_cu_check_instant.constprop.0+0x22>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   10d5a:	2300      	movs	r3, #0
   10d5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			cu_ntf(conn, ctx);
   10d60:	4621      	mov	r1, r4
   10d62:	4628      	mov	r0, r5
   10d64:	f7ff fdea 	bl	1093c <cu_ntf>
   10d68:	e7de      	b.n	10d28 <rp_cu_check_instant.constprop.0+0x38>
   10d6a:	bf00      	nop
   10d6c:	20001c98 	.word	0x20001c98

00010d70 <rp_cu_send_reject_ext_ind.constprop.0>:
static void rp_cu_send_reject_ext_ind(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt,
   10d70:	b570      	push	{r4, r5, r6, lr}
   10d72:	4606      	mov	r6, r0
   10d74:	460c      	mov	r4, r1
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10d76:	f000 fcd3 	bl	11720 <llcp_rr_ispaused>
   10d7a:	b110      	cbz	r0, 10d82 <rp_cu_send_reject_ext_ind.constprop.0+0x12>
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   10d7c:	2306      	movs	r3, #6
   10d7e:	72a3      	strb	r3, [r4, #10]
}
   10d80:	bd70      	pop	{r4, r5, r6, pc}
   10d82:	4605      	mov	r5, r0
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10d84:	4621      	mov	r1, r4
   10d86:	4630      	mov	r0, r6
   10d88:	f7fd fe6c 	bl	ea64 <llcp_tx_alloc_peek>
   10d8c:	2800      	cmp	r0, #0
   10d8e:	d0f5      	beq.n	10d7c <rp_cu_send_reject_ext_ind.constprop.0+0xc>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND);
   10d90:	2211      	movs	r2, #17
   10d92:	4621      	mov	r1, r4
   10d94:	4630      	mov	r0, r6
   10d96:	f7ff fe61 	bl	10a5c <rp_cu_tx>
	llcp_rr_complete(conn);
   10d9a:	4630      	mov	r0, r6
   10d9c:	f000 fe5c 	bl	11a58 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   10da0:	7a23      	ldrb	r3, [r4, #8]
   10da2:	2b09      	cmp	r3, #9
   10da4:	d104      	bne.n	10db0 <rp_cu_send_reject_ext_ind.constprop.0+0x40>
	if (conn == conn_upd_curr) {
   10da6:	4b04      	ldr	r3, [pc, #16]	; (10db8 <rp_cu_send_reject_ext_ind.constprop.0+0x48>)
   10da8:	681a      	ldr	r2, [r3, #0]
   10daa:	4296      	cmp	r6, r2
		conn_upd_curr = NULL;
   10dac:	bf08      	it	eq
   10dae:	601d      	streq	r5, [r3, #0]
}
   10db0:	2300      	movs	r3, #0
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   10db2:	72a3      	strb	r3, [r4, #10]
}
   10db4:	bd70      	pop	{r4, r5, r6, pc}
   10db6:	bf00      	nop
   10db8:	20001c98 	.word	0x20001c98

00010dbc <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>:
static void rp_cu_st_wait_conn_param_req_available(struct ll_conn *conn, struct proc_ctx *ctx,
   10dbc:	b538      	push	{r3, r4, r5, lr}
	return conn_upd_curr && (conn_upd_curr != conn);
   10dbe:	4a1b      	ldr	r2, [pc, #108]	; (10e2c <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x70>)
   10dc0:	6813      	ldr	r3, [r2, #0]
   10dc2:	4605      	mov	r5, r0
   10dc4:	460c      	mov	r4, r1
   10dc6:	b15b      	cbz	r3, 10de0 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x24>
   10dc8:	4283      	cmp	r3, r0
   10dca:	d009      	beq.n	10de0 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x24>
			ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_AVAILABLE;
   10dcc:	2302      	movs	r3, #2
   10dce:	728b      	strb	r3, [r1, #10]
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
   10dd0:	f000 fca6 	bl	11720 <llcp_rr_ispaused>
   10dd4:	b1e0      	cbz	r0, 10e10 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x54>
			llcp_rx_node_retain(ctx);
   10dd6:	4620      	mov	r0, r4
}
   10dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			llcp_rx_node_retain(ctx);
   10ddc:	f7fd be84 	b.w	eae8 <llcp_rx_node_retain>
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10de0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   10de2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
	conn_upd_curr = conn;
   10de4:	6015      	str	r5, [r2, #0]
   10de6:	4299      	cmp	r1, r3
				cu_have_params_changed(conn, ctx->data.cu.interval_max,
   10de8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   10dea:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10dec:	d006      	beq.n	10dfc <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x40>
				rp_cu_conn_param_req_ntf(conn, ctx);
   10dee:	4621      	mov	r1, r4
   10df0:	4628      	mov	r0, r5
   10df2:	f7ff fddf 	bl	109b4 <rp_cu_conn_param_req_ntf>
				ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
   10df6:	2304      	movs	r3, #4
   10df8:	72a3      	strb	r3, [r4, #10]
}
   10dfa:	bd38      	pop	{r3, r4, r5, pc}
	if ((interval != lll->interval) || (latency != lll->latency) ||
   10dfc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   10dfe:	4293      	cmp	r3, r2
   10e00:	d1f5      	bne.n	10dee <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x32>
   10e02:	f8b5 318c 	ldrh.w	r3, [r5, #396]	; 0x18c
   10e06:	4283      	cmp	r3, r0
   10e08:	d1f1      	bne.n	10dee <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x32>
				ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
   10e0a:	2305      	movs	r3, #5
   10e0c:	72a3      	strb	r3, [r4, #10]
}
   10e0e:	bd38      	pop	{r3, r4, r5, pc}
			if (!llcp_rr_ispaused(conn) && llcp_tx_alloc_peek(conn, ctx)) {
   10e10:	4621      	mov	r1, r4
   10e12:	4628      	mov	r0, r5
   10e14:	f7fd fe26 	bl	ea64 <llcp_tx_alloc_peek>
   10e18:	2800      	cmp	r0, #0
   10e1a:	d0dc      	beq.n	10dd6 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1a>
				ctx->data.cu.error = BT_HCI_ERR_UNSUPP_LL_PARAM_VAL;
   10e1c:	f44f 6372 	mov.w	r3, #3872	; 0xf20
   10e20:	8523      	strh	r3, [r4, #40]	; 0x28
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10e22:	4621      	mov	r1, r4
   10e24:	4628      	mov	r0, r5
   10e26:	f7ff ffa3 	bl	10d70 <rp_cu_send_reject_ext_ind.constprop.0>
   10e2a:	e7d4      	b.n	10dd6 <rp_cu_st_wait_conn_param_req_available.part.0.isra.0+0x1a>
   10e2c:	20001c98 	.word	0x20001c98

00010e30 <rp_cu_execute_fsm>:
		break;
	}
}

static void rp_cu_execute_fsm(struct ll_conn *conn, struct proc_ctx *ctx, uint8_t evt, void *param)
{
   10e30:	b570      	push	{r4, r5, r6, lr}
   10e32:	460c      	mov	r4, r1
	switch (ctx->state) {
   10e34:	7a89      	ldrb	r1, [r1, #10]
{
   10e36:	4605      	mov	r5, r0
	switch (ctx->state) {
   10e38:	290c      	cmp	r1, #12
   10e3a:	f200 80ad 	bhi.w	10f98 <rp_cu_execute_fsm+0x168>
   10e3e:	e8df f001 	tbb	[pc, r1]
   10e42:	170b      	.short	0x170b
   10e44:	62584e46 	.word	0x62584e46
   10e48:	867cab74 	.word	0x867cab74
   10e4c:	a28e      	.short	0xa28e
   10e4e:	07          	.byte	0x07
   10e4f:	00          	.byte	0x00
	switch (evt) {
   10e50:	2a00      	cmp	r2, #0
   10e52:	f000 80af 	beq.w	10fb4 <rp_cu_execute_fsm+0x184>
	default:
		/* Unknown state */
		LL_ASSERT(0);
		break;
	}
}
   10e56:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   10e58:	2a00      	cmp	r2, #0
   10e5a:	d1fc      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
		switch (ctx->proc) {
   10e5c:	7a23      	ldrb	r3, [r4, #8]
   10e5e:	2b08      	cmp	r3, #8
   10e60:	f000 80cb 	beq.w	10ffa <rp_cu_execute_fsm+0x1ca>
   10e64:	2b09      	cmp	r3, #9
   10e66:	f040 80ba 	bne.w	10fde <rp_cu_execute_fsm+0x1ae>
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_PARAM_REQ;
   10e6a:	2301      	movs	r3, #1
   10e6c:	72a3      	strb	r3, [r4, #10]
}
   10e6e:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   10e70:	2a01      	cmp	r2, #1
   10e72:	d1f0      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
		llcp_pdu_decode_conn_param_req(ctx, param);
   10e74:	4619      	mov	r1, r3
   10e76:	4620      	mov	r0, r4
   10e78:	f7ff fc5c 	bl	10734 <llcp_pdu_decode_conn_param_req>
	const uint16_t interval_min = ctx->data.cu.interval_min;
   10e7c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	const uint16_t interval_max = ctx->data.cu.interval_max; /* unit conn events (ie 1.25ms) */
   10e7e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	const uint16_t timeout = ctx->data.cu.timeout; /* unit 10ms */
   10e80:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
	const uint16_t latency = ctx->data.cu.latency;
   10e82:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	const uint16_t preferred_periodicity = ctx->data.cu.preferred_periodicity;
   10e84:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
	     ((latency + 1) * interval_max)) ||
   10e88:	2b05      	cmp	r3, #5
   10e8a:	d917      	bls.n	10ebc <rp_cu_execute_fsm+0x8c>
	const bool invalid = ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   10e8c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   10e90:	d814      	bhi.n	10ebc <rp_cu_execute_fsm+0x8c>
	    (interval_max > CONN_UPDATE_CONN_INTV_4SEC) ||
   10e92:	4293      	cmp	r3, r2
   10e94:	d812      	bhi.n	10ebc <rp_cu_execute_fsm+0x8c>
	    (interval_min > interval_max) ||
   10e96:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   10e9a:	d20f      	bcs.n	10ebc <rp_cu_execute_fsm+0x8c>
	    (latency > CONN_UPDATE_LATENCY_MAX) ||
   10e9c:	f1a0 030a 	sub.w	r3, r0, #10
   10ea0:	b29b      	uxth	r3, r3
   10ea2:	f640 4c76 	movw	ip, #3190	; 0xc76
   10ea6:	4563      	cmp	r3, ip
   10ea8:	d808      	bhi.n	10ebc <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
   10eaa:	1c4b      	adds	r3, r1, #1
   10eac:	b29b      	uxth	r3, r3
   10eae:	fb02 f303 	mul.w	r3, r2, r3
	    (timeout < CONN_UPDATE_TIMEOUT_100MS) || (timeout > CONN_UPDATE_TIMEOUT_32SEC) ||
   10eb2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   10eb6:	d201      	bcs.n	10ebc <rp_cu_execute_fsm+0x8c>
	     ((latency + 1) * interval_max)) ||
   10eb8:	42b2      	cmp	r2, r6
   10eba:	d20a      	bcs.n	10ed2 <rp_cu_execute_fsm+0xa2>
			ctx->data.cu.error = BT_HCI_ERR_INVALID_LL_PARAM;
   10ebc:	f640 731e 	movw	r3, #3870	; 0xf1e
   10ec0:	8523      	strh	r3, [r4, #40]	; 0x28
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10ec2:	4621      	mov	r1, r4
   10ec4:	4628      	mov	r0, r5
}
   10ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10eca:	f7ff bf51 	b.w	10d70 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   10ece:	2a01      	cmp	r2, #1
   10ed0:	d8c1      	bhi.n	10e56 <rp_cu_execute_fsm+0x26>
   10ed2:	4621      	mov	r1, r4
   10ed4:	4628      	mov	r0, r5
}
   10ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10eda:	f7ff bf6f 	b.w	10dbc <rp_cu_st_wait_conn_param_req_available.part.0.isra.0>
	switch (evt) {
   10ede:	2a00      	cmp	r2, #0
   10ee0:	d1b9      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
	if (!llcp_ntf_alloc_is_available()) {
   10ee2:	f7fd fdd3 	bl	ea8c <llcp_ntf_alloc_is_available>
   10ee6:	2800      	cmp	r0, #0
   10ee8:	f040 80b1 	bne.w	1104e <rp_cu_execute_fsm+0x21e>
		ctx->state = RP_CU_STATE_WAIT_NTF_CONN_PARAM_REQ;
   10eec:	2303      	movs	r3, #3
   10eee:	72a3      	strb	r3, [r4, #10]
}
   10ef0:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   10ef2:	2a03      	cmp	r2, #3
   10ef4:	d069      	beq.n	10fca <rp_cu_execute_fsm+0x19a>
   10ef6:	2a04      	cmp	r2, #4
   10ef8:	d1ad      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   10efa:	220f      	movs	r2, #15
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   10efc:	2306      	movs	r3, #6
		ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   10efe:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
		ctx->state = RP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   10f02:	72a3      	strb	r3, [r4, #10]
}
   10f04:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   10f06:	2a00      	cmp	r2, #0
   10f08:	d1a5      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
		if (conn->lll.role == BT_HCI_ROLE_CENTRAL) {
   10f0a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   10f0e:	2b00      	cmp	r3, #0
   10f10:	da5e      	bge.n	10fd0 <rp_cu_execute_fsm+0x1a0>
			if (!ctx->data.cu.error) {
   10f12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10f16:	b193      	cbz	r3, 10f3e <rp_cu_execute_fsm+0x10e>
				ctx->data.cu.rejected_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   10f18:	230f      	movs	r3, #15
   10f1a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10f1e:	4621      	mov	r1, r4
   10f20:	4628      	mov	r0, r5
}
   10f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10f26:	f7ff bf23 	b.w	10d70 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   10f2a:	2a00      	cmp	r2, #0
   10f2c:	d193      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10f2e:	4621      	mov	r1, r4
   10f30:	4628      	mov	r0, r5
}
   10f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_reject_ext_ind(conn, ctx, evt, param);
   10f36:	f7ff bf1b 	b.w	10d70 <rp_cu_send_reject_ext_ind.constprop.0>
	switch (evt) {
   10f3a:	2a00      	cmp	r2, #0
   10f3c:	d18b      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10f3e:	4628      	mov	r0, r5
   10f40:	f000 fbee 	bl	11720 <llcp_rr_ispaused>
   10f44:	2800      	cmp	r0, #0
   10f46:	d05b      	beq.n	11000 <rp_cu_execute_fsm+0x1d0>
		ctx->state = RP_CU_STATE_WAIT_TX_CONN_PARAM_RSP;
   10f48:	2308      	movs	r3, #8
   10f4a:	72a3      	strb	r3, [r4, #10]
}
   10f4c:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   10f4e:	2a00      	cmp	r2, #0
   10f50:	d181      	bne.n	10e56 <rp_cu_execute_fsm+0x26>
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   10f52:	4621      	mov	r1, r4
   10f54:	4628      	mov	r0, r5
}
   10f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   10f5a:	f7ff bea9 	b.w	10cb0 <rp_cu_send_conn_update_ind.constprop.0.isra.0>
	switch (evt) {
   10f5e:	2a02      	cmp	r2, #2
   10f60:	f47f af79 	bne.w	10e56 <rp_cu_execute_fsm+0x26>
		switch (conn->lll.role) {
   10f64:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   10f68:	f3c2 11c0 	ubfx	r1, r2, #7, #1
   10f6c:	09d2      	lsrs	r2, r2, #7
   10f6e:	d155      	bne.n	1101c <rp_cu_execute_fsm+0x1ec>
			ctx->unknown_response.type = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   10f70:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   10f74:	4628      	mov	r0, r5
   10f76:	f000 fbd3 	bl	11720 <llcp_rr_ispaused>
   10f7a:	4606      	mov	r6, r0
   10f7c:	2800      	cmp	r0, #0
   10f7e:	d076      	beq.n	1106e <rp_cu_execute_fsm+0x23e>
		ctx->state = RP_CU_STATE_WAIT_TX_UNKNOWN_RSP;
   10f80:	230d      	movs	r3, #13
   10f82:	72a3      	strb	r3, [r4, #10]
}
   10f84:	bd70      	pop	{r4, r5, r6, pc}
	switch (evt) {
   10f86:	2a00      	cmp	r2, #0
   10f88:	f47f af65 	bne.w	10e56 <rp_cu_execute_fsm+0x26>
		rp_cu_check_instant(conn, ctx, evt, param);
   10f8c:	4621      	mov	r1, r4
   10f8e:	4628      	mov	r0, r5
}
   10f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_check_instant(conn, ctx, evt, param);
   10f94:	f7ff beac 	b.w	10cf0 <rp_cu_check_instant.constprop.0>
		LL_ASSERT(0);
   10f98:	4a40      	ldr	r2, [pc, #256]	; (1109c <rp_cu_execute_fsm+0x26c>)
   10f9a:	4941      	ldr	r1, [pc, #260]	; (110a0 <rp_cu_execute_fsm+0x270>)
   10f9c:	4841      	ldr	r0, [pc, #260]	; (110a4 <rp_cu_execute_fsm+0x274>)
   10f9e:	f240 5306 	movw	r3, #1286	; 0x506
   10fa2:	f008 fb4c 	bl	1963e <assert_print>
   10fa6:	4040      	eors	r0, r0
   10fa8:	f380 8811 	msr	BASEPRI, r0
   10fac:	f04f 0003 	mov.w	r0, #3
   10fb0:	df02      	svc	2
}
   10fb2:	bd70      	pop	{r4, r5, r6, pc}
		if (llcp_ntf_alloc_is_available()) {
   10fb4:	f7fd fd6a 	bl	ea8c <llcp_ntf_alloc_is_available>
   10fb8:	2800      	cmp	r0, #0
   10fba:	f43f af4c 	beq.w	10e56 <rp_cu_execute_fsm+0x26>
			rp_cu_send_conn_update_ind_finalize(conn, ctx, evt, param);
   10fbe:	4621      	mov	r1, r4
   10fc0:	4628      	mov	r0, r5
}
   10fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rp_cu_send_conn_update_ind_finalize(conn, ctx, evt, param);
   10fc6:	f7ff bdab 	b.w	10b20 <rp_cu_send_conn_update_ind_finalize.constprop.0>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY_CONTINUE;
   10fca:	2305      	movs	r3, #5
   10fcc:	72a3      	strb	r3, [r4, #10]
}
   10fce:	bd70      	pop	{r4, r5, r6, pc}
			ctx->node_ref.rx = NULL;
   10fd0:	61e2      	str	r2, [r4, #28]
			rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   10fd2:	4621      	mov	r1, r4
   10fd4:	4628      	mov	r0, r5
}
   10fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			rp_cu_send_conn_update_ind(conn, ctx, evt, param);
   10fda:	f7ff be69 	b.w	10cb0 <rp_cu_send_conn_update_ind.constprop.0.isra.0>
			LL_ASSERT(0);
   10fde:	4a2f      	ldr	r2, [pc, #188]	; (1109c <rp_cu_execute_fsm+0x26c>)
   10fe0:	492f      	ldr	r1, [pc, #188]	; (110a0 <rp_cu_execute_fsm+0x270>)
   10fe2:	4830      	ldr	r0, [pc, #192]	; (110a4 <rp_cu_execute_fsm+0x274>)
   10fe4:	f44f 736e 	mov.w	r3, #952	; 0x3b8
   10fe8:	f008 fb29 	bl	1963e <assert_print>
   10fec:	4040      	eors	r0, r0
   10fee:	f380 8811 	msr	BASEPRI, r0
   10ff2:	f04f 0003 	mov.w	r0, #3
   10ff6:	df02      	svc	2
}
   10ff8:	bd70      	pop	{r4, r5, r6, pc}
			ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   10ffa:	230a      	movs	r3, #10
   10ffc:	72a3      	strb	r3, [r4, #10]
}
   10ffe:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   11000:	4621      	mov	r1, r4
   11002:	4628      	mov	r0, r5
   11004:	f7fd fd2e 	bl	ea64 <llcp_tx_alloc_peek>
   11008:	2800      	cmp	r0, #0
   1100a:	d09d      	beq.n	10f48 <rp_cu_execute_fsm+0x118>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP);
   1100c:	2210      	movs	r2, #16
   1100e:	4621      	mov	r1, r4
   11010:	4628      	mov	r0, r5
   11012:	f7ff fd23 	bl	10a5c <rp_cu_tx>
		ctx->state = RP_CU_STATE_WAIT_RX_CONN_UPDATE_IND;
   11016:	230a      	movs	r3, #10
   11018:	8163      	strh	r3, [r4, #10]
}
   1101a:	bd70      	pop	{r4, r5, r6, pc}
			llcp_pdu_decode_conn_update_ind(ctx, param);
   1101c:	4619      	mov	r1, r3
   1101e:	4620      	mov	r0, r4
   11020:	f7ff fbd4 	bl	107cc <llcp_pdu_decode_conn_update_ind>
			if (is_instant_not_passed(ctx->data.cu.instant,
   11024:	4628      	mov	r0, r5
   11026:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
   11028:	f7fc fa56 	bl	d4d8 <ull_conn_event_counter>
   1102c:	1a33      	subs	r3, r6, r0
   1102e:	b29b      	uxth	r3, r3
   11030:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   11034:	4293      	cmp	r3, r2
   11036:	d811      	bhi.n	1105c <rp_cu_execute_fsm+0x22c>
				llcp_rx_node_retain(ctx);
   11038:	4620      	mov	r0, r4
   1103a:	f7fd fd55 	bl	eae8 <llcp_rx_node_retain>
				ctx->state = RP_CU_STATE_WAIT_INSTANT;
   1103e:	230b      	movs	r3, #11
   11040:	72a3      	strb	r3, [r4, #10]
				rp_cu_check_instant(conn, ctx, evt, param);
   11042:	4621      	mov	r1, r4
   11044:	4628      	mov	r0, r5
}
   11046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				rp_cu_check_instant(conn, ctx, evt, param);
   1104a:	f7ff be51 	b.w	10cf0 <rp_cu_check_instant.constprop.0>
		rp_cu_conn_param_req_ntf(conn, ctx);
   1104e:	4621      	mov	r1, r4
   11050:	4628      	mov	r0, r5
   11052:	f7ff fcaf 	bl	109b4 <rp_cu_conn_param_req_ntf>
		ctx->state = RP_CU_STATE_WAIT_CONN_PARAM_REQ_REPLY;
   11056:	2304      	movs	r3, #4
   11058:	72a3      	strb	r3, [r4, #10]
}
   1105a:	bd70      	pop	{r4, r5, r6, pc}
				conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   1105c:	2328      	movs	r3, #40	; 0x28
   1105e:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
				llcp_rr_complete(conn);
   11062:	4628      	mov	r0, r5
   11064:	f000 fcf8 	bl	11a58 <llcp_rr_complete>
				ctx->state = RP_CU_STATE_IDLE;
   11068:	2300      	movs	r3, #0
   1106a:	72a3      	strb	r3, [r4, #10]
}
   1106c:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1106e:	4621      	mov	r1, r4
   11070:	4628      	mov	r0, r5
   11072:	f7fd fcf7 	bl	ea64 <llcp_tx_alloc_peek>
   11076:	2800      	cmp	r0, #0
   11078:	d082      	beq.n	10f80 <rp_cu_execute_fsm+0x150>
		rp_cu_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP);
   1107a:	2207      	movs	r2, #7
   1107c:	4621      	mov	r1, r4
   1107e:	4628      	mov	r0, r5
   11080:	f7ff fcec 	bl	10a5c <rp_cu_tx>
	llcp_rr_complete(conn);
   11084:	4628      	mov	r0, r5
   11086:	f000 fce7 	bl	11a58 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   1108a:	7a23      	ldrb	r3, [r4, #8]
   1108c:	2b09      	cmp	r3, #9
   1108e:	d1eb      	bne.n	11068 <rp_cu_execute_fsm+0x238>
	if (conn == conn_upd_curr) {
   11090:	4b05      	ldr	r3, [pc, #20]	; (110a8 <rp_cu_execute_fsm+0x278>)
   11092:	681a      	ldr	r2, [r3, #0]
   11094:	4295      	cmp	r5, r2
   11096:	d1e7      	bne.n	11068 <rp_cu_execute_fsm+0x238>
		conn_upd_curr = NULL;
   11098:	601e      	str	r6, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   1109a:	e7e5      	b.n	11068 <rp_cu_execute_fsm+0x238>
   1109c:	0001eb08 	.word	0x0001eb08
   110a0:	0001e220 	.word	0x0001e220
   110a4:	0001e1a4 	.word	0x0001e1a4
   110a8:	20001c98 	.word	0x20001c98

000110ac <lp_cu_execute_fsm>:
{
   110ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110ae:	460c      	mov	r4, r1
	switch (ctx->state) {
   110b0:	7a89      	ldrb	r1, [r1, #10]
{
   110b2:	4606      	mov	r6, r0
   110b4:	4615      	mov	r5, r2
	switch (ctx->state) {
   110b6:	2906      	cmp	r1, #6
   110b8:	d808      	bhi.n	110cc <lp_cu_execute_fsm+0x20>
   110ba:	e8df f001 	tbb	[pc, r1]
   110be:	2815      	.short	0x2815
   110c0:	40300707 	.word	0x40300707
   110c4:	04          	.byte	0x04
   110c5:	00          	.byte	0x00
	switch (evt) {
   110c6:	2d00      	cmp	r5, #0
   110c8:	d041      	beq.n	1114e <lp_cu_execute_fsm+0xa2>
}
   110ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   110cc:	4a6a      	ldr	r2, [pc, #424]	; (11278 <lp_cu_execute_fsm+0x1cc>)
   110ce:	496b      	ldr	r1, [pc, #428]	; (1127c <lp_cu_execute_fsm+0x1d0>)
   110d0:	486b      	ldr	r0, [pc, #428]	; (11280 <lp_cu_execute_fsm+0x1d4>)
   110d2:	f240 23b9 	movw	r3, #697	; 0x2b9
   110d6:	f008 fab2 	bl	1963e <assert_print>
   110da:	4040      	eors	r0, r0
   110dc:	f380 8811 	msr	BASEPRI, r0
   110e0:	f04f 0003 	mov.w	r0, #3
   110e4:	df02      	svc	2
}
   110e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
   110e8:	2d00      	cmp	r5, #0
   110ea:	d1ee      	bne.n	110ca <lp_cu_execute_fsm+0x1e>
		switch (ctx->proc) {
   110ec:	7a23      	ldrb	r3, [r4, #8]
   110ee:	2b09      	cmp	r3, #9
   110f0:	d00f      	beq.n	11112 <lp_cu_execute_fsm+0x66>
			LL_ASSERT(0);
   110f2:	4a61      	ldr	r2, [pc, #388]	; (11278 <lp_cu_execute_fsm+0x1cc>)
   110f4:	4961      	ldr	r1, [pc, #388]	; (1127c <lp_cu_execute_fsm+0x1d0>)
   110f6:	4862      	ldr	r0, [pc, #392]	; (11280 <lp_cu_execute_fsm+0x1d4>)
   110f8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   110fc:	f008 fa9f 	bl	1963e <assert_print>
   11100:	4040      	eors	r0, r0
   11102:	f380 8811 	msr	BASEPRI, r0
   11106:	f04f 0003 	mov.w	r0, #3
   1110a:	df02      	svc	2
}
   1110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
   1110e:	2d00      	cmp	r5, #0
   11110:	d1db      	bne.n	110ca <lp_cu_execute_fsm+0x1e>
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
   11112:	4621      	mov	r1, r4
   11114:	4630      	mov	r0, r6
}
   11116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			lp_cu_send_conn_param_req(conn, ctx, evt, param);
   1111a:	f7ff bd4b 	b.w	10bb4 <lp_cu_send_conn_param_req.constprop.0>
	switch (evt) {
   1111e:	2d03      	cmp	r5, #3
   11120:	d05d      	beq.n	111de <lp_cu_execute_fsm+0x132>
   11122:	2d04      	cmp	r5, #4
   11124:	d063      	beq.n	111ee <lp_cu_execute_fsm+0x142>
   11126:	2d02      	cmp	r5, #2
   11128:	d1cf      	bne.n	110ca <lp_cu_execute_fsm+0x1e>
		llcp_pdu_decode_conn_update_ind(ctx, param);
   1112a:	4619      	mov	r1, r3
   1112c:	4620      	mov	r0, r4
   1112e:	f7ff fb4d 	bl	107cc <llcp_pdu_decode_conn_update_ind>
		llcp_rx_node_retain(ctx);
   11132:	4620      	mov	r0, r4
   11134:	f7fd fcd8 	bl	eae8 <llcp_rx_node_retain>
		ctx->state = LP_CU_STATE_WAIT_INSTANT;
   11138:	2306      	movs	r3, #6
   1113a:	72a3      	strb	r3, [r4, #10]
}
   1113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
   1113e:	2d00      	cmp	r5, #0
   11140:	d1c3      	bne.n	110ca <lp_cu_execute_fsm+0x1e>
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   11142:	f7fe ff07 	bl	ff54 <llcp_lr_ispaused>
   11146:	b340      	cbz	r0, 1119a <lp_cu_execute_fsm+0xee>
		ctx->state = LP_CU_STATE_WAIT_TX_REJECT_EXT_IND;
   11148:	2305      	movs	r3, #5
   1114a:	72a3      	strb	r3, [r4, #10]
}
   1114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint16_t event_counter = ull_conn_event_counter(conn);
   1114e:	f7fc f9c3 	bl	d4d8 <ull_conn_event_counter>
	if (is_instant_reached_or_passed(ctx->data.cu.instant, event_counter)) {
   11152:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   11154:	1ac0      	subs	r0, r0, r3
   11156:	0403      	lsls	r3, r0, #16
   11158:	d4b7      	bmi.n	110ca <lp_cu_execute_fsm+0x1e>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   1115a:	4629      	mov	r1, r5
   1115c:	4630      	mov	r0, r6
   1115e:	f000 facd 	bl	116fc <llcp_rr_set_incompat>
		cu_update_conn_parameters(conn, ctx);
   11162:	4621      	mov	r1, r4
   11164:	4630      	mov	r0, r6
   11166:	f7ff fc53 	bl	10a10 <cu_update_conn_parameters>
		if (ctx->proc == PROC_CONN_PARAM_REQ) {
   1116a:	7a23      	ldrb	r3, [r4, #8]
   1116c:	2b09      	cmp	r3, #9
   1116e:	d054      	beq.n	1121a <lp_cu_execute_fsm+0x16e>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   11170:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
   11174:	2d00      	cmp	r5, #0
   11176:	d15a      	bne.n	1122e <lp_cu_execute_fsm+0x182>
			ctx->node_ref.rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11178:	69e3      	ldr	r3, [r4, #28]
   1117a:	2201      	movs	r2, #1
   1117c:	711a      	strb	r2, [r3, #4]
			ll_rx_put_sched(ctx->node_ref.rx->hdr.link, ctx->node_ref.rx);
   1117e:	69e1      	ldr	r1, [r4, #28]
   11180:	6808      	ldr	r0, [r1, #0]
   11182:	f7f8 fe61 	bl	9e48 <ll_rx_put_sched>
			ctx->node_ref.rx = NULL;
   11186:	61e5      	str	r5, [r4, #28]
	llcp_lr_complete(conn);
   11188:	4630      	mov	r0, r6
   1118a:	f7fe ffb1 	bl	100f0 <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   1118e:	7a23      	ldrb	r3, [r4, #8]
   11190:	2b09      	cmp	r3, #9
   11192:	d037      	beq.n	11204 <lp_cu_execute_fsm+0x158>
	ctx->state = LP_CU_STATE_IDLE;
   11194:	2300      	movs	r3, #0
   11196:	72a3      	strb	r3, [r4, #10]
}
   11198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (llcp_lr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1119a:	4621      	mov	r1, r4
   1119c:	4630      	mov	r0, r6
   1119e:	f7fd fc61 	bl	ea64 <llcp_tx_alloc_peek>
   111a2:	2800      	cmp	r0, #0
   111a4:	d0d0      	beq.n	11148 <lp_cu_execute_fsm+0x9c>
		llcp_rr_set_incompat(conn, INCOMPAT_NO_COLLISION);
   111a6:	4629      	mov	r1, r5
   111a8:	4630      	mov	r0, r6
   111aa:	f000 faa7 	bl	116fc <llcp_rr_set_incompat>
	tx = ctx->node_ref.tx;
   111ae:	6a27      	ldr	r7, [r4, #32]
	ctx->node_ref.tx = NULL;
   111b0:	6225      	str	r5, [r4, #32]
	if (!tx) {
   111b2:	2f00      	cmp	r7, #0
   111b4:	d043      	beq.n	1123e <lp_cu_execute_fsm+0x192>
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   111b6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   111ba:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   111be:	1d38      	adds	r0, r7, #4
   111c0:	f7ff f9fa 	bl	105b8 <llcp_pdu_encode_reject_ext_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   111c4:	79fb      	ldrb	r3, [r7, #7]
   111c6:	7363      	strb	r3, [r4, #13]
	llcp_tx_enqueue(conn, tx);
   111c8:	4639      	mov	r1, r7
   111ca:	4630      	mov	r0, r6
   111cc:	f7fd fc68 	bl	eaa0 <llcp_tx_enqueue>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   111d0:	7a23      	ldrb	r3, [r4, #8]
   111d2:	2b09      	cmp	r3, #9
   111d4:	d1d8      	bne.n	11188 <lp_cu_execute_fsm+0xdc>
		llcp_lr_prt_restart(conn);
   111d6:	4630      	mov	r0, r6
   111d8:	f7fe fecc 	bl	ff74 <llcp_lr_prt_restart>
	llcp_lr_complete(conn);
   111dc:	e7d4      	b.n	11188 <lp_cu_execute_fsm+0xdc>
		ctx->data.cu.error = pdu->llctrl.reject_ext_ind.error_code;
   111de:	795b      	ldrb	r3, [r3, #5]
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   111e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cu_ntf(conn, ctx);
   111e4:	4621      	mov	r1, r4
   111e6:	4630      	mov	r0, r6
   111e8:	f7ff fba8 	bl	1093c <cu_ntf>
   111ec:	e7cc      	b.n	11188 <lp_cu_execute_fsm+0xdc>
   111ee:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
		ctx->data.cu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   111f2:	221a      	movs	r2, #26
   111f4:	f023 0302 	bic.w	r3, r3, #2
   111f8:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
	cu_ntf(conn, ctx);
   111fc:	4621      	mov	r1, r4
		ctx->data.cu.error = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   111fe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	cu_ntf(conn, ctx);
   11202:	e7f0      	b.n	111e6 <lp_cu_execute_fsm+0x13a>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   11204:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
   11208:	2b00      	cmp	r3, #0
   1120a:	db12      	blt.n	11232 <lp_cu_execute_fsm+0x186>
	if (conn == conn_upd_curr) {
   1120c:	4b1d      	ldr	r3, [pc, #116]	; (11284 <lp_cu_execute_fsm+0x1d8>)
   1120e:	681a      	ldr	r2, [r3, #0]
   11210:	4296      	cmp	r6, r2
   11212:	d1bf      	bne.n	11194 <lp_cu_execute_fsm+0xe8>
		conn_upd_curr = NULL;
   11214:	2200      	movs	r2, #0
   11216:	601a      	str	r2, [r3, #0]
   11218:	e7bc      	b.n	11194 <lp_cu_execute_fsm+0xe8>
			llcp_lr_prt_stop(conn);
   1121a:	4630      	mov	r0, r6
   1121c:	f7fe feb4 	bl	ff88 <llcp_lr_prt_stop>
	return (((ctx->proc == PROC_CONN_PARAM_REQ) && (ctx->data.cu.error != 0U)) ||
   11220:	7a23      	ldrb	r3, [r4, #8]
   11222:	2b09      	cmp	r3, #9
   11224:	d1a4      	bne.n	11170 <lp_cu_execute_fsm+0xc4>
   11226:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1122a:	2b00      	cmp	r3, #0
   1122c:	d0a0      	beq.n	11170 <lp_cu_execute_fsm+0xc4>
			ctx->data.cu.error = BT_HCI_ERR_SUCCESS;
   1122e:	2300      	movs	r3, #0
   11230:	e7d6      	b.n	111e0 <lp_cu_execute_fsm+0x134>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
   11232:	4630      	mov	r0, r6
   11234:	f7fd ff7a 	bl	f12c <ull_cp_remote_cpr_pending>
   11238:	2800      	cmp	r0, #0
   1123a:	d0e7      	beq.n	1120c <lp_cu_execute_fsm+0x160>
   1123c:	e7aa      	b.n	11194 <lp_cu_execute_fsm+0xe8>
		tx = llcp_tx_alloc(conn, ctx);
   1123e:	4621      	mov	r1, r4
   11240:	4630      	mov	r0, r6
   11242:	f7fd fc17 	bl	ea74 <llcp_tx_alloc>
		LL_ASSERT(tx);
   11246:	4607      	mov	r7, r0
   11248:	2800      	cmp	r0, #0
   1124a:	d1b4      	bne.n	111b6 <lp_cu_execute_fsm+0x10a>
   1124c:	4a0a      	ldr	r2, [pc, #40]	; (11278 <lp_cu_execute_fsm+0x1cc>)
   1124e:	490e      	ldr	r1, [pc, #56]	; (11288 <lp_cu_execute_fsm+0x1dc>)
   11250:	480b      	ldr	r0, [pc, #44]	; (11280 <lp_cu_execute_fsm+0x1d4>)
   11252:	f240 131f 	movw	r3, #287	; 0x11f
   11256:	f008 f9f2 	bl	1963e <assert_print>
   1125a:	4040      	eors	r0, r0
   1125c:	f380 8811 	msr	BASEPRI, r0
   11260:	f04f 0003 	mov.w	r0, #3
   11264:	df02      	svc	2
		llcp_pdu_encode_reject_ext_ind(pdu, ctx->data.cu.rejected_opcode,
   11266:	2004      	movs	r0, #4
   11268:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1126c:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   11270:	f7ff f9a2 	bl	105b8 <llcp_pdu_encode_reject_ext_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   11274:	79eb      	ldrb	r3, [r5, #7]
   11276:	deff      	udf	#255	; 0xff
   11278:	0001eb08 	.word	0x0001eb08
   1127c:	0001e220 	.word	0x0001e220
   11280:	0001e1a4 	.word	0x0001e1a4
   11284:	20001c98 	.word	0x20001c98
   11288:	0001e800 	.word	0x0001e800

0001128c <llcp_lp_cu_rx>:
{
   1128c:	b510      	push	{r4, lr}
	switch (pdu->llctrl.opcode) {
   1128e:	f892 c01f 	ldrb.w	ip, [r2, #31]
{
   11292:	b082      	sub	sp, #8
   11294:	4604      	mov	r4, r0
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   11296:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   1129a:	f1bc 0f11 	cmp.w	ip, #17
   1129e:	d80a      	bhi.n	112b6 <llcp_lp_cu_rx+0x2a>
   112a0:	e8df f00c 	tbb	[pc, ip]
   112a4:	0909092c 	.word	0x0909092c
   112a8:	25090909 	.word	0x25090909
   112ac:	09090909 	.word	0x09090909
   112b0:	09090909 	.word	0x09090909
   112b4:	171e      	.short	0x171e
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   112b6:	2324      	movs	r3, #36	; 0x24
   112b8:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
   112bc:	9101      	str	r1, [sp, #4]
	llcp_lr_complete(conn);
   112be:	f7fe ff17 	bl	100f0 <llcp_lr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   112c2:	9901      	ldr	r1, [sp, #4]
   112c4:	7a0b      	ldrb	r3, [r1, #8]
   112c6:	2b09      	cmp	r3, #9
   112c8:	d01f      	beq.n	1130a <llcp_lp_cu_rx+0x7e>
	ctx->state = LP_CU_STATE_IDLE;
   112ca:	2300      	movs	r3, #0
   112cc:	728b      	strb	r3, [r1, #10]
}
   112ce:	b002      	add	sp, #8
   112d0:	bd10      	pop	{r4, pc}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112d2:	2203      	movs	r2, #3
   112d4:	4620      	mov	r0, r4
}
   112d6:	b002      	add	sp, #8
   112d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112dc:	f7ff bee6 	b.w	110ac <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_PARAM_RSP, pdu);
   112e0:	2201      	movs	r2, #1
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112e2:	4620      	mov	r0, r4
}
   112e4:	b002      	add	sp, #8
   112e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112ea:	f7ff bedf 	b.w	110ac <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_UNKNOWN, pdu);
   112ee:	2204      	movs	r2, #4
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112f0:	4620      	mov	r0, r4
}
   112f2:	b002      	add	sp, #8
   112f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112f8:	f7ff bed8 	b.w	110ac <lp_cu_execute_fsm>
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_CONN_UPDATE_IND, pdu);
   112fc:	2202      	movs	r2, #2
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   112fe:	4620      	mov	r0, r4
}
   11300:	b002      	add	sp, #8
   11302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_REJECT, pdu);
   11306:	f7ff bed1 	b.w	110ac <lp_cu_execute_fsm>
	if (ctx->proc == PROC_CONN_PARAM_REQ &&
   1130a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1130e:	2b00      	cmp	r3, #0
   11310:	db06      	blt.n	11320 <llcp_lp_cu_rx+0x94>
	if (conn == conn_upd_curr) {
   11312:	4b07      	ldr	r3, [pc, #28]	; (11330 <llcp_lp_cu_rx+0xa4>)
   11314:	681a      	ldr	r2, [r3, #0]
   11316:	4294      	cmp	r4, r2
   11318:	d1d7      	bne.n	112ca <llcp_lp_cu_rx+0x3e>
		conn_upd_curr = NULL;
   1131a:	2200      	movs	r2, #0
   1131c:	601a      	str	r2, [r3, #0]
   1131e:	e7d4      	b.n	112ca <llcp_lp_cu_rx+0x3e>
	    !(conn->lll.role && ull_cp_remote_cpr_pending(conn))) {
   11320:	4620      	mov	r0, r4
   11322:	9101      	str	r1, [sp, #4]
   11324:	f7fd ff02 	bl	f12c <ull_cp_remote_cpr_pending>
   11328:	9901      	ldr	r1, [sp, #4]
   1132a:	2800      	cmp	r0, #0
   1132c:	d0f1      	beq.n	11312 <llcp_lp_cu_rx+0x86>
   1132e:	e7cc      	b.n	112ca <llcp_lp_cu_rx+0x3e>
   11330:	20001c98 	.word	0x20001c98

00011334 <llcp_lp_cu_init_proc>:
	ctx->state = LP_CU_STATE_IDLE;
   11334:	2300      	movs	r3, #0
   11336:	7283      	strb	r3, [r0, #10]
}
   11338:	4770      	bx	lr
   1133a:	bf00      	nop

0001133c <llcp_lp_cu_run>:
{
   1133c:	4613      	mov	r3, r2
	lp_cu_execute_fsm(conn, ctx, LP_CU_EVT_RUN, param);
   1133e:	2200      	movs	r2, #0
   11340:	f7ff beb4 	b.w	110ac <lp_cu_execute_fsm>

00011344 <llcp_rp_cu_rx>:

void llcp_rp_cu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   11344:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   11346:	7fd5      	ldrb	r5, [r2, #31]
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;
   11348:	f102 031c 	add.w	r3, r2, #28
	switch (pdu->llctrl.opcode) {
   1134c:	b135      	cbz	r5, 1135c <llcp_rp_cu_rx+0x18>
   1134e:	2d0f      	cmp	r5, #15
   11350:	d109      	bne.n	11366 <llcp_rp_cu_rx+0x22>
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
		rp_cu_complete(conn, ctx);
		break;
	}
}
   11352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ, pdu);
   11356:	2201      	movs	r2, #1
   11358:	f7ff bd6a 	b.w	10e30 <rp_cu_execute_fsm>
}
   1135c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_UPDATE_IND, pdu);
   11360:	2202      	movs	r2, #2
   11362:	f7ff bd65 	b.w	10e30 <rp_cu_execute_fsm>
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   11366:	2324      	movs	r3, #36	; 0x24
   11368:	460e      	mov	r6, r1
   1136a:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
		rp_cu_complete(conn, ctx);
   1136e:	4604      	mov	r4, r0
	llcp_rr_complete(conn);
   11370:	f000 fb72 	bl	11a58 <llcp_rr_complete>
	if (ctx->proc == PROC_CONN_PARAM_REQ) {
   11374:	7a33      	ldrb	r3, [r6, #8]
   11376:	2b09      	cmp	r3, #9
   11378:	d105      	bne.n	11386 <llcp_rp_cu_rx+0x42>
	if (conn == conn_upd_curr) {
   1137a:	4b04      	ldr	r3, [pc, #16]	; (1138c <llcp_rp_cu_rx+0x48>)
   1137c:	681a      	ldr	r2, [r3, #0]
   1137e:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   11380:	bf04      	itt	eq
   11382:	2200      	moveq	r2, #0
   11384:	601a      	streq	r2, [r3, #0]
	ctx->state = RP_CU_STATE_IDLE;
   11386:	2300      	movs	r3, #0
   11388:	72b3      	strb	r3, [r6, #10]
}
   1138a:	bd70      	pop	{r4, r5, r6, pc}
   1138c:	20001c98 	.word	0x20001c98

00011390 <llcp_rp_cu_init_proc>:

void llcp_rp_cu_init_proc(struct proc_ctx *ctx)
   11390:	2300      	movs	r3, #0
   11392:	7283      	strb	r3, [r0, #10]
   11394:	4770      	bx	lr
   11396:	bf00      	nop

00011398 <llcp_rp_cu_run>:
{
	ctx->state = RP_CU_STATE_IDLE;
}

void llcp_rp_cu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   11398:	4613      	mov	r3, r2
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_RUN, param);
   1139a:	2200      	movs	r2, #0
   1139c:	f7ff bd48 	b.w	10e30 <rp_cu_execute_fsm>

000113a0 <llcp_rp_conn_param_req_reply>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
void llcp_rp_conn_param_req_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_REPLY, NULL);
   113a0:	2300      	movs	r3, #0
   113a2:	2203      	movs	r2, #3
   113a4:	f7ff bd44 	b.w	10e30 <rp_cu_execute_fsm>

000113a8 <llcp_rp_conn_param_req_neg_reply>:
}

void llcp_rp_conn_param_req_neg_reply(struct ll_conn *conn, struct proc_ctx *ctx)
{
	rp_cu_execute_fsm(conn, ctx, RP_CU_EVT_CONN_PARAM_REQ_NEG_REPLY, NULL);
   113a8:	2300      	movs	r3, #0
   113aa:	2204      	movs	r2, #4
   113ac:	f7ff bd40 	b.w	10e30 <rp_cu_execute_fsm>

000113b0 <llcp_rp_chmu_rx>:
		LL_ASSERT(0);
	}
}

void llcp_rp_chmu_rx(struct ll_conn *conn, struct proc_ctx *ctx, struct node_rx_pdu *rx)
{
   113b0:	b570      	push	{r4, r5, r6, lr}
	struct pdu_data *pdu = (struct pdu_data *)rx->pdu;

	switch (pdu->llctrl.opcode) {
   113b2:	7fd3      	ldrb	r3, [r2, #31]
   113b4:	2b01      	cmp	r3, #1
{
   113b6:	4605      	mov	r5, r0
   113b8:	460c      	mov	r4, r1
	switch (pdu->llctrl.opcode) {
   113ba:	d007      	beq.n	113cc <llcp_rp_chmu_rx+0x1c>
		rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RX_CHAN_MAP_IND, pdu);
		break;
	default:
		/* Invalid behaviour */
		/* Invalid PDU received so terminate connection */
		conn->llcp_terminate.reason_final = BT_HCI_ERR_LMP_PDU_NOT_ALLOWED;
   113bc:	2324      	movs	r3, #36	; 0x24
   113be:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
		llcp_rr_complete(conn);
   113c2:	f000 fb49 	bl	11a58 <llcp_rr_complete>
		ctx->state = RP_CHMU_STATE_IDLE;
   113c6:	2300      	movs	r3, #0
   113c8:	72a3      	strb	r3, [r4, #10]
		break;
	}
}
   113ca:	bd70      	pop	{r4, r5, r6, pc}
	switch (ctx->state) {
   113cc:	7a8b      	ldrb	r3, [r1, #10]
   113ce:	2b01      	cmp	r3, #1
   113d0:	d010      	beq.n	113f4 <llcp_rp_chmu_rx+0x44>
   113d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   113d6:	d0f8      	beq.n	113ca <llcp_rp_chmu_rx+0x1a>
		LL_ASSERT(0);
   113d8:	4a14      	ldr	r2, [pc, #80]	; (1142c <llcp_rp_chmu_rx+0x7c>)
   113da:	4915      	ldr	r1, [pc, #84]	; (11430 <llcp_rp_chmu_rx+0x80>)
   113dc:	4815      	ldr	r0, [pc, #84]	; (11434 <llcp_rp_chmu_rx+0x84>)
   113de:	f44f 7396 	mov.w	r3, #300	; 0x12c
   113e2:	f008 f92c 	bl	1963e <assert_print>
   113e6:	4040      	eors	r0, r0
   113e8:	f380 8811 	msr	BASEPRI, r0
   113ec:	f04f 0003 	mov.w	r0, #3
   113f0:	df02      	svc	2
}
   113f2:	bd70      	pop	{r4, r5, r6, pc}
		llcp_pdu_decode_chan_map_update_ind(ctx, param);
   113f4:	f102 011c 	add.w	r1, r2, #28
   113f8:	4620      	mov	r0, r4
   113fa:	f7ff f9ff 	bl	107fc <llcp_pdu_decode_chan_map_update_ind>
		if (is_instant_not_passed(ctx->data.chmu.instant,
   113fe:	4628      	mov	r0, r5
   11400:	8d26      	ldrh	r6, [r4, #40]	; 0x28
   11402:	f7fc f869 	bl	d4d8 <ull_conn_event_counter>
   11406:	1a36      	subs	r6, r6, r0
   11408:	b2b6      	uxth	r6, r6
   1140a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   1140e:	429e      	cmp	r6, r3
   11410:	d802      	bhi.n	11418 <llcp_rp_chmu_rx+0x68>
			ctx->state = RP_CHMU_STATE_WAIT_INSTANT;
   11412:	2302      	movs	r3, #2
   11414:	72a3      	strb	r3, [r4, #10]
}
   11416:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_final = BT_HCI_ERR_INSTANT_PASSED;
   11418:	2328      	movs	r3, #40	; 0x28
   1141a:	f885 3150 	strb.w	r3, [r5, #336]	; 0x150
			llcp_rr_complete(conn);
   1141e:	4628      	mov	r0, r5
   11420:	f000 fb1a 	bl	11a58 <llcp_rr_complete>
			ctx->state = RP_CHMU_STATE_IDLE;
   11424:	2300      	movs	r3, #0
   11426:	72a3      	strb	r3, [r4, #10]
}
   11428:	bd70      	pop	{r4, r5, r6, pc}
   1142a:	bf00      	nop
   1142c:	0001eb74 	.word	0x0001eb74
   11430:	0001e220 	.word	0x0001e220
   11434:	0001e1a4 	.word	0x0001e1a4

00011438 <llcp_rp_chmu_init_proc>:

void llcp_rp_chmu_init_proc(struct proc_ctx *ctx)
{
	ctx->state = RP_CHMU_STATE_IDLE;
   11438:	2300      	movs	r3, #0
   1143a:	7283      	strb	r3, [r0, #10]
}
   1143c:	4770      	bx	lr
   1143e:	bf00      	nop

00011440 <llcp_rp_chmu_run>:

void llcp_rp_chmu_run(struct ll_conn *conn, struct proc_ctx *ctx, void *param)
{
   11440:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->state) {
   11442:	7a8b      	ldrb	r3, [r1, #10]
   11444:	2b01      	cmp	r3, #1
   11446:	d010      	beq.n	1146a <llcp_rp_chmu_run+0x2a>
   11448:	2b02      	cmp	r3, #2
   1144a:	460c      	mov	r4, r1
   1144c:	d00e      	beq.n	1146c <llcp_rp_chmu_run+0x2c>
   1144e:	b1fb      	cbz	r3, 11490 <llcp_rp_chmu_run+0x50>
		LL_ASSERT(0);
   11450:	4a11      	ldr	r2, [pc, #68]	; (11498 <llcp_rp_chmu_run+0x58>)
   11452:	4912      	ldr	r1, [pc, #72]	; (1149c <llcp_rp_chmu_run+0x5c>)
   11454:	4812      	ldr	r0, [pc, #72]	; (114a0 <llcp_rp_chmu_run+0x60>)
   11456:	f44f 7396 	mov.w	r3, #300	; 0x12c
   1145a:	f008 f8f0 	bl	1963e <assert_print>
   1145e:	4040      	eors	r0, r0
   11460:	f380 8811 	msr	BASEPRI, r0
   11464:	f04f 0003 	mov.w	r0, #3
   11468:	df02      	svc	2
	rp_chmu_execute_fsm(conn, ctx, RP_CHMU_EVT_RUN, param);
}
   1146a:	bd38      	pop	{r3, r4, r5, pc}
	uint16_t event_counter = ull_conn_event_counter(conn);
   1146c:	4605      	mov	r5, r0
   1146e:	f7fc f833 	bl	d4d8 <ull_conn_event_counter>
	if (((event_counter - ctx->data.chmu.instant) & 0xFFFF) <= 0x7FFF) {
   11472:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11474:	1ac0      	subs	r0, r0, r3
   11476:	0403      	lsls	r3, r0, #16
   11478:	d4f7      	bmi.n	1146a <llcp_rp_chmu_run+0x2a>
	ull_conn_chan_map_set(conn, ctx->data.chmu.chm);
   1147a:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   1147e:	4628      	mov	r0, r5
   11480:	f7fc f838 	bl	d4f4 <ull_conn_chan_map_set>
	llcp_rr_complete(conn);
   11484:	4628      	mov	r0, r5
   11486:	f000 fae7 	bl	11a58 <llcp_rr_complete>
	ctx->state = RP_CHMU_STATE_IDLE;
   1148a:	2300      	movs	r3, #0
   1148c:	72a3      	strb	r3, [r4, #10]
}
   1148e:	bd38      	pop	{r3, r4, r5, pc}
		ctx->state = RP_CHMU_STATE_WAIT_RX_CHAN_MAP_IND;
   11490:	2301      	movs	r3, #1
   11492:	728b      	strb	r3, [r1, #10]
}
   11494:	bd38      	pop	{r3, r4, r5, pc}
   11496:	bf00      	nop
   11498:	0001eb74 	.word	0x0001eb74
   1149c:	0001e220 	.word	0x0001e220
   114a0:	0001e1a4 	.word	0x0001e1a4

000114a4 <llcp_rr_check_done.part.0>:
	}

	return 0U;
}

void llcp_rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   114a4:	b538      	push	{r3, r4, r5, lr}
{
	if (ctx->done) {
		struct proc_ctx *ctx_header;

		ctx_header = llcp_rr_peek(conn);
		LL_ASSERT(ctx_header == ctx);
   114a6:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   114aa:	428b      	cmp	r3, r1
void llcp_rr_check_done(struct ll_conn *conn, struct proc_ctx *ctx)
   114ac:	4604      	mov	r4, r0
   114ae:	460d      	mov	r5, r1
		LL_ASSERT(ctx_header == ctx);
   114b0:	d01c      	beq.n	114ec <llcp_rr_check_done.part.0+0x48>
   114b2:	4a0f      	ldr	r2, [pc, #60]	; (114f0 <llcp_rr_check_done.part.0+0x4c>)
   114b4:	490f      	ldr	r1, [pc, #60]	; (114f4 <llcp_rr_check_done.part.0+0x50>)
   114b6:	4810      	ldr	r0, [pc, #64]	; (114f8 <llcp_rr_check_done.part.0+0x54>)
   114b8:	2377      	movs	r3, #119	; 0x77
   114ba:	f008 f8c0 	bl	1963e <assert_print>
   114be:	4040      	eors	r0, r0
   114c0:	f380 8811 	msr	BASEPRI, r0
   114c4:	f04f 0003 	mov.w	r0, #3
   114c8:	df02      	svc	2
   114ca:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   114ce:	b143      	cbz	r3, 114e2 <llcp_rr_check_done.part.0+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114d0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
	return node->next;
   114d4:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   114d6:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114da:	4299      	cmp	r1, r3
	list->tail = node;
   114dc:	bf08      	it	eq
   114de:	f8c4 20fc 	streq.w	r2, [r4, #252]	; 0xfc

		rr_dequeue(conn);

		llcp_proc_ctx_release(ctx);
   114e2:	4628      	mov	r0, r5
	}
}
   114e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		llcp_proc_ctx_release(ctx);
   114e8:	f7fd ba9a 	b.w	ea20 <llcp_proc_ctx_release>
   114ec:	460b      	mov	r3, r1
   114ee:	e7ee      	b.n	114ce <llcp_rr_check_done.part.0+0x2a>
   114f0:	0001ebbc 	.word	0x0001ebbc
   114f4:	0001eaf4 	.word	0x0001eaf4
   114f8:	0001e1a4 	.word	0x0001e1a4

000114fc <rr_act_run>:

	llcp_rr_check_done(conn, ctx);
}

static void rr_act_run(struct ll_conn *conn)
{
   114fc:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   114fe:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
	struct proc_ctx *ctx;

	ctx = llcp_rr_peek(conn);

	switch (ctx->proc) {
   11502:	7a2b      	ldrb	r3, [r5, #8]
   11504:	3b01      	subs	r3, #1
{
   11506:	4604      	mov	r4, r0
	switch (ctx->proc) {
   11508:	2b0b      	cmp	r3, #11
   1150a:	d828      	bhi.n	1155e <rr_act_run+0x62>
   1150c:	e8df f003 	tbb	[pc, r3]
   11510:	06060606 	.word	0x06060606
   11514:	131d1818 	.word	0x131d1818
   11518:	06220613 	.word	0x06220613
		llcp_rp_chmu_run(conn, ctx, NULL);
		break;
#endif /* CONFIG_BT_PERIPHERAL */
#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PROC_DATA_LENGTH_UPDATE:
		llcp_rp_comm_run(conn, ctx, NULL);
   1151c:	2200      	movs	r2, #0
   1151e:	4629      	mov	r1, r5
   11520:	f7fe fbda 	bl	fcd8 <llcp_rp_comm_run>
	if (ctx->done) {
   11524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11526:	b12b      	cbz	r3, 11534 <rr_act_run+0x38>
   11528:	4629      	mov	r1, r5
   1152a:	4620      	mov	r0, r4
		LL_ASSERT(0);
		break;
	}

	llcp_rr_check_done(conn, ctx);
}
   1152c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11530:	f7ff bfb8 	b.w	114a4 <llcp_rr_check_done.part.0>
   11534:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_run(conn, ctx, NULL);
   11536:	2200      	movs	r2, #0
   11538:	4629      	mov	r1, r5
   1153a:	f7ff ff2d 	bl	11398 <llcp_rp_cu_run>
		break;
   1153e:	e7f1      	b.n	11524 <rr_act_run+0x28>
		llcp_rp_enc_run(conn, ctx, NULL);
   11540:	2200      	movs	r2, #0
   11542:	4629      	mov	r1, r5
   11544:	f7fc fbe2 	bl	dd0c <llcp_rp_enc_run>
		break;
   11548:	e7ec      	b.n	11524 <rr_act_run+0x28>
		llcp_rp_pu_run(conn, ctx, NULL);
   1154a:	2200      	movs	r2, #0
   1154c:	4629      	mov	r1, r5
   1154e:	f7fd f94b 	bl	e7e8 <llcp_rp_pu_run>
		break;
   11552:	e7e7      	b.n	11524 <rr_act_run+0x28>
		llcp_rp_chmu_run(conn, ctx, NULL);
   11554:	2200      	movs	r2, #0
   11556:	4629      	mov	r1, r5
   11558:	f7ff ff72 	bl	11440 <llcp_rp_chmu_run>
		break;
   1155c:	e7e2      	b.n	11524 <rr_act_run+0x28>
		LL_ASSERT(0);
   1155e:	4a07      	ldr	r2, [pc, #28]	; (1157c <rr_act_run+0x80>)
   11560:	4907      	ldr	r1, [pc, #28]	; (11580 <rr_act_run+0x84>)
   11562:	4808      	ldr	r0, [pc, #32]	; (11584 <rr_act_run+0x88>)
   11564:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   11568:	f008 f869 	bl	1963e <assert_print>
   1156c:	4040      	eors	r0, r0
   1156e:	f380 8811 	msr	BASEPRI, r0
   11572:	f04f 0003 	mov.w	r0, #3
   11576:	df02      	svc	2
		break;
   11578:	e7d4      	b.n	11524 <rr_act_run+0x28>
   1157a:	bf00      	nop
   1157c:	0001ebbc 	.word	0x0001ebbc
   11580:	0001e220 	.word	0x0001e220
   11584:	0001e1a4 	.word	0x0001e1a4

00011588 <rr_act_unsupported>:
		rr_set_state(conn, RR_STATE_IDLE);
	}
}

static void rr_act_unsupported(struct ll_conn *conn)
{
   11588:	b570      	push	{r4, r5, r6, lr}
   1158a:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
   1158e:	4604      	mov	r4, r0
	struct proc_ctx *ctx = llcp_rr_peek(conn);

	LL_ASSERT(ctx != NULL);
   11590:	b31d      	cbz	r5, 115da <rr_act_unsupported+0x52>

	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   11592:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11596:	2b01      	cmp	r3, #1
   11598:	d103      	bne.n	115a2 <rr_act_unsupported+0x1a>
}
   1159a:	2302      	movs	r3, #2
	conn->llcp.remote.state = state;
   1159c:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
		rr_tx(conn, ctx, PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP);

		ctx->done = 1U;
		rr_set_state(conn, RR_STATE_IDLE);
	}
}
   115a0:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   115a2:	4629      	mov	r1, r5
   115a4:	4620      	mov	r0, r4
   115a6:	f7fd fa5d 	bl	ea64 <llcp_tx_alloc_peek>
   115aa:	2800      	cmp	r0, #0
   115ac:	d0f5      	beq.n	1159a <rr_act_unsupported+0x12>
	tx = llcp_tx_alloc(conn, ctx);
   115ae:	4629      	mov	r1, r5
   115b0:	4620      	mov	r0, r4
   115b2:	f7fd fa5f 	bl	ea74 <llcp_tx_alloc>
	LL_ASSERT(tx);
   115b6:	4606      	mov	r6, r0
   115b8:	b1e8      	cbz	r0, 115f6 <rr_act_unsupported+0x6e>
		llcp_pdu_encode_unknown_rsp(ctx, pdu);
   115ba:	1d31      	adds	r1, r6, #4
   115bc:	4628      	mov	r0, r5
   115be:	f7fe fe69 	bl	10294 <llcp_pdu_encode_unknown_rsp>
	ctx->tx_opcode = pdu->llctrl.opcode;
   115c2:	79f3      	ldrb	r3, [r6, #7]
   115c4:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   115c6:	4631      	mov	r1, r6
   115c8:	4620      	mov	r0, r4
   115ca:	f7fd fa69 	bl	eaa0 <llcp_tx_enqueue>
		ctx->done = 1U;
   115ce:	2301      	movs	r3, #1
   115d0:	626b      	str	r3, [r5, #36]	; 0x24
}
   115d2:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   115d4:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   115d8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
   115da:	4a0e      	ldr	r2, [pc, #56]	; (11614 <rr_act_unsupported+0x8c>)
   115dc:	490e      	ldr	r1, [pc, #56]	; (11618 <rr_act_unsupported+0x90>)
   115de:	480f      	ldr	r0, [pc, #60]	; (1161c <rr_act_unsupported+0x94>)
   115e0:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   115e4:	f008 f82b 	bl	1963e <assert_print>
   115e8:	4040      	eors	r0, r0
   115ea:	f380 8811 	msr	BASEPRI, r0
   115ee:	f04f 0003 	mov.w	r0, #3
   115f2:	df02      	svc	2
   115f4:	e7cd      	b.n	11592 <rr_act_unsupported+0xa>
	LL_ASSERT(tx);
   115f6:	4a07      	ldr	r2, [pc, #28]	; (11614 <rr_act_unsupported+0x8c>)
   115f8:	4909      	ldr	r1, [pc, #36]	; (11620 <rr_act_unsupported+0x98>)
   115fa:	4808      	ldr	r0, [pc, #32]	; (1161c <rr_act_unsupported+0x94>)
   115fc:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   11600:	f008 f81d 	bl	1963e <assert_print>
   11604:	4040      	eors	r0, r0
   11606:	f380 8811 	msr	BASEPRI, r0
   1160a:	f04f 0003 	mov.w	r0, #3
   1160e:	df02      	svc	2
   11610:	e7d3      	b.n	115ba <rr_act_unsupported+0x32>
   11612:	bf00      	nop
   11614:	0001ebbc 	.word	0x0001ebbc
   11618:	0001eae0 	.word	0x0001eae0
   1161c:	0001e1a4 	.word	0x0001e1a4
   11620:	0001e800 	.word	0x0001e800

00011624 <rr_act_reject>:
{
   11624:	b570      	push	{r4, r5, r6, lr}
   11626:	f8d0 50f8 	ldr.w	r5, [r0, #248]	; 0xf8
   1162a:	4604      	mov	r4, r0
	LL_ASSERT(ctx != NULL);
   1162c:	b3ad      	cbz	r5, 1169a <rr_act_reject+0x76>
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1162e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11632:	2b01      	cmp	r3, #1
   11634:	d103      	bne.n	1163e <rr_act_reject+0x1a>
}
   11636:	2301      	movs	r3, #1
	conn->llcp.remote.state = state;
   11638:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   1163c:	bd70      	pop	{r4, r5, r6, pc}
	if (llcp_rr_ispaused(conn) || !llcp_tx_alloc_peek(conn, ctx)) {
   1163e:	4629      	mov	r1, r5
   11640:	4620      	mov	r0, r4
   11642:	f7fd fa0f 	bl	ea64 <llcp_tx_alloc_peek>
   11646:	2800      	cmp	r0, #0
   11648:	d0f5      	beq.n	11636 <rr_act_reject+0x12>
	tx = llcp_tx_alloc(conn, ctx);
   1164a:	4629      	mov	r1, r5
   1164c:	4620      	mov	r0, r4
   1164e:	f7fd fa11 	bl	ea74 <llcp_tx_alloc>
	LL_ASSERT(tx);
   11652:	4606      	mov	r6, r0
   11654:	2800      	cmp	r0, #0
   11656:	d03b      	beq.n	116d0 <rr_act_reject+0xac>
		ctx_local = llcp_lr_peek(conn);
   11658:	4620      	mov	r0, r4
   1165a:	f7fe fc1b 	bl	fe94 <llcp_lr_peek>
		if (ctx_local->proc == ctx->proc ||
   1165e:	7a2a      	ldrb	r2, [r5, #8]
   11660:	7a03      	ldrb	r3, [r0, #8]
   11662:	4293      	cmp	r3, r2
	pdu = (struct pdu_data *)tx->pdu;
   11664:	f106 0004 	add.w	r0, r6, #4
		if (ctx_local->proc == ctx->proc ||
   11668:	d025      	beq.n	116b6 <rr_act_reject+0x92>
   1166a:	2b08      	cmp	r3, #8
   1166c:	d025      	beq.n	116ba <rr_act_reject+0x96>
			reject_code = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1166e:	212a      	movs	r1, #42	; 0x2a
		if (conn->llcp.fex.valid && feature_ext_rej_ind(conn)) {
   11670:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   11674:	b11b      	cbz	r3, 1167e <rr_act_reject+0x5a>
	return (conn->llcp.fex.features_used & LL_FEAT_BIT_EXT_REJ_IND) != 0;
   11676:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   1167a:	075b      	lsls	r3, r3, #29
   1167c:	d422      	bmi.n	116c4 <rr_act_reject+0xa0>
			llcp_pdu_encode_reject_ind(pdu, reject_code);
   1167e:	f7fe ff8f 	bl	105a0 <llcp_pdu_encode_reject_ind>
	ctx->tx_opcode = pdu->llctrl.opcode;
   11682:	79f3      	ldrb	r3, [r6, #7]
   11684:	736b      	strb	r3, [r5, #13]
	llcp_tx_enqueue(conn, tx);
   11686:	4631      	mov	r1, r6
   11688:	4620      	mov	r0, r4
   1168a:	f7fd fa09 	bl	eaa0 <llcp_tx_enqueue>
		ctx->done = 1U;
   1168e:	2301      	movs	r3, #1
   11690:	626b      	str	r3, [r5, #36]	; 0x24
}
   11692:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   11694:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   11698:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(ctx != NULL);
   1169a:	4a14      	ldr	r2, [pc, #80]	; (116ec <rr_act_reject+0xc8>)
   1169c:	4914      	ldr	r1, [pc, #80]	; (116f0 <rr_act_reject+0xcc>)
   1169e:	4815      	ldr	r0, [pc, #84]	; (116f4 <rr_act_reject+0xd0>)
   116a0:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   116a4:	f007 ffcb 	bl	1963e <assert_print>
   116a8:	4040      	eors	r0, r0
   116aa:	f380 8811 	msr	BASEPRI, r0
   116ae:	f04f 0003 	mov.w	r0, #3
   116b2:	df02      	svc	2
   116b4:	e7bb      	b.n	1162e <rr_act_reject+0xa>
			reject_code = BT_HCI_ERR_LL_PROC_COLLISION;
   116b6:	2123      	movs	r1, #35	; 0x23
   116b8:	e7da      	b.n	11670 <rr_act_reject+0x4c>
   116ba:	2a09      	cmp	r2, #9
   116bc:	bf14      	ite	ne
   116be:	212a      	movne	r1, #42	; 0x2a
   116c0:	2123      	moveq	r1, #35	; 0x23
   116c2:	e7d5      	b.n	11670 <rr_act_reject+0x4c>
			llcp_pdu_encode_reject_ext_ind(pdu, conn->llcp.remote.reject_opcode,
   116c4:	460a      	mov	r2, r1
   116c6:	f894 1107 	ldrb.w	r1, [r4, #263]	; 0x107
   116ca:	f7fe ff75 	bl	105b8 <llcp_pdu_encode_reject_ext_ind>
   116ce:	e7d8      	b.n	11682 <rr_act_reject+0x5e>
	LL_ASSERT(tx);
   116d0:	4a06      	ldr	r2, [pc, #24]	; (116ec <rr_act_reject+0xc8>)
   116d2:	4909      	ldr	r1, [pc, #36]	; (116f8 <rr_act_reject+0xd4>)
   116d4:	4807      	ldr	r0, [pc, #28]	; (116f4 <rr_act_reject+0xd0>)
   116d6:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   116da:	f007 ffb0 	bl	1963e <assert_print>
   116de:	4040      	eors	r0, r0
   116e0:	f380 8811 	msr	BASEPRI, r0
   116e4:	f04f 0003 	mov.w	r0, #3
   116e8:	df02      	svc	2
   116ea:	e7b5      	b.n	11658 <rr_act_reject+0x34>
   116ec:	0001ebbc 	.word	0x0001ebbc
   116f0:	0001eae0 	.word	0x0001eae0
   116f4:	0001e1a4 	.word	0x0001e1a4
   116f8:	0001e800 	.word	0x0001e800

000116fc <llcp_rr_set_incompat>:
	conn->llcp.remote.incompat = incompat;
   116fc:	f880 1106 	strb.w	r1, [r0, #262]	; 0x106
}
   11700:	4770      	bx	lr
   11702:	bf00      	nop

00011704 <llcp_rr_set_paused_cmd>:
}
   11704:	4770      	bx	lr
   11706:	bf00      	nop

00011708 <llcp_rr_get_paused_cmd>:
}
   11708:	2000      	movs	r0, #0
   1170a:	4770      	bx	lr

0001170c <llcp_rr_get_collision>:
	return conn->llcp.remote.collision;
   1170c:	f890 0105 	ldrb.w	r0, [r0, #261]	; 0x105
}
   11710:	3800      	subs	r0, #0
   11712:	bf18      	it	ne
   11714:	2001      	movne	r0, #1
   11716:	4770      	bx	lr

00011718 <llcp_rr_peek>:
}
   11718:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
   1171c:	4770      	bx	lr
   1171e:	bf00      	nop

00011720 <llcp_rr_ispaused>:
	return (conn->llcp.remote.pause == 1U);
   11720:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
}
   11724:	f1a0 0001 	sub.w	r0, r0, #1
   11728:	fab0 f080 	clz	r0, r0
   1172c:	0940      	lsrs	r0, r0, #5
   1172e:	4770      	bx	lr

00011730 <llcp_rr_prt_restart>:
	conn->llcp.remote.prt_expire = conn->llcp.prt_reload;
   11730:	f8b0 3108 	ldrh.w	r3, [r0, #264]	; 0x108
   11734:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   11738:	4770      	bx	lr
   1173a:	bf00      	nop

0001173c <llcp_rr_prt_stop>:
	conn->llcp.remote.prt_expire = 0U;
   1173c:	2300      	movs	r3, #0
   1173e:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   11742:	4770      	bx	lr

00011744 <llcp_rr_flush_procedures>:
{
   11744:	b538      	push	{r3, r4, r5, lr}
   11746:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   1174a:	b1a4      	cbz	r4, 11776 <llcp_rr_flush_procedures+0x32>
   1174c:	4605      	mov	r5, r0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1174e:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
	return node->next;
   11752:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   11754:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11758:	4294      	cmp	r4, r2
		llcp_nodes_release(conn, ctx);
   1175a:	4621      	mov	r1, r4
	list->tail = node;
   1175c:	bf08      	it	eq
   1175e:	f8c5 30fc 	streq.w	r3, [r5, #252]	; 0xfc
   11762:	4628      	mov	r0, r5
   11764:	f7fd f9e0 	bl	eb28 <llcp_nodes_release>
		llcp_proc_ctx_release(ctx);
   11768:	4620      	mov	r0, r4
   1176a:	f7fd f959 	bl	ea20 <llcp_proc_ctx_release>
	return list->head;
   1176e:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   11772:	2c00      	cmp	r4, #0
   11774:	d1eb      	bne.n	1174e <llcp_rr_flush_procedures+0xa>
}
   11776:	bd38      	pop	{r3, r4, r5, pc}

00011778 <rr_st_active.constprop.0>:
	rr_act_unsupported(conn);
}

static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
{
	switch (evt) {
   11778:	2902      	cmp	r1, #2
static void rr_st_active(struct ll_conn *conn, uint8_t evt, void *param)
   1177a:	b538      	push	{r3, r4, r5, lr}
   1177c:	4605      	mov	r5, r0
	switch (evt) {
   1177e:	d012      	beq.n	117a6 <rr_st_active.constprop.0+0x2e>
   11780:	2904      	cmp	r1, #4
   11782:	460c      	mov	r4, r1
   11784:	d00a      	beq.n	1179c <rr_st_active.constprop.0+0x24>
   11786:	2901      	cmp	r1, #1
   11788:	d000      	beq.n	1178c <rr_st_active.constprop.0+0x14>
		break;
	default:
		/* Ignore other evts */
		break;
	}
}
   1178a:	bd38      	pop	{r3, r4, r5, pc}
		if (llcp_rr_peek(conn)) {
   1178c:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   11790:	2b00      	cmp	r3, #0
   11792:	d0fa      	beq.n	1178a <rr_st_active.constprop.0+0x12>
}
   11794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			rr_act_run(conn);
   11798:	f7ff beb0 	b.w	114fc <rr_act_run>
	llcp_rr_flush_procedures(conn);
   1179c:	f7ff ffd2 	bl	11744 <llcp_rr_flush_procedures>
	conn->llcp.remote.state = state;
   117a0:	f885 4100 	strb.w	r4, [r5, #256]	; 0x100
}
   117a4:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   117a6:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	conn->llcp.remote.collision = collision;
   117aa:	2300      	movs	r3, #0
   117ac:	f880 3105 	strb.w	r3, [r0, #261]	; 0x105
	LL_ASSERT(ctx != NULL);
   117b0:	b13c      	cbz	r4, 117c2 <rr_st_active.constprop.0+0x4a>
	conn->llcp.remote.prt_expire = 0U;
   117b2:	2300      	movs	r3, #0
	ctx->done = 1U;
   117b4:	2201      	movs	r2, #1
	conn->llcp.remote.prt_expire = 0U;
   117b6:	f8a5 3102 	strh.w	r3, [r5, #258]	; 0x102
	ctx->done = 1U;
   117ba:	6262      	str	r2, [r4, #36]	; 0x24
	conn->llcp.remote.state = state;
   117bc:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
}
   117c0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(ctx != NULL);
   117c2:	4a07      	ldr	r2, [pc, #28]	; (117e0 <rr_st_active.constprop.0+0x68>)
   117c4:	4907      	ldr	r1, [pc, #28]	; (117e4 <rr_st_active.constprop.0+0x6c>)
   117c6:	4808      	ldr	r0, [pc, #32]	; (117e8 <rr_st_active.constprop.0+0x70>)
   117c8:	f240 230f 	movw	r3, #527	; 0x20f
   117cc:	f007 ff37 	bl	1963e <assert_print>
   117d0:	4040      	eors	r0, r0
   117d2:	f380 8811 	msr	BASEPRI, r0
   117d6:	f04f 0003 	mov.w	r0, #3
   117da:	df02      	svc	2
   117dc:	e7e9      	b.n	117b2 <rr_st_active.constprop.0+0x3a>
   117de:	bf00      	nop
   117e0:	0001ebbc 	.word	0x0001ebbc
   117e4:	0001eae0 	.word	0x0001eae0
   117e8:	0001e1a4 	.word	0x0001e1a4

000117ec <rr_execute_fsm>:
		break;
	}
}

static void rr_execute_fsm(struct ll_conn *conn, uint8_t evt, void *param)
{
   117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp.remote.state) {
   117ee:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
{
   117f2:	4604      	mov	r4, r0
   117f4:	460e      	mov	r6, r1
   117f6:	4615      	mov	r5, r2
	switch (conn->llcp.remote.state) {
   117f8:	2b05      	cmp	r3, #5
   117fa:	f200 809a 	bhi.w	11932 <rr_execute_fsm+0x146>
   117fe:	e8df f003 	tbb	[pc, r3]
   11802:	160e      	.short	0x160e
   11804:	030b0307 	.word	0x030b0307
		break;
	default:
		/* Unknown state */
		LL_ASSERT(0);
	}
}
   11808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		rr_st_active(conn, evt, param);
   1180c:	f7ff bfb4 	b.w	11778 <rr_st_active.constprop.0>
}
   11810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_unsupported(conn);
   11814:	f7ff beb8 	b.w	11588 <rr_act_unsupported>
	switch (evt) {
   11818:	2903      	cmp	r1, #3
   1181a:	d00c      	beq.n	11836 <rr_execute_fsm+0x4a>
}
   1181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (evt) {
   1181e:	b171      	cbz	r1, 1183e <rr_execute_fsm+0x52>
   11820:	2904      	cmp	r1, #4
   11822:	d1fb      	bne.n	1181c <rr_execute_fsm+0x30>
	llcp_rr_flush_procedures(conn);
   11824:	f7ff ff8e 	bl	11744 <llcp_rr_flush_procedures>
	conn->llcp.remote.state = state;
   11828:	f884 6100 	strb.w	r6, [r4, #256]	; 0x100
}
   1182c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1182e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rr_act_reject(conn);
   11832:	f7ff bef7 	b.w	11624 <rr_act_reject>
	conn->llcp.remote.state = state;
   11836:	2300      	movs	r3, #0
   11838:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
}
   1183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1183e:	f8d0 70f8 	ldr.w	r7, [r0, #248]	; 0xf8
		if (ctx) {
   11842:	2f00      	cmp	r7, #0
   11844:	d0ea      	beq.n	1181c <rr_execute_fsm+0x30>
	return conn->llcp.remote.incompat;
   11846:	7a3b      	ldrb	r3, [r7, #8]
   11848:	f890 c106 	ldrb.w	ip, [r0, #262]	; 0x106
			const bool periph = !!(conn->lll.role == BT_HCI_ROLE_PERIPHERAL);
   1184c:	f890 e039 	ldrb.w	lr, [r0, #57]	; 0x39
	switch (ctx->proc) {
   11850:	2b10      	cmp	r3, #16
   11852:	d811      	bhi.n	11878 <rr_execute_fsm+0x8c>
   11854:	4a3e      	ldr	r2, [pc, #248]	; (11950 <rr_execute_fsm+0x164>)
   11856:	2101      	movs	r1, #1
   11858:	fa01 f003 	lsl.w	r0, r1, r3
   1185c:	4002      	ands	r2, r0
   1185e:	b342      	cbz	r2, 118b2 <rr_execute_fsm+0xc6>
			if (ctx->proc == PROC_TERMINATE) {
   11860:	2b0a      	cmp	r3, #10
   11862:	d01f      	beq.n	118a4 <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
   11864:	b1b3      	cbz	r3, 11894 <rr_execute_fsm+0xa8>
	conn->llcp.remote.collision = collision;
   11866:	f884 6105 	strb.w	r6, [r4, #261]	; 0x105
				rr_act_run(conn);
   1186a:	4620      	mov	r0, r4
   1186c:	f7ff fe46 	bl	114fc <rr_act_run>
	conn->llcp.remote.state = state;
   11870:	2303      	movs	r3, #3
   11872:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   11876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   11878:	4a36      	ldr	r2, [pc, #216]	; (11954 <rr_execute_fsm+0x168>)
   1187a:	4937      	ldr	r1, [pc, #220]	; (11958 <rr_execute_fsm+0x16c>)
   1187c:	4837      	ldr	r0, [pc, #220]	; (1195c <rr_execute_fsm+0x170>)
   1187e:	236a      	movs	r3, #106	; 0x6a
   11880:	f007 fedd 	bl	1963e <assert_print>
   11884:	4040      	eors	r0, r0
   11886:	f380 8811 	msr	BASEPRI, r0
   1188a:	f04f 0003 	mov.w	r0, #3
   1188e:	df02      	svc	2
			if (ctx->proc == PROC_TERMINATE) {
   11890:	7a3b      	ldrb	r3, [r7, #8]
   11892:	e7e5      	b.n	11860 <rr_execute_fsm+0x74>
				ctx->unknown_response.type = pdu->llctrl.opcode;
   11894:	7feb      	ldrb	r3, [r5, #31]
   11896:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				rr_act_unsupported(conn);
   1189a:	4620      	mov	r0, r4
}
   1189c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_unsupported(conn);
   118a0:	f7ff be72 	b.w	11588 <rr_act_unsupported>
				rr_act_run(conn);
   118a4:	4620      	mov	r0, r4
   118a6:	f7ff fe29 	bl	114fc <rr_act_run>
	conn->llcp.remote.state = state;
   118aa:	2305      	movs	r3, #5
   118ac:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   118b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (ctx->proc) {
   118b2:	f410 6f38 	tst.w	r0, #2944	; 0xb80
   118b6:	d0df      	beq.n	11878 <rr_execute_fsm+0x8c>
			if (ctx->proc == PROC_TERMINATE) {
   118b8:	2b0a      	cmp	r3, #10
   118ba:	d0f3      	beq.n	118a4 <rr_execute_fsm+0xb8>
			} else if (ctx->proc == PROC_UNKNOWN) {
   118bc:	2b00      	cmp	r3, #0
   118be:	d0e9      	beq.n	11894 <rr_execute_fsm+0xa8>
			} else if (!with_instant || incompat == INCOMPAT_NO_COLLISION) {
   118c0:	f1bc 0f00 	cmp.w	ip, #0
   118c4:	d101      	bne.n	118ca <rr_execute_fsm+0xde>
   118c6:	460e      	mov	r6, r1
   118c8:	e7cd      	b.n	11866 <rr_execute_fsm+0x7a>
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
   118ca:	f01e 0f80 	tst.w	lr, #128	; 0x80
   118ce:	d112      	bne.n	118f6 <rr_execute_fsm+0x10a>
			} else if (central && incompat == INCOMPAT_RESOLVABLE) {
   118d0:	f1bc 0f01 	cmp.w	ip, #1
   118d4:	d01f      	beq.n	11916 <rr_execute_fsm+0x12a>
			} else if (incompat == INCOMPAT_RESERVED) {
   118d6:	f1bc 0f02 	cmp.w	ip, #2
   118da:	d19f      	bne.n	1181c <rr_execute_fsm+0x30>
				ctx_local = llcp_lr_peek(conn);
   118dc:	4620      	mov	r0, r4
   118de:	f7fe fad9 	bl	fe94 <llcp_lr_peek>
				if (ctx_local->proc == ctx->proc ||
   118e2:	7a3b      	ldrb	r3, [r7, #8]
   118e4:	7a02      	ldrb	r2, [r0, #8]
   118e6:	429a      	cmp	r2, r3
   118e8:	d01f      	beq.n	1192a <rr_execute_fsm+0x13e>
   118ea:	2a08      	cmp	r2, #8
   118ec:	d01b      	beq.n	11926 <rr_execute_fsm+0x13a>
					conn->llcp_terminate.reason_final =
   118ee:	232a      	movs	r3, #42	; 0x2a
   118f0:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
   118f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			} else if (periph && incompat == INCOMPAT_RESOLVABLE) {
   118f6:	f1bc 0f01 	cmp.w	ip, #1
   118fa:	d1ec      	bne.n	118d6 <rr_execute_fsm+0xea>
				ctx_local = llcp_lr_peek(conn);
   118fc:	4620      	mov	r0, r4
   118fe:	f7fe fac9 	bl	fe94 <llcp_lr_peek>
				if (ctx_local) {
   11902:	b108      	cbz	r0, 11908 <rr_execute_fsm+0x11c>
					ctx_local->rx_opcode = PDU_DATA_LLCTRL_TYPE_UNUSED;
   11904:	22ff      	movs	r2, #255	; 0xff
   11906:	72c2      	strb	r2, [r0, #11]
				rr_act_run(conn);
   11908:	4620      	mov	r0, r4
   1190a:	f7ff fdf7 	bl	114fc <rr_act_run>
	conn->llcp.remote.state = state;
   1190e:	2303      	movs	r3, #3
   11910:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   11914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				conn->llcp.remote.reject_opcode = pdu->llctrl.opcode;
   11916:	7feb      	ldrb	r3, [r5, #31]
   11918:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
				rr_act_reject(conn);
   1191c:	4620      	mov	r0, r4
}
   1191e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				rr_act_reject(conn);
   11922:	f7ff be7f 	b.w	11624 <rr_act_reject>
				    (ctx_local->proc == PROC_CONN_UPDATE &&
   11926:	2b09      	cmp	r3, #9
   11928:	d1e1      	bne.n	118ee <rr_execute_fsm+0x102>
					conn->llcp_terminate.reason_final =
   1192a:	2323      	movs	r3, #35	; 0x23
   1192c:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
   11930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LL_ASSERT(0);
   11932:	4a08      	ldr	r2, [pc, #32]	; (11954 <rr_execute_fsm+0x168>)
   11934:	4908      	ldr	r1, [pc, #32]	; (11958 <rr_execute_fsm+0x16c>)
   11936:	4809      	ldr	r0, [pc, #36]	; (1195c <rr_execute_fsm+0x170>)
   11938:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   1193c:	f007 fe7f 	bl	1963e <assert_print>
   11940:	4040      	eors	r0, r0
   11942:	f380 8811 	msr	BASEPRI, r0
   11946:	f04f 0003 	mov.w	r0, #3
   1194a:	df02      	svc	2
}
   1194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1194e:	bf00      	nop
   11950:	0001f47f 	.word	0x0001f47f
   11954:	0001ebbc 	.word	0x0001ebbc
   11958:	0001e220 	.word	0x0001e220
   1195c:	0001e1a4 	.word	0x0001e1a4

00011960 <llcp_rr_rx>:
{
   11960:	b538      	push	{r3, r4, r5, lr}
   11962:	460c      	mov	r4, r1
	switch (ctx->proc) {
   11964:	7a09      	ldrb	r1, [r1, #8]
	ctx->node_ref.rx = rx;
   11966:	61e3      	str	r3, [r4, #28]
{
   11968:	4605      	mov	r5, r0
	ctx->node_ref.link = link;
   1196a:	6162      	str	r2, [r4, #20]
	switch (ctx->proc) {
   1196c:	290c      	cmp	r1, #12
   1196e:	d829      	bhi.n	119c4 <llcp_rr_rx+0x64>
   11970:	e8df f001 	tbb	[pc, r1]
   11974:	0707070b 	.word	0x0707070b
   11978:	1e191907 	.word	0x1e191907
   1197c:	23071414 	.word	0x23071414
   11980:	07          	.byte	0x07
   11981:	00          	.byte	0x00
		llcp_rp_comm_rx(conn, ctx, rx);
   11982:	461a      	mov	r2, r3
   11984:	4621      	mov	r1, r4
   11986:	f7fe f999 	bl	fcbc <llcp_rp_comm_rx>
	if (ctx->done) {
   1198a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1198c:	b12b      	cbz	r3, 1199a <llcp_rr_rx+0x3a>
   1198e:	4621      	mov	r1, r4
   11990:	4628      	mov	r0, r5
}
   11992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11996:	f7ff bd85 	b.w	114a4 <llcp_rr_check_done.part.0>
   1199a:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_cu_rx(conn, ctx, rx);
   1199c:	461a      	mov	r2, r3
   1199e:	4621      	mov	r1, r4
   119a0:	f7ff fcd0 	bl	11344 <llcp_rp_cu_rx>
		break;
   119a4:	e7f1      	b.n	1198a <llcp_rr_rx+0x2a>
		llcp_rp_enc_rx(conn, ctx, rx);
   119a6:	461a      	mov	r2, r3
   119a8:	4621      	mov	r1, r4
   119aa:	f7fc f95f 	bl	dc6c <llcp_rp_enc_rx>
		break;
   119ae:	e7ec      	b.n	1198a <llcp_rr_rx+0x2a>
		llcp_rp_pu_rx(conn, ctx, rx);
   119b0:	461a      	mov	r2, r3
   119b2:	4621      	mov	r1, r4
   119b4:	f7fc fef6 	bl	e7a4 <llcp_rp_pu_rx>
		break;
   119b8:	e7e7      	b.n	1198a <llcp_rr_rx+0x2a>
		llcp_rp_chmu_rx(conn, ctx, rx);
   119ba:	461a      	mov	r2, r3
   119bc:	4621      	mov	r1, r4
   119be:	f7ff fcf7 	bl	113b0 <llcp_rp_chmu_rx>
		break;
   119c2:	e7e2      	b.n	1198a <llcp_rr_rx+0x2a>
		LL_ASSERT(0);
   119c4:	4a06      	ldr	r2, [pc, #24]	; (119e0 <llcp_rr_rx+0x80>)
   119c6:	4907      	ldr	r1, [pc, #28]	; (119e4 <llcp_rr_rx+0x84>)
   119c8:	4807      	ldr	r0, [pc, #28]	; (119e8 <llcp_rr_rx+0x88>)
   119ca:	f240 1333 	movw	r3, #307	; 0x133
   119ce:	f007 fe36 	bl	1963e <assert_print>
   119d2:	4040      	eors	r0, r0
   119d4:	f380 8811 	msr	BASEPRI, r0
   119d8:	f04f 0003 	mov.w	r0, #3
   119dc:	df02      	svc	2
		break;
   119de:	e7d4      	b.n	1198a <llcp_rr_rx+0x2a>
   119e0:	0001ebbc 	.word	0x0001ebbc
   119e4:	0001e220 	.word	0x0001e220
   119e8:	0001e1a4 	.word	0x0001e1a4

000119ec <llcp_rr_tx_ack>:
{
   119ec:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   119ee:	7a0b      	ldrb	r3, [r1, #8]
   119f0:	2b07      	cmp	r3, #7
{
   119f2:	460c      	mov	r4, r1
   119f4:	4605      	mov	r5, r0
	switch (ctx->proc) {
   119f6:	d00e      	beq.n	11a16 <llcp_rr_tx_ack+0x2a>
   119f8:	2b0c      	cmp	r3, #12
   119fa:	d101      	bne.n	11a00 <llcp_rr_tx_ack+0x14>
		llcp_rp_comm_tx_ack(conn, ctx, tx);
   119fc:	f7fe f964 	bl	fcc8 <llcp_rp_comm_tx_ack>
	if (ctx->done) {
   11a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
	ctx->node_ref.tx_ack = NULL;
   11a02:	2200      	movs	r2, #0
   11a04:	61a2      	str	r2, [r4, #24]
	if (ctx->done) {
   11a06:	b12b      	cbz	r3, 11a14 <llcp_rr_tx_ack+0x28>
   11a08:	4621      	mov	r1, r4
   11a0a:	4628      	mov	r0, r5
}
   11a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a10:	f7ff bd48 	b.w	114a4 <llcp_rr_check_done.part.0>
   11a14:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ack(conn, ctx, tx);
   11a16:	f7fc feeb 	bl	e7f0 <llcp_rp_pu_tx_ack>
		break;
   11a1a:	e7f1      	b.n	11a00 <llcp_rr_tx_ack+0x14>

00011a1c <llcp_rr_tx_ntf>:
{
   11a1c:	b538      	push	{r3, r4, r5, lr}
	switch (ctx->proc) {
   11a1e:	7a0b      	ldrb	r3, [r1, #8]
   11a20:	2b07      	cmp	r3, #7
{
   11a22:	460c      	mov	r4, r1
   11a24:	4605      	mov	r5, r0
	switch (ctx->proc) {
   11a26:	d008      	beq.n	11a3a <llcp_rr_tx_ntf+0x1e>
	if (ctx->done) {
   11a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11a2a:	b12b      	cbz	r3, 11a38 <llcp_rr_tx_ntf+0x1c>
   11a2c:	4621      	mov	r1, r4
   11a2e:	4628      	mov	r0, r5
}
   11a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a34:	f7ff bd36 	b.w	114a4 <llcp_rr_check_done.part.0>
   11a38:	bd38      	pop	{r3, r4, r5, pc}
		llcp_rp_pu_tx_ntf(conn, ctx);
   11a3a:	f7fc fedd 	bl	e7f8 <llcp_rp_pu_tx_ntf>
		break;
   11a3e:	e7f3      	b.n	11a28 <llcp_rr_tx_ntf+0xc>

00011a40 <llcp_rr_init>:
	conn->llcp.remote.state = state;
   11a40:	2204      	movs	r2, #4

void llcp_rr_init(struct ll_conn *conn)
{
	rr_set_state(conn, RR_STATE_DISCONNECT);
	conn->llcp.remote.prt_expire = 0U;
   11a42:	2300      	movs	r3, #0
	conn->llcp.remote.state = state;
   11a44:	f880 2100 	strb.w	r2, [r0, #256]	; 0x100
	conn->llcp.remote.prt_expire = 0U;
   11a48:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
}
   11a4c:	4770      	bx	lr
   11a4e:	bf00      	nop

00011a50 <llcp_rr_run>:
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
}

void llcp_rr_run(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_RUN, NULL);
   11a50:	2200      	movs	r2, #0
   11a52:	2101      	movs	r1, #1
   11a54:	f7ff beca 	b.w	117ec <rr_execute_fsm>

00011a58 <llcp_rr_complete>:
}

void llcp_rr_complete(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_COMPLETE, NULL);
   11a58:	2200      	movs	r2, #0
   11a5a:	2102      	movs	r1, #2
   11a5c:	f7ff bec6 	b.w	117ec <rr_execute_fsm>

00011a60 <llcp_rr_connect>:
}

void llcp_rr_connect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_CONNECT, NULL);
   11a60:	2200      	movs	r2, #0
   11a62:	2103      	movs	r1, #3
   11a64:	f7ff bec2 	b.w	117ec <rr_execute_fsm>

00011a68 <llcp_rr_disconnect>:
}

void llcp_rr_disconnect(struct ll_conn *conn)
{
	rr_execute_fsm(conn, RR_EVT_DISCONNECT, NULL);
   11a68:	2200      	movs	r2, #0
   11a6a:	2104      	movs	r1, #4
   11a6c:	f7ff bebe 	b.w	117ec <rr_execute_fsm>

00011a70 <llcp_rr_new>:
	[PDU_DATA_LLCTRL_TYPE_CLOCK_ACCURACY_REQ] = { PROC_SCA_UPDATE, ACCEPT_ROLE_BOTH },
#endif /* CONFIG_BT_CTLR_SCA_UPDATE */
};

void llcp_rr_new(struct ll_conn *conn, memq_link_t *link, struct node_rx_pdu *rx, bool valid_pdu)
{
   11a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a72:	4604      	mov	r4, r0
   11a74:	b083      	sub	sp, #12
   11a76:	460e      	mov	r6, r1
   11a78:	4615      	mov	r5, r2
	uint8_t proc = PROC_UNKNOWN;

	pdu = (struct pdu_data *)rx->pdu;

	/* Is this a valid opcode */
	if (valid_pdu && pdu->llctrl.opcode < ARRAY_SIZE(new_proc_lut)) {
   11a7a:	b17b      	cbz	r3, 11a9c <llcp_rr_new+0x2c>
   11a7c:	7fd3      	ldrb	r3, [r2, #31]
   11a7e:	2b1b      	cmp	r3, #27
   11a80:	d831      	bhi.n	11ae6 <llcp_rr_new+0x76>
		/* Lookup procedure */
		uint8_t role_mask  = (1 << conn->lll.role);
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   11a82:	f8df c098 	ldr.w	ip, [pc, #152]	; 11b1c <llcp_rr_new+0xac>
		uint8_t role_mask  = (1 << conn->lll.role);
   11a86:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   11a8a:	eb0c 0743 	add.w	r7, ip, r3, lsl #1
		uint8_t role_mask  = (1 << conn->lll.role);
   11a8e:	09c9      	lsrs	r1, r1, #7

		if (pr.accept & role_mask) {
   11a90:	787f      	ldrb	r7, [r7, #1]
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   11a92:	b21a      	sxth	r2, r3
		uint8_t role_mask  = (1 << conn->lll.role);
   11a94:	2301      	movs	r3, #1
   11a96:	408b      	lsls	r3, r1
		if (pr.accept & role_mask) {
   11a98:	403b      	ands	r3, r7
   11a9a:	d12b      	bne.n	11af4 <llcp_rr_new+0x84>
	if (proc == PROC_TERMINATE) {
		llcp_rr_terminate(conn);
		llcp_lr_terminate(conn);
	}

	ctx = llcp_create_remote_procedure(proc);
   11a9c:	4618      	mov	r0, r3
   11a9e:	f7fd f89f 	bl	ebe0 <llcp_create_remote_procedure>
	if (!ctx) {
   11aa2:	4607      	mov	r7, r0
   11aa4:	b1e8      	cbz	r0, 11ae2 <llcp_rr_new+0x72>
	parent->next = child;
   11aa6:	2300      	movs	r3, #0
   11aa8:	6003      	str	r3, [r0, #0]
	return list->tail;
   11aaa:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   11aae:	b1e3      	cbz	r3, 11aea <llcp_rr_new+0x7a>
	parent->next = child;
   11ab0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   11ab2:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	rr_execute_fsm(conn, RR_EVT_PREPARE, rx);
   11ab6:	462a      	mov	r2, r5
   11ab8:	2100      	movs	r1, #0
   11aba:	4620      	mov	r0, r4
   11abc:	f7ff fe96 	bl	117ec <rr_execute_fsm>
	if (ctx->done) {
   11ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ac2:	b11b      	cbz	r3, 11acc <llcp_rr_new+0x5c>
   11ac4:	4639      	mov	r1, r7
   11ac6:	4620      	mov	r0, r4
   11ac8:	f7ff fcec 	bl	114a4 <llcp_rr_check_done.part.0>
	return list->head;
   11acc:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8

	llcp_rr_check_done(conn, ctx);

	/* Handle PDU */
	ctx = llcp_rr_peek(conn);
	if (ctx) {
   11ad0:	b139      	cbz	r1, 11ae2 <llcp_rr_new+0x72>
		llcp_rr_rx(conn, ctx, link, rx);
   11ad2:	462b      	mov	r3, r5
   11ad4:	4632      	mov	r2, r6
   11ad6:	4620      	mov	r0, r4
	}
}
   11ad8:	b003      	add	sp, #12
   11ada:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		llcp_rr_rx(conn, ctx, link, rx);
   11ade:	f7ff bf3f 	b.w	11960 <llcp_rr_rx>
}
   11ae2:	b003      	add	sp, #12
   11ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t proc = PROC_UNKNOWN;
   11ae6:	2300      	movs	r3, #0
   11ae8:	e7d8      	b.n	11a9c <llcp_rr_new+0x2c>
	list->head = node;
   11aea:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
   11aee:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
}
   11af2:	e7e0      	b.n	11ab6 <llcp_rr_new+0x46>
		struct proc_role pr = new_proc_lut[pdu->llctrl.opcode];
   11af4:	f81c 3012 	ldrb.w	r3, [ip, r2, lsl #1]
	if (proc == PROC_TERMINATE) {
   11af8:	2b0a      	cmp	r3, #10
   11afa:	d1cf      	bne.n	11a9c <llcp_rr_new+0x2c>
   11afc:	9301      	str	r3, [sp, #4]

void llcp_rr_terminate(struct ll_conn *conn)
{
	llcp_rr_flush_procedures(conn);
   11afe:	f7ff fe21 	bl	11744 <llcp_rr_flush_procedures>
	conn->llcp.remote.prt_expire = 0U;
   11b02:	2200      	movs	r2, #0
   11b04:	f8a4 2102 	strh.w	r2, [r4, #258]	; 0x102
	conn->llcp.remote.collision = collision;
   11b08:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
	conn->llcp.remote.state = state;
   11b0c:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		llcp_lr_terminate(conn);
   11b10:	4620      	mov	r0, r4
   11b12:	f7fe fb8d 	bl	10230 <llcp_lr_terminate>
   11b16:	9b01      	ldr	r3, [sp, #4]
   11b18:	e7c0      	b.n	11a9c <llcp_rr_new+0x2c>
   11b1a:	bf00      	nop
   11b1c:	0001ec04 	.word	0x0001ec04

00011b20 <llcp_rr_terminate>:
{
   11b20:	b510      	push	{r4, lr}
   11b22:	4604      	mov	r4, r0
	llcp_rr_flush_procedures(conn);
   11b24:	f7ff fe0e 	bl	11744 <llcp_rr_flush_procedures>
	conn->llcp.remote.prt_expire = 0U;
   11b28:	2300      	movs	r3, #0
   11b2a:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
	conn->llcp.remote.collision = collision;
   11b2e:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
	conn->llcp.remote.state = state;
   11b32:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	llcp_rr_prt_stop(conn);
	rr_set_collision(conn, 0U);
	rr_set_state(conn, RR_STATE_IDLE);
}
   11b36:	bd10      	pop	{r4, pc}

00011b38 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   11b38:	b510      	push	{r4, lr}
   11b3a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11b3c:	b930      	cbnz	r0, 11b4c <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   11b3e:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   11b42:	f36f 0300 	bfc	r3, #0, #1
   11b46:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   11b4a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11b4c:	4a09      	ldr	r2, [pc, #36]	; (11b74 <ticker_update_latency_cancel_op_cb+0x3c>)
   11b4e:	490a      	ldr	r1, [pc, #40]	; (11b78 <ticker_update_latency_cancel_op_cb+0x40>)
   11b50:	480a      	ldr	r0, [pc, #40]	; (11b7c <ticker_update_latency_cancel_op_cb+0x44>)
   11b52:	f240 2385 	movw	r3, #645	; 0x285
   11b56:	f007 fd72 	bl	1963e <assert_print>
   11b5a:	4040      	eors	r0, r0
   11b5c:	f380 8811 	msr	BASEPRI, r0
   11b60:	f04f 0003 	mov.w	r0, #3
   11b64:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   11b66:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   11b6a:	f36f 0300 	bfc	r3, #0, #1
   11b6e:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   11b72:	bd10      	pop	{r4, pc}
   11b74:	0001ec3c 	.word	0x0001ec3c
   11b78:	0001ec84 	.word	0x0001ec84
   11b7c:	0001e1a4 	.word	0x0001e1a4

00011b80 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11b80:	b900      	cbnz	r0, 11b84 <ticker_op_cb+0x4>
   11b82:	4770      	bx	lr
{
   11b84:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11b86:	4a07      	ldr	r2, [pc, #28]	; (11ba4 <ticker_op_cb+0x24>)
   11b88:	4907      	ldr	r1, [pc, #28]	; (11ba8 <ticker_op_cb+0x28>)
   11b8a:	4808      	ldr	r0, [pc, #32]	; (11bac <ticker_op_cb+0x2c>)
   11b8c:	f240 237d 	movw	r3, #637	; 0x27d
   11b90:	f007 fd55 	bl	1963e <assert_print>
   11b94:	4040      	eors	r0, r0
   11b96:	f380 8811 	msr	BASEPRI, r0
   11b9a:	f04f 0003 	mov.w	r0, #3
   11b9e:	df02      	svc	2
}
   11ba0:	bd08      	pop	{r3, pc}
   11ba2:	bf00      	nop
   11ba4:	0001ec3c 	.word	0x0001ec3c
   11ba8:	0001e6d0 	.word	0x0001e6d0
   11bac:	0001e1a4 	.word	0x0001e1a4

00011bb0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   11bb0:	2801      	cmp	r0, #1
   11bb2:	d000      	beq.n	11bb6 <ticker_op_stop_adv_cb+0x6>
   11bb4:	4770      	bx	lr
{
   11bb6:	b510      	push	{r4, lr}
   11bb8:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   11bba:	f7f8 fa03 	bl	9fc4 <ull_disable_mark_get>
   11bbe:	4284      	cmp	r4, r0
   11bc0:	d00c      	beq.n	11bdc <ticker_op_stop_adv_cb+0x2c>
   11bc2:	4a07      	ldr	r2, [pc, #28]	; (11be0 <ticker_op_stop_adv_cb+0x30>)
   11bc4:	4907      	ldr	r1, [pc, #28]	; (11be4 <ticker_op_stop_adv_cb+0x34>)
   11bc6:	4808      	ldr	r0, [pc, #32]	; (11be8 <ticker_op_stop_adv_cb+0x38>)
   11bc8:	f240 2375 	movw	r3, #629	; 0x275
   11bcc:	f007 fd37 	bl	1963e <assert_print>
   11bd0:	4040      	eors	r0, r0
   11bd2:	f380 8811 	msr	BASEPRI, r0
   11bd6:	f04f 0003 	mov.w	r0, #3
   11bda:	df02      	svc	2
}
   11bdc:	bd10      	pop	{r4, pc}
   11bde:	bf00      	nop
   11be0:	0001ec3c 	.word	0x0001ec3c
   11be4:	0001ec98 	.word	0x0001ec98
   11be8:	0001e1a4 	.word	0x0001e1a4

00011bec <ull_periph_ticker_cb>:
{
   11bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bf0:	9c07      	ldr	r4, [sp, #28]
   11bf2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   11bf6:	4605      	mov	r5, r0
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   11bf8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   11bfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11bfe:	4288      	cmp	r0, r1
   11c00:	d025      	beq.n	11c4e <ull_periph_ticker_cb+0x62>
		ret = ull_conn_llcp(conn, ticks_at_expire, remainder, lazy);
   11c02:	4629      	mov	r1, r5
   11c04:	4620      	mov	r0, r4
   11c06:	4617      	mov	r7, r2
   11c08:	461e      	mov	r6, r3
   11c0a:	f7fb f9f3 	bl	cff4 <ull_conn_llcp>
		if (ret) {
   11c0e:	b9f0      	cbnz	r0, 11c4e <ull_periph_ticker_cb+0x62>
	return ++hdr->ref;
   11c10:	7821      	ldrb	r1, [r4, #0]
   11c12:	3101      	adds	r1, #1
   11c14:	b2c9      	uxtb	r1, r1
   11c16:	7021      	strb	r1, [r4, #0]
	LL_ASSERT(ref);
   11c18:	b349      	cbz	r1, 11c6e <ull_periph_ticker_cb+0x82>
	p.ticks_at_expire = ticks_at_expire;
   11c1a:	491c      	ldr	r1, [pc, #112]	; (11c8c <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   11c1c:	4b1c      	ldr	r3, [pc, #112]	; (11c90 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   11c1e:	810e      	strh	r6, [r1, #8]
	p.param = &conn->lll;
   11c20:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11c24:	2200      	movs	r2, #0
	p.param = &conn->lll;
   11c26:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   11c28:	e9c1 5700 	strd	r5, r7, [r1]
	p.force = force;
   11c2c:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   11c30:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11c32:	2001      	movs	r0, #1
   11c34:	4611      	mov	r1, r2
   11c36:	f7f6 f8d3 	bl	7de0 <mayfly_enqueue>
	LL_ASSERT(!err);
   11c3a:	b950      	cbnz	r0, 11c52 <ull_periph_ticker_cb+0x66>
	ull_conn_tx_demux(UINT8_MAX);
   11c3c:	20ff      	movs	r0, #255	; 0xff
   11c3e:	f7fb fa0b 	bl	d058 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   11c42:	4620      	mov	r0, r4
   11c44:	21ff      	movs	r1, #255	; 0xff
}
   11c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   11c4a:	f7fb bad5 	b.w	d1f8 <ull_conn_tx_lll_enqueue>
}
   11c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   11c52:	4a10      	ldr	r2, [pc, #64]	; (11c94 <ull_periph_ticker_cb+0xa8>)
   11c54:	4910      	ldr	r1, [pc, #64]	; (11c98 <ull_periph_ticker_cb+0xac>)
   11c56:	4811      	ldr	r0, [pc, #68]	; (11c9c <ull_periph_ticker_cb+0xb0>)
   11c58:	f240 232f 	movw	r3, #559	; 0x22f
   11c5c:	f007 fcef 	bl	1963e <assert_print>
   11c60:	4040      	eors	r0, r0
   11c62:	f380 8811 	msr	BASEPRI, r0
   11c66:	f04f 0003 	mov.w	r0, #3
   11c6a:	df02      	svc	2
   11c6c:	e7e6      	b.n	11c3c <ull_periph_ticker_cb+0x50>
	LL_ASSERT(ref);
   11c6e:	4a09      	ldr	r2, [pc, #36]	; (11c94 <ull_periph_ticker_cb+0xa8>)
   11c70:	490b      	ldr	r1, [pc, #44]	; (11ca0 <ull_periph_ticker_cb+0xb4>)
   11c72:	480a      	ldr	r0, [pc, #40]	; (11c9c <ull_periph_ticker_cb+0xb0>)
   11c74:	f240 2322 	movw	r3, #546	; 0x222
   11c78:	f007 fce1 	bl	1963e <assert_print>
   11c7c:	4040      	eors	r0, r0
   11c7e:	f380 8811 	msr	BASEPRI, r0
   11c82:	f04f 0003 	mov.w	r0, #3
   11c86:	df02      	svc	2
   11c88:	e7c7      	b.n	11c1a <ull_periph_ticker_cb+0x2e>
   11c8a:	bf00      	nop
   11c8c:	20001fbc 	.word	0x20001fbc
   11c90:	20000610 	.word	0x20000610
   11c94:	0001ec3c 	.word	0x0001ec3c
   11c98:	0001e200 	.word	0x0001e200
   11c9c:	0001e1a4 	.word	0x0001e1a4
   11ca0:	0001e5fc 	.word	0x0001e5fc

00011ca4 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   11ca4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   11ca6:	b123      	cbz	r3, 11cb2 <ull_periph_latency_cancel+0xe>
   11ca8:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   11cac:	f012 0301 	ands.w	r3, r2, #1
   11cb0:	d000      	beq.n	11cb4 <ull_periph_latency_cancel+0x10>
   11cb2:	4770      	bx	lr
{
   11cb4:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   11cb6:	f042 0201 	orr.w	r2, r2, #1
{
   11cba:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   11cbc:	4c11      	ldr	r4, [pc, #68]	; (11d04 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   11cbe:	f880 2174 	strb.w	r2, [r0, #372]	; 0x174
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   11cc2:	3103      	adds	r1, #3
   11cc4:	2201      	movs	r2, #1
   11cc6:	e9cd 3202 	strd	r3, r2, [sp, #8]
   11cca:	9006      	str	r0, [sp, #24]
   11ccc:	b2ca      	uxtb	r2, r1
   11cce:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11cd2:	e9cd 3300 	strd	r3, r3, [sp]
   11cd6:	2103      	movs	r1, #3
   11cd8:	4618      	mov	r0, r3
   11cda:	f7f7 fad1 	bl	9280 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11cde:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   11ce2:	d00c      	beq.n	11cfe <ull_periph_latency_cancel+0x5a>
   11ce4:	4a08      	ldr	r2, [pc, #32]	; (11d08 <ull_periph_latency_cancel+0x64>)
   11ce6:	4909      	ldr	r1, [pc, #36]	; (11d0c <ull_periph_latency_cancel+0x68>)
   11ce8:	4809      	ldr	r0, [pc, #36]	; (11d10 <ull_periph_latency_cancel+0x6c>)
   11cea:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   11cee:	f007 fca6 	bl	1963e <assert_print>
   11cf2:	4040      	eors	r0, r0
   11cf4:	f380 8811 	msr	BASEPRI, r0
   11cf8:	f04f 0003 	mov.w	r0, #3
   11cfc:	df02      	svc	2
}
   11cfe:	b008      	add	sp, #32
   11d00:	bd10      	pop	{r4, pc}
   11d02:	bf00      	nop
   11d04:	00011b39 	.word	0x00011b39
   11d08:	0001ec3c 	.word	0x0001ec3c
   11d0c:	0001e73c 	.word	0x0001e73c
   11d10:	0001e1a4 	.word	0x0001e1a4

00011d14 <ll_start_enc_req_send>:
{
   11d14:	b538      	push	{r3, r4, r5, lr}
   11d16:	460c      	mov	r4, r1
   11d18:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   11d1a:	f7fa fe89 	bl	ca30 <ll_connected_get>
	if (!conn) {
   11d1e:	b148      	cbz	r0, 11d34 <ll_start_enc_req_send+0x20>
	if (error_code) {
   11d20:	b11c      	cbz	r4, 11d2a <ll_start_enc_req_send+0x16>
}
   11d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_neq_reply(conn);
   11d26:	f7fd b941 	b.w	efac <ull_cp_ltk_req_neq_reply>
		return ull_cp_ltk_req_reply(conn, ltk);
   11d2a:	4629      	mov	r1, r5
}
   11d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return ull_cp_ltk_req_reply(conn, ltk);
   11d30:	f7fd b91c 	b.w	ef6c <ull_cp_ltk_req_reply>
}
   11d34:	2002      	movs	r0, #2
   11d36:	bd38      	pop	{r3, r4, r5, pc}

00011d38 <ll_set_min_used_chans>:

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
uint8_t ll_set_min_used_chans(uint16_t handle, uint8_t const phys,
			      uint8_t const min_used_chans)
{
   11d38:	b538      	push	{r3, r4, r5, lr}
   11d3a:	460c      	mov	r4, r1
   11d3c:	4615      	mov	r5, r2
	struct ll_conn *conn;

	conn = ll_connected_get(handle);
   11d3e:	f7fa fe77 	bl	ca30 <ll_connected_get>
	if (!conn) {
   11d42:	b158      	cbz	r0, 11d5c <ll_set_min_used_chans+0x24>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	if (!conn->lll.role) {
   11d44:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   11d48:	2b00      	cmp	r3, #0
   11d4a:	da05      	bge.n	11d58 <ll_set_min_used_chans+0x20>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   11d4c:	462a      	mov	r2, r5
   11d4e:	4621      	mov	r1, r4
}
   11d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ull_cp_min_used_chans(conn, phys, min_used_chans);
   11d54:	f7fd b85a 	b.w	ee0c <ull_cp_min_used_chans>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11d58:	200c      	movs	r0, #12
}
   11d5a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11d5c:	2002      	movs	r0, #2
}
   11d5e:	bd38      	pop	{r3, r4, r5, pc}

00011d60 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   11d60:	b530      	push	{r4, r5, lr}
   11d62:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11d64:	7800      	ldrb	r0, [r0, #0]
{
   11d66:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11d6a:	fb02 1101 	mla	r1, r2, r1, r1
   11d6e:	4a1f      	ldr	r2, [pc, #124]	; (11dec <lll_chan_sel_1+0x8c>)
   11d70:	4401      	add	r1, r0
   11d72:	fb82 0201 	smull	r0, r2, r2, r1
   11d76:	440a      	add	r2, r1
   11d78:	1152      	asrs	r2, r2, #5
   11d7a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   11d7e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   11d82:	1a8a      	subs	r2, r1, r2
   11d84:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   11d86:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   11d88:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   11d8a:	5c59      	ldrb	r1, [r3, r1]
   11d8c:	f002 0207 	and.w	r2, r2, #7
   11d90:	fa41 f202 	asr.w	r2, r1, r2
   11d94:	f012 0201 	ands.w	r2, r2, #1
   11d98:	d11f      	bne.n	11dda <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   11d9a:	fbb0 f4f5 	udiv	r4, r0, r5
   11d9e:	fb05 0414 	mls	r4, r5, r4, r0
   11da2:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   11da4:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   11da6:	4610      	mov	r0, r2
   11da8:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   11daa:	f100 0e08 	add.w	lr, r0, #8
   11dae:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   11db2:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   11db6:	4602      	mov	r2, r0
			if (bite & 0x01) {
   11db8:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   11dbc:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   11dc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   11dc4:	d002      	beq.n	11dcc <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   11dc6:	b14c      	cbz	r4, 11ddc <lll_chan_sel_1+0x7c>
				chan_index--;
   11dc8:	3c01      	subs	r4, #1
   11dca:	b2e4      	uxtb	r4, r4
			chan_next++;
   11dcc:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   11dd0:	4572      	cmp	r2, lr
   11dd2:	d1f1      	bne.n	11db8 <lll_chan_sel_1+0x58>
			chan_next++;
   11dd4:	4610      	mov	r0, r2
	while (byte_count--) {
   11dd6:	429d      	cmp	r5, r3
   11dd8:	d1e7      	bne.n	11daa <lll_chan_sel_1+0x4a>
}
   11dda:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   11ddc:	1dc1      	adds	r1, r0, #7
   11dde:	1a89      	subs	r1, r1, r2
   11de0:	b2c9      	uxtb	r1, r1
   11de2:	2907      	cmp	r1, #7
   11de4:	4610      	mov	r0, r2
   11de6:	d8f6      	bhi.n	11dd6 <lll_chan_sel_1+0x76>
}
   11de8:	bd30      	pop	{r4, r5, pc}
   11dea:	bf00      	nop
   11dec:	dd67c8a7 	.word	0xdd67c8a7

00011df0 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   11df0:	8842      	ldrh	r2, [r0, #2]
   11df2:	8800      	ldrh	r0, [r0, #0]
}
   11df4:	4050      	eors	r0, r2
   11df6:	4770      	bx	lr

00011df8 <lll_chan_sel_2>:
{
   11df8:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   11dfa:	4d34      	ldr	r5, [pc, #208]	; (11ecc <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11dfc:	4c34      	ldr	r4, [pc, #208]	; (11ed0 <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   11dfe:	4048      	eors	r0, r1
   11e00:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   11e04:	0a06      	lsrs	r6, r0, #8
   11e06:	fa5f fe80 	uxtb.w	lr, r0
   11e0a:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   11e0e:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11e12:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   11e16:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   11e1a:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11e1e:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   11e22:	433e      	orrs	r6, r7
   11e24:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   11e28:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   11e2c:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   11e30:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   11e34:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   11e38:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11e3a:	f3c0 4007 	ubfx	r0, r0, #16, #8
   11e3e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   11e42:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   11e46:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   11e4a:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   11e4c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   11e50:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   11e52:	d1d7      	bne.n	11e04 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   11e54:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   11e56:	481f      	ldr	r0, [pc, #124]	; (11ed4 <lll_chan_sel_2+0xdc>)
   11e58:	fba0 4001 	umull	r4, r0, r0, r1
   11e5c:	1a0c      	subs	r4, r1, r0
   11e5e:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   11e62:	0940      	lsrs	r0, r0, #5
   11e64:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   11e68:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   11e6c:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   11e6e:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   11e72:	f000 0507 	and.w	r5, r0, #7
   11e76:	5d14      	ldrb	r4, [r2, r4]
   11e78:	412c      	asrs	r4, r5
   11e7a:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   11e7c:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   11e7e:	d41c      	bmi.n	11eba <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   11e80:	fb01 f303 	mul.w	r3, r1, r3
   11e84:	1e56      	subs	r6, r2, #1
   11e86:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   11e8a:	3204      	adds	r2, #4
	chan_next = 0U;
   11e8c:	4660      	mov	r0, ip
		bite = *chan_map;
   11e8e:	f100 0508 	add.w	r5, r0, #8
   11e92:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   11e96:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   11e98:	4601      	mov	r1, r0
			if (bite & 0x01) {
   11e9a:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   11e9e:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   11ea2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   11ea6:	d002      	beq.n	11eae <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   11ea8:	b143      	cbz	r3, 11ebc <lll_chan_sel_2+0xc4>
				chan_index--;
   11eaa:	3b01      	subs	r3, #1
   11eac:	b2db      	uxtb	r3, r3
			chan_next++;
   11eae:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   11eb0:	42a9      	cmp	r1, r5
   11eb2:	d1f2      	bne.n	11e9a <lll_chan_sel_2+0xa2>
			chan_next++;
   11eb4:	4608      	mov	r0, r1
	while (byte_count--) {
   11eb6:	4296      	cmp	r6, r2
   11eb8:	d1e9      	bne.n	11e8e <lll_chan_sel_2+0x96>
}
   11eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   11ebc:	3007      	adds	r0, #7
   11ebe:	1a40      	subs	r0, r0, r1
   11ec0:	b2c0      	uxtb	r0, r0
   11ec2:	2807      	cmp	r0, #7
   11ec4:	4608      	mov	r0, r1
   11ec6:	d8f6      	bhi.n	11eb6 <lll_chan_sel_2+0xbe>
}
   11ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11eca:	bf00      	nop
   11ecc:	00022110 	.word	0x00022110
   11ed0:	00088440 	.word	0x00088440
   11ed4:	bacf914d 	.word	0xbacf914d

00011ed8 <bt_rand>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_ctlr_crypto);

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   11ed8:	f000 ba90 	b.w	123fc <lll_csrand_get>

00011edc <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11edc:	4668      	mov	r0, sp
   11ede:	f020 0107 	bic.w	r1, r0, #7
   11ee2:	468d      	mov	sp, r1
   11ee4:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   11ee6:	f001 ff01 	bl	13cec <isr_radio>

	ISR_DIRECT_PM();
   11eea:	f7f1 fd29 	bl	3940 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   11eee:	f7f1 fe19 	bl	3b24 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11ef2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   11ef6:	4685      	mov	sp, r0
   11ef8:	4770      	bx	lr
   11efa:	bf00      	nop

00011efc <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   11efc:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   11efe:	4b09      	ldr	r3, [pc, #36]	; (11f24 <rtc0_nrf5_isr+0x28>)
   11f00:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   11f04:	b93a      	cbnz	r2, 11f16 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   11f06:	2001      	movs	r0, #1
   11f08:	f7f5 ffc8 	bl	7e9c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   11f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   11f10:	2002      	movs	r0, #2
   11f12:	f7f5 bfc3 	b.w	7e9c <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11f16:	2000      	movs	r0, #0
   11f18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   11f1c:	f7f7 f91e 	bl	915c <ticker_trigger>
   11f20:	e7f1      	b.n	11f06 <rtc0_nrf5_isr+0xa>
   11f22:	bf00      	nop
   11f24:	4000b000 	.word	0x4000b000

00011f28 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   11f28:	2000      	movs	r0, #0
   11f2a:	f7f5 bfb7 	b.w	7e9c <mayfly_run>
   11f2e:	bf00      	nop

00011f30 <ticker_start_op_cb>:

	preempt_req = preempt_ack;
}

static void ticker_start_op_cb(uint32_t status, void *param)
{
   11f30:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11f32:	b9f8      	cbnz	r0, 11f74 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   11f34:	4b1e      	ldr	r3, [pc, #120]	; (11fb0 <ticker_start_op_cb+0x80>)
   11f36:	4d1f      	ldr	r5, [pc, #124]	; (11fb4 <ticker_start_op_cb+0x84>)
   11f38:	781a      	ldrb	r2, [r3, #0]
   11f3a:	782b      	ldrb	r3, [r5, #0]
   11f3c:	429a      	cmp	r2, r3
   11f3e:	d027      	beq.n	11f90 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   11f40:	4a1d      	ldr	r2, [pc, #116]	; (11fb8 <ticker_start_op_cb+0x88>)
   11f42:	4c1e      	ldr	r4, [pc, #120]	; (11fbc <ticker_start_op_cb+0x8c>)
   11f44:	7812      	ldrb	r2, [r2, #0]
   11f46:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   11f48:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   11f4a:	4291      	cmp	r1, r2
	preempt_start_ack++;
   11f4c:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   11f4e:	b2d3      	uxtb	r3, r2
   11f50:	d00d      	beq.n	11f6e <ticker_start_op_cb+0x3e>
   11f52:	4a1b      	ldr	r2, [pc, #108]	; (11fc0 <ticker_start_op_cb+0x90>)
   11f54:	491b      	ldr	r1, [pc, #108]	; (11fc4 <ticker_start_op_cb+0x94>)
   11f56:	481c      	ldr	r0, [pc, #112]	; (11fc8 <ticker_start_op_cb+0x98>)
   11f58:	f240 3347 	movw	r3, #839	; 0x347
   11f5c:	f007 fb6f 	bl	1963e <assert_print>
   11f60:	4040      	eors	r0, r0
   11f62:	f380 8811 	msr	BASEPRI, r0
   11f66:	f04f 0003 	mov.w	r0, #3
   11f6a:	df02      	svc	2
	preempt_req++;
   11f6c:	7823      	ldrb	r3, [r4, #0]
   11f6e:	3301      	adds	r3, #1
   11f70:	7023      	strb	r3, [r4, #0]
}
   11f72:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11f74:	4a12      	ldr	r2, [pc, #72]	; (11fc0 <ticker_start_op_cb+0x90>)
   11f76:	4915      	ldr	r1, [pc, #84]	; (11fcc <ticker_start_op_cb+0x9c>)
   11f78:	4813      	ldr	r0, [pc, #76]	; (11fc8 <ticker_start_op_cb+0x98>)
   11f7a:	f240 3342 	movw	r3, #834	; 0x342
   11f7e:	f007 fb5e 	bl	1963e <assert_print>
   11f82:	4040      	eors	r0, r0
   11f84:	f380 8811 	msr	BASEPRI, r0
   11f88:	f04f 0003 	mov.w	r0, #3
   11f8c:	df02      	svc	2
   11f8e:	e7d1      	b.n	11f34 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   11f90:	4a0b      	ldr	r2, [pc, #44]	; (11fc0 <ticker_start_op_cb+0x90>)
   11f92:	490f      	ldr	r1, [pc, #60]	; (11fd0 <ticker_start_op_cb+0xa0>)
   11f94:	480c      	ldr	r0, [pc, #48]	; (11fc8 <ticker_start_op_cb+0x98>)
   11f96:	f44f 7351 	mov.w	r3, #836	; 0x344
   11f9a:	f007 fb50 	bl	1963e <assert_print>
   11f9e:	4040      	eors	r0, r0
   11fa0:	f380 8811 	msr	BASEPRI, r0
   11fa4:	f04f 0003 	mov.w	r0, #3
   11fa8:	df02      	svc	2
	preempt_start_ack++;
   11faa:	782b      	ldrb	r3, [r5, #0]
   11fac:	e7c8      	b.n	11f40 <ticker_start_op_cb+0x10>
   11fae:	bf00      	nop
   11fb0:	2000271d 	.word	0x2000271d
   11fb4:	2000271c 	.word	0x2000271c
   11fb8:	20002718 	.word	0x20002718
   11fbc:	20002719 	.word	0x20002719
   11fc0:	0001ecd8 	.word	0x0001ecd8
   11fc4:	0001ed48 	.word	0x0001ed48
   11fc8:	0001e1a4 	.word	0x0001e1a4
   11fcc:	0001e6d0 	.word	0x0001e6d0
   11fd0:	0001ed20 	.word	0x0001ed20

00011fd4 <ticker_stop_op_cb>:
{
   11fd4:	b510      	push	{r4, lr}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   11fd6:	4b0e      	ldr	r3, [pc, #56]	; (12010 <ticker_stop_op_cb+0x3c>)
   11fd8:	4c0e      	ldr	r4, [pc, #56]	; (12014 <ticker_stop_op_cb+0x40>)
   11fda:	781a      	ldrb	r2, [r3, #0]
   11fdc:	7823      	ldrb	r3, [r4, #0]
   11fde:	429a      	cmp	r2, r3
   11fe0:	d006      	beq.n	11ff0 <ticker_stop_op_cb+0x1c>
	preempt_req = preempt_ack;
   11fe2:	490d      	ldr	r1, [pc, #52]	; (12018 <ticker_stop_op_cb+0x44>)
   11fe4:	4a0d      	ldr	r2, [pc, #52]	; (1201c <ticker_stop_op_cb+0x48>)
   11fe6:	7809      	ldrb	r1, [r1, #0]
   11fe8:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   11fea:	3301      	adds	r3, #1
   11fec:	7023      	strb	r3, [r4, #0]
}
   11fee:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   11ff0:	4a0b      	ldr	r2, [pc, #44]	; (12020 <ticker_stop_op_cb+0x4c>)
   11ff2:	490c      	ldr	r1, [pc, #48]	; (12024 <ticker_stop_op_cb+0x50>)
   11ff4:	480c      	ldr	r0, [pc, #48]	; (12028 <ticker_stop_op_cb+0x54>)
   11ff6:	f240 3339 	movw	r3, #825	; 0x339
   11ffa:	f007 fb20 	bl	1963e <assert_print>
   11ffe:	4040      	eors	r0, r0
   12000:	f380 8811 	msr	BASEPRI, r0
   12004:	f04f 0003 	mov.w	r0, #3
   12008:	df02      	svc	2
	preempt_stop_ack++;
   1200a:	7823      	ldrb	r3, [r4, #0]
   1200c:	e7e9      	b.n	11fe2 <ticker_stop_op_cb+0xe>
   1200e:	bf00      	nop
   12010:	2000271b 	.word	0x2000271b
   12014:	2000271a 	.word	0x2000271a
   12018:	20002718 	.word	0x20002718
   1201c:	20002719 	.word	0x20002719
   12020:	0001ecd8 	.word	0x0001ecd8
   12024:	0001ed64 	.word	0x0001ed64
   12028:	0001e1a4 	.word	0x0001e1a4

0001202c <isr_race>:
	radio_status_reset();
   1202c:	f001 bf98 	b.w	13f60 <radio_status_reset>

00012030 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   12030:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   12032:	4a18      	ldr	r2, [pc, #96]	; (12094 <preempt_ticker_cb+0x64>)
   12034:	4c18      	ldr	r4, [pc, #96]	; (12098 <preempt_ticker_cb+0x68>)
   12036:	7812      	ldrb	r2, [r2, #0]
   12038:	7823      	ldrb	r3, [r4, #0]
   1203a:	429a      	cmp	r2, r3
   1203c:	d01b      	beq.n	12076 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1203e:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   12040:	4b16      	ldr	r3, [pc, #88]	; (1209c <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   12042:	3101      	adds	r1, #1
   12044:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12046:	2200      	movs	r2, #0
	preempt_ack++;
   12048:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1204a:	9903      	ldr	r1, [sp, #12]
   1204c:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1204e:	2001      	movs	r0, #1
   12050:	4611      	mov	r1, r2
   12052:	f7f5 fec5 	bl	7de0 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   12056:	b900      	cbnz	r0, 1205a <preempt_ticker_cb+0x2a>
}
   12058:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1205a:	4a11      	ldr	r2, [pc, #68]	; (120a0 <preempt_ticker_cb+0x70>)
   1205c:	4911      	ldr	r1, [pc, #68]	; (120a4 <preempt_ticker_cb+0x74>)
   1205e:	4812      	ldr	r0, [pc, #72]	; (120a8 <preempt_ticker_cb+0x78>)
   12060:	f240 33c5 	movw	r3, #965	; 0x3c5
   12064:	f007 faeb 	bl	1963e <assert_print>
   12068:	4040      	eors	r0, r0
   1206a:	f380 8811 	msr	BASEPRI, r0
   1206e:	f04f 0003 	mov.w	r0, #3
   12072:	df02      	svc	2
}
   12074:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   12076:	4a0a      	ldr	r2, [pc, #40]	; (120a0 <preempt_ticker_cb+0x70>)
   12078:	490c      	ldr	r1, [pc, #48]	; (120ac <preempt_ticker_cb+0x7c>)
   1207a:	480b      	ldr	r0, [pc, #44]	; (120a8 <preempt_ticker_cb+0x78>)
   1207c:	f240 33bf 	movw	r3, #959	; 0x3bf
   12080:	f007 fadd 	bl	1963e <assert_print>
   12084:	4040      	eors	r0, r0
   12086:	f380 8811 	msr	BASEPRI, r0
   1208a:	f04f 0003 	mov.w	r0, #3
   1208e:	df02      	svc	2
   12090:	e7d5      	b.n	1203e <preempt_ticker_cb+0xe>
   12092:	bf00      	nop
   12094:	20002719 	.word	0x20002719
   12098:	20002718 	.word	0x20002718
   1209c:	20000620 	.word	0x20000620
   120a0:	0001ecd8 	.word	0x0001ecd8
   120a4:	0001e304 	.word	0x0001e304
   120a8:	0001e1a4 	.word	0x0001e1a4
   120ac:	0001ed8c 	.word	0x0001ed8c

000120b0 <preempt_ticker_start>:
{
   120b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
   120b4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 121fc <preempt_ticker_start+0x14c>
{
   120b8:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
   120ba:	4a51      	ldr	r2, [pc, #324]	; (12200 <preempt_ticker_start+0x150>)
   120bc:	f898 3000 	ldrb.w	r3, [r8]
   120c0:	7812      	ldrb	r2, [r2, #0]
   120c2:	429a      	cmp	r2, r3
{
   120c4:	b08a      	sub	sp, #40	; 0x28
   120c6:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   120c8:	d04b      	beq.n	12162 <preempt_ticker_start+0xb2>
		if (!prev || prev->is_aborted ||
   120ca:	2c00      	cmp	r4, #0
   120cc:	d063      	beq.n	12196 <preempt_ticker_start+0xe6>
   120ce:	7f22      	ldrb	r2, [r4, #28]
   120d0:	f012 0202 	ands.w	r2, r2, #2
   120d4:	d15f      	bne.n	12196 <preempt_ticker_start+0xe6>
		ull = HDR_LLL2ULL(p->param);
   120d6:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
   120d8:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
   120dc:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   120de:	f8df 9124 	ldr.w	r9, [pc, #292]	; 12204 <preempt_ticker_start+0x154>
		preempt_to = MAX(ull->ticks_active_to_start,
   120e2:	68df      	ldr	r7, [r3, #12]
   120e4:	e9d3 1001 	ldrd	r1, r0, [r3, #4]
   120e8:	4288      	cmp	r0, r1
   120ea:	bf2c      	ite	cs
   120ec:	ebc7 0700 	rsbcs	r7, r7, r0
   120f0:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   120f4:	eb0a 0607 	add.w	r6, sl, r7
		diff = ticks_at_preempt_new - ticks_at_preempt;
   120f8:	f8d9 0000 	ldr.w	r0, [r9]
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   120fc:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
   12100:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
   12102:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   12106:	d047      	beq.n	12198 <preempt_ticker_start+0xe8>
	if ((preempt_stop_req != preempt_stop_ack) ||
   12108:	493f      	ldr	r1, [pc, #252]	; (12208 <preempt_ticker_start+0x158>)
   1210a:	4b40      	ldr	r3, [pc, #256]	; (1220c <preempt_ticker_start+0x15c>)
   1210c:	7808      	ldrb	r0, [r1, #0]
   1210e:	7819      	ldrb	r1, [r3, #0]
   12110:	4288      	cmp	r0, r1
   12112:	d044      	beq.n	1219e <preempt_ticker_start+0xee>
		prev->is_aborted = 1U;
   12114:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   12116:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   12118:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
   1211c:	f043 0302 	orr.w	r3, r3, #2
   12120:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   12122:	4620      	mov	r0, r4
   12124:	69a3      	ldr	r3, [r4, #24]
   12126:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   12128:	68eb      	ldr	r3, [r5, #12]
	ticks_at_preempt = ticks_at_preempt_new;
   1212a:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1212e:	9306      	str	r3, [sp, #24]
   12130:	4b37      	ldr	r3, [pc, #220]	; (12210 <preempt_ticker_start+0x160>)
   12132:	2200      	movs	r2, #0
   12134:	e9cd 3207 	strd	r3, r2, [sp, #28]
   12138:	4b36      	ldr	r3, [pc, #216]	; (12214 <preempt_ticker_start+0x164>)
   1213a:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1213e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12142:	e9cd 7200 	strd	r7, r2, [sp]
	preempt_start_req++;
   12146:	f898 4000 	ldrb.w	r4, [r8]
   1214a:	3401      	adds	r4, #1
   1214c:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1214e:	4653      	mov	r3, sl
   12150:	4611      	mov	r1, r2
   12152:	4610      	mov	r0, r2
	preempt_start_req++;
   12154:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   12158:	f7f7 f818 	bl	918c <ticker_start>
}
   1215c:	b00a      	add	sp, #40	; 0x28
   1215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   12162:	4b2d      	ldr	r3, [pc, #180]	; (12218 <preempt_ticker_start+0x168>)
   12164:	4a2d      	ldr	r2, [pc, #180]	; (1221c <preempt_ticker_start+0x16c>)
   12166:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   12168:	7812      	ldrb	r2, [r2, #0]
   1216a:	429a      	cmp	r2, r3
   1216c:	d1ad      	bne.n	120ca <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
   1216e:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
   12170:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
   12174:	681a      	ldr	r2, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
   12176:	f8df 908c 	ldr.w	r9, [pc, #140]	; 12204 <preempt_ticker_start+0x154>
   1217a:	68d7      	ldr	r7, [r2, #12]
   1217c:	e9d2 1001 	ldrd	r1, r0, [r2, #4]
   12180:	4288      	cmp	r0, r1
   12182:	bf2c      	ite	cs
   12184:	ebc7 0700 	rsbcs	r7, r7, r0
   12188:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   1218c:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   12190:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   12194:	e7c9      	b.n	1212a <preempt_ticker_start+0x7a>
			return TICKER_STATUS_SUCCESS;
   12196:	2000      	movs	r0, #0
}
   12198:	b00a      	add	sp, #40	; 0x28
   1219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req == preempt_ack)) {
   1219e:	491e      	ldr	r1, [pc, #120]	; (12218 <preempt_ticker_start+0x168>)
   121a0:	481e      	ldr	r0, [pc, #120]	; (1221c <preempt_ticker_start+0x16c>)
   121a2:	7809      	ldrb	r1, [r1, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   121a4:	7800      	ldrb	r0, [r0, #0]
   121a6:	4288      	cmp	r0, r1
   121a8:	d0b4      	beq.n	12114 <preempt_ticker_start+0x64>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   121aa:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   121ac:	7819      	ldrb	r1, [r3, #0]
   121ae:	3101      	adds	r1, #1
   121b0:	b2c9      	uxtb	r1, r1
   121b2:	7019      	strb	r1, [r3, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   121b4:	4610      	mov	r0, r2
   121b6:	4b1a      	ldr	r3, [pc, #104]	; (12220 <preempt_ticker_start+0x170>)
   121b8:	4611      	mov	r1, r2
   121ba:	f7f7 f879 	bl	92b0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   121be:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   121c2:	d0a7      	beq.n	12114 <preempt_ticker_start+0x64>
   121c4:	4a17      	ldr	r2, [pc, #92]	; (12224 <preempt_ticker_start+0x174>)
   121c6:	4918      	ldr	r1, [pc, #96]	; (12228 <preempt_ticker_start+0x178>)
   121c8:	4818      	ldr	r0, [pc, #96]	; (1222c <preempt_ticker_start+0x17c>)
   121ca:	f240 33b1 	movw	r3, #945	; 0x3b1
   121ce:	f007 fa36 	bl	1963e <assert_print>
   121d2:	4040      	eors	r0, r0
   121d4:	f380 8811 	msr	BASEPRI, r0
   121d8:	f04f 0003 	mov.w	r0, #3
   121dc:	df02      	svc	2
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   121de:	4a11      	ldr	r2, [pc, #68]	; (12224 <preempt_ticker_start+0x174>)
   121e0:	4911      	ldr	r1, [pc, #68]	; (12228 <preempt_ticker_start+0x178>)
   121e2:	4812      	ldr	r0, [pc, #72]	; (1222c <preempt_ticker_start+0x17c>)
   121e4:	f44f 735c 	mov.w	r3, #880	; 0x370
   121e8:	f007 fa29 	bl	1963e <assert_print>
   121ec:	4040      	eors	r0, r0
   121ee:	f380 8811 	msr	BASEPRI, r0
   121f2:	f04f 0003 	mov.w	r0, #3
   121f6:	df02      	svc	2
   121f8:	e78c      	b.n	12114 <preempt_ticker_start+0x64>
   121fa:	bf00      	nop
   121fc:	2000271d 	.word	0x2000271d
   12200:	2000271c 	.word	0x2000271c
   12204:	20001fd4 	.word	0x20001fd4
   12208:	2000271a 	.word	0x2000271a
   1220c:	2000271b 	.word	0x2000271b
   12210:	00011f31 	.word	0x00011f31
   12214:	00012031 	.word	0x00012031
   12218:	20002718 	.word	0x20002718
   1221c:	20002719 	.word	0x20002719
   12220:	00011fd5 	.word	0x00011fd5
   12224:	0001ecd8 	.word	0x0001ecd8
   12228:	0001e538 	.word	0x0001e538
   1222c:	0001e1a4 	.word	0x0001e1a4

00012230 <preempt>:

static void preempt(void *param)
{
   12230:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   12232:	4e4c      	ldr	r6, [pc, #304]	; (12364 <preempt+0x134>)
   12234:	68b3      	ldr	r3, [r6, #8]
{
   12236:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   12238:	b15b      	cbz	r3, 12252 <preempt+0x22>
   1223a:	6833      	ldr	r3, [r6, #0]
   1223c:	b14b      	cbz	r3, 12252 <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1223e:	23ff      	movs	r3, #255	; 0xff
   12240:	4607      	mov	r7, r0
	next = ull_prepare_dequeue_iter(&idx);
   12242:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   12246:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1224a:	f7f8 f807 	bl	a25c <ull_prepare_dequeue_iter>
	if (!next) {
   1224e:	4604      	mov	r4, r0
   12250:	b930      	cbnz	r0, 12260 <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   12252:	b009      	add	sp, #36	; 0x24
   12254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   12256:	f7f8 f801 	bl	a25c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1225a:	4604      	mov	r4, r0
   1225c:	2800      	cmp	r0, #0
   1225e:	d0f8      	beq.n	12252 <preempt+0x22>
   12260:	7f21      	ldrb	r1, [r4, #28]
   12262:	f011 0503 	ands.w	r5, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
   12266:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1226a:	d1f4      	bne.n	12256 <preempt+0x26>
	if (next->prepare_param.param != param) {
   1226c:	68e3      	ldr	r3, [r4, #12]
   1226e:	42bb      	cmp	r3, r7
   12270:	d126      	bne.n	122c0 <preempt+0x90>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   12272:	4638      	mov	r0, r7
   12274:	6873      	ldr	r3, [r6, #4]
   12276:	6831      	ldr	r1, [r6, #0]
   12278:	aa03      	add	r2, sp, #12
   1227a:	4798      	blx	r3
	if (!err) {
   1227c:	4607      	mov	r7, r0
   1227e:	b1b0      	cbz	r0, 122ae <preempt+0x7e>
	event.curr.abort_cb(NULL, event.curr.param);
   12280:	68b3      	ldr	r3, [r6, #8]
   12282:	6831      	ldr	r1, [r6, #0]
   12284:	4628      	mov	r0, r5
   12286:	4798      	blx	r3
	if (err == -EAGAIN) {
   12288:	f117 0f0b 	cmn.w	r7, #11
   1228c:	d02e      	beq.n	122ec <preempt+0xbc>
		LL_ASSERT(err == -ECANCELED);
   1228e:	378c      	adds	r7, #140	; 0x8c
   12290:	d0df      	beq.n	12252 <preempt+0x22>
   12292:	4a35      	ldr	r2, [pc, #212]	; (12368 <preempt+0x138>)
   12294:	4935      	ldr	r1, [pc, #212]	; (1236c <preempt+0x13c>)
   12296:	4836      	ldr	r0, [pc, #216]	; (12370 <preempt+0x140>)
   12298:	f240 431f 	movw	r3, #1055	; 0x41f
   1229c:	f007 f9cf 	bl	1963e <assert_print>
   122a0:	4040      	eors	r0, r0
   122a2:	f380 8811 	msr	BASEPRI, r0
   122a6:	f04f 0003 	mov.w	r0, #3
   122aa:	df02      	svc	2
   122ac:	e7d1      	b.n	12252 <preempt+0x22>
		next->is_aborted = 1;
   122ae:	7f23      	ldrb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   122b0:	69a2      	ldr	r2, [r4, #24]
   122b2:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   122b4:	f043 0302 	orr.w	r3, r3, #2
   122b8:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   122ba:	4620      	mov	r0, r4
   122bc:	4790      	blx	r2
		return;
   122be:	e7c8      	b.n	12252 <preempt+0x22>
		ret = preempt_ticker_start(next, NULL, next);
   122c0:	4622      	mov	r2, r4
   122c2:	4629      	mov	r1, r5
   122c4:	4620      	mov	r0, r4
   122c6:	f7ff fef3 	bl	120b0 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   122ca:	f030 0302 	bics.w	r3, r0, #2
   122ce:	d0c0      	beq.n	12252 <preempt+0x22>
   122d0:	4a25      	ldr	r2, [pc, #148]	; (12368 <preempt+0x138>)
   122d2:	4928      	ldr	r1, [pc, #160]	; (12374 <preempt+0x144>)
   122d4:	4826      	ldr	r0, [pc, #152]	; (12370 <preempt+0x140>)
   122d6:	f240 33eb 	movw	r3, #1003	; 0x3eb
   122da:	f007 f9b0 	bl	1963e <assert_print>
   122de:	4040      	eors	r0, r0
   122e0:	f380 8811 	msr	BASEPRI, r0
   122e4:	f04f 0003 	mov.w	r0, #3
   122e8:	df02      	svc	2
   122ea:	e7b2      	b.n	12252 <preempt+0x22>
		iter_idx = UINT8_MAX;
   122ec:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   122ee:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   122f2:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   122f6:	f7f7 ffb1 	bl	a25c <ull_prepare_dequeue_iter>
		while (iter) {
   122fa:	b928      	cbnz	r0, 12308 <preempt+0xd8>
   122fc:	e013      	b.n	12326 <preempt+0xf6>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   122fe:	f10d 000b 	add.w	r0, sp, #11
   12302:	f7f7 ffab 	bl	a25c <ull_prepare_dequeue_iter>
		while (iter) {
   12306:	b170      	cbz	r0, 12326 <preempt+0xf6>
			if (!iter->is_aborted &&
   12308:	7f03      	ldrb	r3, [r0, #28]
   1230a:	079a      	lsls	r2, r3, #30
   1230c:	d4f7      	bmi.n	122fe <preempt+0xce>
			    event.curr.param == iter->prepare_param.param) {
   1230e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   12310:	6831      	ldr	r1, [r6, #0]
   12312:	4291      	cmp	r1, r2
   12314:	d1f3      	bne.n	122fe <preempt+0xce>
				iter->is_aborted = 1;
   12316:	f043 0302 	orr.w	r3, r3, #2
   1231a:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1231c:	6983      	ldr	r3, [r0, #24]
   1231e:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   12320:	f88d 400b 	strb.w	r4, [sp, #11]
   12324:	e7eb      	b.n	122fe <preempt+0xce>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   12326:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   12328:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1232a:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   1232c:	2100      	movs	r1, #0
   1232e:	e9cd 1104 	strd	r1, r1, [sp, #16]
   12332:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   12334:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   12336:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   12338:	9b03      	ldr	r3, [sp, #12]
   1233a:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1233e:	aa04      	add	r2, sp, #16
   12340:	f7f7 ff4c 	bl	a1dc <ull_prepare_enqueue>
		LL_ASSERT(iter);
   12344:	2800      	cmp	r0, #0
   12346:	d184      	bne.n	12252 <preempt+0x22>
   12348:	4a07      	ldr	r2, [pc, #28]	; (12368 <preempt+0x138>)
   1234a:	490b      	ldr	r1, [pc, #44]	; (12378 <preempt+0x148>)
   1234c:	4808      	ldr	r0, [pc, #32]	; (12370 <preempt+0x140>)
   1234e:	f240 431d 	movw	r3, #1053	; 0x41d
   12352:	f007 f974 	bl	1963e <assert_print>
   12356:	4040      	eors	r0, r0
   12358:	f380 8811 	msr	BASEPRI, r0
   1235c:	f04f 0003 	mov.w	r0, #3
   12360:	df02      	svc	2
   12362:	e776      	b.n	12252 <preempt+0x22>
   12364:	20001fd8 	.word	0x20001fd8
   12368:	0001ecd8 	.word	0x0001ecd8
   1236c:	0001edb0 	.word	0x0001edb0
   12370:	0001e1a4 	.word	0x0001e1a4
   12374:	0001e538 	.word	0x0001e538
   12378:	0001eda8 	.word	0x0001eda8

0001237c <lll_init>:
{
   1237c:	b510      	push	{r4, lr}
   1237e:	4815      	ldr	r0, [pc, #84]	; (123d4 <lll_init+0x58>)
   12380:	f00a fcca 	bl	1cd18 <z_device_is_ready>
	if (!device_is_ready(dev_entropy)) {
   12384:	b310      	cbz	r0, 123cc <lll_init+0x50>
	event.curr.abort_cb = NULL;
   12386:	4b14      	ldr	r3, [pc, #80]	; (123d8 <lll_init+0x5c>)
   12388:	2400      	movs	r4, #0
   1238a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1238c:	f000 fafa 	bl	12984 <lll_clock_init>
	if (err < 0) {
   12390:	2800      	cmp	r0, #0
   12392:	db1a      	blt.n	123ca <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   12394:	4621      	mov	r1, r4
   12396:	2001      	movs	r0, #1
   12398:	4622      	mov	r2, r4
   1239a:	f7f1 fab9 	bl	3910 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1239e:	4622      	mov	r2, r4
   123a0:	200b      	movs	r0, #11
   123a2:	2101      	movs	r1, #1
   123a4:	f7f1 fab4 	bl	3910 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   123a8:	4622      	mov	r2, r4
   123aa:	4621      	mov	r1, r4
   123ac:	2018      	movs	r0, #24
   123ae:	f7f1 faaf 	bl	3910 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   123b2:	2001      	movs	r0, #1
   123b4:	f7f1 fa7c 	bl	38b0 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   123b8:	200b      	movs	r0, #11
   123ba:	f7f1 fa79 	bl	38b0 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   123be:	2018      	movs	r0, #24
   123c0:	f7f1 fa76 	bl	38b0 <arch_irq_enable>
	radio_setup();
   123c4:	f001 fcc2 	bl	13d4c <radio_setup>
	return 0;
   123c8:	4620      	mov	r0, r4
}
   123ca:	bd10      	pop	{r4, pc}
		return -ENODEV;
   123cc:	f06f 0012 	mvn.w	r0, #18
}
   123d0:	bd10      	pop	{r4, pc}
   123d2:	bf00      	nop
   123d4:	0001d95c 	.word	0x0001d95c
   123d8:	20001fd8 	.word	0x20001fd8

000123dc <lll_deinit>:
{
   123dc:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   123de:	f000 fae1 	bl	129a4 <lll_clock_deinit>
	if (err < 0) {
   123e2:	2800      	cmp	r0, #0
   123e4:	db09      	blt.n	123fa <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   123e6:	2001      	movs	r0, #1
   123e8:	f7f1 fa70 	bl	38cc <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   123ec:	200b      	movs	r0, #11
   123ee:	f7f1 fa6d 	bl	38cc <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   123f2:	2018      	movs	r0, #24
   123f4:	f7f1 fa6a 	bl	38cc <arch_irq_disable>
	return 0;
   123f8:	2000      	movs	r0, #0
}
   123fa:	bd08      	pop	{r3, pc}

000123fc <lll_csrand_get>:
{
   123fc:	4603      	mov	r3, r0
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   123fe:	4803      	ldr	r0, [pc, #12]	; (1240c <lll_csrand_get+0x10>)
   12400:	b28a      	uxth	r2, r1
   12402:	4619      	mov	r1, r3
   12404:	6883      	ldr	r3, [r0, #8]
   12406:	681b      	ldr	r3, [r3, #0]
   12408:	4718      	bx	r3
   1240a:	bf00      	nop
   1240c:	0001d95c 	.word	0x0001d95c

00012410 <lll_csrand_isr_get>:
{
   12410:	b430      	push	{r4, r5}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   12412:	4d07      	ldr	r5, [pc, #28]	; (12430 <lll_csrand_isr_get+0x20>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   12414:	68ab      	ldr	r3, [r5, #8]
   12416:	685c      	ldr	r4, [r3, #4]
   12418:	b134      	cbz	r4, 12428 <lll_csrand_isr_get+0x18>
   1241a:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1241c:	46a4      	mov	ip, r4
   1241e:	4601      	mov	r1, r0
   12420:	2300      	movs	r3, #0
   12422:	4628      	mov	r0, r5
}
   12424:	bc30      	pop	{r4, r5}
   12426:	4760      	bx	ip
   12428:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1242c:	bc30      	pop	{r4, r5}
   1242e:	4770      	bx	lr
   12430:	0001d95c 	.word	0x0001d95c

00012434 <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   12434:	b430      	push	{r4, r5}
   12436:	4d07      	ldr	r5, [pc, #28]	; (12454 <lll_rand_isr_get+0x20>)
   12438:	68ab      	ldr	r3, [r5, #8]
   1243a:	685c      	ldr	r4, [r3, #4]
   1243c:	b134      	cbz	r4, 1244c <lll_rand_isr_get+0x18>
   1243e:	b28a      	uxth	r2, r1
   12440:	46a4      	mov	ip, r4
   12442:	4601      	mov	r1, r0
   12444:	2300      	movs	r3, #0
   12446:	4628      	mov	r0, r5
   12448:	bc30      	pop	{r4, r5}
   1244a:	4760      	bx	ip
   1244c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12450:	bc30      	pop	{r4, r5}
   12452:	4770      	bx	lr
   12454:	0001d95c 	.word	0x0001d95c

00012458 <lll_reset>:
}
   12458:	2000      	movs	r0, #0
   1245a:	4770      	bx	lr

0001245c <lll_disable>:
{
   1245c:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1245e:	4604      	mov	r4, r0
{
   12460:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   12462:	b378      	cbz	r0, 124c4 <lll_disable+0x68>
   12464:	4b23      	ldr	r3, [pc, #140]	; (124f4 <lll_disable+0x98>)
   12466:	681a      	ldr	r2, [r3, #0]
   12468:	4282      	cmp	r2, r0
   1246a:	d025      	beq.n	124b8 <lll_disable+0x5c>
		idx = UINT8_MAX;
   1246c:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1246e:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   12472:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   12476:	f7f7 fef1 	bl	a25c <ull_prepare_dequeue_iter>
		while (next) {
   1247a:	b938      	cbnz	r0, 1248c <lll_disable+0x30>
   1247c:	e01a      	b.n	124b4 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1247e:	42a1      	cmp	r1, r4
   12480:	d00a      	beq.n	12498 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   12482:	f10d 0007 	add.w	r0, sp, #7
   12486:	f7f7 fee9 	bl	a25c <ull_prepare_dequeue_iter>
		while (next) {
   1248a:	b198      	cbz	r0, 124b4 <lll_disable+0x58>
			if (!next->is_aborted &&
   1248c:	7f03      	ldrb	r3, [r0, #28]
   1248e:	079b      	lsls	r3, r3, #30
   12490:	d4f7      	bmi.n	12482 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   12492:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   12494:	2c00      	cmp	r4, #0
   12496:	d1f2      	bne.n	1247e <lll_disable+0x22>
				next->is_aborted = 1;
   12498:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1249a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1249c:	f043 0302 	orr.w	r3, r3, #2
   124a0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   124a2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   124a4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   124a8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   124ac:	f7f7 fed6 	bl	a25c <ull_prepare_dequeue_iter>
		while (next) {
   124b0:	2800      	cmp	r0, #0
   124b2:	d1eb      	bne.n	1248c <lll_disable+0x30>
}
   124b4:	b003      	add	sp, #12
   124b6:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   124b8:	689b      	ldr	r3, [r3, #8]
   124ba:	b16b      	cbz	r3, 124d8 <lll_disable+0x7c>
   124bc:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   124be:	2000      	movs	r0, #0
   124c0:	4798      	blx	r3
   124c2:	e7d3      	b.n	1246c <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   124c4:	4a0b      	ldr	r2, [pc, #44]	; (124f4 <lll_disable+0x98>)
   124c6:	6893      	ldr	r3, [r2, #8]
   124c8:	2b00      	cmp	r3, #0
   124ca:	d0cf      	beq.n	1246c <lll_disable+0x10>
   124cc:	6811      	ldr	r1, [r2, #0]
   124ce:	2900      	cmp	r1, #0
   124d0:	d0cc      	beq.n	1246c <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   124d2:	2000      	movs	r0, #0
   124d4:	4798      	blx	r3
   124d6:	e7c9      	b.n	1246c <lll_disable+0x10>
			LL_ASSERT(!param);
   124d8:	4a07      	ldr	r2, [pc, #28]	; (124f8 <lll_disable+0x9c>)
   124da:	4908      	ldr	r1, [pc, #32]	; (124fc <lll_disable+0xa0>)
   124dc:	4808      	ldr	r0, [pc, #32]	; (12500 <lll_disable+0xa4>)
   124de:	f240 1311 	movw	r3, #273	; 0x111
   124e2:	f007 f8ac 	bl	1963e <assert_print>
   124e6:	4040      	eors	r0, r0
   124e8:	f380 8811 	msr	BASEPRI, r0
   124ec:	f04f 0003 	mov.w	r0, #3
   124f0:	df02      	svc	2
   124f2:	e7bb      	b.n	1246c <lll_disable+0x10>
   124f4:	20001fd8 	.word	0x20001fd8
   124f8:	0001ecd8 	.word	0x0001ecd8
   124fc:	0001edbc 	.word	0x0001edbc
   12500:	0001e1a4 	.word	0x0001e1a4

00012504 <lll_prepare_done>:
}
   12504:	2000      	movs	r0, #0
   12506:	4770      	bx	lr

00012508 <lll_done>:
{
   12508:	b538      	push	{r3, r4, r5, lr}
   1250a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1250c:	f7f7 fe98 	bl	a240 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   12510:	b154      	cbz	r4, 12528 <lll_done+0x20>
   12512:	b310      	cbz	r0, 1255a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   12514:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   12516:	2000      	movs	r0, #0
   12518:	f7f7 fec0 	bl	a29c <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1251c:	4620      	mov	r0, r4
   1251e:	f7f7 ff47 	bl	a3b0 <ull_event_done>
	LL_ASSERT(evdone);
   12522:	b158      	cbz	r0, 1253c <lll_done+0x34>
}
   12524:	2000      	movs	r0, #0
   12526:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   12528:	4d1a      	ldr	r5, [pc, #104]	; (12594 <lll_done+0x8c>)
   1252a:	68ab      	ldr	r3, [r5, #8]
   1252c:	b31b      	cbz	r3, 12576 <lll_done+0x6e>
		param = event.curr.param;
   1252e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   12530:	2300      	movs	r3, #0
   12532:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   12534:	602b      	str	r3, [r5, #0]
		if (param) {
   12536:	2c00      	cmp	r4, #0
   12538:	d1ec      	bne.n	12514 <lll_done+0xc>
   1253a:	e7ec      	b.n	12516 <lll_done+0xe>
	LL_ASSERT(evdone);
   1253c:	4a16      	ldr	r2, [pc, #88]	; (12598 <lll_done+0x90>)
   1253e:	4917      	ldr	r1, [pc, #92]	; (1259c <lll_done+0x94>)
   12540:	4817      	ldr	r0, [pc, #92]	; (125a0 <lll_done+0x98>)
   12542:	f44f 73c1 	mov.w	r3, #386	; 0x182
   12546:	f007 f87a 	bl	1963e <assert_print>
   1254a:	4040      	eors	r0, r0
   1254c:	f380 8811 	msr	BASEPRI, r0
   12550:	f04f 0003 	mov.w	r0, #3
   12554:	df02      	svc	2
}
   12556:	2000      	movs	r0, #0
   12558:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1255a:	4a0f      	ldr	r2, [pc, #60]	; (12598 <lll_done+0x90>)
   1255c:	4911      	ldr	r1, [pc, #68]	; (125a4 <lll_done+0x9c>)
   1255e:	4810      	ldr	r0, [pc, #64]	; (125a0 <lll_done+0x98>)
   12560:	f240 134b 	movw	r3, #331	; 0x14b
   12564:	f007 f86b 	bl	1963e <assert_print>
   12568:	4040      	eors	r0, r0
   1256a:	f380 8811 	msr	BASEPRI, r0
   1256e:	f04f 0003 	mov.w	r0, #3
   12572:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   12574:	e7ce      	b.n	12514 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   12576:	4a08      	ldr	r2, [pc, #32]	; (12598 <lll_done+0x90>)
   12578:	490b      	ldr	r1, [pc, #44]	; (125a8 <lll_done+0xa0>)
   1257a:	4809      	ldr	r0, [pc, #36]	; (125a0 <lll_done+0x98>)
   1257c:	f44f 73a8 	mov.w	r3, #336	; 0x150
   12580:	f007 f85d 	bl	1963e <assert_print>
   12584:	4040      	eors	r0, r0
   12586:	f380 8811 	msr	BASEPRI, r0
   1258a:	f04f 0003 	mov.w	r0, #3
   1258e:	df02      	svc	2
   12590:	e7cd      	b.n	1252e <lll_done+0x26>
   12592:	bf00      	nop
   12594:	20001fd8 	.word	0x20001fd8
   12598:	0001ecd8 	.word	0x0001ecd8
   1259c:	0001ede8 	.word	0x0001ede8
   125a0:	0001e1a4 	.word	0x0001e1a4
   125a4:	0001edc4 	.word	0x0001edc4
   125a8:	0001edd4 	.word	0x0001edd4

000125ac <lll_is_abort_cb>:
}
   125ac:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   125b0:	4770      	bx	lr
   125b2:	bf00      	nop

000125b4 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   125b4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   125b8:	2a00      	cmp	r2, #0
   125ba:	db04      	blt.n	125c6 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   125bc:	429a      	cmp	r2, r3
   125be:	bf38      	it	cc
   125c0:	461a      	movcc	r2, r3
   125c2:	4610      	mov	r0, r2
}
   125c4:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   125c6:	68c0      	ldr	r0, [r0, #12]
   125c8:	4298      	cmp	r0, r3
   125ca:	bf38      	it	cc
   125cc:	4618      	movcc	r0, r3
   125ce:	4770      	bx	lr

000125d0 <lll_preempt_calc>:
{
   125d0:	b510      	push	{r4, lr}
   125d2:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   125d4:	f7f6 fef2 	bl	93bc <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   125d8:	4621      	mov	r1, r4
   125da:	f7f6 fef1 	bl	93c0 <ticker_ticks_diff_get>
   125de:	4603      	mov	r3, r0
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   125e0:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   125e4:	d104      	bne.n	125f0 <lll_preempt_calc+0x20>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   125e6:	3303      	adds	r3, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   125e8:	2b09      	cmp	r3, #9
   125ea:	bf88      	it	hi
   125ec:	4618      	movhi	r0, r3
}
   125ee:	bd10      	pop	{r4, pc}
		return 0;
   125f0:	2000      	movs	r0, #0
}
   125f2:	bd10      	pop	{r4, pc}

000125f4 <lll_chan_set>:
	switch (chan) {
   125f4:	2826      	cmp	r0, #38	; 0x26
{
   125f6:	b510      	push	{r4, lr}
   125f8:	4604      	mov	r4, r0
	switch (chan) {
   125fa:	d01c      	beq.n	12636 <lll_chan_set+0x42>
   125fc:	2827      	cmp	r0, #39	; 0x27
   125fe:	d012      	beq.n	12626 <lll_chan_set+0x32>
   12600:	2825      	cmp	r0, #37	; 0x25
   12602:	d008      	beq.n	12616 <lll_chan_set+0x22>
		if (chan < 11) {
   12604:	280a      	cmp	r0, #10
   12606:	d91e      	bls.n	12646 <lll_chan_set+0x52>
		} else if (chan < 40) {
   12608:	2827      	cmp	r0, #39	; 0x27
   1260a:	d821      	bhi.n	12650 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1260c:	3003      	adds	r0, #3
   1260e:	0040      	lsls	r0, r0, #1
   12610:	f001 fc1a 	bl	13e48 <radio_freq_chan_set>
   12614:	e002      	b.n	1261c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   12616:	2002      	movs	r0, #2
   12618:	f001 fc16 	bl	13e48 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1261c:	4620      	mov	r0, r4
}
   1261e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12622:	f001 bc17 	b.w	13e54 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   12626:	2050      	movs	r0, #80	; 0x50
   12628:	f001 fc0e 	bl	13e48 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1262c:	4620      	mov	r0, r4
}
   1262e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12632:	f001 bc0f 	b.w	13e54 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   12636:	201a      	movs	r0, #26
   12638:	f001 fc06 	bl	13e48 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1263c:	4620      	mov	r0, r4
}
   1263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   12642:	f001 bc07 	b.w	13e54 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   12646:	3002      	adds	r0, #2
   12648:	0040      	lsls	r0, r0, #1
   1264a:	f001 fbfd 	bl	13e48 <radio_freq_chan_set>
   1264e:	e7e5      	b.n	1261c <lll_chan_set+0x28>
			LL_ASSERT(0);
   12650:	4a06      	ldr	r2, [pc, #24]	; (1266c <lll_chan_set+0x78>)
   12652:	4907      	ldr	r1, [pc, #28]	; (12670 <lll_chan_set+0x7c>)
   12654:	4807      	ldr	r0, [pc, #28]	; (12674 <lll_chan_set+0x80>)
   12656:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1265a:	f006 fff0 	bl	1963e <assert_print>
   1265e:	4040      	eors	r0, r0
   12660:	f380 8811 	msr	BASEPRI, r0
   12664:	f04f 0003 	mov.w	r0, #3
   12668:	df02      	svc	2
   1266a:	e7d7      	b.n	1261c <lll_chan_set+0x28>
   1266c:	0001ecd8 	.word	0x0001ecd8
   12670:	0001e220 	.word	0x0001e220
   12674:	0001e1a4 	.word	0x0001e1a4

00012678 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   12678:	f001 bc48 	b.w	13f0c <radio_tx_ready_delay_get>

0001267c <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1267c:	f001 bc4e 	b.w	13f1c <radio_rx_ready_delay_get>

00012680 <lll_isr_tx_status_reset>:
{
   12680:	b508      	push	{r3, lr}
	radio_status_reset();
   12682:	f001 fc6d 	bl	13f60 <radio_status_reset>
}
   12686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1268a:	f001 bd9f 	b.w	141cc <radio_tmr_status_reset>
   1268e:	bf00      	nop

00012690 <lll_isr_rx_status_reset>:
{
   12690:	b508      	push	{r3, lr}
	radio_status_reset();
   12692:	f001 fc65 	bl	13f60 <radio_status_reset>
	radio_tmr_status_reset();
   12696:	f001 fd99 	bl	141cc <radio_tmr_status_reset>
}
   1269a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1269e:	f001 bd61 	b.w	14164 <radio_rssi_status_reset>
   126a2:	bf00      	nop

000126a4 <lll_isr_status_reset>:
{
   126a4:	b508      	push	{r3, lr}
	radio_status_reset();
   126a6:	f001 fc5b 	bl	13f60 <radio_status_reset>
	radio_tmr_status_reset();
   126aa:	f001 fd8f 	bl	141cc <radio_tmr_status_reset>
	radio_filter_status_reset();
   126ae:	f001 fd75 	bl	1419c <radio_filter_status_reset>
}
   126b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   126b6:	f001 bd55 	b.w	14164 <radio_rssi_status_reset>
   126ba:	bf00      	nop

000126bc <lll_isr_cleanup>:
{
   126bc:	b508      	push	{r3, lr}
   126be:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   126c0:	4817      	ldr	r0, [pc, #92]	; (12720 <lll_isr_cleanup+0x64>)
   126c2:	f001 fb23 	bl	13d0c <radio_isr_set>
	if (!radio_is_idle()) {
   126c6:	f001 fc6b 	bl	13fa0 <radio_is_idle>
   126ca:	b160      	cbz	r0, 126e6 <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   126cc:	f001 fe14 	bl	142f8 <radio_tmr_stop>
	radio_stop();
   126d0:	f001 fba4 	bl	13e1c <radio_stop>
	err = lll_hfclock_off();
   126d4:	f000 f9a2 	bl	12a1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   126d8:	2800      	cmp	r0, #0
   126da:	db0e      	blt.n	126fa <lll_isr_cleanup+0x3e>
}
   126dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   126e0:	2000      	movs	r0, #0
   126e2:	f7ff bf11 	b.w	12508 <lll_done>
		radio_disable();
   126e6:	f001 fc27 	bl	13f38 <radio_disable>
	radio_tmr_stop();
   126ea:	f001 fe05 	bl	142f8 <radio_tmr_stop>
	radio_stop();
   126ee:	f001 fb95 	bl	13e1c <radio_stop>
	err = lll_hfclock_off();
   126f2:	f000 f993 	bl	12a1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   126f6:	2800      	cmp	r0, #0
   126f8:	daf0      	bge.n	126dc <lll_isr_cleanup+0x20>
   126fa:	4a0a      	ldr	r2, [pc, #40]	; (12724 <lll_isr_cleanup+0x68>)
   126fc:	490a      	ldr	r1, [pc, #40]	; (12728 <lll_isr_cleanup+0x6c>)
   126fe:	480b      	ldr	r0, [pc, #44]	; (1272c <lll_isr_cleanup+0x70>)
   12700:	f44f 731c 	mov.w	r3, #624	; 0x270
   12704:	f006 ff9b 	bl	1963e <assert_print>
   12708:	4040      	eors	r0, r0
   1270a:	f380 8811 	msr	BASEPRI, r0
   1270e:	f04f 0003 	mov.w	r0, #3
   12712:	df02      	svc	2
	lll_done(NULL);
   12714:	2000      	movs	r0, #0
}
   12716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1271a:	f7ff bef5 	b.w	12508 <lll_done>
   1271e:	bf00      	nop
   12720:	0001202d 	.word	0x0001202d
   12724:	0001ecd8 	.word	0x0001ecd8
   12728:	0001edf0 	.word	0x0001edf0
   1272c:	0001e1a4 	.word	0x0001e1a4

00012730 <lll_isr_abort>:
{
   12730:	b510      	push	{r4, lr}
   12732:	4604      	mov	r4, r0
	radio_status_reset();
   12734:	f001 fc14 	bl	13f60 <radio_status_reset>
	radio_tmr_status_reset();
   12738:	f001 fd48 	bl	141cc <radio_tmr_status_reset>
	radio_filter_status_reset();
   1273c:	f001 fd2e 	bl	1419c <radio_filter_status_reset>
	radio_rssi_status_reset();
   12740:	f001 fd10 	bl	14164 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   12744:	4620      	mov	r0, r4
}
   12746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1274a:	f7ff bfb7 	b.w	126bc <lll_isr_cleanup>
   1274e:	bf00      	nop

00012750 <lll_isr_early_abort>:
{
   12750:	b508      	push	{r3, lr}
   12752:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   12754:	4813      	ldr	r0, [pc, #76]	; (127a4 <lll_isr_early_abort+0x54>)
   12756:	f001 fad9 	bl	13d0c <radio_isr_set>
	if (!radio_is_idle()) {
   1275a:	f001 fc21 	bl	13fa0 <radio_is_idle>
   1275e:	b140      	cbz	r0, 12772 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   12760:	f000 f95c 	bl	12a1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12764:	2800      	cmp	r0, #0
   12766:	db0a      	blt.n	1277e <lll_isr_early_abort+0x2e>
}
   12768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1276c:	2000      	movs	r0, #0
   1276e:	f7ff becb 	b.w	12508 <lll_done>
		radio_disable();
   12772:	f001 fbe1 	bl	13f38 <radio_disable>
	err = lll_hfclock_off();
   12776:	f000 f951 	bl	12a1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1277a:	2800      	cmp	r0, #0
   1277c:	daf4      	bge.n	12768 <lll_isr_early_abort+0x18>
   1277e:	4a0a      	ldr	r2, [pc, #40]	; (127a8 <lll_isr_early_abort+0x58>)
   12780:	490a      	ldr	r1, [pc, #40]	; (127ac <lll_isr_early_abort+0x5c>)
   12782:	480b      	ldr	r0, [pc, #44]	; (127b0 <lll_isr_early_abort+0x60>)
   12784:	f240 237f 	movw	r3, #639	; 0x27f
   12788:	f006 ff59 	bl	1963e <assert_print>
   1278c:	4040      	eors	r0, r0
   1278e:	f380 8811 	msr	BASEPRI, r0
   12792:	f04f 0003 	mov.w	r0, #3
   12796:	df02      	svc	2
	lll_done(NULL);
   12798:	2000      	movs	r0, #0
}
   1279a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1279e:	f7ff beb3 	b.w	12508 <lll_done>
   127a2:	bf00      	nop
   127a4:	0001202d 	.word	0x0001202d
   127a8:	0001ecd8 	.word	0x0001ecd8
   127ac:	0001edf0 	.word	0x0001edf0
   127b0:	0001e1a4 	.word	0x0001e1a4

000127b4 <lll_prepare_resolve>:
{
   127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127b8:	b084      	sub	sp, #16
   127ba:	4606      	mov	r6, r0
   127bc:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   127be:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   127c2:	23ff      	movs	r3, #255	; 0xff
{
   127c4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   127c8:	f88d 300f 	strb.w	r3, [sp, #15]
{
   127cc:	460f      	mov	r7, r1
   127ce:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   127d0:	f7f7 fd44 	bl	a25c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   127d4:	4604      	mov	r4, r0
   127d6:	b928      	cbnz	r0, 127e4 <lll_prepare_resolve+0x30>
   127d8:	e03b      	b.n	12852 <lll_prepare_resolve+0x9e>
		p = ull_prepare_dequeue_iter(&idx);
   127da:	f7f7 fd3f 	bl	a25c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   127de:	4604      	mov	r4, r0
   127e0:	2800      	cmp	r0, #0
   127e2:	d036      	beq.n	12852 <lll_prepare_resolve+0x9e>
   127e4:	f894 c01c 	ldrb.w	ip, [r4, #28]
   127e8:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   127ec:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   127f0:	d1f3      	bne.n	127da <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   127f2:	f8df a11c 	ldr.w	sl, [pc, #284]	; 12910 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   127f6:	f8da 3008 	ldr.w	r3, [sl, #8]
   127fa:	2b00      	cmp	r3, #0
   127fc:	d130      	bne.n	12860 <lll_prepare_resolve+0xac>
	    (p && is_resume)) {
   127fe:	f1b9 0f00 	cmp.w	r9, #0
   12802:	d16b      	bne.n	128dc <lll_prepare_resolve+0x128>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   12804:	42ac      	cmp	r4, r5
   12806:	d00c      	beq.n	12822 <lll_prepare_resolve+0x6e>
   12808:	4a42      	ldr	r2, [pc, #264]	; (12914 <lll_prepare_resolve+0x160>)
   1280a:	4943      	ldr	r1, [pc, #268]	; (12918 <lll_prepare_resolve+0x164>)
   1280c:	4843      	ldr	r0, [pc, #268]	; (1291c <lll_prepare_resolve+0x168>)
   1280e:	f240 23ee 	movw	r3, #750	; 0x2ee
   12812:	f006 ff14 	bl	1963e <assert_print>
   12816:	4040      	eors	r0, r0
   12818:	f380 8811 	msr	BASEPRI, r0
   1281c:	f04f 0003 	mov.w	r0, #3
   12820:	df02      	svc	2
	event.curr.param = prepare_param->param;
   12822:	68eb      	ldr	r3, [r5, #12]
   12824:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   12828:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1282c:	4628      	mov	r0, r5
   1282e:	47c0      	blx	r8
   12830:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_BT_CTLR_ASSERT_OVERHEAD_START) &&
   12832:	e003      	b.n	1283c <lll_prepare_resolve+0x88>
	} while (p->is_aborted || p->is_resume);
   12834:	7f01      	ldrb	r1, [r0, #28]
   12836:	f011 0103 	ands.w	r1, r1, #3
   1283a:	d039      	beq.n	128b0 <lll_prepare_resolve+0xfc>
		p = ull_prepare_dequeue_iter(&idx);
   1283c:	f10d 000f 	add.w	r0, sp, #15
   12840:	f7f7 fd0c 	bl	a25c <ull_prepare_dequeue_iter>
   12844:	4602      	mov	r2, r0
		if (!p) {
   12846:	2800      	cmp	r0, #0
   12848:	d1f4      	bne.n	12834 <lll_prepare_resolve+0x80>
}
   1284a:	4620      	mov	r0, r4
   1284c:	b004      	add	sp, #16
   1284e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   12852:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 12910 <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   12856:	f8da 3008 	ldr.w	r3, [sl, #8]
   1285a:	2b00      	cmp	r3, #0
   1285c:	d0e1      	beq.n	12822 <lll_prepare_resolve+0x6e>
{
   1285e:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   12860:	462a      	mov	r2, r5
   12862:	f8cd 9000 	str.w	r9, [sp]
   12866:	4643      	mov	r3, r8
   12868:	4639      	mov	r1, r7
   1286a:	4630      	mov	r0, r6
   1286c:	f7f7 fcb6 	bl	a1dc <ull_prepare_enqueue>
		LL_ASSERT(next);
   12870:	4602      	mov	r2, r0
   12872:	2800      	cmp	r0, #0
   12874:	d03c      	beq.n	128f0 <lll_prepare_resolve+0x13c>
		if (is_resume) {
   12876:	f1b9 0f00 	cmp.w	r9, #0
   1287a:	d116      	bne.n	128aa <lll_prepare_resolve+0xf6>
		ret  = preempt_ticker_start(first, p, next);
   1287c:	2c00      	cmp	r4, #0
   1287e:	bf14      	ite	ne
   12880:	4620      	movne	r0, r4
   12882:	4610      	moveq	r0, r2
   12884:	4621      	mov	r1, r4
   12886:	f7ff fc13 	bl	120b0 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1288a:	f030 0302 	bics.w	r3, r0, #2
   1288e:	d00c      	beq.n	128aa <lll_prepare_resolve+0xf6>
   12890:	4a20      	ldr	r2, [pc, #128]	; (12914 <lll_prepare_resolve+0x160>)
   12892:	4923      	ldr	r1, [pc, #140]	; (12920 <lll_prepare_resolve+0x16c>)
   12894:	4821      	ldr	r0, [pc, #132]	; (1291c <lll_prepare_resolve+0x168>)
   12896:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   1289a:	f006 fed0 	bl	1963e <assert_print>
   1289e:	4040      	eors	r0, r0
   128a0:	f380 8811 	msr	BASEPRI, r0
   128a4:	f04f 0003 	mov.w	r0, #3
   128a8:	df02      	svc	2
			return -EINPROGRESS;
   128aa:	f06f 0476 	mvn.w	r4, #118	; 0x76
   128ae:	e7cc      	b.n	1284a <lll_prepare_resolve+0x96>
	ret = preempt_ticker_start(p, NULL, p);
   128b0:	f7ff fbfe 	bl	120b0 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   128b4:	f030 0302 	bics.w	r3, r0, #2
   128b8:	d0c7      	beq.n	1284a <lll_prepare_resolve+0x96>
   128ba:	4a16      	ldr	r2, [pc, #88]	; (12914 <lll_prepare_resolve+0x160>)
   128bc:	4918      	ldr	r1, [pc, #96]	; (12920 <lll_prepare_resolve+0x16c>)
   128be:	4817      	ldr	r0, [pc, #92]	; (1291c <lll_prepare_resolve+0x168>)
   128c0:	f44f 7344 	mov.w	r3, #784	; 0x310
   128c4:	f006 febb 	bl	1963e <assert_print>
   128c8:	4040      	eors	r0, r0
   128ca:	f380 8811 	msr	BASEPRI, r0
   128ce:	f04f 0003 	mov.w	r0, #3
   128d2:	df02      	svc	2
}
   128d4:	4620      	mov	r0, r4
   128d6:	b004      	add	sp, #16
   128d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   128dc:	f8cd 9000 	str.w	r9, [sp]
   128e0:	4643      	mov	r3, r8
   128e2:	462a      	mov	r2, r5
   128e4:	4639      	mov	r1, r7
   128e6:	4630      	mov	r0, r6
   128e8:	f7f7 fc78 	bl	a1dc <ull_prepare_enqueue>
		LL_ASSERT(next);
   128ec:	2800      	cmp	r0, #0
   128ee:	d1dc      	bne.n	128aa <lll_prepare_resolve+0xf6>
   128f0:	4a08      	ldr	r2, [pc, #32]	; (12914 <lll_prepare_resolve+0x160>)
   128f2:	490c      	ldr	r1, [pc, #48]	; (12924 <lll_prepare_resolve+0x170>)
   128f4:	4809      	ldr	r0, [pc, #36]	; (1291c <lll_prepare_resolve+0x168>)
   128f6:	f240 23bb 	movw	r3, #699	; 0x2bb
   128fa:	f006 fea0 	bl	1963e <assert_print>
   128fe:	4040      	eors	r0, r0
   12900:	f380 8811 	msr	BASEPRI, r0
   12904:	f04f 0003 	mov.w	r0, #3
   12908:	df02      	svc	2
   1290a:	2200      	movs	r2, #0
   1290c:	e7b3      	b.n	12876 <lll_prepare_resolve+0xc2>
   1290e:	bf00      	nop
   12910:	20001fd8 	.word	0x20001fd8
   12914:	0001ecd8 	.word	0x0001ecd8
   12918:	0001ee04 	.word	0x0001ee04
   1291c:	0001e1a4 	.word	0x0001e1a4
   12920:	0001e538 	.word	0x0001e538
   12924:	0001edfc 	.word	0x0001edfc

00012928 <clock_ready>:
	z_impl_k_sem_give(sem);
   12928:	f101 0010 	add.w	r0, r1, #16
   1292c:	f005 ba74 	b.w	17e18 <z_impl_k_sem_give>

00012930 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   12930:	b570      	push	{r4, r5, r6, lr}
   12932:	4605      	mov	r5, r0
   12934:	b08a      	sub	sp, #40	; 0x28
   12936:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   12938:	2201      	movs	r2, #1
   1293a:	2100      	movs	r1, #0
   1293c:	a804      	add	r0, sp, #16
   1293e:	f00a fba0 	bl	1d082 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   12942:	4b0f      	ldr	r3, [pc, #60]	; (12980 <blocking_on+0x50>)
   12944:	9301      	str	r3, [sp, #4]
   12946:	2600      	movs	r6, #0
   12948:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1294a:	4669      	mov	r1, sp
   1294c:	4628      	mov	r0, r5
   1294e:	9603      	str	r6, [sp, #12]
   12950:	9302      	str	r3, [sp, #8]
   12952:	f006 fd3e 	bl	193d2 <onoff_request>
	if (err < 0) {
   12956:	2800      	cmp	r0, #0
   12958:	db10      	blt.n	1297c <blocking_on+0x4c>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1295a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1295e:	4631      	mov	r1, r6
   12960:	f240 30e7 	movw	r0, #999	; 0x3e7
   12964:	fbe4 0103 	umlal	r0, r1, r4, r3
   12968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1296c:	2300      	movs	r3, #0
   1296e:	f7ee f825 	bl	9bc <__aeabi_uldivmod>
   12972:	4602      	mov	r2, r0
   12974:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   12976:	a804      	add	r0, sp, #16
   12978:	f005 fa74 	bl	17e64 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1297c:	b00a      	add	sp, #40	; 0x28
   1297e:	bd70      	pop	{r4, r5, r6, pc}
   12980:	00012929 	.word	0x00012929

00012984 <lll_clock_init>:

int lll_clock_init(void)
{
   12984:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   12986:	2001      	movs	r0, #1
   12988:	f002 f972 	bl	14c70 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1298c:	4904      	ldr	r1, [pc, #16]	; (129a0 <lll_clock_init+0x1c>)
   1298e:	2300      	movs	r3, #0
   12990:	2401      	movs	r4, #1
   12992:	604b      	str	r3, [r1, #4]
   12994:	608c      	str	r4, [r1, #8]
   12996:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   12998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return onoff_request(mgr, &lf_cli);
   1299c:	f006 bd19 	b.w	193d2 <onoff_request>
   129a0:	20001fe8 	.word	0x20001fe8

000129a4 <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   129a4:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   129a6:	2001      	movs	r0, #1
   129a8:	f002 f962 	bl	14c70 <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   129ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   129b0:	f006 bd67 	b.w	19482 <onoff_release>

000129b4 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   129b4:	4b0c      	ldr	r3, [pc, #48]	; (129e8 <lll_clock_wait+0x34>)
   129b6:	781a      	ldrb	r2, [r3, #0]
   129b8:	b10a      	cbz	r2, 129be <lll_clock_wait+0xa>
		return 0;
   129ba:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   129bc:	4770      	bx	lr
{
   129be:	b510      	push	{r4, lr}
	done = true;
   129c0:	2001      	movs	r0, #1
   129c2:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   129c4:	f002 f954 	bl	14c70 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   129c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   129cc:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   129ce:	f7ff ffaf 	bl	12930 <blocking_on>
	if (err) {
   129d2:	b938      	cbnz	r0, 129e4 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   129d4:	4620      	mov	r0, r4
   129d6:	f006 fd54 	bl	19482 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   129da:	2802      	cmp	r0, #2
		return 0;
   129dc:	bf0c      	ite	eq
   129de:	2000      	moveq	r0, #0
		return -EIO;
   129e0:	f06f 0004 	mvnne.w	r0, #4
}
   129e4:	bd10      	pop	{r4, pc}
   129e6:	bf00      	nop
   129e8:	2000271e 	.word	0x2000271e

000129ec <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   129ec:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   129ee:	4b0a      	ldr	r3, [pc, #40]	; (12a18 <lll_hfclock_on+0x2c>)
   129f0:	f3bf 8f5b 	dmb	ish
   129f4:	e853 2f00 	ldrex	r2, [r3]
   129f8:	1c51      	adds	r1, r2, #1
   129fa:	e843 1000 	strex	r0, r1, [r3]
   129fe:	2800      	cmp	r0, #0
   12a00:	d1f8      	bne.n	129f4 <lll_hfclock_on+0x8>
   12a02:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   12a06:	2a00      	cmp	r2, #0
   12a08:	dd01      	ble.n	12a0e <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   12a0a:	2000      	movs	r0, #0
   12a0c:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   12a0e:	f002 f937 	bl	14c80 <z_nrf_clock_bt_ctlr_hf_request>
}
   12a12:	2000      	movs	r0, #0
   12a14:	bd08      	pop	{r3, pc}
   12a16:	bf00      	nop
   12a18:	20001fe4 	.word	0x20001fe4

00012a1c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   12a1c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   12a1e:	4b0c      	ldr	r3, [pc, #48]	; (12a50 <lll_hfclock_off+0x34>)
   12a20:	681a      	ldr	r2, [r3, #0]
   12a22:	2a00      	cmp	r2, #0
   12a24:	dd11      	ble.n	12a4a <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12a26:	f3bf 8f5b 	dmb	ish
   12a2a:	e853 2f00 	ldrex	r2, [r3]
   12a2e:	1e51      	subs	r1, r2, #1
   12a30:	e843 1000 	strex	r0, r1, [r3]
   12a34:	2800      	cmp	r0, #0
   12a36:	d1f8      	bne.n	12a2a <lll_hfclock_off+0xe>
   12a38:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   12a3c:	2a01      	cmp	r2, #1
   12a3e:	dd01      	ble.n	12a44 <lll_hfclock_off+0x28>
		return 0;
   12a40:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   12a42:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   12a44:	f002 f932 	bl	14cac <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   12a48:	e7fa      	b.n	12a40 <lll_hfclock_off+0x24>
		return -EALREADY;
   12a4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   12a4e:	bd08      	pop	{r3, pc}
   12a50:	20001fe4 	.word	0x20001fe4

00012a54 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   12a54:	2032      	movs	r0, #50	; 0x32
   12a56:	4770      	bx	lr

00012a58 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   12a58:	4b01      	ldr	r3, [pc, #4]	; (12a60 <lll_clock_ppm_get+0x8>)
}
   12a5a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12a5e:	4770      	bx	lr
   12a60:	0001ee30 	.word	0x0001ee30

00012a64 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   12a64:	b510      	push	{r4, lr}
   12a66:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   12a68:	f7ff fe1c 	bl	126a4 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   12a6c:	f001 fb8c 	bl	14188 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   12a70:	4620      	mov	r0, r4
}
   12a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   12a76:	f7ff be21 	b.w	126bc <lll_isr_cleanup>
   12a7a:	bf00      	nop

00012a7c <isr_tx>:
{
   12a7c:	b538      	push	{r3, r4, r5, lr}
   12a7e:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   12a80:	f7ff fdfe 	bl	12680 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   12a84:	2096      	movs	r0, #150	; 0x96
   12a86:	f001 fbb1 	bl	141ec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   12a8a:	2300      	movs	r3, #0
   12a8c:	4618      	mov	r0, r3
   12a8e:	461a      	mov	r2, r3
   12a90:	4619      	mov	r1, r3
   12a92:	f001 faf9 	bl	14088 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   12a96:	2001      	movs	r0, #1
   12a98:	f7f7 fb38 	bl	a10c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   12a9c:	4604      	mov	r4, r0
   12a9e:	b368      	cbz	r0, 12afc <isr_tx+0x80>
	radio_pkt_rx_set(node_rx->pdu);
   12aa0:	f104 001c 	add.w	r0, r4, #28
   12aa4:	f001 fa26 	bl	13ef4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   12aa8:	f001 fa66 	bl	13f78 <radio_is_ready>
   12aac:	b9c0      	cbnz	r0, 12ae0 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   12aae:	4629      	mov	r1, r5
   12ab0:	4819      	ldr	r0, [pc, #100]	; (12b18 <isr_tx+0x9c>)
   12ab2:	f001 f92b 	bl	13d0c <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   12ab6:	f001 fc73 	bl	143a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   12aba:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   12abc:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   12abe:	4608      	mov	r0, r1
   12ac0:	f001 fa2e 	bl	13f20 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   12ac4:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   12ac6:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   12ac8:	4608      	mov	r0, r1
   12aca:	f001 fa25 	bl	13f18 <radio_tx_chain_delay_get>
   12ace:	442c      	add	r4, r5
   12ad0:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   12ad2:	1a20      	subs	r0, r4, r0
   12ad4:	f001 fc1c 	bl	14310 <radio_tmr_hcto_configure>
}
   12ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   12adc:	f001 bc52 	b.w	14384 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   12ae0:	4a0e      	ldr	r2, [pc, #56]	; (12b1c <isr_tx+0xa0>)
   12ae2:	490f      	ldr	r1, [pc, #60]	; (12b20 <isr_tx+0xa4>)
   12ae4:	480f      	ldr	r0, [pc, #60]	; (12b24 <isr_tx+0xa8>)
   12ae6:	f240 439f 	movw	r3, #1183	; 0x49f
   12aea:	f006 fda8 	bl	1963e <assert_print>
   12aee:	4040      	eors	r0, r0
   12af0:	f380 8811 	msr	BASEPRI, r0
   12af4:	f04f 0003 	mov.w	r0, #3
   12af8:	df02      	svc	2
   12afa:	e7d8      	b.n	12aae <isr_tx+0x32>
	LL_ASSERT(node_rx);
   12afc:	4a07      	ldr	r2, [pc, #28]	; (12b1c <isr_tx+0xa0>)
   12afe:	490a      	ldr	r1, [pc, #40]	; (12b28 <isr_tx+0xac>)
   12b00:	4808      	ldr	r0, [pc, #32]	; (12b24 <isr_tx+0xa8>)
   12b02:	f240 439b 	movw	r3, #1179	; 0x49b
   12b06:	f006 fd9a 	bl	1963e <assert_print>
   12b0a:	4040      	eors	r0, r0
   12b0c:	f380 8811 	msr	BASEPRI, r0
   12b10:	f04f 0003 	mov.w	r0, #3
   12b14:	df02      	svc	2
   12b16:	e7c3      	b.n	12aa0 <isr_tx+0x24>
   12b18:	000130d9 	.word	0x000130d9
   12b1c:	0001ee40 	.word	0x0001ee40
   12b20:	0001ee94 	.word	0x0001ee94
   12b24:	0001e1a4 	.word	0x0001e1a4
   12b28:	0001ee8c 	.word	0x0001ee8c

00012b2c <is_abort_cb>:
	if (next != curr) {
   12b2c:	4281      	cmp	r1, r0
{
   12b2e:	b508      	push	{r3, lr}
	if (next != curr) {
   12b30:	d00e      	beq.n	12b50 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   12b32:	7a0b      	ldrb	r3, [r1, #8]
   12b34:	07db      	lsls	r3, r3, #31
   12b36:	d402      	bmi.n	12b3e <is_abort_cb+0x12>
			return -ECANCELED;
   12b38:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   12b3c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   12b3e:	4b12      	ldr	r3, [pc, #72]	; (12b88 <is_abort_cb+0x5c>)
   12b40:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   12b42:	f7ff ff53 	bl	129ec <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   12b46:	2800      	cmp	r0, #0
   12b48:	db0f      	blt.n	12b6a <is_abort_cb+0x3e>
{
   12b4a:	f06f 000a 	mvn.w	r0, #10
}
   12b4e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   12b50:	7b0b      	ldrb	r3, [r1, #12]
   12b52:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   12b56:	690b      	ldr	r3, [r1, #16]
   12b58:	781b      	ldrb	r3, [r3, #0]
   12b5a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   12b5e:	2b01      	cmp	r3, #1
   12b60:	bf14      	ite	ne
   12b62:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   12b66:	2000      	moveq	r0, #0
}
   12b68:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   12b6a:	4a08      	ldr	r2, [pc, #32]	; (12b8c <is_abort_cb+0x60>)
   12b6c:	4908      	ldr	r1, [pc, #32]	; (12b90 <is_abort_cb+0x64>)
   12b6e:	4809      	ldr	r0, [pc, #36]	; (12b94 <is_abort_cb+0x68>)
   12b70:	f240 4354 	movw	r3, #1108	; 0x454
   12b74:	f006 fd63 	bl	1963e <assert_print>
   12b78:	4040      	eors	r0, r0
   12b7a:	f380 8811 	msr	BASEPRI, r0
   12b7e:	f04f 0003 	mov.w	r0, #3
   12b82:	df02      	svc	2
   12b84:	e7e1      	b.n	12b4a <is_abort_cb+0x1e>
   12b86:	bf00      	nop
   12b88:	00012fc5 	.word	0x00012fc5
   12b8c:	0001ee40 	.word	0x0001ee40
   12b90:	0001edf0 	.word	0x0001edf0
   12b94:	0001e1a4 	.word	0x0001e1a4

00012b98 <isr_abort_all>:

#if defined(CONFIG_BT_PERIPHERAL)
static void isr_abort_all(void *param)
{
   12b98:	b510      	push	{r4, lr}
   12b9a:	4604      	mov	r4, r0
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, lll_disable};
	uint32_t ret;

	/* Clear radio status and events */
	lll_isr_status_reset();
   12b9c:	f7ff fd82 	bl	126a4 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   12ba0:	f001 faf2 	bl	14188 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   12ba4:	4620      	mov	r0, r4
   12ba6:	f7ff fd89 	bl	126bc <lll_isr_cleanup>

	/* Abort any LLL prepare/resume enqueued in pipeline */
	mfy.param = param;
   12baa:	4b0b      	ldr	r3, [pc, #44]	; (12bd8 <isr_abort_all+0x40>)
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   12bac:	2100      	movs	r1, #0
   12bae:	2201      	movs	r2, #1
   12bb0:	4608      	mov	r0, r1
	mfy.param = param;
   12bb2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   12bb4:	f7f5 f914 	bl	7de0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   12bb8:	b900      	cbnz	r0, 12bbc <isr_abort_all+0x24>
}
   12bba:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   12bbc:	4a07      	ldr	r2, [pc, #28]	; (12bdc <isr_abort_all+0x44>)
   12bbe:	4908      	ldr	r1, [pc, #32]	; (12be0 <isr_abort_all+0x48>)
   12bc0:	4808      	ldr	r0, [pc, #32]	; (12be4 <isr_abort_all+0x4c>)
   12bc2:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   12bc6:	f006 fd3a 	bl	1963e <assert_print>
   12bca:	4040      	eors	r0, r0
   12bcc:	f380 8811 	msr	BASEPRI, r0
   12bd0:	f04f 0003 	mov.w	r0, #3
   12bd4:	df02      	svc	2
}
   12bd6:	bd10      	pop	{r4, pc}
   12bd8:	20000630 	.word	0x20000630
   12bdc:	0001ee40 	.word	0x0001ee40
   12be0:	0001e304 	.word	0x0001e304
   12be4:	0001e1a4 	.word	0x0001e1a4

00012be8 <abort_cb>:
{
   12be8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   12bea:	b1d8      	cbz	r0, 12c24 <abort_cb+0x3c>
	err = lll_hfclock_off();
   12bec:	460c      	mov	r4, r1
   12bee:	f7ff ff15 	bl	12a1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12bf2:	2800      	cmp	r0, #0
   12bf4:	db04      	blt.n	12c00 <abort_cb+0x18>
	lll_done(param);
   12bf6:	4620      	mov	r0, r4
}
   12bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12bfc:	f7ff bc84 	b.w	12508 <lll_done>
	LL_ASSERT(err >= 0);
   12c00:	4a0c      	ldr	r2, [pc, #48]	; (12c34 <abort_cb+0x4c>)
   12c02:	490d      	ldr	r1, [pc, #52]	; (12c38 <abort_cb+0x50>)
   12c04:	480d      	ldr	r0, [pc, #52]	; (12c3c <abort_cb+0x54>)
   12c06:	f240 437a 	movw	r3, #1146	; 0x47a
   12c0a:	f006 fd18 	bl	1963e <assert_print>
   12c0e:	4040      	eors	r0, r0
   12c10:	f380 8811 	msr	BASEPRI, r0
   12c14:	f04f 0003 	mov.w	r0, #3
   12c18:	df02      	svc	2
	lll_done(param);
   12c1a:	4620      	mov	r0, r4
}
   12c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12c20:	f7ff bc72 	b.w	12508 <lll_done>
		radio_isr_set(isr_abort, param);
   12c24:	4806      	ldr	r0, [pc, #24]	; (12c40 <abort_cb+0x58>)
   12c26:	f001 f871 	bl	13d0c <radio_isr_set>
}
   12c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   12c2e:	f001 b983 	b.w	13f38 <radio_disable>
   12c32:	bf00      	nop
   12c34:	0001ee40 	.word	0x0001ee40
   12c38:	0001edf0 	.word	0x0001edf0
   12c3c:	0001e1a4 	.word	0x0001e1a4
   12c40:	00012a65 	.word	0x00012a65

00012c44 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   12c44:	4b08      	ldr	r3, [pc, #32]	; (12c68 <lll_adv_init+0x24>)
   12c46:	2204      	movs	r2, #4
{
   12c48:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   12c4a:	1898      	adds	r0, r3, r2
   12c4c:	2128      	movs	r1, #40	; 0x28
   12c4e:	f7f4 ffbb 	bl	7bc8 <mem_init>
	MFIFO_INIT(pdu_free);
   12c52:	4b06      	ldr	r3, [pc, #24]	; (12c6c <lll_adv_init+0x28>)
   12c54:	2400      	movs	r4, #0
   12c56:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12c58:	2202      	movs	r2, #2
   12c5a:	4621      	mov	r1, r4
   12c5c:	4804      	ldr	r0, [pc, #16]	; (12c70 <lll_adv_init+0x2c>)
   12c5e:	f00a fa10 	bl	1d082 <z_impl_k_sem_init>
}
   12c62:	4620      	mov	r0, r4
   12c64:	bd10      	pop	{r4, pc}
   12c66:	bf00      	nop
   12c68:	20002018 	.word	0x20002018
   12c6c:	20000640 	.word	0x20000640
   12c70:	20002000 	.word	0x20002000

00012c74 <lll_adv_reset>:
int lll_adv_reset(void)
   12c74:	4b08      	ldr	r3, [pc, #32]	; (12c98 <lll_adv_reset+0x24>)
   12c76:	2204      	movs	r2, #4
   12c78:	b510      	push	{r4, lr}
   12c7a:	1898      	adds	r0, r3, r2
   12c7c:	2128      	movs	r1, #40	; 0x28
   12c7e:	f7f4 ffa3 	bl	7bc8 <mem_init>
   12c82:	4b06      	ldr	r3, [pc, #24]	; (12c9c <lll_adv_reset+0x28>)
   12c84:	2400      	movs	r4, #0
   12c86:	809c      	strh	r4, [r3, #4]
   12c88:	2202      	movs	r2, #2
   12c8a:	4621      	mov	r1, r4
   12c8c:	4804      	ldr	r0, [pc, #16]	; (12ca0 <lll_adv_reset+0x2c>)
   12c8e:	f00a f9f8 	bl	1d082 <z_impl_k_sem_init>
   12c92:	4620      	mov	r0, r4
   12c94:	bd10      	pop	{r4, pc}
   12c96:	bf00      	nop
   12c98:	20002018 	.word	0x20002018
   12c9c:	20000640 	.word	0x20000640
   12ca0:	20002000 	.word	0x20002000

00012ca4 <lll_adv_data_init>:
{
   12ca4:	b510      	push	{r4, lr}
   12ca6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   12ca8:	4805      	ldr	r0, [pc, #20]	; (12cc0 <lll_adv_data_init+0x1c>)
   12caa:	f7f4 ffbd 	bl	7c28 <mem_acquire>
	if (!p) {
   12cae:	b120      	cbz	r0, 12cba <lll_adv_data_init+0x16>
   12cb0:	4603      	mov	r3, r0
	p->len = 0U;
   12cb2:	2000      	movs	r0, #0
   12cb4:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   12cb6:	6063      	str	r3, [r4, #4]
}
   12cb8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   12cba:	f06f 000b 	mvn.w	r0, #11
}
   12cbe:	bd10      	pop	{r4, pc}
   12cc0:	20002018 	.word	0x20002018

00012cc4 <lll_adv_data_reset>:
{
   12cc4:	4603      	mov	r3, r0
	pdu->first = 0U;
   12cc6:	2000      	movs	r0, #0
   12cc8:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   12cca:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   12ccc:	6098      	str	r0, [r3, #8]
}
   12cce:	4770      	bx	lr

00012cd0 <lll_adv_pdu_alloc_pdu_adv>:
{
   12cd0:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   12cd2:	4c2d      	ldr	r4, [pc, #180]	; (12d88 <lll_adv_pdu_alloc_pdu_adv+0xb8>)
   12cd4:	7923      	ldrb	r3, [r4, #4]
	if (first == last) {
   12cd6:	7962      	ldrb	r2, [r4, #5]
   12cd8:	7821      	ldrb	r1, [r4, #0]
   12cda:	429a      	cmp	r2, r3
   12cdc:	d003      	beq.n	12ce6 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   12cde:	fb01 4303 	mla	r3, r1, r3, r4
   12ce2:	689d      	ldr	r5, [r3, #8]
	if (p) {
   12ce4:	b935      	cbnz	r5, 12cf4 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   12ce6:	4829      	ldr	r0, [pc, #164]	; (12d8c <lll_adv_pdu_alloc_pdu_adv+0xbc>)
   12ce8:	f7f4 ff9e 	bl	7c28 <mem_acquire>
	if (p) {
   12cec:	4605      	mov	r5, r0
   12cee:	b188      	cbz	r0, 12d14 <lll_adv_pdu_alloc_pdu_adv+0x44>
}
   12cf0:	4628      	mov	r0, r5
   12cf2:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_reset(sem);
   12cf4:	4826      	ldr	r0, [pc, #152]	; (12d90 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   12cf6:	f005 f8dd 	bl	17eb4 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   12cfa:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   12cfc:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   12cfe:	78a1      	ldrb	r1, [r4, #2]
   12d00:	429a      	cmp	r2, r3
   12d02:	d0f5      	beq.n	12cf0 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   12d04:	3301      	adds	r3, #1
   12d06:	b2db      	uxtb	r3, r3
		_first = 0U;
   12d08:	4299      	cmp	r1, r3
   12d0a:	bf08      	it	eq
   12d0c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12d0e:	7123      	strb	r3, [r4, #4]
}
   12d10:	4628      	mov	r0, r5
   12d12:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   12d14:	481e      	ldr	r0, [pc, #120]	; (12d90 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   12d16:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   12d1a:	2300      	movs	r3, #0
   12d1c:	f005 f8a2 	bl	17e64 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   12d20:	b9b0      	cbnz	r0, 12d50 <lll_adv_pdu_alloc_pdu_adv+0x80>
	z_impl_k_sem_reset(sem);
   12d22:	481b      	ldr	r0, [pc, #108]	; (12d90 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   12d24:	f005 f8c6 	bl	17eb4 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   12d28:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   12d2a:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   12d2c:	7822      	ldrb	r2, [r4, #0]
   12d2e:	78a0      	ldrb	r0, [r4, #2]
   12d30:	4299      	cmp	r1, r3
   12d32:	d01b      	beq.n	12d6c <lll_adv_pdu_alloc_pdu_adv+0x9c>
	mem = *((void **)(fifo + _first * size));
   12d34:	fb13 f202 	smulbb	r2, r3, r2
   12d38:	4916      	ldr	r1, [pc, #88]	; (12d94 <lll_adv_pdu_alloc_pdu_adv+0xc4>)
	_first += 1U;
   12d3a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   12d3c:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   12d3e:	b2db      	uxtb	r3, r3
		_first = 0U;
   12d40:	4298      	cmp	r0, r3
   12d42:	bf08      	it	eq
   12d44:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12d46:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   12d48:	b182      	cbz	r2, 12d6c <lll_adv_pdu_alloc_pdu_adv+0x9c>
   12d4a:	4615      	mov	r5, r2
}
   12d4c:	4628      	mov	r0, r5
   12d4e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!err);
   12d50:	4a11      	ldr	r2, [pc, #68]	; (12d98 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   12d52:	4912      	ldr	r1, [pc, #72]	; (12d9c <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   12d54:	4812      	ldr	r0, [pc, #72]	; (12da0 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   12d56:	f240 13b9 	movw	r3, #441	; 0x1b9
   12d5a:	f006 fc70 	bl	1963e <assert_print>
   12d5e:	4040      	eors	r0, r0
   12d60:	f380 8811 	msr	BASEPRI, r0
   12d64:	f04f 0003 	mov.w	r0, #3
   12d68:	df02      	svc	2
   12d6a:	e7da      	b.n	12d22 <lll_adv_pdu_alloc_pdu_adv+0x52>
	LL_ASSERT(p);
   12d6c:	4a0a      	ldr	r2, [pc, #40]	; (12d98 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   12d6e:	490d      	ldr	r1, [pc, #52]	; (12da4 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   12d70:	480b      	ldr	r0, [pc, #44]	; (12da0 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   12d72:	f44f 73df 	mov.w	r3, #446	; 0x1be
   12d76:	f006 fc62 	bl	1963e <assert_print>
   12d7a:	4040      	eors	r0, r0
   12d7c:	f380 8811 	msr	BASEPRI, r0
   12d80:	f04f 0003 	mov.w	r0, #3
   12d84:	df02      	svc	2
   12d86:	e7b3      	b.n	12cf0 <lll_adv_pdu_alloc_pdu_adv+0x20>
   12d88:	20000640 	.word	0x20000640
   12d8c:	20002018 	.word	0x20002018
   12d90:	20002000 	.word	0x20002000
   12d94:	20000648 	.word	0x20000648
   12d98:	0001ee40 	.word	0x0001ee40
   12d9c:	0001e200 	.word	0x0001e200
   12da0:	0001e1a4 	.word	0x0001e1a4
   12da4:	0001eea8 	.word	0x0001eea8

00012da8 <lll_adv_pdu_alloc>:
{
   12da8:	b510      	push	{r4, lr}
	first = pdu->first;
   12daa:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   12dac:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   12dae:	429a      	cmp	r2, r3
   12db0:	d014      	beq.n	12ddc <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   12db2:	b2d4      	uxtb	r4, r2
   12db4:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   12db6:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   12db8:	4294      	cmp	r4, r2
   12dba:	d004      	beq.n	12dc6 <lll_adv_pdu_alloc+0x1e>
			last++;
   12dbc:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   12dbe:	7043      	strb	r3, [r0, #1]
			last++;
   12dc0:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   12dc2:	2b02      	cmp	r3, #2
   12dc4:	d00e      	beq.n	12de4 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   12dc6:	461a      	mov	r2, r3
	*idx = last;
   12dc8:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   12dcc:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   12dce:	6860      	ldr	r0, [r4, #4]
	if (p) {
   12dd0:	b100      	cbz	r0, 12dd4 <lll_adv_pdu_alloc+0x2c>
}
   12dd2:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   12dd4:	f7ff ff7c 	bl	12cd0 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   12dd8:	6060      	str	r0, [r4, #4]
}
   12dda:	bd10      	pop	{r4, pc}
		last++;
   12ddc:	3301      	adds	r3, #1
   12dde:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   12de0:	2b02      	cmp	r3, #2
   12de2:	d1f0      	bne.n	12dc6 <lll_adv_pdu_alloc+0x1e>
{
   12de4:	2200      	movs	r2, #0
			last = 0U;
   12de6:	4613      	mov	r3, r2
   12de8:	e7ee      	b.n	12dc8 <lll_adv_pdu_alloc+0x20>
   12dea:	bf00      	nop

00012dec <lll_adv_pdu_latest_get>:
{
   12dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   12dee:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   12df0:	7843      	ldrb	r3, [r0, #1]
   12df2:	4293      	cmp	r3, r2
{
   12df4:	4604      	mov	r4, r0
	if (first != pdu->last) {
   12df6:	d02c      	beq.n	12e52 <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   12df8:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   12dfa:	4a18      	ldr	r2, [pc, #96]	; (12e5c <lll_adv_pdu_latest_get+0x70>)
   12dfc:	f892 e005 	ldrb.w	lr, [r2, #5]
   12e00:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   12e04:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   12e08:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   12e0a:	b2db      	uxtb	r3, r3
		last = 0U;
   12e0c:	4298      	cmp	r0, r3
   12e0e:	bf08      	it	eq
   12e10:	2300      	moveq	r3, #0
   12e12:	7910      	ldrb	r0, [r2, #4]
	if (last == first) {
   12e14:	4298      	cmp	r0, r3
   12e16:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   12e18:	6879      	ldr	r1, [r7, #4]
   12e1a:	d00b      	beq.n	12e34 <lll_adv_pdu_latest_get+0x48>
			MFIFO_BY_IDX_ENQUEUE(pdu_free, free_idx, p);
   12e1c:	4694      	mov	ip, r2
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12e1e:	f81c 0b08 	ldrb.w	r0, [ip], #8
   12e22:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12e26:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   12e2a:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   12e2c:	480c      	ldr	r0, [pc, #48]	; (12e60 <lll_adv_pdu_latest_get+0x74>)
   12e2e:	f004 fff3 	bl	17e18 <z_impl_k_sem_give>
			p = next;
   12e32:	2100      	movs	r1, #0
		first += 1U;
   12e34:	1c6b      	adds	r3, r5, #1
   12e36:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12e38:	2b02      	cmp	r3, #2
   12e3a:	bf0a      	itet	eq
   12e3c:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   12e3e:	461a      	movne	r2, r3
			first = 0U;
   12e40:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   12e42:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   12e44:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   12e46:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   12e48:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   12e4c:	7031      	strb	r1, [r6, #0]
}
   12e4e:	6860      	ldr	r0, [r4, #4]
   12e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   12e52:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   12e54:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   12e58:	6860      	ldr	r0, [r4, #4]
   12e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e5c:	20000640 	.word	0x20000640
   12e60:	20002000 	.word	0x20002000

00012e64 <chan_prepare.isra.0>:
#endif /* CONFIG_BT_PERIPHERAL */

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   12e64:	b530      	push	{r4, r5, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   12e66:	7a03      	ldrb	r3, [r0, #8]
   12e68:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   12e6c:	4604      	mov	r4, r0
   12e6e:	2b00      	cmp	r3, #0
   12e70:	fa93 f0a3 	rbit	r0, r3
   12e74:	fab0 f080 	clz	r0, r0
   12e78:	bf08      	it	eq
   12e7a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   12e7e:	b083      	sub	sp, #12
   12e80:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   12e84:	d03b      	beq.n	12efe <chan_prepare.isra.0+0x9a>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12e86:	7a21      	ldrb	r1, [r4, #8]
   12e88:	1e5a      	subs	r2, r3, #1
   12e8a:	4013      	ands	r3, r2
   12e8c:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   12e90:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12e94:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   12e96:	f7ff fbad 	bl	125f4 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   12e9a:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   12e9c:	f10d 0107 	add.w	r1, sp, #7
   12ea0:	f104 000c 	add.w	r0, r4, #12
   12ea4:	f88d 3007 	strb.w	r3, [sp, #7]
   12ea8:	f7ff ffa0 	bl	12dec <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   12eac:	4605      	mov	r5, r0
   12eae:	2800      	cmp	r0, #0
   12eb0:	d036      	beq.n	12f20 <chan_prepare.isra.0+0xbc>

	radio_pkt_tx_set(pdu);
   12eb2:	4628      	mov	r0, r5
   12eb4:	f001 f824 	bl	13f00 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12eb8:	782b      	ldrb	r3, [r5, #0]
   12eba:	f003 030f 	and.w	r3, r3, #15
   12ebe:	2b02      	cmp	r3, #2
   12ec0:	d014      	beq.n	12eec <chan_prepare.isra.0+0x88>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   12ec2:	f10d 0107 	add.w	r1, sp, #7
   12ec6:	f104 0018 	add.w	r0, r4, #24
   12eca:	f7ff ff8f 	bl	12dec <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   12ece:	2800      	cmp	r0, #0
   12ed0:	d034      	beq.n	12f3c <chan_prepare.isra.0+0xd8>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   12ed2:	4621      	mov	r1, r4
   12ed4:	4820      	ldr	r0, [pc, #128]	; (12f58 <chan_prepare.isra.0+0xf4>)
   12ed6:	f000 ff19 	bl	13d0c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   12eda:	2096      	movs	r0, #150	; 0x96
   12edc:	f001 f986 	bl	141ec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12ee0:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   12ee2:	b003      	add	sp, #12
   12ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_rx(0);
   12ee8:	f001 b886 	b.w	13ff8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
   12eec:	481b      	ldr	r0, [pc, #108]	; (12f5c <chan_prepare.isra.0+0xf8>)
   12eee:	4621      	mov	r1, r4
   12ef0:	f000 ff0c 	bl	13d0c <radio_isr_set>
}
   12ef4:	b003      	add	sp, #12
   12ef6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_disable();
   12efa:	f001 b925 	b.w	14148 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   12efe:	4a18      	ldr	r2, [pc, #96]	; (12f60 <chan_prepare.isra.0+0xfc>)
   12f00:	4918      	ldr	r1, [pc, #96]	; (12f64 <chan_prepare.isra.0+0x100>)
   12f02:	4819      	ldr	r0, [pc, #100]	; (12f68 <chan_prepare.isra.0+0x104>)
   12f04:	f240 53b3 	movw	r3, #1459	; 0x5b3
   12f08:	f006 fb99 	bl	1963e <assert_print>
   12f0c:	4040      	eors	r0, r0
   12f0e:	f380 8811 	msr	BASEPRI, r0
   12f12:	f04f 0003 	mov.w	r0, #3
   12f16:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12f18:	7a23      	ldrb	r3, [r4, #8]
   12f1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
   12f1e:	e7b2      	b.n	12e86 <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   12f20:	4a0f      	ldr	r2, [pc, #60]	; (12f60 <chan_prepare.isra.0+0xfc>)
   12f22:	4912      	ldr	r1, [pc, #72]	; (12f6c <chan_prepare.isra.0+0x108>)
   12f24:	4810      	ldr	r0, [pc, #64]	; (12f68 <chan_prepare.isra.0+0x104>)
   12f26:	f240 53bc 	movw	r3, #1468	; 0x5bc
   12f2a:	f006 fb88 	bl	1963e <assert_print>
   12f2e:	4040      	eors	r0, r0
   12f30:	f380 8811 	msr	BASEPRI, r0
   12f34:	f04f 0003 	mov.w	r0, #3
   12f38:	df02      	svc	2
   12f3a:	e7ba      	b.n	12eb2 <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   12f3c:	4a08      	ldr	r2, [pc, #32]	; (12f60 <chan_prepare.isra.0+0xfc>)
   12f3e:	490c      	ldr	r1, [pc, #48]	; (12f70 <chan_prepare.isra.0+0x10c>)
   12f40:	4809      	ldr	r0, [pc, #36]	; (12f68 <chan_prepare.isra.0+0x104>)
   12f42:	f240 53c6 	movw	r3, #1478	; 0x5c6
   12f46:	f006 fb7a 	bl	1963e <assert_print>
   12f4a:	4040      	eors	r0, r0
   12f4c:	f380 8811 	msr	BASEPRI, r0
   12f50:	f04f 0003 	mov.w	r0, #3
   12f54:	df02      	svc	2
   12f56:	e7bc      	b.n	12ed2 <chan_prepare.isra.0+0x6e>
   12f58:	00012a7d 	.word	0x00012a7d
   12f5c:	00012f75 	.word	0x00012f75
   12f60:	0001ee40 	.word	0x0001ee40
   12f64:	0001eeac 	.word	0x0001eeac
   12f68:	0001e1a4 	.word	0x0001e1a4
   12f6c:	0001eeb4 	.word	0x0001eeb4
   12f70:	0001eeb8 	.word	0x0001eeb8

00012f74 <isr_done>:
{
   12f74:	b510      	push	{r4, lr}
   12f76:	4604      	mov	r4, r0
	lll_isr_status_reset();
   12f78:	f7ff fb94 	bl	126a4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   12f7c:	7a23      	ldrb	r3, [r4, #8]
   12f7e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   12f82:	2a01      	cmp	r2, #1
   12f84:	d105      	bne.n	12f92 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   12f86:	f3c3 0242 	ubfx	r2, r3, #1, #3
   12f8a:	f362 1306 	bfi	r3, r2, #4, #3
   12f8e:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   12f90:	b2db      	uxtb	r3, r3
   12f92:	f013 0f70 	tst.w	r3, #112	; 0x70
   12f96:	d005      	beq.n	12fa4 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   12f98:	6863      	ldr	r3, [r4, #4]
   12f9a:	b153      	cbz	r3, 12fb2 <isr_done+0x3e>
   12f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
   12fa0:	079b      	lsls	r3, r3, #30
   12fa2:	d506      	bpl.n	12fb2 <isr_done+0x3e>
	radio_filter_disable();
   12fa4:	f001 f8f0 	bl	14188 <radio_filter_disable>
	lll_isr_cleanup(param);
   12fa8:	4620      	mov	r0, r4
}
   12faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   12fae:	f7ff bb85 	b.w	126bc <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   12fb2:	4620      	mov	r0, r4
   12fb4:	f7ff ff56 	bl	12e64 <chan_prepare.isra.0>
		radio_tx_enable();
   12fb8:	f000 ffb8 	bl	13f2c <radio_tx_enable>
}
   12fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   12fc0:	f001 b9e0 	b.w	14384 <radio_tmr_end_capture>

00012fc4 <resume_prepare_cb>:
{
   12fc4:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   12fc6:	68c3      	ldr	r3, [r0, #12]
{
   12fc8:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   12fca:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   12fcc:	f7f6 f9f6 	bl	93bc <ticker_ticks_now_get>
   12fd0:	4605      	mov	r5, r0
   12fd2:	4630      	mov	r0, r6
   12fd4:	f7ff faee 	bl	125b4 <lll_event_offset_get>
	p->remainder = 0;
   12fd8:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   12fda:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   12fdc:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   12fe0:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   12fe2:	4620      	mov	r0, r4
}
   12fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   12fe8:	f7ee bf56 	b.w	1e98 <prepare_cb>

00012fec <lll_adv_prepare>:
{
   12fec:	b510      	push	{r4, lr}
   12fee:	b082      	sub	sp, #8
   12ff0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   12ff2:	f7ff fcfb 	bl	129ec <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   12ff6:	2800      	cmp	r0, #0
   12ff8:	db1a      	blt.n	13030 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   12ffa:	4a14      	ldr	r2, [pc, #80]	; (1304c <lll_adv_prepare+0x60>)
   12ffc:	4914      	ldr	r1, [pc, #80]	; (13050 <lll_adv_prepare+0x64>)
   12ffe:	4815      	ldr	r0, [pc, #84]	; (13054 <lll_adv_prepare+0x68>)
   13000:	9400      	str	r4, [sp, #0]
   13002:	2300      	movs	r3, #0
   13004:	f7f7 fbe8 	bl	a7d8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13008:	b108      	cbz	r0, 1300e <lll_adv_prepare+0x22>
   1300a:	3077      	adds	r0, #119	; 0x77
   1300c:	d101      	bne.n	13012 <lll_adv_prepare+0x26>
}
   1300e:	b002      	add	sp, #8
   13010:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   13012:	4a11      	ldr	r2, [pc, #68]	; (13058 <lll_adv_prepare+0x6c>)
   13014:	4911      	ldr	r1, [pc, #68]	; (1305c <lll_adv_prepare+0x70>)
   13016:	4812      	ldr	r0, [pc, #72]	; (13060 <lll_adv_prepare+0x74>)
   13018:	f240 23b2 	movw	r3, #690	; 0x2b2
   1301c:	f006 fb0f 	bl	1963e <assert_print>
   13020:	4040      	eors	r0, r0
   13022:	f380 8811 	msr	BASEPRI, r0
   13026:	f04f 0003 	mov.w	r0, #3
   1302a:	df02      	svc	2
}
   1302c:	b002      	add	sp, #8
   1302e:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   13030:	4a09      	ldr	r2, [pc, #36]	; (13058 <lll_adv_prepare+0x6c>)
   13032:	490c      	ldr	r1, [pc, #48]	; (13064 <lll_adv_prepare+0x78>)
   13034:	480a      	ldr	r0, [pc, #40]	; (13060 <lll_adv_prepare+0x74>)
   13036:	f240 23af 	movw	r3, #687	; 0x2af
   1303a:	f006 fb00 	bl	1963e <assert_print>
   1303e:	4040      	eors	r0, r0
   13040:	f380 8811 	msr	BASEPRI, r0
   13044:	f04f 0003 	mov.w	r0, #3
   13048:	df02      	svc	2
   1304a:	e7d6      	b.n	12ffa <lll_adv_prepare+0xe>
   1304c:	00001e99 	.word	0x00001e99
   13050:	00012be9 	.word	0x00012be9
   13054:	00012b2d 	.word	0x00012b2d
   13058:	0001ee40 	.word	0x0001ee40
   1305c:	0001e378 	.word	0x0001e378
   13060:	0001e1a4 	.word	0x0001e1a4
   13064:	0001edf0 	.word	0x0001edf0

00013068 <lll_adv_connect_ind_check>:
{
   13068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1306a:	9e07      	ldr	r6, [sp, #28]
   1306c:	f89d 7018 	ldrb.w	r7, [sp, #24]
   13070:	f89d 4020 	ldrb.w	r4, [sp, #32]
   13074:	460d      	mov	r5, r1
	if (tgt_addr) {
   13076:	b95e      	cbnz	r6, 13090 <lll_adv_connect_ind_check+0x28>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   13078:	7a41      	ldrb	r1, [r0, #9]
		(devmatch_ok)) &&
   1307a:	f001 0103 	and.w	r1, r1, #3
   1307e:	2901      	cmp	r1, #1
   13080:	d900      	bls.n	13084 <lll_adv_connect_ind_check+0x1c>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   13082:	b11c      	cbz	r4, 1308c <lll_adv_connect_ind_check+0x24>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   13084:	7829      	ldrb	r1, [r5, #0]
   13086:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1308a:	d01b      	beq.n	130c4 <lll_adv_connect_ind_check+0x5c>
   1308c:	2000      	movs	r0, #0
}
   1308e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (tx_addr == sr->rx_addr) &&
   13090:	7809      	ldrb	r1, [r1, #0]
   13092:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   13096:	d1f9      	bne.n	1308c <lll_adv_connect_ind_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   13098:	2206      	movs	r2, #6
   1309a:	4618      	mov	r0, r3
   1309c:	f105 0108 	add.w	r1, r5, #8
   130a0:	f006 fd98 	bl	19bd4 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   130a4:	2800      	cmp	r0, #0
   130a6:	d1f1      	bne.n	1308c <lll_adv_connect_ind_check+0x24>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
		return rl_idx == lll->rl_idx;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   130a8:	782b      	ldrb	r3, [r5, #0]
   130aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
   130ae:	42bb      	cmp	r3, r7
   130b0:	d1ec      	bne.n	1308c <lll_adv_connect_ind_check+0x24>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   130b2:	2206      	movs	r2, #6
   130b4:	1ca9      	adds	r1, r5, #2
   130b6:	4630      	mov	r0, r6
   130b8:	f006 fd8c 	bl	19bd4 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   130bc:	fab0 f080 	clz	r0, r0
   130c0:	0940      	lsrs	r0, r0, #5
}
   130c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   130c4:	2206      	movs	r2, #6
   130c6:	f105 0108 	add.w	r1, r5, #8
   130ca:	4618      	mov	r0, r3
   130cc:	f006 fd82 	bl	19bd4 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   130d0:	fab0 f080 	clz	r0, r0
   130d4:	0940      	lsrs	r0, r0, #5
}
   130d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000130d8 <isr_rx>:
{
   130d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   130dc:	b088      	sub	sp, #32
   130de:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   130e0:	f000 ff54 	bl	13f8c <radio_is_done>
	if (trx_done) {
   130e4:	b2c0      	uxtb	r0, r0
   130e6:	b950      	cbnz	r0, 130fe <isr_rx+0x26>
	lll_isr_status_reset();
   130e8:	f7ff fadc 	bl	126a4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   130ec:	4873      	ldr	r0, [pc, #460]	; (132bc <isr_rx+0x1e4>)
   130ee:	4621      	mov	r1, r4
   130f0:	f000 fe0c 	bl	13d0c <radio_isr_set>
}
   130f4:	b008      	add	sp, #32
   130f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_disable();
   130fa:	f000 bf1d 	b.w	13f38 <radio_disable>
		crc_ok = radio_crc_is_valid();
   130fe:	f000 ff65 	bl	13fcc <radio_crc_is_valid>
   13102:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   13104:	f001 f852 	bl	141ac <radio_filter_has_match>
	if (crc_ok) {
   13108:	b2ed      	uxtb	r5, r5
		devmatch_ok = radio_filter_has_match();
   1310a:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   1310c:	f001 f858 	bl	141c0 <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
   13110:	f001 f830 	bl	14174 <radio_rssi_is_ready>
	lll_isr_status_reset();
   13114:	f7ff fac6 	bl	126a4 <lll_isr_status_reset>
	if (crc_ok) {
   13118:	2d00      	cmp	r5, #0
   1311a:	d0e7      	beq.n	130ec <isr_rx+0x14>
	uint8_t rl_idx = FILTER_IDX_NONE;
   1311c:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   1311e:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   13120:	f88d 301f 	strb.w	r3, [sp, #31]
	node_rx = ull_pdu_rx_alloc_peek(1);
   13124:	f7f6 fff2 	bl	a10c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13128:	4605      	mov	r5, r0
   1312a:	2800      	cmp	r0, #0
   1312c:	f000 8097 	beq.w	1325e <isr_rx+0x186>
   13130:	7b23      	ldrb	r3, [r4, #12]
   13132:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   13136:	f105 091c 	add.w	r9, r5, #28
   1313a:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   1313c:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1313e:	b2f6      	uxtb	r6, r6
	tx_addr = pdu_adv->tx_addr;
   13140:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   13144:	f002 000f 	and.w	r0, r2, #15
   13148:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1314a:	bf08      	it	eq
   1314c:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13150:	7f29      	ldrb	r1, [r5, #28]
	tx_addr = pdu_adv->tx_addr;
   13152:	f3c2 1a80 	ubfx	sl, r2, #6, #1
	rx_addr = pdu_adv->rx_addr;
   13156:	ea4f 17d2 	mov.w	r7, r2, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1315a:	f001 020f 	and.w	r2, r1, #15
		tgt_addr = NULL;
   1315e:	bf18      	it	ne
   13160:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13164:	2a03      	cmp	r2, #3
   13166:	d04d      	beq.n	13204 <isr_rx+0x12c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13168:	2a05      	cmp	r2, #5
   1316a:	d1bf      	bne.n	130ec <isr_rx+0x14>
   1316c:	7f6a      	ldrb	r2, [r5, #29]
   1316e:	2a22      	cmp	r2, #34	; 0x22
   13170:	d1bc      	bne.n	130ec <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   13172:	6862      	ldr	r2, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   13174:	2a00      	cmp	r2, #0
   13176:	d0b9      	beq.n	130ec <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   13178:	f892 2020 	ldrb.w	r2, [r2, #32]
   1317c:	0792      	lsls	r2, r2, #30
   1317e:	d4b5      	bmi.n	130ec <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   13180:	f10d 051f 	add.w	r5, sp, #31
   13184:	e9cd 8601 	strd	r8, r6, [sp, #4]
   13188:	9700      	str	r7, [sp, #0]
   1318a:	4652      	mov	r2, sl
   1318c:	4649      	mov	r1, r9
   1318e:	4620      	mov	r0, r4
   13190:	9503      	str	r5, [sp, #12]
   13192:	f7ff ff69 	bl	13068 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   13196:	2800      	cmp	r0, #0
   13198:	d0a8      	beq.n	130ec <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1319a:	2004      	movs	r0, #4
   1319c:	f7f6 ffb6 	bl	a10c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   131a0:	2800      	cmp	r0, #0
   131a2:	d0a3      	beq.n	130ec <isr_rx+0x14>
		radio_isr_set(isr_abort_all, lll);
   131a4:	4846      	ldr	r0, [pc, #280]	; (132c0 <isr_rx+0x1e8>)
   131a6:	4621      	mov	r1, r4
   131a8:	f000 fdb0 	bl	13d0c <radio_isr_set>
		radio_disable();
   131ac:	f000 fec4 	bl	13f38 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   131b0:	f000 fee2 	bl	13f78 <radio_is_ready>
   131b4:	2800      	cmp	r0, #0
   131b6:	d144      	bne.n	13242 <isr_rx+0x16a>
		lll->conn->periph.initiated = 1;
   131b8:	6862      	ldr	r2, [r4, #4]
   131ba:	f892 3020 	ldrb.w	r3, [r2, #32]
   131be:	f043 0301 	orr.w	r3, r3, #1
   131c2:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   131c6:	f7f6 ffc3 	bl	a150 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   131ca:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   131cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   131d0:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   131d2:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   131d4:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   131d6:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   131d8:	f001 f888 	bl	142ec <radio_tmr_start_get>
   131dc:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   131de:	f001 f8d9 	bl	14394 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   131e2:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   131e4:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   131e6:	4608      	mov	r0, r1
   131e8:	f000 fe9a 	bl	13f20 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   131ec:	1a24      	subs	r4, r4, r0
   131ee:	616c      	str	r4, [r5, #20]
			ftr->extra = ull_pdu_rx_alloc();
   131f0:	f7f6 ffae 	bl	a150 <ull_pdu_rx_alloc>
   131f4:	60e8      	str	r0, [r5, #12]
		ull_rx_put_sched(rx->hdr.link, rx);
   131f6:	6828      	ldr	r0, [r5, #0]
   131f8:	4629      	mov	r1, r5
}
   131fa:	b008      	add	sp, #32
   131fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		ull_rx_put_sched(rx->hdr.link, rx);
   13200:	f7f6 bfd4 	b.w	a1ac <ull_rx_put_sched>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13204:	7f6a      	ldrb	r2, [r5, #29]
   13206:	2a0c      	cmp	r2, #12
   13208:	f47f af70 	bne.w	130ec <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1320c:	f1b8 0f00 	cmp.w	r8, #0
   13210:	f47f af6c 	bne.w	130ec <isr_rx+0x14>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   13214:	7a62      	ldrb	r2, [r4, #9]
		 devmatch_ok) &&
   13216:	07d0      	lsls	r0, r2, #31
   13218:	d502      	bpl.n	13220 <isr_rx+0x148>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   1321a:	2e00      	cmp	r6, #0
   1321c:	f43f af66 	beq.w	130ec <isr_rx+0x14>
	return (tx_addr == sr->rx_addr) &&
   13220:	ebba 1fd1 	cmp.w	sl, r1, lsr #7
   13224:	f47f af62 	bne.w	130ec <isr_rx+0x14>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   13228:	2206      	movs	r2, #6
   1322a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1322e:	4618      	mov	r0, r3
   13230:	9305      	str	r3, [sp, #20]
   13232:	f006 fccf 	bl	19bd4 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   13236:	b300      	cbz	r0, 1327a <isr_rx+0x1a2>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13238:	7f2a      	ldrb	r2, [r5, #28]
   1323a:	9b05      	ldr	r3, [sp, #20]
   1323c:	f002 020f 	and.w	r2, r2, #15
   13240:	e792      	b.n	13168 <isr_rx+0x90>
		LL_ASSERT(!radio_is_ready());
   13242:	4a20      	ldr	r2, [pc, #128]	; (132c4 <isr_rx+0x1ec>)
   13244:	4920      	ldr	r1, [pc, #128]	; (132c8 <isr_rx+0x1f0>)
   13246:	4821      	ldr	r0, [pc, #132]	; (132cc <isr_rx+0x1f4>)
   13248:	f240 6356 	movw	r3, #1622	; 0x656
   1324c:	f006 f9f7 	bl	1963e <assert_print>
   13250:	4040      	eors	r0, r0
   13252:	f380 8811 	msr	BASEPRI, r0
   13256:	f04f 0003 	mov.w	r0, #3
   1325a:	df02      	svc	2
   1325c:	e7ac      	b.n	131b8 <isr_rx+0xe0>
	LL_ASSERT(node_rx);
   1325e:	4a19      	ldr	r2, [pc, #100]	; (132c4 <isr_rx+0x1ec>)
   13260:	491b      	ldr	r1, [pc, #108]	; (132d0 <isr_rx+0x1f8>)
   13262:	481a      	ldr	r0, [pc, #104]	; (132cc <isr_rx+0x1f4>)
   13264:	f240 53f6 	movw	r3, #1526	; 0x5f6
   13268:	f006 f9e9 	bl	1963e <assert_print>
   1326c:	4040      	eors	r0, r0
   1326e:	f380 8811 	msr	BASEPRI, r0
   13272:	f04f 0003 	mov.w	r0, #3
   13276:	df02      	svc	2
   13278:	e75a      	b.n	13130 <isr_rx+0x58>
		radio_isr_set(isr_done, lll);
   1327a:	4810      	ldr	r0, [pc, #64]	; (132bc <isr_rx+0x1e4>)
   1327c:	4621      	mov	r1, r4
   1327e:	f000 fd45 	bl	13d0c <radio_isr_set>
		radio_switch_complete_and_disable();
   13282:	f000 ff61 	bl	14148 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   13286:	7e23      	ldrb	r3, [r4, #24]
   13288:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1328c:	69d8      	ldr	r0, [r3, #28]
   1328e:	f000 fe37 	bl	13f00 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   13292:	f000 fe71 	bl	13f78 <radio_is_ready>
   13296:	b910      	cbnz	r0, 1329e <isr_rx+0x1c6>
}
   13298:	b008      	add	sp, #32
   1329a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(!radio_is_ready());
   1329e:	4a09      	ldr	r2, [pc, #36]	; (132c4 <isr_rx+0x1ec>)
   132a0:	4909      	ldr	r1, [pc, #36]	; (132c8 <isr_rx+0x1f0>)
   132a2:	480a      	ldr	r0, [pc, #40]	; (132cc <isr_rx+0x1f4>)
   132a4:	f240 630f 	movw	r3, #1551	; 0x60f
   132a8:	f006 f9c9 	bl	1963e <assert_print>
   132ac:	4040      	eors	r0, r0
   132ae:	f380 8811 	msr	BASEPRI, r0
   132b2:	f04f 0003 	mov.w	r0, #3
   132b6:	df02      	svc	2
		if (!err) {
   132b8:	e7ee      	b.n	13298 <isr_rx+0x1c0>
   132ba:	bf00      	nop
   132bc:	00012f75 	.word	0x00012f75
   132c0:	00012b99 	.word	0x00012b99
   132c4:	0001ee40 	.word	0x0001ee40
   132c8:	0001ee94 	.word	0x0001ee94
   132cc:	0001e1a4 	.word	0x0001e1a4
   132d0:	0001ee8c 	.word	0x0001ee8c

000132d4 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   132d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132d6:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   132d8:	f7ff f9e4 	bl	126a4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   132dc:	f7f7 f858 	bl	a390 <ull_event_done_extra_get>
	LL_ASSERT(e);
   132e0:	4604      	mov	r4, r0
   132e2:	2800      	cmp	r0, #0
   132e4:	d036      	beq.n	13354 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   132e6:	4922      	ldr	r1, [pc, #136]	; (13370 <isr_done+0x9c>)
   132e8:	79a2      	ldrb	r2, [r4, #6]
   132ea:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   132ec:	4b21      	ldr	r3, [pc, #132]	; (13374 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   132ee:	f360 0200 	bfi	r2, r0, #0, #1
   132f2:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   132f4:	4a20      	ldr	r2, [pc, #128]	; (13378 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   132f6:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   132f8:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   132fa:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   132fc:	2101      	movs	r1, #1
   132fe:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   13300:	7222      	strb	r2, [r4, #8]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   13302:	b11b      	cbz	r3, 1330c <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   13304:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13308:	2b00      	cmp	r3, #0
   1330a:	db04      	blt.n	13316 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1330c:	4628      	mov	r0, r5
}
   1330e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   13312:	f7ff b9d3 	b.w	126bc <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   13316:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
   1331a:	f003 0307 	and.w	r3, r3, #7
   1331e:	2b02      	cmp	r3, #2
   13320:	d016      	beq.n	13350 <isr_done+0x7c>
		return 40;
   13322:	2b04      	cmp	r3, #4
   13324:	bf0c      	ite	eq
   13326:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   1332a:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1332c:	f001 f81e 	bl	1436c <radio_tmr_aa_restore>
   13330:	4606      	mov	r6, r0
   13332:	f001 f821 	bl	14378 <radio_tmr_ready_get>
   13336:	1a36      	subs	r6, r6, r0
			e->drift.start_to_address_actual_us =
   13338:	60e6      	str	r6, [r4, #12]
				lll->periph.window_widening_event_us;
   1333a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1333c:	e9c4 2704 	strd	r2, r7, [r4, #16]
			lll->periph.window_widening_event_us = 0;
   13340:	2300      	movs	r3, #0
   13342:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   13344:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   13346:	4628      	mov	r0, r5
}
   13348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1334c:	f7ff b9b6 	b.w	126bc <lll_isr_cleanup>
	switch (phy) {
   13350:	2718      	movs	r7, #24
   13352:	e7eb      	b.n	1332c <isr_done+0x58>
	LL_ASSERT(e);
   13354:	4a09      	ldr	r2, [pc, #36]	; (1337c <isr_done+0xa8>)
   13356:	490a      	ldr	r1, [pc, #40]	; (13380 <isr_done+0xac>)
   13358:	480a      	ldr	r0, [pc, #40]	; (13384 <isr_done+0xb0>)
   1335a:	f44f 7352 	mov.w	r3, #840	; 0x348
   1335e:	f006 f96e 	bl	1963e <assert_print>
   13362:	4040      	eors	r0, r0
   13364:	f380 8811 	msr	BASEPRI, r0
   13368:	f04f 0003 	mov.w	r0, #3
   1336c:	df02      	svc	2
   1336e:	e7ba      	b.n	132e6 <isr_done+0x12>
   13370:	20002720 	.word	0x20002720
   13374:	200026fa 	.word	0x200026fa
   13378:	2000271f 	.word	0x2000271f
   1337c:	0001eefc 	.word	0x0001eefc
   13380:	0001e910 	.word	0x0001e910
   13384:	0001e1a4 	.word	0x0001e1a4

00013388 <lll_conn_init>:
{
   13388:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1338a:	f000 fe29 	bl	13fe0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1338e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   13390:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13392:	2101      	movs	r1, #1
   13394:	f361 0201 	bfi	r2, r1, #0, #2
   13398:	701a      	strb	r2, [r3, #0]
}
   1339a:	2000      	movs	r0, #0
   1339c:	bd08      	pop	{r3, pc}
   1339e:	bf00      	nop

000133a0 <lll_conn_reset>:
}
   133a0:	2000      	movs	r0, #0
   133a2:	4770      	bx	lr

000133a4 <lll_conn_flush>:
}
   133a4:	4770      	bx	lr
   133a6:	bf00      	nop

000133a8 <lll_conn_prepare_reset>:
{
   133a8:	b410      	push	{r4}
	crc_valid = 0U;
   133aa:	4805      	ldr	r0, [pc, #20]	; (133c0 <lll_conn_prepare_reset+0x18>)
	trx_cnt = 0U;
   133ac:	4c05      	ldr	r4, [pc, #20]	; (133c4 <lll_conn_prepare_reset+0x1c>)
	crc_expire = 0U;
   133ae:	4906      	ldr	r1, [pc, #24]	; (133c8 <lll_conn_prepare_reset+0x20>)
	mic_state = LLL_CONN_MIC_NONE;
   133b0:	4a06      	ldr	r2, [pc, #24]	; (133cc <lll_conn_prepare_reset+0x24>)
	trx_cnt = 0U;
   133b2:	2300      	movs	r3, #0
   133b4:	8023      	strh	r3, [r4, #0]
	crc_valid = 0U;
   133b6:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   133b8:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   133ba:	7013      	strb	r3, [r2, #0]
}
   133bc:	bc10      	pop	{r4}
   133be:	4770      	bx	lr
   133c0:	20002720 	.word	0x20002720
   133c4:	200026fa 	.word	0x200026fa
   133c8:	20002721 	.word	0x20002721
   133cc:	2000271f 	.word	0x2000271f

000133d0 <lll_conn_abort_cb>:
{
   133d0:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   133d2:	b350      	cbz	r0, 1342a <lll_conn_abort_cb+0x5a>
	err = lll_hfclock_off();
   133d4:	460d      	mov	r5, r1
   133d6:	4604      	mov	r4, r0
   133d8:	f7ff fb20 	bl	12a1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   133dc:	2800      	cmp	r0, #0
   133de:	db17      	blt.n	13410 <lll_conn_abort_cb+0x40>
	lll = prepare_param->param;
   133e0:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   133e2:	8923      	ldrh	r3, [r4, #8]
   133e4:	8a51      	ldrh	r1, [r2, #18]
   133e6:	3301      	adds	r3, #1
   133e8:	440b      	add	r3, r1
   133ea:	8253      	strh	r3, [r2, #18]
	e = ull_event_done_extra_get();
   133ec:	f7f6 ffd0 	bl	a390 <ull_event_done_extra_get>
	LL_ASSERT(e);
   133f0:	4604      	mov	r4, r0
   133f2:	b308      	cbz	r0, 13438 <lll_conn_abort_cb+0x68>
	e->crc_valid = 0U;
   133f4:	79a2      	ldrb	r2, [r4, #6]
	e->trx_cnt = 0U;
   133f6:	2300      	movs	r3, #0
	e->crc_valid = 0U;
   133f8:	f363 0200 	bfi	r2, r3, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   133fc:	2101      	movs	r1, #1
   133fe:	7021      	strb	r1, [r4, #0]
	e->trx_cnt = 0U;
   13400:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = 0U;
   13402:	71a2      	strb	r2, [r4, #6]
	e->mic_state = LLL_CONN_MIC_NONE;
   13404:	7223      	strb	r3, [r4, #8]
	lll_done(param);
   13406:	4628      	mov	r0, r5
}
   13408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1340c:	f7ff b87c 	b.w	12508 <lll_done>
	LL_ASSERT(err >= 0);
   13410:	4a10      	ldr	r2, [pc, #64]	; (13454 <lll_conn_abort_cb+0x84>)
   13412:	4911      	ldr	r1, [pc, #68]	; (13458 <lll_conn_abort_cb+0x88>)
   13414:	4811      	ldr	r0, [pc, #68]	; (1345c <lll_conn_abort_cb+0x8c>)
   13416:	23ac      	movs	r3, #172	; 0xac
   13418:	f006 f911 	bl	1963e <assert_print>
   1341c:	4040      	eors	r0, r0
   1341e:	f380 8811 	msr	BASEPRI, r0
   13422:	f04f 0003 	mov.w	r0, #3
   13426:	df02      	svc	2
   13428:	e7da      	b.n	133e0 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1342a:	480d      	ldr	r0, [pc, #52]	; (13460 <lll_conn_abort_cb+0x90>)
   1342c:	f000 fc6e 	bl	13d0c <radio_isr_set>
}
   13430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   13434:	f000 bd80 	b.w	13f38 <radio_disable>
	LL_ASSERT(e);
   13438:	4a06      	ldr	r2, [pc, #24]	; (13454 <lll_conn_abort_cb+0x84>)
   1343a:	490a      	ldr	r1, [pc, #40]	; (13464 <lll_conn_abort_cb+0x94>)
   1343c:	4807      	ldr	r0, [pc, #28]	; (1345c <lll_conn_abort_cb+0x8c>)
   1343e:	23b4      	movs	r3, #180	; 0xb4
   13440:	f006 f8fd 	bl	1963e <assert_print>
   13444:	4040      	eors	r0, r0
   13446:	f380 8811 	msr	BASEPRI, r0
   1344a:	f04f 0003 	mov.w	r0, #3
   1344e:	df02      	svc	2
   13450:	e7d0      	b.n	133f4 <lll_conn_abort_cb+0x24>
   13452:	bf00      	nop
   13454:	0001eefc 	.word	0x0001eefc
   13458:	0001edf0 	.word	0x0001edf0
   1345c:	0001e1a4 	.word	0x0001e1a4
   13460:	000132d5 	.word	0x000132d5
   13464:	0001e910 	.word	0x0001e910

00013468 <lll_conn_rx_pkt_set>:
{
   13468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1346a:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1346c:	2001      	movs	r0, #1
   1346e:	f7f6 fe4d 	bl	a10c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13472:	4607      	mov	r7, r0
   13474:	b358      	cbz	r0, 134ce <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   13476:	f894 505b 	ldrb.w	r5, [r4, #91]	; 0x5b
	max_rx_octets = lll->dle.eff.max_rx_octets;
   1347a:	f8b4 604e 	ldrh.w	r6, [r4, #78]	; 0x4e
	phy = lll->phy_rx;
   1347e:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   13482:	2100      	movs	r1, #0
   13484:	4628      	mov	r0, r5
   13486:	f000 fccb 	bl	13e20 <radio_phy_set>
	} else if (lll->enc_rx) {
   1348a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1348e:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   13490:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   13492:	b2f1      	uxtb	r1, r6
   13494:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   13498:	d510      	bpl.n	134bc <lll_conn_rx_pkt_set+0x54>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1349a:	3104      	adds	r1, #4
   1349c:	b2c9      	uxtb	r1, r1
   1349e:	2008      	movs	r0, #8
   134a0:	f000 fd02 	bl	13ea8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   134a4:	f000 fda4 	bl	13ff0 <radio_pkt_decrypt_get>
   134a8:	4629      	mov	r1, r5
   134aa:	4602      	mov	r2, r0
   134ac:	f104 0073 	add.w	r0, r4, #115	; 0x73
   134b0:	f000 ff7c 	bl	143ac <radio_ccm_rx_pkt_set>
}
   134b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   134b8:	f000 bd1c 	b.w	13ef4 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   134bc:	2008      	movs	r0, #8
   134be:	f000 fcf3 	bl	13ea8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   134c2:	f107 001c 	add.w	r0, r7, #28
}
   134c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   134ca:	f000 bd13 	b.w	13ef4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   134ce:	4a07      	ldr	r2, [pc, #28]	; (134ec <lll_conn_rx_pkt_set+0x84>)
   134d0:	4907      	ldr	r1, [pc, #28]	; (134f0 <lll_conn_rx_pkt_set+0x88>)
   134d2:	4808      	ldr	r0, [pc, #32]	; (134f4 <lll_conn_rx_pkt_set+0x8c>)
   134d4:	f44f 7321 	mov.w	r3, #644	; 0x284
   134d8:	f006 f8b1 	bl	1963e <assert_print>
   134dc:	4040      	eors	r0, r0
   134de:	f380 8811 	msr	BASEPRI, r0
   134e2:	f04f 0003 	mov.w	r0, #3
   134e6:	df02      	svc	2
   134e8:	e7c5      	b.n	13476 <lll_conn_rx_pkt_set+0xe>
   134ea:	bf00      	nop
   134ec:	0001eefc 	.word	0x0001eefc
   134f0:	0001ee8c 	.word	0x0001ee8c
   134f4:	0001e1a4 	.word	0x0001e1a4

000134f8 <lll_conn_isr_tx>:
{
   134f8:	b538      	push	{r3, r4, r5, lr}
   134fa:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   134fc:	f7ff f8c0 	bl	12680 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   13500:	2096      	movs	r0, #150	; 0x96
   13502:	f000 fe73 	bl	141ec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   13506:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
   1350a:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   1350e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   13512:	f000 0007 	and.w	r0, r0, #7
   13516:	f002 0207 	and.w	r2, r2, #7
   1351a:	2100      	movs	r1, #0
   1351c:	f000 fdb4 	bl	14088 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   13520:	4620      	mov	r0, r4
   13522:	f7ff ffa1 	bl	13468 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   13526:	f000 fd27 	bl	13f78 <radio_is_ready>
   1352a:	bb58      	cbnz	r0, 13584 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1352c:	f000 ff38 	bl	143a0 <radio_tmr_tifs_base_get>
   13530:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13532:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   13536:	2101      	movs	r1, #1
   13538:	f000 0007 	and.w	r0, r0, #7
   1353c:	f000 fcf0 	bl	13f20 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   13540:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
   13544:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13548:	4405      	add	r5, r0
   1354a:	2b02      	cmp	r3, #2
   1354c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   13550:	d016      	beq.n	13580 <lll_conn_isr_tx+0x88>
		return 40;
   13552:	2b04      	cmp	r3, #4
   13554:	bf0c      	ite	eq
   13556:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1355a:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1355c:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
   13560:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   13564:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   13568:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1356a:	f000 fcd5 	bl	13f18 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1356e:	1a28      	subs	r0, r5, r0
   13570:	f000 fece 	bl	14310 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   13574:	4621      	mov	r1, r4
   13576:	480a      	ldr	r0, [pc, #40]	; (135a0 <lll_conn_isr_tx+0xa8>)
}
   13578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1357c:	f000 bbc6 	b.w	13d0c <radio_isr_set>
	switch (phy) {
   13580:	2318      	movs	r3, #24
   13582:	e7eb      	b.n	1355c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   13584:	4a07      	ldr	r2, [pc, #28]	; (135a4 <lll_conn_isr_tx+0xac>)
   13586:	4908      	ldr	r1, [pc, #32]	; (135a8 <lll_conn_isr_tx+0xb0>)
   13588:	4808      	ldr	r0, [pc, #32]	; (135ac <lll_conn_isr_tx+0xb4>)
   1358a:	f240 2339 	movw	r3, #569	; 0x239
   1358e:	f006 f856 	bl	1963e <assert_print>
   13592:	4040      	eors	r0, r0
   13594:	f380 8811 	msr	BASEPRI, r0
   13598:	f04f 0003 	mov.w	r0, #3
   1359c:	df02      	svc	2
   1359e:	e7c5      	b.n	1352c <lll_conn_isr_tx+0x34>
   135a0:	000136c5 	.word	0x000136c5
   135a4:	0001eefc 	.word	0x0001eefc
   135a8:	0001ee94 	.word	0x0001ee94
   135ac:	0001e1a4 	.word	0x0001e1a4

000135b0 <lll_conn_tx_pkt_set>:
{
   135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135b2:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   135b4:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
	max_tx_octets = lll->dle.eff.max_tx_octets;
   135b8:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
	phy = lll->phy_tx;
   135bc:	f001 0407 	and.w	r4, r1, #7
{
   135c0:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   135c2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   135c6:	4620      	mov	r0, r4
   135c8:	f000 fc2a 	bl	13e20 <radio_phy_set>
	} else if (lll->enc_tx) {
   135cc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   135d0:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   135d2:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   135d4:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   135d8:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   135da:	d50d      	bpl.n	135f8 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   135dc:	3104      	adds	r1, #4
   135de:	b2c9      	uxtb	r1, r1
   135e0:	2008      	movs	r0, #8
   135e2:	f000 fc61 	bl	13ea8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   135e6:	4639      	mov	r1, r7
   135e8:	f105 0094 	add.w	r0, r5, #148	; 0x94
   135ec:	f000 ff1e 	bl	1442c <radio_ccm_tx_pkt_set>
}
   135f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   135f4:	f000 bc84 	b.w	13f00 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   135f8:	2008      	movs	r0, #8
   135fa:	f000 fc55 	bl	13ea8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   135fe:	4638      	mov	r0, r7
}
   13600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   13604:	f000 bc7c 	b.w	13f00 <radio_pkt_tx_set>

00013608 <lll_conn_pdu_tx_prep>:
{
   13608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1360a:	4605      	mov	r5, r0
   1360c:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1360e:	aa01      	add	r2, sp, #4
   13610:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
   13612:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   13614:	6e29      	ldr	r1, [r5, #96]	; 0x60
   13616:	f7f4 fb77 	bl	7d08 <memq_peek>
	if (lll->empty || !link) {
   1361a:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
   1361e:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   13620:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   13622:	d438      	bmi.n	13696 <lll_conn_pdu_tx_prep+0x8e>
   13624:	b348      	cbz	r0, 1367a <lll_conn_pdu_tx_prep+0x72>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   13626:	9c01      	ldr	r4, [sp, #4]
   13628:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
		if (!lll->packet_tx_head_len) {
   1362c:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   13630:	3404      	adds	r4, #4
   13632:	441c      	add	r4, r3
		if (!lll->packet_tx_head_len) {
   13634:	b912      	cbnz	r2, 1363c <lll_conn_pdu_tx_prep+0x34>
			lll->packet_tx_head_len = p->len;
   13636:	7862      	ldrb	r2, [r4, #1]
   13638:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
		if (lll->packet_tx_head_offset) {
   1363c:	b133      	cbz	r3, 1364c <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1363e:	7823      	ldrb	r3, [r4, #0]
   13640:	2201      	movs	r2, #1
   13642:	f362 0301 	bfi	r3, r2, #0, #2
   13646:	7023      	strb	r3, [r4, #0]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   13648:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
   1364c:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
   13650:	1ad3      	subs	r3, r2, r3
   13652:	7063      	strb	r3, [r4, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   13654:	4628      	mov	r0, r5
   13656:	f7f9 ff13 	bl	d480 <ull_conn_lll_max_tx_octets_get>
		if (((PDU_DC_CTRL_TX_SIZE_MAX <= PDU_DC_PAYLOAD_SIZE_MIN) ||
   1365a:	7863      	ldrb	r3, [r4, #1]
   1365c:	4283      	cmp	r3, r0
   1365e:	d92a      	bls.n	136b6 <lll_conn_pdu_tx_prep+0xae>
			p->len = max_tx_octets;
   13660:	7060      	strb	r0, [r4, #1]
{
   13662:	2101      	movs	r1, #1
			p->md = 1U;
   13664:	7823      	ldrb	r3, [r4, #0]
   13666:	f003 030f 	and.w	r3, r3, #15
			p->octet3.resv[0] = 0U;
   1366a:	2200      	movs	r2, #0
			p->md = 1U;
   1366c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   13670:	7023      	strb	r3, [r4, #0]
			p->octet3.resv[0] = 0U;
   13672:	70a2      	strb	r2, [r4, #2]
	*pdu_data_tx = p;
   13674:	603c      	str	r4, [r7, #0]
}
   13676:	b003      	add	sp, #12
   13678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   1367a:	f043 0304 	orr.w	r3, r3, #4
   1367e:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   13682:	f000 fcad 	bl	13fe0 <radio_pkt_empty_get>
   13686:	4604      	mov	r4, r0
			p->md = 0U;
   13688:	7823      	ldrb	r3, [r4, #0]
   1368a:	f36f 1304 	bfc	r3, #4, #1
   1368e:	7023      	strb	r3, [r4, #0]
	*pdu_data_tx = p;
   13690:	603c      	str	r4, [r7, #0]
}
   13692:	b003      	add	sp, #12
   13694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   13696:	f043 0304 	orr.w	r3, r3, #4
   1369a:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
		p = (void *)radio_pkt_empty_get();
   1369e:	f000 fc9f 	bl	13fe0 <radio_pkt_empty_get>
   136a2:	4604      	mov	r4, r0
		if (link || FORCE_MD_CNT_GET()) {
   136a4:	2e00      	cmp	r6, #0
   136a6:	d0ef      	beq.n	13688 <lll_conn_pdu_tx_prep+0x80>
			p->md = 1U;
   136a8:	7803      	ldrb	r3, [r0, #0]
   136aa:	f043 0310 	orr.w	r3, r3, #16
   136ae:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   136b0:	603c      	str	r4, [r7, #0]
}
   136b2:	b003      	add	sp, #12
   136b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   136b6:	6832      	ldr	r2, [r6, #0]
   136b8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   136ba:	429a      	cmp	r2, r3
   136bc:	d1d1      	bne.n	13662 <lll_conn_pdu_tx_prep+0x5a>
   136be:	2100      	movs	r1, #0
   136c0:	e7d0      	b.n	13664 <lll_conn_pdu_tx_prep+0x5c>
   136c2:	bf00      	nop

000136c4 <lll_conn_isr_rx>:
{
   136c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136c8:	b082      	sub	sp, #8
   136ca:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   136cc:	f000 fc5e 	bl	13f8c <radio_is_done>
	if (trx_done) {
   136d0:	b2c0      	uxtb	r0, r0
   136d2:	b950      	cbnz	r0, 136ea <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   136d4:	f7fe ffdc 	bl	12690 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   136d8:	48ba      	ldr	r0, [pc, #744]	; (139c4 <lll_conn_isr_rx+0x300>)
   136da:	4621      	mov	r1, r4
   136dc:	f000 fb16 	bl	13d0c <radio_isr_set>
}
   136e0:	b002      	add	sp, #8
   136e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   136e6:	f000 bc27 	b.w	13f38 <radio_disable>
		crc_ok = radio_crc_is_valid();
   136ea:	f000 fc6f 	bl	13fcc <radio_crc_is_valid>
   136ee:	fa5f f880 	uxtb.w	r8, r0
		rssi_ready = radio_rssi_is_ready();
   136f2:	f000 fd3f 	bl	14174 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   136f6:	f7fe ffcb 	bl	12690 <lll_isr_rx_status_reset>
	trx_cnt++;
   136fa:	4ab3      	ldr	r2, [pc, #716]	; (139c8 <lll_conn_isr_rx+0x304>)
   136fc:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   136fe:	2001      	movs	r0, #1
	trx_cnt++;
   13700:	4403      	add	r3, r0
   13702:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   13704:	f7f6 fd02 	bl	a10c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   13708:	4605      	mov	r5, r0
   1370a:	2800      	cmp	r0, #0
   1370c:	f000 80e1 	beq.w	138d2 <lll_conn_isr_rx+0x20e>
	if (crc_ok) {
   13710:	f1b8 0f00 	cmp.w	r8, #0
   13714:	d158      	bne.n	137c8 <lll_conn_isr_rx+0x104>
		if (crc_expire == 0U) {
   13716:	4bad      	ldr	r3, [pc, #692]	; (139cc <lll_conn_isr_rx+0x308>)
   13718:	781e      	ldrb	r6, [r3, #0]
   1371a:	2e00      	cmp	r6, #0
   1371c:	f040 80b9 	bne.w	13892 <lll_conn_isr_rx+0x1ce>
		crc_expire--;
   13720:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13722:	a901      	add	r1, sp, #4
   13724:	4620      	mov	r0, r4
		crc_expire--;
   13726:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13728:	f7ff ff6e 	bl	13608 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1372c:	2600      	movs	r6, #0
   1372e:	9f01      	ldr	r7, [sp, #4]
   13730:	46b0      	mov	r8, r6
		radio_tmr_tifs_set(EVENT_IFS_US);
   13732:	2096      	movs	r0, #150	; 0x96
   13734:	f000 fd5a 	bl	141ec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   13738:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
   1373c:	f000 0007 	and.w	r0, r0, #7
   13740:	f000 fc5a 	bl	13ff8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   13744:	48a2      	ldr	r0, [pc, #648]	; (139d0 <lll_conn_isr_rx+0x30c>)
   13746:	4621      	mov	r1, r4
   13748:	f000 fae0 	bl	13d0c <radio_isr_set>
		radio_tmr_end_capture();
   1374c:	f000 fe1a 	bl	14384 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   13750:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
   13754:	783b      	ldrb	r3, [r7, #0]
   13756:	f362 03c3 	bfi	r3, r2, #3, #1
   1375a:	703b      	strb	r3, [r7, #0]
	pdu_data_tx->nesn = lll->nesn;
   1375c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   13760:	783a      	ldrb	r2, [r7, #0]
   13762:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13766:	f363 0282 	bfi	r2, r3, #2, #1
   1376a:	703a      	strb	r2, [r7, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1376c:	4639      	mov	r1, r7
   1376e:	4620      	mov	r0, r4
   13770:	f7ff ff1e 	bl	135b0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   13774:	f000 fc00 	bl	13f78 <radio_is_ready>
   13778:	2800      	cmp	r0, #0
   1377a:	f040 809c 	bne.w	138b6 <lll_conn_isr_rx+0x1f2>
	if (!radio_tmr_aa_restore()) {
   1377e:	f000 fdf5 	bl	1436c <radio_tmr_aa_restore>
   13782:	2800      	cmp	r0, #0
   13784:	d079      	beq.n	1387a <lll_conn_isr_rx+0x1b6>
	if (tx_release) {
   13786:	f1b8 0f00 	cmp.w	r8, #0
   1378a:	d07d      	beq.n	13888 <lll_conn_isr_rx+0x1c4>
		LL_ASSERT(lll->handle != 0xFFFF);
   1378c:	89a0      	ldrh	r0, [r4, #12]
   1378e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13792:	4298      	cmp	r0, r3
   13794:	f000 80e2 	beq.w	1395c <lll_conn_isr_rx+0x298>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   13798:	4641      	mov	r1, r8
   1379a:	f7f9 fdd7 	bl	d34c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1379e:	b176      	cbz	r6, 137be <lll_conn_isr_rx+0xfa>
		if (lll->enc_rx) {
   137a0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   137a4:	071b      	lsls	r3, r3, #28
   137a6:	f100 80cf 	bmi.w	13948 <lll_conn_isr_rx+0x284>
		ull_pdu_rx_alloc();
   137aa:	f7f6 fcd1 	bl	a150 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   137ae:	2303      	movs	r3, #3
   137b0:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.handle = lll->handle;
   137b2:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   137b4:	6828      	ldr	r0, [r5, #0]
		node_rx->hdr.handle = lll->handle;
   137b6:	80eb      	strh	r3, [r5, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   137b8:	4629      	mov	r1, r5
   137ba:	f7f6 fcdf 	bl	a17c <ull_rx_put>
}
   137be:	b002      	add	sp, #8
   137c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   137c4:	f7f6 bcea 	b.w	a19c <ull_rx_sched>
	if (lll->enc_rx) {
   137c8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   137cc:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   137ce:	f105 061c 	add.w	r6, r5, #28
	if (lll->enc_rx) {
   137d2:	f100 80af 	bmi.w	13934 <lll_conn_isr_rx+0x270>
	if (pdu_data_rx->nesn != lll->sn) {
   137d6:	7f2a      	ldrb	r2, [r5, #28]
   137d8:	f003 0101 	and.w	r1, r3, #1
   137dc:	f3c2 0080 	ubfx	r0, r2, #2, #1
   137e0:	4288      	cmp	r0, r1
   137e2:	f000 8087 	beq.w	138f4 <lll_conn_isr_rx+0x230>
		if (lll->role) {
   137e6:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   137ea:	f081 0101 	eor.w	r1, r1, #1
   137ee:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   137f2:	2a00      	cmp	r2, #0
		lll->sn++;
   137f4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (lll->role) {
   137f8:	da05      	bge.n	13806 <lll_conn_isr_rx+0x142>
			lll->periph.latency_enabled = 1;
   137fa:	f894 3020 	ldrb.w	r3, [r4, #32]
   137fe:	f043 0304 	orr.w	r3, r3, #4
   13802:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   13806:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1380a:	075a      	lsls	r2, r3, #29
   1380c:	f100 80b7 	bmi.w	1397e <lll_conn_isr_rx+0x2ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   13810:	e9d4 0117 	ldrd	r0, r1, [r4, #92]	; 0x5c
   13814:	aa01      	add	r2, sp, #4
   13816:	f7f4 fa77 	bl	7d08 <memq_peek>
		if (link) {
   1381a:	4607      	mov	r7, r0
   1381c:	2800      	cmp	r0, #0
   1381e:	f000 80b4 	beq.w	1398a <lll_conn_isr_rx+0x2c6>
					       lll->packet_tx_head_offset);
   13822:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
			pdu_data_tx_len = pdu_data_tx->len;
   13826:	9b01      	ldr	r3, [sp, #4]
   13828:	4413      	add	r3, r2
   1382a:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1382c:	b171      	cbz	r1, 1384c <lll_conn_isr_rx+0x188>
				if (lll->enc_tx) {
   1382e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   13832:	06db      	lsls	r3, r3, #27
   13834:	d50a      	bpl.n	1384c <lll_conn_isr_rx+0x188>
					lll->ccm_tx.counter++;
   13836:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   1383a:	3301      	adds	r3, #1
   1383c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   13840:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   13844:	f143 0300 	adc.w	r3, r3, #0
   13848:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
			if (offset < lll->packet_tx_head_len) {
   1384c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   13850:	440a      	add	r2, r1
   13852:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   13854:	429a      	cmp	r2, r3
   13856:	f0c0 809e 	bcc.w	13996 <lll_conn_isr_rx+0x2d2>
			} else if (offset == lll->packet_tx_head_len) {
   1385a:	f000 80c9 	beq.w	139f0 <lll_conn_isr_rx+0x32c>
				LL_ASSERT(0);
   1385e:	4a5d      	ldr	r2, [pc, #372]	; (139d4 <lll_conn_isr_rx+0x310>)
   13860:	495d      	ldr	r1, [pc, #372]	; (139d8 <lll_conn_isr_rx+0x314>)
   13862:	485e      	ldr	r0, [pc, #376]	; (139dc <lll_conn_isr_rx+0x318>)
   13864:	f44f 7375 	mov.w	r3, #980	; 0x3d4
   13868:	f005 fee9 	bl	1963e <assert_print>
   1386c:	4040      	eors	r0, r0
   1386e:	f380 8811 	msr	BASEPRI, r0
   13872:	f04f 0003 	mov.w	r0, #3
   13876:	df02      	svc	2
   13878:	e087      	b.n	1398a <lll_conn_isr_rx+0x2c6>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1387a:	f000 fd6b 	bl	14354 <radio_tmr_aa_get>
   1387e:	f000 fd6f 	bl	14360 <radio_tmr_aa_save>
	if (tx_release) {
   13882:	f1b8 0f00 	cmp.w	r8, #0
   13886:	d181      	bne.n	1378c <lll_conn_isr_rx+0xc8>
	if (is_rx_enqueue) {
   13888:	2e00      	cmp	r6, #0
   1388a:	d189      	bne.n	137a0 <lll_conn_isr_rx+0xdc>
}
   1388c:	b002      	add	sp, #8
   1388e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_expire--;
   13892:	3e01      	subs	r6, #1
   13894:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13896:	a901      	add	r1, sp, #4
   13898:	4620      	mov	r0, r4
		crc_expire--;
   1389a:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1389c:	f7ff feb4 	bl	13608 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   138a0:	2e00      	cmp	r6, #0
   138a2:	f47f af43 	bne.w	1372c <lll_conn_isr_rx+0x68>
	pdu_data_tx->sn = lll->sn;
   138a6:	9f01      	ldr	r7, [sp, #4]
		radio_isr_set(isr_done, param);
   138a8:	4846      	ldr	r0, [pc, #280]	; (139c4 <lll_conn_isr_rx+0x300>)
   138aa:	4621      	mov	r1, r4
   138ac:	f000 fa2e 	bl	13d0c <radio_isr_set>
			radio_switch_complete_and_disable();
   138b0:	f000 fc4a 	bl	14148 <radio_switch_complete_and_disable>
   138b4:	e74c      	b.n	13750 <lll_conn_isr_rx+0x8c>
	LL_ASSERT(!radio_is_ready());
   138b6:	4a47      	ldr	r2, [pc, #284]	; (139d4 <lll_conn_isr_rx+0x310>)
   138b8:	4949      	ldr	r1, [pc, #292]	; (139e0 <lll_conn_isr_rx+0x31c>)
   138ba:	4848      	ldr	r0, [pc, #288]	; (139dc <lll_conn_isr_rx+0x318>)
   138bc:	f240 138f 	movw	r3, #399	; 0x18f
   138c0:	f005 febd 	bl	1963e <assert_print>
   138c4:	4040      	eors	r0, r0
   138c6:	f380 8811 	msr	BASEPRI, r0
   138ca:	f04f 0003 	mov.w	r0, #3
   138ce:	df02      	svc	2
   138d0:	e755      	b.n	1377e <lll_conn_isr_rx+0xba>
	LL_ASSERT(node_rx);
   138d2:	4a40      	ldr	r2, [pc, #256]	; (139d4 <lll_conn_isr_rx+0x310>)
   138d4:	4943      	ldr	r1, [pc, #268]	; (139e4 <lll_conn_isr_rx+0x320>)
   138d6:	4841      	ldr	r0, [pc, #260]	; (139dc <lll_conn_isr_rx+0x318>)
   138d8:	23ff      	movs	r3, #255	; 0xff
   138da:	f005 feb0 	bl	1963e <assert_print>
   138de:	4040      	eors	r0, r0
   138e0:	f380 8811 	msr	BASEPRI, r0
   138e4:	f04f 0003 	mov.w	r0, #3
   138e8:	df02      	svc	2
	if (crc_ok) {
   138ea:	f1b8 0f00 	cmp.w	r8, #0
   138ee:	f43f af12 	beq.w	13716 <lll_conn_isr_rx+0x52>
   138f2:	e769      	b.n	137c8 <lll_conn_isr_rx+0x104>
	tx_release = NULL;
   138f4:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   138f8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   138fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13900:	429a      	cmp	r2, r3
   13902:	d04b      	beq.n	1399c <lll_conn_isr_rx+0x2d8>
	is_rx_enqueue = 0U;
   13904:	2600      	movs	r6, #0
		crc_expire = 0U;
   13906:	4a31      	ldr	r2, [pc, #196]	; (139cc <lll_conn_isr_rx+0x308>)
		crc_valid = 1U;
   13908:	4b37      	ldr	r3, [pc, #220]	; (139e8 <lll_conn_isr_rx+0x324>)
		crc_expire = 0U;
   1390a:	2100      	movs	r1, #0
   1390c:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1390e:	4620      	mov	r0, r4
		crc_valid = 1U;
   13910:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13912:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   13914:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   13916:	f7ff fe77 	bl	13608 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1391a:	7f2b      	ldrb	r3, [r5, #28]
   1391c:	06d9      	lsls	r1, r3, #27
   1391e:	d42c      	bmi.n	1397a <lll_conn_isr_rx+0x2b6>
			      (pdu_data_tx->md == 0) &&
   13920:	9f01      	ldr	r7, [sp, #4]
   13922:	783b      	ldrb	r3, [r7, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   13924:	06da      	lsls	r2, r3, #27
   13926:	f53f af04 	bmi.w	13732 <lll_conn_isr_rx+0x6e>
			      (pdu_data_tx->md == 0) &&
   1392a:	787b      	ldrb	r3, [r7, #1]
   1392c:	2b00      	cmp	r3, #0
   1392e:	f47f af00 	bne.w	13732 <lll_conn_isr_rx+0x6e>
   13932:	e7b9      	b.n	138a8 <lll_conn_isr_rx+0x1e4>
		pkt_decrypt = radio_pkt_decrypt_get();
   13934:	f000 fb5c 	bl	13ff0 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   13938:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   1393a:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   1393c:	4630      	mov	r0, r6
   1393e:	f006 f959 	bl	19bf4 <memcpy>
   13942:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   13946:	e746      	b.n	137d6 <lll_conn_isr_rx+0x112>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   13948:	f000 fb52 	bl	13ff0 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   1394c:	7f6a      	ldrb	r2, [r5, #29]
   1394e:	1cc1      	adds	r1, r0, #3
   13950:	f105 001f 	add.w	r0, r5, #31
   13954:	f006 f94e 	bl	19bf4 <memcpy>
   13958:	e727      	b.n	137aa <lll_conn_isr_rx+0xe6>
	pdu_data_tx->sn = lll->sn;
   1395a:	2600      	movs	r6, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   1395c:	4a1d      	ldr	r2, [pc, #116]	; (139d4 <lll_conn_isr_rx+0x310>)
   1395e:	4923      	ldr	r1, [pc, #140]	; (139ec <lll_conn_isr_rx+0x328>)
   13960:	481e      	ldr	r0, [pc, #120]	; (139dc <lll_conn_isr_rx+0x318>)
   13962:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   13966:	f005 fe6a 	bl	1963e <assert_print>
   1396a:	4040      	eors	r0, r0
   1396c:	f380 8811 	msr	BASEPRI, r0
   13970:	f04f 0003 	mov.w	r0, #3
   13974:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   13976:	89a0      	ldrh	r0, [r4, #12]
   13978:	e70e      	b.n	13798 <lll_conn_isr_rx+0xd4>
			      (pdu_data_tx->md == 0) &&
   1397a:	9f01      	ldr	r7, [sp, #4]
   1397c:	e6d9      	b.n	13732 <lll_conn_isr_rx+0x6e>
			lll->empty = 0;
   1397e:	f36f 0382 	bfc	r3, #2, #1
   13982:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
			pdu_data_tx = (void *)radio_pkt_empty_get();
   13986:	f000 fb2b 	bl	13fe0 <radio_pkt_empty_get>
		if (link) {
   1398a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1398e:	7f2a      	ldrb	r2, [r5, #28]
	tx_release = NULL;
   13990:	f04f 0800 	mov.w	r8, #0
   13994:	e7b0      	b.n	138f8 <lll_conn_isr_rx+0x234>
				lll->packet_tx_head_offset = offset;
   13996:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
   1399a:	e7f6      	b.n	1398a <lll_conn_isr_rx+0x2c6>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1399c:	2003      	movs	r0, #3
   1399e:	f7f6 fbb5 	bl	a10c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   139a2:	2800      	cmp	r0, #0
   139a4:	d0ae      	beq.n	13904 <lll_conn_isr_rx+0x240>
		lll->nesn++;
   139a6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   139aa:	f083 0302 	eor.w	r3, r3, #2
   139ae:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
		if (pdu_data_rx->len != 0) {
   139b2:	7f6b      	ldrb	r3, [r5, #29]
   139b4:	2b00      	cmp	r3, #0
   139b6:	d0a5      	beq.n	13904 <lll_conn_isr_rx+0x240>
			if (lll->enc_rx) {
   139b8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   139bc:	0718      	lsls	r0, r3, #28
   139be:	d42a      	bmi.n	13a16 <lll_conn_isr_rx+0x352>
			*is_rx_enqueue = 1U;
   139c0:	2601      	movs	r6, #1
   139c2:	e7a0      	b.n	13906 <lll_conn_isr_rx+0x242>
   139c4:	000132d5 	.word	0x000132d5
   139c8:	200026fa 	.word	0x200026fa
   139cc:	20002721 	.word	0x20002721
   139d0:	000134f9 	.word	0x000134f9
   139d4:	0001eefc 	.word	0x0001eefc
   139d8:	0001e220 	.word	0x0001e220
   139dc:	0001e1a4 	.word	0x0001e1a4
   139e0:	0001ee94 	.word	0x0001ee94
   139e4:	0001ee8c 	.word	0x0001ee8c
   139e8:	20002720 	.word	0x20002720
   139ec:	0001ef50 	.word	0x0001ef50
				lll->packet_tx_head_len = 0;
   139f0:	2200      	movs	r2, #0
   139f2:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
				memq_dequeue(lll->memq_tx.tail,
   139f6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   139f8:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   139fc:	f7f4 f98c 	bl	7d18 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   13a00:	9b01      	ldr	r3, [sp, #4]
   13a02:	681b      	ldr	r3, [r3, #0]
   13a04:	603b      	str	r3, [r7, #0]
				tx->next = link;
   13a06:	9b01      	ldr	r3, [sp, #4]
   13a08:	601f      	str	r7, [r3, #0]
				*tx_release = tx;
   13a0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
				FORCE_MD_CNT_SET();
   13a0e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   13a12:	7f2a      	ldrb	r2, [r5, #28]
   13a14:	e770      	b.n	138f8 <lll_conn_isr_rx+0x234>
				done = radio_ccm_is_done();
   13a16:	f000 fd33 	bl	14480 <radio_ccm_is_done>
				LL_ASSERT(done);
   13a1a:	2800      	cmp	r0, #0
   13a1c:	d067      	beq.n	13aee <lll_conn_isr_rx+0x42a>
				bool mic_failure = !radio_ccm_mic_is_valid();
   13a1e:	f000 fd59 	bl	144d4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   13a22:	2800      	cmp	r0, #0
   13a24:	d153      	bne.n	13ace <lll_conn_isr_rx+0x40a>
				    lll->ccm_rx.counter == 0 &&
   13a26:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   13a2a:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
				if (mic_failure &&
   13a2e:	4313      	orrs	r3, r2
   13a30:	d104      	bne.n	13a3c <lll_conn_isr_rx+0x378>
				    (pdu_data_rx->ll_id ==
   13a32:	7f2b      	ldrb	r3, [r5, #28]
				    lll->ccm_rx.counter == 0 &&
   13a34:	f003 0303 	and.w	r3, r3, #3
   13a38:	2b03      	cmp	r3, #3
   13a3a:	d032      	beq.n	13aa2 <lll_conn_isr_rx+0x3de>
					mic_state = LLL_CONN_MIC_FAIL;
   13a3c:	4b33      	ldr	r3, [pc, #204]	; (13b0c <lll_conn_isr_rx+0x448>)
			radio_isr_set(isr_done, param);
   13a3e:	4834      	ldr	r0, [pc, #208]	; (13b10 <lll_conn_isr_rx+0x44c>)
					mic_state = LLL_CONN_MIC_FAIL;
   13a40:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   13a42:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   13a44:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   13a46:	f000 f961 	bl	13d0c <radio_isr_set>
			radio_disable();
   13a4a:	f000 fa75 	bl	13f38 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   13a4e:	f000 fa93 	bl	13f78 <radio_is_ready>
   13a52:	b980      	cbnz	r0, 13a76 <lll_conn_isr_rx+0x3b2>
	if (!radio_tmr_aa_restore()) {
   13a54:	f000 fc8a 	bl	1436c <radio_tmr_aa_restore>
   13a58:	b1d8      	cbz	r0, 13a92 <lll_conn_isr_rx+0x3ce>
	if (tx_release) {
   13a5a:	f1b8 0f00 	cmp.w	r8, #0
   13a5e:	f43f af15 	beq.w	1388c <lll_conn_isr_rx+0x1c8>
		LL_ASSERT(lll->handle != 0xFFFF);
   13a62:	89a0      	ldrh	r0, [r4, #12]
   13a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13a68:	4298      	cmp	r0, r3
   13a6a:	f43f af76 	beq.w	1395a <lll_conn_isr_rx+0x296>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   13a6e:	4641      	mov	r1, r8
   13a70:	f7f9 fc6c 	bl	d34c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   13a74:	e6a3      	b.n	137be <lll_conn_isr_rx+0xfa>
			LL_ASSERT(!radio_is_ready());
   13a76:	4a27      	ldr	r2, [pc, #156]	; (13b14 <lll_conn_isr_rx+0x450>)
   13a78:	4927      	ldr	r1, [pc, #156]	; (13b18 <lll_conn_isr_rx+0x454>)
   13a7a:	4828      	ldr	r0, [pc, #160]	; (13b1c <lll_conn_isr_rx+0x458>)
   13a7c:	f44f 7388 	mov.w	r3, #272	; 0x110
   13a80:	f005 fddd 	bl	1963e <assert_print>
   13a84:	4040      	eors	r0, r0
   13a86:	f380 8811 	msr	BASEPRI, r0
   13a8a:	f04f 0003 	mov.w	r0, #3
   13a8e:	df02      	svc	2
   13a90:	e7e0      	b.n	13a54 <lll_conn_isr_rx+0x390>
		radio_tmr_aa_save(radio_tmr_aa_get());
   13a92:	f000 fc5f 	bl	14354 <radio_tmr_aa_get>
   13a96:	f000 fc63 	bl	14360 <radio_tmr_aa_save>
	if (tx_release) {
   13a9a:	f1b8 0f00 	cmp.w	r8, #0
   13a9e:	d1e0      	bne.n	13a62 <lll_conn_isr_rx+0x39e>
   13aa0:	e6f4      	b.n	1388c <lll_conn_isr_rx+0x1c8>
						radio_pkt_scratch_get();
   13aa2:	f000 faa1 	bl	13fe8 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   13aa6:	7843      	ldrb	r3, [r0, #1]
   13aa8:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   13aaa:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   13aac:	d8c6      	bhi.n	13a3c <lll_conn_isr_rx+0x378>
						memcpy(pdu_data_rx,
   13aae:	3303      	adds	r3, #3
   13ab0:	b2da      	uxtb	r2, r3
   13ab2:	4630      	mov	r0, r6
   13ab4:	f006 f89e 	bl	19bf4 <memcpy>
						lll->ccm_rx.counter--;
   13ab8:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
   13abc:	f8d4 2087 	ldr.w	r2, [r4, #135]	; 0x87
   13ac0:	3b01      	subs	r3, #1
   13ac2:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   13ac6:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   13aca:	f8c4 3087 	str.w	r3, [r4, #135]	; 0x87
				lll->ccm_rx.counter++;
   13ace:	f8d4 3083 	ldr.w	r3, [r4, #131]	; 0x83
				mic_state = LLL_CONN_MIC_PASS;
   13ad2:	4a0e      	ldr	r2, [pc, #56]	; (13b0c <lll_conn_isr_rx+0x448>)
				lll->ccm_rx.counter++;
   13ad4:	3301      	adds	r3, #1
   13ad6:	f8c4 3083 	str.w	r3, [r4, #131]	; 0x83
   13ada:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
						lll->ccm_rx.counter--;
   13ade:	f104 0183 	add.w	r1, r4, #131	; 0x83
				lll->ccm_rx.counter++;
   13ae2:	f143 0300 	adc.w	r3, r3, #0
   13ae6:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   13ae8:	2301      	movs	r3, #1
   13aea:	7013      	strb	r3, [r2, #0]
		if (err) {
   13aec:	e768      	b.n	139c0 <lll_conn_isr_rx+0x2fc>
				LL_ASSERT(done);
   13aee:	4a09      	ldr	r2, [pc, #36]	; (13b14 <lll_conn_isr_rx+0x450>)
   13af0:	490b      	ldr	r1, [pc, #44]	; (13b20 <lll_conn_isr_rx+0x45c>)
   13af2:	480a      	ldr	r0, [pc, #40]	; (13b1c <lll_conn_isr_rx+0x458>)
   13af4:	f240 33ef 	movw	r3, #1007	; 0x3ef
   13af8:	f005 fda1 	bl	1963e <assert_print>
   13afc:	4040      	eors	r0, r0
   13afe:	f380 8811 	msr	BASEPRI, r0
   13b02:	f04f 0003 	mov.w	r0, #3
   13b06:	df02      	svc	2
   13b08:	e789      	b.n	13a1e <lll_conn_isr_rx+0x35a>
   13b0a:	bf00      	nop
   13b0c:	2000271f 	.word	0x2000271f
   13b10:	000132d5 	.word	0x000132d5
   13b14:	0001eefc 	.word	0x0001eefc
   13b18:	0001ee94 	.word	0x0001ee94
   13b1c:	0001e1a4 	.word	0x0001e1a4
   13b20:	0001ef48 	.word	0x0001ef48

00013b24 <lll_periph_prepare>:
{
   13b24:	b510      	push	{r4, lr}
   13b26:	b082      	sub	sp, #8
   13b28:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   13b2a:	f7fe ff5f 	bl	129ec <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   13b2e:	2800      	cmp	r0, #0
   13b30:	db25      	blt.n	13b7e <lll_periph_prepare+0x5a>
	lll = p->param;
   13b32:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   13b34:	8920      	ldrh	r0, [r4, #8]
   13b36:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   13b38:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   13b3a:	fb00 3303 	mla	r3, r0, r3, r3
   13b3e:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   13b40:	4413      	add	r3, r2
   13b42:	4283      	cmp	r3, r0
   13b44:	bf28      	it	cs
   13b46:	4603      	movcs	r3, r0
   13b48:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   13b4a:	4a13      	ldr	r2, [pc, #76]	; (13b98 <lll_periph_prepare+0x74>)
   13b4c:	4913      	ldr	r1, [pc, #76]	; (13b9c <lll_periph_prepare+0x78>)
   13b4e:	4814      	ldr	r0, [pc, #80]	; (13ba0 <lll_periph_prepare+0x7c>)
   13b50:	9400      	str	r4, [sp, #0]
   13b52:	2300      	movs	r3, #0
   13b54:	f7f6 fe40 	bl	a7d8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13b58:	b108      	cbz	r0, 13b5e <lll_periph_prepare+0x3a>
   13b5a:	3077      	adds	r0, #119	; 0x77
   13b5c:	d101      	bne.n	13b62 <lll_periph_prepare+0x3e>
}
   13b5e:	b002      	add	sp, #8
   13b60:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   13b62:	4a10      	ldr	r2, [pc, #64]	; (13ba4 <lll_periph_prepare+0x80>)
   13b64:	4910      	ldr	r1, [pc, #64]	; (13ba8 <lll_periph_prepare+0x84>)
   13b66:	4811      	ldr	r0, [pc, #68]	; (13bac <lll_periph_prepare+0x88>)
   13b68:	235d      	movs	r3, #93	; 0x5d
   13b6a:	f005 fd68 	bl	1963e <assert_print>
   13b6e:	4040      	eors	r0, r0
   13b70:	f380 8811 	msr	BASEPRI, r0
   13b74:	f04f 0003 	mov.w	r0, #3
   13b78:	df02      	svc	2
}
   13b7a:	b002      	add	sp, #8
   13b7c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   13b7e:	4a09      	ldr	r2, [pc, #36]	; (13ba4 <lll_periph_prepare+0x80>)
   13b80:	490b      	ldr	r1, [pc, #44]	; (13bb0 <lll_periph_prepare+0x8c>)
   13b82:	480a      	ldr	r0, [pc, #40]	; (13bac <lll_periph_prepare+0x88>)
   13b84:	234c      	movs	r3, #76	; 0x4c
   13b86:	f005 fd5a 	bl	1963e <assert_print>
   13b8a:	4040      	eors	r0, r0
   13b8c:	f380 8811 	msr	BASEPRI, r0
   13b90:	f04f 0003 	mov.w	r0, #3
   13b94:	df02      	svc	2
   13b96:	e7cc      	b.n	13b32 <lll_periph_prepare+0xe>
   13b98:	00001fe1 	.word	0x00001fe1
   13b9c:	000133d1 	.word	0x000133d1
   13ba0:	000125ad 	.word	0x000125ad
   13ba4:	0001ef68 	.word	0x0001ef68
   13ba8:	0001e378 	.word	0x0001e378
   13bac:	0001e1a4 	.word	0x0001e1a4
   13bb0:	0001edf0 	.word	0x0001edf0

00013bb4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   13bb4:	4b05      	ldr	r3, [pc, #20]	; (13bcc <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13bb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13bba:	2100      	movs	r1, #0
   13bbc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   13bc0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   13bc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   13bc8:	4770      	bx	lr
   13bca:	bf00      	nop
   13bcc:	4000b000 	.word	0x4000b000

00013bd0 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   13bd0:	4b05      	ldr	r3, [pc, #20]	; (13be8 <cntr_start+0x18>)
   13bd2:	7818      	ldrb	r0, [r3, #0]
   13bd4:	1c42      	adds	r2, r0, #1
   13bd6:	701a      	strb	r2, [r3, #0]
   13bd8:	b918      	cbnz	r0, 13be2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13bda:	4b04      	ldr	r3, [pc, #16]	; (13bec <cntr_start+0x1c>)
   13bdc:	2201      	movs	r2, #1
   13bde:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   13be0:	4770      	bx	lr
		return 1;
   13be2:	2001      	movs	r0, #1
}
   13be4:	4770      	bx	lr
   13be6:	bf00      	nop
   13be8:	20002722 	.word	0x20002722
   13bec:	4000b000 	.word	0x4000b000

00013bf0 <cntr_stop>:

uint32_t cntr_stop(void)
{
   13bf0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   13bf2:	4c0d      	ldr	r4, [pc, #52]	; (13c28 <cntr_stop+0x38>)
   13bf4:	7820      	ldrb	r0, [r4, #0]
   13bf6:	b148      	cbz	r0, 13c0c <cntr_stop+0x1c>

	if (--_refcount) {
   13bf8:	3801      	subs	r0, #1
   13bfa:	b2c0      	uxtb	r0, r0
   13bfc:	7020      	strb	r0, [r4, #0]
   13bfe:	b918      	cbnz	r0, 13c08 <cntr_stop+0x18>
   13c00:	4b0a      	ldr	r3, [pc, #40]	; (13c2c <cntr_stop+0x3c>)
   13c02:	2201      	movs	r2, #1
   13c04:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   13c06:	bd10      	pop	{r4, pc}
		return 1;
   13c08:	2001      	movs	r0, #1
}
   13c0a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   13c0c:	4a08      	ldr	r2, [pc, #32]	; (13c30 <cntr_stop+0x40>)
   13c0e:	4909      	ldr	r1, [pc, #36]	; (13c34 <cntr_stop+0x44>)
   13c10:	4809      	ldr	r0, [pc, #36]	; (13c38 <cntr_stop+0x48>)
   13c12:	2328      	movs	r3, #40	; 0x28
   13c14:	f005 fd13 	bl	1963e <assert_print>
   13c18:	4040      	eors	r0, r0
   13c1a:	f380 8811 	msr	BASEPRI, r0
   13c1e:	f04f 0003 	mov.w	r0, #3
   13c22:	df02      	svc	2
	if (--_refcount) {
   13c24:	7820      	ldrb	r0, [r4, #0]
   13c26:	e7e7      	b.n	13bf8 <cntr_stop+0x8>
   13c28:	20002722 	.word	0x20002722
   13c2c:	4000b000 	.word	0x4000b000
   13c30:	0001efc8 	.word	0x0001efc8
   13c34:	0001f014 	.word	0x0001f014
   13c38:	0001e1a4 	.word	0x0001e1a4

00013c3c <cntr_cnt_get>:
     return p_reg->COUNTER;
   13c3c:	4b01      	ldr	r3, [pc, #4]	; (13c44 <cntr_cnt_get+0x8>)
   13c3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   13c42:	4770      	bx	lr
   13c44:	4000b000 	.word	0x4000b000

00013c48 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   13c48:	4b02      	ldr	r3, [pc, #8]	; (13c54 <cntr_cmp_set+0xc>)
   13c4a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13c4e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   13c52:	4770      	bx	lr
   13c54:	4000b000 	.word	0x4000b000

00013c58 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c58:	4b12      	ldr	r3, [pc, #72]	; (13ca4 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   13c5a:	b430      	push	{r4, r5}
   13c5c:	2101      	movs	r1, #1
   13c5e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   13c60:	2000      	movs	r0, #0
   13c62:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   13c64:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   13c68:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   13c6c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   13c70:	6019      	str	r1, [r3, #0]
}
   13c72:	e005      	b.n	13c80 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13c74:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13c78:	b932      	cbnz	r2, 13c88 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   13c7a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13c7e:	b11a      	cbz	r2, 13c88 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13c80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13c84:	2a00      	cmp	r2, #0
   13c86:	d0f5      	beq.n	13c74 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c88:	6059      	str	r1, [r3, #4]
			 *        code.
			 */
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   13c8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   13c8e:	2a00      	cmp	r2, #0
   13c90:	d1e7      	bne.n	13c62 <do_ecb+0xa>
   13c92:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   13c96:	2d00      	cmp	r5, #0
   13c98:	d0e3      	beq.n	13c62 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   13c9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   13c9e:	bc30      	pop	{r4, r5}
   13ca0:	4770      	bx	lr
   13ca2:	bf00      	nop
   13ca4:	4000e000 	.word	0x4000e000

00013ca8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   13ca8:	b570      	push	{r4, r5, r6, lr}
   13caa:	b08c      	sub	sp, #48	; 0x30
   13cac:	460e      	mov	r6, r1
   13cae:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   13cb0:	4601      	mov	r1, r0
   13cb2:	2210      	movs	r2, #16
   13cb4:	4668      	mov	r0, sp
{
   13cb6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   13cb8:	f7f3 fff4 	bl	7ca4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   13cbc:	2210      	movs	r2, #16
   13cbe:	eb0d 0002 	add.w	r0, sp, r2
   13cc2:	4631      	mov	r1, r6
   13cc4:	f7f3 ffee 	bl	7ca4 <mem_rcopy>

	do_ecb(&ecb);
   13cc8:	4668      	mov	r0, sp
   13cca:	f7ff ffc5 	bl	13c58 <do_ecb>

	if (cipher_text_le) {
   13cce:	b125      	cbz	r5, 13cda <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   13cd0:	2210      	movs	r2, #16
   13cd2:	a908      	add	r1, sp, #32
   13cd4:	4628      	mov	r0, r5
   13cd6:	f7f3 ffe5 	bl	7ca4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   13cda:	b124      	cbz	r4, 13ce6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   13cdc:	2210      	movs	r2, #16
   13cde:	a908      	add	r1, sp, #32
   13ce0:	4620      	mov	r0, r4
   13ce2:	f005 ff87 	bl	19bf4 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   13ce6:	b00c      	add	sp, #48	; 0x30
   13ce8:	bd70      	pop	{r4, r5, r6, pc}
   13cea:	bf00      	nop

00013cec <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   13cec:	4b04      	ldr	r3, [pc, #16]	; (13d00 <isr_radio+0x14>)
   13cee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   13cf2:	b123      	cbz	r3, 13cfe <isr_radio+0x12>
		isr_cb(isr_cb_param);
   13cf4:	4a03      	ldr	r2, [pc, #12]	; (13d04 <isr_radio+0x18>)
   13cf6:	4b04      	ldr	r3, [pc, #16]	; (13d08 <isr_radio+0x1c>)
   13cf8:	6810      	ldr	r0, [r2, #0]
   13cfa:	681b      	ldr	r3, [r3, #0]
   13cfc:	4718      	bx	r3
}
   13cfe:	4770      	bx	lr
   13d00:	40001000 	.word	0x40001000
   13d04:	200023d8 	.word	0x200023d8
   13d08:	200023dc 	.word	0x200023dc

00013d0c <radio_isr_set>:
{
   13d0c:	b538      	push	{r3, r4, r5, lr}
   13d0e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   13d10:	2001      	movs	r0, #1
{
   13d12:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   13d14:	f7ef fdda 	bl	38cc <arch_irq_disable>
	isr_cb = cb;
   13d18:	4b08      	ldr	r3, [pc, #32]	; (13d3c <radio_isr_set+0x30>)
	isr_cb_param = param;
   13d1a:	4a09      	ldr	r2, [pc, #36]	; (13d40 <radio_isr_set+0x34>)
	isr_cb = cb;
   13d1c:	601c      	str	r4, [r3, #0]
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
#if defined(RADIO_INTENSET_READY_Msk)
    p_reg->INTENSET = mask;
   13d1e:	4909      	ldr	r1, [pc, #36]	; (13d44 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d20:	4b09      	ldr	r3, [pc, #36]	; (13d48 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   13d22:	6015      	str	r5, [r2, #0]
   13d24:	2010      	movs	r0, #16
   13d26:	2202      	movs	r2, #2
   13d28:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   13d2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   13d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   13d34:	2001      	movs	r0, #1
   13d36:	f7ef bdbb 	b.w	38b0 <arch_irq_enable>
   13d3a:	bf00      	nop
   13d3c:	200023dc 	.word	0x200023dc
   13d40:	200023d8 	.word	0x200023d8
   13d44:	40001000 	.word	0x40001000
   13d48:	e000e100 	.word	0xe000e100

00013d4c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   13d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   13d54:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   13d56:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   13d5a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   13d5e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   13d62:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   13d66:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   13d6a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   13d6e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   13d72:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   13d76:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   13d7a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   13d7e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   13d82:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   13d86:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   13d8a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   13d8e:	4770      	bx	lr

00013d90 <radio_reset>:
{
   13d90:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   13d92:	2001      	movs	r0, #1
   13d94:	f7ef fd9a 	bl	38cc <arch_irq_disable>
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   13d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	NRF_RADIO->PCNF1 = HAL_RADIO_RESET_VALUE_PCNF1;
   13d9c:	491b      	ldr	r1, [pc, #108]	; (13e0c <radio_reset+0x7c>)
   13d9e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   13da2:	2000      	movs	r0, #0
   13da4:	f8c1 0518 	str.w	r0, [r1, #1304]	; 0x518
   13da8:	1c59      	adds	r1, r3, #1
   13daa:	d01f      	beq.n	13dec <radio_reset+0x5c>
                var2 = *(uint32_t *)0x10000134ul;
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   13dac:	2b06      	cmp	r3, #6
   13dae:	d009      	beq.n	13dc4 <radio_reset+0x34>
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13db0:	4b17      	ldr	r3, [pc, #92]	; (13e10 <radio_reset+0x80>)
   13db2:	f44f 5190 	mov.w	r1, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13db6:	f44f 5210 	mov.w	r2, #9216	; 0x2400
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   13dba:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   13dbe:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   13dc2:	bd08      	pop	{r3, pc}
                var2 = *(uint32_t *)0x10000134ul;
   13dc4:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
            {
                switch(var2)
   13dc8:	3b03      	subs	r3, #3
   13dca:	2b04      	cmp	r3, #4
   13dcc:	d8f0      	bhi.n	13db0 <radio_reset+0x20>
	if (nrf52_errata_102() || nrf52_errata_106() || nrf52_errata_107()) {
   13dce:	4a11      	ldr	r2, [pc, #68]	; (13e14 <radio_reset+0x84>)
   13dd0:	5cd2      	ldrb	r2, [r2, r3]
   13dd2:	b1b2      	cbz	r2, 13e02 <radio_reset+0x72>
			((*(volatile uint32_t *)0x40001774) & 0xfffffffe)
   13dd4:	4a0d      	ldr	r2, [pc, #52]	; (13e0c <radio_reset+0x7c>)
   13dd6:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
			| 0x01000000;
   13dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   13dde:	f023 0301 	bic.w	r3, r3, #1
   13de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
		*(volatile uint32_t *)0x40001774 =
   13de6:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
   13dea:	e7e1      	b.n	13db0 <radio_reset+0x20>
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   13dec:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   13df0:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
   13df4:	2a06      	cmp	r2, #6
   13df6:	d1db      	bne.n	13db0 <radio_reset+0x20>
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   13df8:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   13dfc:	f3c3 1303 	ubfx	r3, r3, #4, #4
   13e00:	e7e2      	b.n	13dc8 <radio_reset+0x38>
	if (nrf52_errata_102() || nrf52_errata_106() || nrf52_errata_107()) {
   13e02:	4a05      	ldr	r2, [pc, #20]	; (13e18 <radio_reset+0x88>)
   13e04:	5cd3      	ldrb	r3, [r2, r3]
   13e06:	2b00      	cmp	r3, #0
   13e08:	d0d2      	beq.n	13db0 <radio_reset+0x20>
   13e0a:	e7e3      	b.n	13dd4 <radio_reset+0x44>
   13e0c:	40001000 	.word	0x40001000
   13e10:	4001f000 	.word	0x4001f000
   13e14:	0001f028 	.word	0x0001f028
   13e18:	0001f020 	.word	0x0001f020

00013e1c <radio_stop>:
}
   13e1c:	4770      	bx	lr
   13e1e:	bf00      	nop

00013e20 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   13e20:	4b05      	ldr	r3, [pc, #20]	; (13e38 <radio_phy_set+0x18>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   13e22:	2802      	cmp	r0, #2
   13e24:	bf0c      	ite	eq
   13e26:	2104      	moveq	r1, #4
   13e28:	2103      	movne	r1, #3
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   13e2a:	f240 2201 	movw	r2, #513	; 0x201
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   13e2e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 = ((RADIO_MODECNF0_DTX_Center <<
   13e32:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   13e36:	4770      	bx	lr
   13e38:	40001000 	.word	0x40001000

00013e3c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   13e3c:	4b01      	ldr	r3, [pc, #4]	; (13e44 <radio_tx_power_set+0x8>)
   13e3e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   13e42:	4770      	bx	lr
   13e44:	40001000 	.word	0x40001000

00013e48 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   13e48:	4b01      	ldr	r3, [pc, #4]	; (13e50 <radio_freq_chan_set+0x8>)
   13e4a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   13e4e:	4770      	bx	lr
   13e50:	40001000 	.word	0x40001000

00013e54 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   13e54:	4b07      	ldr	r3, [pc, #28]	; (13e74 <radio_whiten_iv_set+0x20>)
   13e56:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   13e5a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13e5e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   13e62:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   13e66:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13e6a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   13e6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   13e72:	4770      	bx	lr
   13e74:	40001000 	.word	0x40001000

00013e78 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   13e78:	4a0a      	ldr	r2, [pc, #40]	; (13ea4 <radio_aa_set+0x2c>)
   13e7a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   13e7c:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   13e7e:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   13e82:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   13e86:	78c3      	ldrb	r3, [r0, #3]
   13e88:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13e8c:	7843      	ldrb	r3, [r0, #1]
   13e8e:	f890 c002 	ldrb.w	ip, [r0, #2]
   13e92:	7801      	ldrb	r1, [r0, #0]
   13e94:	041b      	lsls	r3, r3, #16
   13e96:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   13e9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13e9e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   13ea2:	4770      	bx	lr
   13ea4:	40001000 	.word	0x40001000

00013ea8 <radio_pkt_configure>:
	switch (phy) {
   13ea8:	f3c2 0342 	ubfx	r3, r2, #1, #3
   13eac:	f1a3 0302 	sub.w	r3, r3, #2
   13eb0:	fab3 f383 	clz	r3, r3
   13eb4:	095b      	lsrs	r3, r3, #5
   13eb6:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   13eb8:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   13eba:	bf48      	it	mi
   13ebc:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   13ec0:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   13ec4:	4a09      	ldr	r2, [pc, #36]	; (13eec <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   13ec6:	4318      	orrs	r0, r3
   13ec8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   13ecc:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   13ed0:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   13ed4:	4b06      	ldr	r3, [pc, #24]	; (13ef0 <radio_pkt_configure+0x48>)
   13ed6:	4003      	ands	r3, r0
   13ed8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   13edc:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   13ee0:	4319      	orrs	r1, r3
   13ee2:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   13ee6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   13eea:	4770      	bx	lr
   13eec:	40001000 	.word	0x40001000
   13ef0:	fef80000 	.word	0xfef80000

00013ef4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   13ef4:	4b01      	ldr	r3, [pc, #4]	; (13efc <radio_pkt_rx_set+0x8>)
   13ef6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   13efa:	4770      	bx	lr
   13efc:	40001000 	.word	0x40001000

00013f00 <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   13f00:	4b01      	ldr	r3, [pc, #4]	; (13f08 <radio_pkt_tx_set+0x8>)
   13f02:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   13f06:	4770      	bx	lr
   13f08:	40001000 	.word	0x40001000

00013f0c <radio_tx_ready_delay_get>:
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_US;
   13f0c:	2802      	cmp	r0, #2
}
   13f0e:	bf0c      	ite	eq
   13f10:	2028      	moveq	r0, #40	; 0x28
   13f12:	2029      	movne	r0, #41	; 0x29
   13f14:	4770      	bx	lr
   13f16:	bf00      	nop

00013f18 <radio_tx_chain_delay_get>:
}
   13f18:	2001      	movs	r0, #1
   13f1a:	4770      	bx	lr

00013f1c <radio_rx_ready_delay_get>:
}
   13f1c:	2029      	movs	r0, #41	; 0x29
   13f1e:	4770      	bx	lr

00013f20 <radio_rx_chain_delay_get>:
	ARG_UNUSED(flags);

	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
   13f20:	2802      	cmp	r0, #2
}
   13f22:	bf0c      	ite	eq
   13f24:	2006      	moveq	r0, #6
   13f26:	200a      	movne	r0, #10
   13f28:	4770      	bx	lr
   13f2a:	bf00      	nop

00013f2c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13f2c:	4b01      	ldr	r3, [pc, #4]	; (13f34 <radio_tx_enable+0x8>)
   13f2e:	2201      	movs	r2, #1
   13f30:	601a      	str	r2, [r3, #0]
}
   13f32:	4770      	bx	lr
   13f34:	40001000 	.word	0x40001000

00013f38 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   13f38:	4a07      	ldr	r2, [pc, #28]	; (13f58 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   13f3a:	4908      	ldr	r1, [pc, #32]	; (13f5c <radio_disable+0x24>)
{
   13f3c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   13f3e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   13f40:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   13f44:	2000      	movs	r0, #0
   13f46:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   13f4a:	6053      	str	r3, [r2, #4]
   13f4c:	60d3      	str	r3, [r2, #12]
   13f4e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   13f52:	610b      	str	r3, [r1, #16]
}
   13f54:	bc10      	pop	{r4}
   13f56:	4770      	bx	lr
   13f58:	4001f000 	.word	0x4001f000
   13f5c:	40001000 	.word	0x40001000

00013f60 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   13f60:	4b04      	ldr	r3, [pc, #16]	; (13f74 <radio_status_reset+0x14>)
   13f62:	2200      	movs	r2, #0
   13f64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   13f68:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   13f6c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   13f70:	4770      	bx	lr
   13f72:	bf00      	nop
   13f74:	40001000 	.word	0x40001000

00013f78 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   13f78:	4b03      	ldr	r3, [pc, #12]	; (13f88 <radio_is_ready+0x10>)
   13f7a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   13f7e:	3800      	subs	r0, #0
   13f80:	bf18      	it	ne
   13f82:	2001      	movne	r0, #1
   13f84:	4770      	bx	lr
   13f86:	bf00      	nop
   13f88:	40001000 	.word	0x40001000

00013f8c <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   13f8c:	4b03      	ldr	r3, [pc, #12]	; (13f9c <radio_is_done+0x10>)
   13f8e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   13f92:	3800      	subs	r0, #0
   13f94:	bf18      	it	ne
   13f96:	2001      	movne	r0, #1
   13f98:	4770      	bx	lr
   13f9a:	bf00      	nop
   13f9c:	40001000 	.word	0x40001000

00013fa0 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   13fa0:	4b03      	ldr	r3, [pc, #12]	; (13fb0 <radio_is_idle+0x10>)
   13fa2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   13fa6:	fab0 f080 	clz	r0, r0
   13faa:	0940      	lsrs	r0, r0, #5
   13fac:	4770      	bx	lr
   13fae:	bf00      	nop
   13fb0:	40001000 	.word	0x40001000

00013fb4 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   13fb4:	4b04      	ldr	r3, [pc, #16]	; (13fc8 <radio_crc_configure+0x14>)
   13fb6:	f240 1203 	movw	r2, #259	; 0x103
   13fba:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   13fbe:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   13fc2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   13fc6:	4770      	bx	lr
   13fc8:	40001000 	.word	0x40001000

00013fcc <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   13fcc:	4b03      	ldr	r3, [pc, #12]	; (13fdc <radio_crc_is_valid+0x10>)
   13fce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13fd2:	3800      	subs	r0, #0
   13fd4:	bf18      	it	ne
   13fd6:	2001      	movne	r0, #1
   13fd8:	4770      	bx	lr
   13fda:	bf00      	nop
   13fdc:	40001000 	.word	0x40001000

00013fe0 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   13fe0:	4800      	ldr	r0, [pc, #0]	; (13fe4 <radio_pkt_empty_get+0x4>)
   13fe2:	4770      	bx	lr
   13fe4:	200023d4 	.word	0x200023d4

00013fe8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   13fe8:	4800      	ldr	r0, [pc, #0]	; (13fec <radio_pkt_scratch_get+0x4>)
   13fea:	4770      	bx	lr
   13fec:	200022d0 	.word	0x200022d0

00013ff0 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   13ff0:	4800      	ldr	r0, [pc, #0]	; (13ff4 <radio_pkt_decrypt_get+0x4>)
   13ff2:	4770      	bx	lr
   13ff4:	200021cc 	.word	0x200021cc

00013ff8 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   13ff8:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   13ffa:	4b1d      	ldr	r3, [pc, #116]	; (14070 <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   13ffc:	4d1d      	ldr	r5, [pc, #116]	; (14074 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13ffe:	4e1e      	ldr	r6, [pc, #120]	; (14078 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   14000:	4c1e      	ldr	r4, [pc, #120]	; (1407c <radio_switch_complete_and_rx+0x84>)
   14002:	4f1f      	ldr	r7, [pc, #124]	; (14080 <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   14004:	2203      	movs	r2, #3
   14006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1400a:	782a      	ldrb	r2, [r5, #0]
   1400c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   14010:	f102 030c 	add.w	r3, r2, #12
   14014:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   14016:	00d0      	lsls	r0, r2, #3
   14018:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1401a:	0091      	lsls	r1, r2, #2
   1401c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   14020:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   14024:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   14028:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1402c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   14030:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   14034:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   14038:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1403c:	4811      	ldr	r0, [pc, #68]	; (14084 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1403e:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14042:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   14046:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1404a:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1404c:	bf8a      	itet	hi
   1404e:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   14052:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   14054:	3b2d      	subhi	r3, #45	; 0x2d
   14056:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1405a:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1405c:	4b06      	ldr	r3, [pc, #24]	; (14078 <radio_switch_complete_and_rx+0x80>)
   1405e:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   14062:	f002 0201 	and.w	r2, r2, #1
   14066:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1406a:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1406c:	bcf0      	pop	{r4, r5, r6, r7}
   1406e:	4770      	bx	lr
   14070:	40001000 	.word	0x40001000
   14074:	20002723 	.word	0x20002723
   14078:	4001f000 	.word	0x4001f000
   1407c:	40009140 	.word	0x40009140
   14080:	4000110c 	.word	0x4000110c
   14084:	40001004 	.word	0x40001004

00014088 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   14088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1408c:	4e28      	ldr	r6, [pc, #160]	; (14130 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1408e:	4c29      	ldr	r4, [pc, #164]	; (14134 <radio_switch_complete_and_tx+0xac>)
   14090:	4f29      	ldr	r7, [pc, #164]	; (14138 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14092:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1413c <radio_switch_complete_and_tx+0xb4>
   14096:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 14140 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1409a:	2303      	movs	r3, #3
   1409c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   140a0:	7821      	ldrb	r1, [r4, #0]
   140a2:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   140a6:	f101 030c 	add.w	r3, r1, #12
   140aa:	b2db      	uxtb	r3, r3
   140ac:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   140ae:	00cd      	lsls	r5, r1, #3
   140b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   140b4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   140b8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   140bc:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   140c0:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   140c4:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   140c8:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   140cc:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   140d0:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   140d4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   140d8:	f24a 234e 	movw	r3, #41550	; 0xa24e
   140dc:	2a02      	cmp	r2, #2
   140de:	bf18      	it	ne
   140e0:	461d      	movne	r5, r3

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   140e2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
   140e6:	f242 42b8 	movw	r2, #9400	; 0x24b8
   140ea:	f241 534a 	movw	r3, #5450	; 0x154a
   140ee:	2802      	cmp	r0, #2
   140f0:	bf18      	it	ne
   140f2:	4613      	movne	r3, r2
   140f4:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   140f8:	4a12      	ldr	r2, [pc, #72]	; (14144 <radio_switch_complete_and_tx+0xbc>)
   140fa:	442b      	add	r3, r5
   140fc:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   14100:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   14104:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   14108:	bf85      	ittet	hi
   1410a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1410c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   14110:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   14112:	1a1b      	subhi	r3, r3, r0
   14114:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   14118:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1411a:	4b08      	ldr	r3, [pc, #32]	; (1413c <radio_switch_complete_and_tx+0xb4>)
   1411c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   14120:	f001 0101 	and.w	r1, r1, #1
   14124:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   14128:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1412a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1412e:	bf00      	nop
   14130:	40001000 	.word	0x40001000
   14134:	20002723 	.word	0x20002723
   14138:	40009140 	.word	0x40009140
   1413c:	4001f000 	.word	0x4001f000
   14140:	4000110c 	.word	0x4000110c
   14144:	10624dd3 	.word	0x10624dd3

00014148 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   14148:	4904      	ldr	r1, [pc, #16]	; (1415c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1414a:	4b05      	ldr	r3, [pc, #20]	; (14160 <radio_switch_complete_and_disable+0x18>)
   1414c:	2003      	movs	r0, #3
   1414e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   14152:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   14156:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1415a:	4770      	bx	lr
   1415c:	40001000 	.word	0x40001000
   14160:	4001f000 	.word	0x4001f000

00014164 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   14164:	4b02      	ldr	r3, [pc, #8]	; (14170 <radio_rssi_status_reset+0xc>)
   14166:	2200      	movs	r2, #0
   14168:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1416c:	4770      	bx	lr
   1416e:	bf00      	nop
   14170:	40001000 	.word	0x40001000

00014174 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   14174:	4b03      	ldr	r3, [pc, #12]	; (14184 <radio_rssi_is_ready+0x10>)
   14176:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1417a:	3800      	subs	r0, #0
   1417c:	bf18      	it	ne
   1417e:	2001      	movne	r0, #1
   14180:	4770      	bx	lr
   14182:	bf00      	nop
   14184:	40001000 	.word	0x40001000

00014188 <radio_filter_disable>:
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   14188:	4a03      	ldr	r2, [pc, #12]	; (14198 <radio_filter_disable+0x10>)
   1418a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1418e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   14192:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   14196:	4770      	bx	lr
   14198:	40001000 	.word	0x40001000

0001419c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1419c:	4b02      	ldr	r3, [pc, #8]	; (141a8 <radio_filter_status_reset+0xc>)
   1419e:	2200      	movs	r2, #0
   141a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   141a4:	4770      	bx	lr
   141a6:	bf00      	nop
   141a8:	40001000 	.word	0x40001000

000141ac <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   141ac:	4b03      	ldr	r3, [pc, #12]	; (141bc <radio_filter_has_match+0x10>)
   141ae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   141b2:	3800      	subs	r0, #0
   141b4:	bf18      	it	ne
   141b6:	2001      	movne	r0, #1
   141b8:	4770      	bx	lr
   141ba:	bf00      	nop
   141bc:	40001000 	.word	0x40001000

000141c0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   141c0:	4b01      	ldr	r3, [pc, #4]	; (141c8 <radio_filter_match_get+0x8>)
   141c2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   141c6:	4770      	bx	lr
   141c8:	40001000 	.word	0x40001000

000141cc <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   141cc:	4904      	ldr	r1, [pc, #16]	; (141e0 <radio_tmr_status_reset+0x14>)
   141ce:	4b05      	ldr	r3, [pc, #20]	; (141e4 <radio_tmr_status_reset+0x18>)
   141d0:	4a05      	ldr	r2, [pc, #20]	; (141e8 <radio_tmr_status_reset+0x1c>)
   141d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   141d6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   141da:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   141de:	4770      	bx	lr
   141e0:	4000b000 	.word	0x4000b000
   141e4:	4001f000 	.word	0x4001f000
   141e8:	0e7000c0 	.word	0x0e7000c0

000141ec <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   141ec:	4b03      	ldr	r3, [pc, #12]	; (141fc <radio_tmr_tifs_set+0x10>)
   141ee:	4a04      	ldr	r2, [pc, #16]	; (14200 <radio_tmr_tifs_set+0x14>)
   141f0:	781b      	ldrb	r3, [r3, #0]
   141f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   141f6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   141fa:	4770      	bx	lr
   141fc:	20002723 	.word	0x20002723
   14200:	40009000 	.word	0x40009000

00014204 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   14204:	b4f0      	push	{r4, r5, r6, r7}
/* Remove ticks and return positive remainder value in microseconds */
static inline void hal_ticker_remove_jitter(uint32_t *ticks,
					    uint32_t *remainder)
{
	/* Is remainder less than 1 us */
	if ((*remainder & BIT(31)) || !(*remainder / 1000000UL)) {
   14206:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1420a:	4d2f      	ldr	r5, [pc, #188]	; (142c8 <radio_tmr_start+0xc4>)
   1420c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   14210:	42ab      	cmp	r3, r5
   14212:	4604      	mov	r4, r0
   14214:	d906      	bls.n	14224 <radio_tmr_start+0x20>
		*ticks -= 1U;
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   14216:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1421a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		*ticks -= 1U;
   1421e:	3901      	subs	r1, #1
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   14220:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14224:	4b29      	ldr	r3, [pc, #164]	; (142cc <radio_tmr_start+0xc8>)
	}

	/* pico seconds to micro seconds unit */
	*remainder /= 1000000UL;
   14226:	482a      	ldr	r0, [pc, #168]	; (142d0 <radio_tmr_start+0xcc>)
    p_reg->CC[ch] = cc_val;
   14228:	4d2a      	ldr	r5, [pc, #168]	; (142d4 <radio_tmr_start+0xd0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1422a:	4e2b      	ldr	r6, [pc, #172]	; (142d8 <radio_tmr_start+0xd4>)
   1422c:	2701      	movs	r7, #1
   1422e:	60df      	str	r7, [r3, #12]
	hal_ticker_remove_jitter(&ticks_start, &remainder);

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   14230:	2700      	movs	r7, #0
   14232:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
   14236:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1423a:	2704      	movs	r7, #4
   1423c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
   14240:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   14242:	2702      	movs	r7, #2
   14244:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   14248:	4a24      	ldr	r2, [pc, #144]	; (142dc <radio_tmr_start+0xd8>)
    p_reg->CC[cc_channel] = cc_value;
   1424a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1424e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   14252:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   14256:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1425a:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1425c:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14260:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   14264:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	if (trx) {
   14268:	b34c      	cbz	r4, 142be <radio_tmr_start+0xba>
   1426a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1426e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14272:	4a1b      	ldr	r2, [pc, #108]	; (142e0 <radio_tmr_start+0xdc>)
   14274:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   14276:	2400      	movs	r4, #0
	SW_SWITCH_TIMER->PRESCALER = 4;
   14278:	2304      	movs	r3, #4
   1427a:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->MODE = 0;
   1427c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   14280:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14284:	4b15      	ldr	r3, [pc, #84]	; (142dc <radio_tmr_start+0xd8>)
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   14286:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1428a:	6011      	str	r1, [r2, #0]
   1428c:	4915      	ldr	r1, [pc, #84]	; (142e4 <radio_tmr_start+0xe0>)
   1428e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14292:	320c      	adds	r2, #12
   14294:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
   14298:	f502 32af 	add.w	r2, r2, #89600	; 0x15e00
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1429c:	4c12      	ldr	r4, [pc, #72]	; (142e8 <radio_tmr_start+0xe4>)
   1429e:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   142a2:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    p_reg->CH[(uint32_t) channel].EEP = eep;
   142a6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   142aa:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   142ae:	3138      	adds	r1, #56	; 0x38
    p_reg->CH[(uint32_t) channel].TEP = tep;
   142b0:	3208      	adds	r2, #8
    p_reg->CH[(uint32_t) channel].EEP = eep;
   142b2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   142b6:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   142ba:	bcf0      	pop	{r4, r5, r6, r7}
   142bc:	4770      	bx	lr
    p_reg->CHENSET = mask;
   142be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   142c2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   142c6:	e7d4      	b.n	14272 <radio_tmr_start+0x6e>
   142c8:	7ff0bdbf 	.word	0x7ff0bdbf
   142cc:	40008000 	.word	0x40008000
   142d0:	431bde83 	.word	0x431bde83
   142d4:	4000b000 	.word	0x4000b000
   142d8:	4000b148 	.word	0x4000b148
   142dc:	4001f000 	.word	0x4001f000
   142e0:	40009000 	.word	0x40009000
   142e4:	4000110c 	.word	0x4000110c
   142e8:	40009140 	.word	0x40009140

000142ec <radio_tmr_start_get>:
    return p_reg->CC[ch];
   142ec:	4b01      	ldr	r3, [pc, #4]	; (142f4 <radio_tmr_start_get+0x8>)
   142ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   142f2:	4770      	bx	lr
   142f4:	4000b000 	.word	0x4000b000

000142f8 <radio_tmr_stop>:
   142f8:	4903      	ldr	r1, [pc, #12]	; (14308 <radio_tmr_stop+0x10>)
   142fa:	4a04      	ldr	r2, [pc, #16]	; (1430c <radio_tmr_stop+0x14>)
   142fc:	2301      	movs	r3, #1
   142fe:	604b      	str	r3, [r1, #4]
   14300:	610b      	str	r3, [r1, #16]
   14302:	6053      	str	r3, [r2, #4]
   14304:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   14306:	4770      	bx	lr
   14308:	40008000 	.word	0x40008000
   1430c:	40009000 	.word	0x40009000

00014310 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   14310:	4904      	ldr	r1, [pc, #16]	; (14324 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   14312:	4b05      	ldr	r3, [pc, #20]	; (14328 <radio_tmr_hcto_configure+0x18>)
   14314:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   14318:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1431c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   14320:	4770      	bx	lr
   14322:	bf00      	nop
   14324:	40008000 	.word	0x40008000
   14328:	4001f000 	.word	0x4001f000

0001432c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1432c:	4b05      	ldr	r3, [pc, #20]	; (14344 <radio_tmr_aa_capture+0x18>)
   1432e:	4806      	ldr	r0, [pc, #24]	; (14348 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14330:	4906      	ldr	r1, [pc, #24]	; (1434c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   14332:	4a07      	ldr	r2, [pc, #28]	; (14350 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   14334:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   14338:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1433c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   14340:	4770      	bx	lr
   14342:	bf00      	nop
   14344:	4001f000 	.word	0x4001f000
   14348:	40001100 	.word	0x40001100
   1434c:	40008040 	.word	0x40008040
   14350:	04000080 	.word	0x04000080

00014354 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   14354:	4b01      	ldr	r3, [pc, #4]	; (1435c <radio_tmr_aa_get+0x8>)
   14356:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1435a:	4770      	bx	lr
   1435c:	40008000 	.word	0x40008000

00014360 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   14360:	4b01      	ldr	r3, [pc, #4]	; (14368 <radio_tmr_aa_save+0x8>)
   14362:	6018      	str	r0, [r3, #0]
}
   14364:	4770      	bx	lr
   14366:	bf00      	nop
   14368:	200021c8 	.word	0x200021c8

0001436c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1436c:	4b01      	ldr	r3, [pc, #4]	; (14374 <radio_tmr_aa_restore+0x8>)
}
   1436e:	6818      	ldr	r0, [r3, #0]
   14370:	4770      	bx	lr
   14372:	bf00      	nop
   14374:	200021c8 	.word	0x200021c8

00014378 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   14378:	4b01      	ldr	r3, [pc, #4]	; (14380 <radio_tmr_ready_get+0x8>)
   1437a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1437e:	4770      	bx	lr
   14380:	40008000 	.word	0x40008000

00014384 <radio_tmr_end_capture>:
   14384:	4b02      	ldr	r3, [pc, #8]	; (14390 <radio_tmr_end_capture+0xc>)
   14386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1438a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1438e:	4770      	bx	lr
   14390:	4001f000 	.word	0x4001f000

00014394 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   14394:	4b01      	ldr	r3, [pc, #4]	; (1439c <radio_tmr_end_get+0x8>)
   14396:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1439a:	4770      	bx	lr
   1439c:	40008000 	.word	0x40008000

000143a0 <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   143a0:	4b01      	ldr	r3, [pc, #4]	; (143a8 <radio_tmr_tifs_base_get+0x8>)
   143a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   143a6:	4770      	bx	lr
   143a8:	40008000 	.word	0x40008000

000143ac <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   143ac:	4b19      	ldr	r3, [pc, #100]	; (14414 <radio_ccm_rx_pkt_set+0x68>)
{
   143ae:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   143b0:	2400      	movs	r4, #0
   143b2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   143b6:	2902      	cmp	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   143b8:	f04f 0402 	mov.w	r4, #2
   143bc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   143c0:	4604      	mov	r4, r0
	switch (phy) {
   143c2:	d020      	beq.n	14406 <radio_ccm_rx_pkt_set+0x5a>
   143c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   143c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   143cc:	4912      	ldr	r1, [pc, #72]	; (14418 <radio_ccm_rx_pkt_set+0x6c>)
   143ce:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
#endif

	NRF_CCM->MODE = mode;
   143d2:	4b10      	ldr	r3, [pc, #64]	; (14414 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   143d4:	4811      	ldr	r0, [pc, #68]	; (1441c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->MODE = mode;
   143d6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   143da:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   143de:	2100      	movs	r1, #0
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   143e0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   143e4:	4c0e      	ldr	r4, [pc, #56]	; (14420 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   143e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   143ea:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   143ec:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   143f0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   143f4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   143f8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   143fc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   14400:	601a      	str	r2, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   14402:	bc10      	pop	{r4}
   14404:	4770      	bx	lr
   14406:	4b07      	ldr	r3, [pc, #28]	; (14424 <radio_ccm_rx_pkt_set+0x78>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   14408:	4907      	ldr	r1, [pc, #28]	; (14428 <radio_ccm_rx_pkt_set+0x7c>)
   1440a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   1440e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   14412:	e7de      	b.n	143d2 <radio_ccm_rx_pkt_set+0x26>
   14414:	4000f000 	.word	0x4000f000
   14418:	01000001 	.word	0x01000001
   1441c:	200022d0 	.word	0x200022d0
   14420:	200020bc 	.word	0x200020bc
   14424:	4001f000 	.word	0x4001f000
   14428:	01010001 	.word	0x01010001

0001442c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1442c:	4b10      	ldr	r3, [pc, #64]	; (14470 <radio_ccm_tx_pkt_set+0x44>)
{
   1442e:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   14430:	2200      	movs	r2, #0
{
   14432:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   14434:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   14436:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1443a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500

	/* MAXPACKETSIZE value 0x001B (27) - 0x00FB (251) bytes */
	NRF_CCM->MAXPACKETSIZE = max_len - 4U;
#endif

	NRF_CCM->MODE = mode;
   1443e:	480d      	ldr	r0, [pc, #52]	; (14474 <radio_ccm_tx_pkt_set+0x48>)
   14440:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   14444:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   14448:	480b      	ldr	r0, [pc, #44]	; (14478 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1444a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1444e:	4c0b      	ldr	r4, [pc, #44]	; (1447c <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   14450:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   14454:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   14456:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1445a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   1445e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   14462:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   14466:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1446a:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1446c:	bc10      	pop	{r4}
   1446e:	4770      	bx	lr
   14470:	4000f000 	.word	0x4000f000
   14474:	01010000 	.word	0x01010000
   14478:	200022d0 	.word	0x200022d0
   1447c:	200020bc 	.word	0x200020bc

00014480 <radio_ccm_is_done>:

uint32_t radio_ccm_is_done(void)
{
   14480:	b510      	push	{r4, lr}
}
#endif // NRF_CCM_HAS_EVENT_ENDKSGEN

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14482:	4c12      	ldr	r4, [pc, #72]	; (144cc <radio_ccm_is_done+0x4c>)
   14484:	2302      	movs	r3, #2
   14486:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1448a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1448e:	b96b      	cbnz	r3, 144ac <radio_ccm_is_done+0x2c>
	__asm__ volatile(
   14490:	f04f 0320 	mov.w	r3, #32
   14494:	f3ef 8011 	mrs	r0, BASEPRI
   14498:	f383 8812 	msr	BASEPRI_MAX, r3
   1449c:	f3bf 8f6f 	isb	sy
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   144a0:	f7ef f9fa 	bl	3898 <arch_cpu_atomic_idle>
   144a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   144a8:	2b00      	cmp	r3, #0
   144aa:	d0f1      	beq.n	14490 <radio_ccm_is_done+0x10>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   144ac:	4b07      	ldr	r3, [pc, #28]	; (144cc <radio_ccm_is_done+0x4c>)
   144ae:	4a08      	ldr	r2, [pc, #32]	; (144d0 <radio_ccm_is_done+0x50>)
   144b0:	2002      	movs	r0, #2
   144b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   144b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   144ba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
		cpu_sleep();
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   144be:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   144c2:	fab0 f080 	clz	r0, r0
   144c6:	0940      	lsrs	r0, r0, #5
   144c8:	bd10      	pop	{r4, pc}
   144ca:	bf00      	nop
   144cc:	4000f000 	.word	0x4000f000
   144d0:	e000e100 	.word	0xe000e100

000144d4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   144d4:	4b03      	ldr	r3, [pc, #12]	; (144e4 <radio_ccm_mic_is_valid+0x10>)
   144d6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   144da:	3800      	subs	r0, #0
   144dc:	bf18      	it	ne
   144de:	2001      	movne	r0, #1
   144e0:	4770      	bx	lr
   144e2:	bf00      	nop
   144e4:	4000f000 	.word	0x4000f000

000144e8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	switch (callee_id) {
   144e8:	3901      	subs	r1, #1
   144ea:	2901      	cmp	r1, #1
   144ec:	d805      	bhi.n	144fa <mayfly_enable_cb+0x12>
	case MAYFLY_CALL_ID_WORKER:
		if (enable) {
			irq_enable(HAL_SWI_WORKER_IRQ);
   144ee:	200b      	movs	r0, #11
		if (enable) {
   144f0:	b10a      	cbz	r2, 144f6 <mayfly_enable_cb+0xe>
			irq_enable(HAL_SWI_WORKER_IRQ);
   144f2:	f7ef b9dd 	b.w	38b0 <arch_irq_enable>
		} else {
			irq_disable(HAL_SWI_WORKER_IRQ);
   144f6:	f7ef b9e9 	b.w	38cc <arch_irq_disable>
{
   144fa:	b508      	push	{r3, lr}
			irq_disable(HAL_SWI_JOB_IRQ);
		}
		break;

	default:
		LL_ASSERT(0);
   144fc:	4a06      	ldr	r2, [pc, #24]	; (14518 <mayfly_enable_cb+0x30>)
   144fe:	4907      	ldr	r1, [pc, #28]	; (1451c <mayfly_enable_cb+0x34>)
   14500:	4807      	ldr	r0, [pc, #28]	; (14520 <mayfly_enable_cb+0x38>)
   14502:	232d      	movs	r3, #45	; 0x2d
   14504:	f005 f89b 	bl	1963e <assert_print>
   14508:	4040      	eors	r0, r0
   1450a:	f380 8811 	msr	BASEPRI, r0
   1450e:	f04f 0003 	mov.w	r0, #3
   14512:	df02      	svc	2
		break;
	}
}
   14514:	bd08      	pop	{r3, pc}
   14516:	bf00      	nop
   14518:	0001f030 	.word	0x0001f030
   1451c:	0001e220 	.word	0x0001e220
   14520:	0001e1a4 	.word	0x0001e1a4

00014524 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   14524:	b129      	cbz	r1, 14532 <mayfly_is_enabled+0xe>
   14526:	3901      	subs	r1, #1
   14528:	2901      	cmp	r1, #1
   1452a:	d805      	bhi.n	14538 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1452c:	200b      	movs	r0, #11
   1452e:	f7ef b9e1 	b.w	38f4 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   14532:	2018      	movs	r0, #24
   14534:	f7ef b9de 	b.w	38f4 <arch_irq_is_enabled>
{
   14538:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1453a:	4a07      	ldr	r2, [pc, #28]	; (14558 <mayfly_is_enabled+0x34>)
   1453c:	4907      	ldr	r1, [pc, #28]	; (1455c <mayfly_is_enabled+0x38>)
   1453e:	4808      	ldr	r0, [pc, #32]	; (14560 <mayfly_is_enabled+0x3c>)
   14540:	2341      	movs	r3, #65	; 0x41
   14542:	f005 f87c 	bl	1963e <assert_print>
   14546:	4040      	eors	r0, r0
   14548:	f380 8811 	msr	BASEPRI, r0
   1454c:	f04f 0003 	mov.w	r0, #3
   14550:	df02      	svc	2
		break;
	}

	return 0;
}
   14552:	2000      	movs	r0, #0
   14554:	bd08      	pop	{r3, pc}
   14556:	bf00      	nop
   14558:	0001f030 	.word	0x0001f030
   1455c:	0001e220 	.word	0x0001e220
   14560:	0001e1a4 	.word	0x0001e1a4

00014564 <mayfly_prio_is_equal>:
#endif /* !CONFIG_BT_CTLR_ZLI */
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   14564:	4288      	cmp	r0, r1
   14566:	d00f      	beq.n	14588 <mayfly_prio_is_equal+0x24>
		(caller_id == callee_id) ||
   14568:	2801      	cmp	r0, #1
   1456a:	d007      	beq.n	1457c <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1456c:	2802      	cmp	r0, #2
   1456e:	d10d      	bne.n	1458c <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   14570:	f1a1 0001 	sub.w	r0, r1, #1
   14574:	fab0 f080 	clz	r0, r0
   14578:	0940      	lsrs	r0, r0, #5
   1457a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1457c:	f1a1 0002 	sub.w	r0, r1, #2
   14580:	fab0 f080 	clz	r0, r0
   14584:	0940      	lsrs	r0, r0, #5
   14586:	4770      	bx	lr
   14588:	2001      	movs	r0, #1
   1458a:	4770      	bx	lr
   1458c:	2000      	movs	r0, #0
#endif
	       0;
}
   1458e:	4770      	bx	lr

00014590 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   14590:	2901      	cmp	r1, #1
{
   14592:	b508      	push	{r3, lr}
	switch (callee_id) {
   14594:	d00f      	beq.n	145b6 <mayfly_pend+0x26>
   14596:	2902      	cmp	r1, #2
   14598:	d00d      	beq.n	145b6 <mayfly_pend+0x26>
   1459a:	b191      	cbz	r1, 145c2 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1459c:	4a0c      	ldr	r2, [pc, #48]	; (145d0 <mayfly_pend+0x40>)
   1459e:	490d      	ldr	r1, [pc, #52]	; (145d4 <mayfly_pend+0x44>)
   145a0:	480d      	ldr	r0, [pc, #52]	; (145d8 <mayfly_pend+0x48>)
   145a2:	237b      	movs	r3, #123	; 0x7b
   145a4:	f005 f84b 	bl	1963e <assert_print>
   145a8:	4040      	eors	r0, r0
   145aa:	f380 8811 	msr	BASEPRI, r0
   145ae:	f04f 0003 	mov.w	r0, #3
   145b2:	df02      	svc	2
		break;
	}
}
   145b4:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   145b6:	4b09      	ldr	r3, [pc, #36]	; (145dc <mayfly_pend+0x4c>)
   145b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   145bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   145c0:	bd08      	pop	{r3, pc}
   145c2:	4b06      	ldr	r3, [pc, #24]	; (145dc <mayfly_pend+0x4c>)
   145c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   145c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   145cc:	bd08      	pop	{r3, pc}
   145ce:	bf00      	nop
   145d0:	0001f030 	.word	0x0001f030
   145d4:	0001e220 	.word	0x0001e220
   145d8:	0001e1a4 	.word	0x0001e1a4
   145dc:	e000e100 	.word	0xe000e100

000145e0 <mayfly_is_running>:

uint32_t mayfly_is_running(void)
{
   145e0:	b508      	push	{r3, lr}
	return k_is_in_isr();
   145e2:	f008 fc76 	bl	1ced2 <k_is_in_isr>
}
   145e6:	bd08      	pop	{r3, pc}

000145e8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   145e8:	2803      	cmp	r0, #3
{
   145ea:	b510      	push	{r4, lr}
   145ec:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   145ee:	d804      	bhi.n	145fa <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   145f0:	4b11      	ldr	r3, [pc, #68]	; (14638 <hal_ticker_instance0_caller_id_get+0x50>)
   145f2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   145f4:	b18c      	cbz	r4, 1461a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   145f6:	4620      	mov	r0, r4
   145f8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   145fa:	4a10      	ldr	r2, [pc, #64]	; (1463c <hal_ticker_instance0_caller_id_get+0x54>)
   145fc:	4910      	ldr	r1, [pc, #64]	; (14640 <hal_ticker_instance0_caller_id_get+0x58>)
   145fe:	4811      	ldr	r0, [pc, #68]	; (14644 <hal_ticker_instance0_caller_id_get+0x5c>)
   14600:	2329      	movs	r3, #41	; 0x29
   14602:	f005 f81c 	bl	1963e <assert_print>
   14606:	4040      	eors	r0, r0
   14608:	f380 8811 	msr	BASEPRI, r0
   1460c:	f04f 0003 	mov.w	r0, #3
   14610:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   14612:	4b09      	ldr	r3, [pc, #36]	; (14638 <hal_ticker_instance0_caller_id_get+0x50>)
   14614:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   14616:	2c00      	cmp	r4, #0
   14618:	d1ed      	bne.n	145f6 <hal_ticker_instance0_caller_id_get+0xe>
   1461a:	4a08      	ldr	r2, [pc, #32]	; (1463c <hal_ticker_instance0_caller_id_get+0x54>)
   1461c:	490a      	ldr	r1, [pc, #40]	; (14648 <hal_ticker_instance0_caller_id_get+0x60>)
   1461e:	4809      	ldr	r0, [pc, #36]	; (14644 <hal_ticker_instance0_caller_id_get+0x5c>)
   14620:	232c      	movs	r3, #44	; 0x2c
   14622:	f005 f80c 	bl	1963e <assert_print>
   14626:	4040      	eors	r0, r0
   14628:	f380 8811 	msr	BASEPRI, r0
   1462c:	f04f 0003 	mov.w	r0, #3
   14630:	df02      	svc	2
}
   14632:	4620      	mov	r0, r4
   14634:	bd10      	pop	{r4, pc}
   14636:	bf00      	nop
   14638:	0001f100 	.word	0x0001f100
   1463c:	0001f080 	.word	0x0001f080
   14640:	0001f0d0 	.word	0x0001f0d0
   14644:	0001e1a4 	.word	0x0001e1a4
   14648:	0001f0f0 	.word	0x0001f0f0

0001464c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1464c:	3801      	subs	r0, #1
{
   1464e:	b510      	push	{r4, lr}
   14650:	461c      	mov	r4, r3
	switch (caller_id) {
   14652:	2804      	cmp	r0, #4
   14654:	f200 8082 	bhi.w	1475c <hal_ticker_instance0_sched+0x110>
   14658:	e8df f000 	tbb	[pc, r0]
   1465c:	3f302112 	.word	0x3f302112
   14660:	03          	.byte	0x03
   14661:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   14662:	2904      	cmp	r1, #4
   14664:	d04a      	beq.n	146fc <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   14666:	4a44      	ldr	r2, [pc, #272]	; (14778 <hal_ticker_instance0_sched+0x12c>)
   14668:	4944      	ldr	r1, [pc, #272]	; (1477c <hal_ticker_instance0_sched+0x130>)
   1466a:	4845      	ldr	r0, [pc, #276]	; (14780 <hal_ticker_instance0_sched+0x134>)
   1466c:	23b8      	movs	r3, #184	; 0xb8
   1466e:	f004 ffe6 	bl	1963e <assert_print>
   14672:	4040      	eors	r0, r0
   14674:	f380 8811 	msr	BASEPRI, r0
   14678:	f04f 0003 	mov.w	r0, #3
   1467c:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1467e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   14680:	2904      	cmp	r1, #4
   14682:	d043      	beq.n	1470c <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   14684:	4a3c      	ldr	r2, [pc, #240]	; (14778 <hal_ticker_instance0_sched+0x12c>)
   14686:	493d      	ldr	r1, [pc, #244]	; (1477c <hal_ticker_instance0_sched+0x130>)
   14688:	483d      	ldr	r0, [pc, #244]	; (14780 <hal_ticker_instance0_sched+0x134>)
   1468a:	234c      	movs	r3, #76	; 0x4c
   1468c:	f004 ffd7 	bl	1963e <assert_print>
   14690:	4040      	eors	r0, r0
   14692:	f380 8811 	msr	BASEPRI, r0
   14696:	f04f 0003 	mov.w	r0, #3
   1469a:	df02      	svc	2
}
   1469c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1469e:	2903      	cmp	r1, #3
   146a0:	d03c      	beq.n	1471c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   146a2:	4a35      	ldr	r2, [pc, #212]	; (14778 <hal_ticker_instance0_sched+0x12c>)
   146a4:	4935      	ldr	r1, [pc, #212]	; (1477c <hal_ticker_instance0_sched+0x130>)
   146a6:	4836      	ldr	r0, [pc, #216]	; (14780 <hal_ticker_instance0_sched+0x134>)
   146a8:	2363      	movs	r3, #99	; 0x63
   146aa:	f004 ffc8 	bl	1963e <assert_print>
   146ae:	4040      	eors	r0, r0
   146b0:	f380 8811 	msr	BASEPRI, r0
   146b4:	f04f 0003 	mov.w	r0, #3
   146b8:	df02      	svc	2
}
   146ba:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   146bc:	2904      	cmp	r1, #4
   146be:	d035      	beq.n	1472c <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   146c0:	4a2d      	ldr	r2, [pc, #180]	; (14778 <hal_ticker_instance0_sched+0x12c>)
   146c2:	492e      	ldr	r1, [pc, #184]	; (1477c <hal_ticker_instance0_sched+0x130>)
   146c4:	482e      	ldr	r0, [pc, #184]	; (14780 <hal_ticker_instance0_sched+0x134>)
   146c6:	237a      	movs	r3, #122	; 0x7a
   146c8:	f004 ffb9 	bl	1963e <assert_print>
   146cc:	4040      	eors	r0, r0
   146ce:	f380 8811 	msr	BASEPRI, r0
   146d2:	f04f 0003 	mov.w	r0, #3
   146d6:	df02      	svc	2
}
   146d8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   146da:	2903      	cmp	r1, #3
   146dc:	d036      	beq.n	1474c <hal_ticker_instance0_sched+0x100>
   146de:	2904      	cmp	r1, #4
   146e0:	d02c      	beq.n	1473c <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   146e2:	4a25      	ldr	r2, [pc, #148]	; (14778 <hal_ticker_instance0_sched+0x12c>)
   146e4:	4925      	ldr	r1, [pc, #148]	; (1477c <hal_ticker_instance0_sched+0x130>)
   146e6:	4826      	ldr	r0, [pc, #152]	; (14780 <hal_ticker_instance0_sched+0x134>)
   146e8:	23a0      	movs	r3, #160	; 0xa0
   146ea:	f004 ffa8 	bl	1963e <assert_print>
   146ee:	4040      	eors	r0, r0
   146f0:	f380 8811 	msr	BASEPRI, r0
   146f4:	f04f 0003 	mov.w	r0, #3
   146f8:	df02      	svc	2
}
   146fa:	bd10      	pop	{r4, pc}
			m.param = instance;
   146fc:	4b21      	ldr	r3, [pc, #132]	; (14784 <hal_ticker_instance0_sched+0x138>)
   146fe:	609c      	str	r4, [r3, #8]
}
   14700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   14704:	2102      	movs	r1, #2
   14706:	2003      	movs	r0, #3
   14708:	f7f3 bb6a 	b.w	7de0 <mayfly_enqueue>
			m.param = instance;
   1470c:	4b1e      	ldr	r3, [pc, #120]	; (14788 <hal_ticker_instance0_sched+0x13c>)
   1470e:	609c      	str	r4, [r3, #8]
}
   14710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   14714:	2102      	movs	r1, #2
   14716:	2000      	movs	r0, #0
   14718:	f7f3 bb62 	b.w	7de0 <mayfly_enqueue>
			m.param = instance;
   1471c:	4b1b      	ldr	r3, [pc, #108]	; (1478c <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1471e:	2101      	movs	r1, #1
			m.param = instance;
   14720:	609c      	str	r4, [r3, #8]
}
   14722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   14726:	4608      	mov	r0, r1
   14728:	f7f3 bb5a 	b.w	7de0 <mayfly_enqueue>
			m.param = instance;
   1472c:	4b18      	ldr	r3, [pc, #96]	; (14790 <hal_ticker_instance0_sched+0x144>)
   1472e:	609c      	str	r4, [r3, #8]
}
   14730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   14734:	2102      	movs	r1, #2
   14736:	2001      	movs	r0, #1
   14738:	f7f3 bb52 	b.w	7de0 <mayfly_enqueue>
			m.param = instance;
   1473c:	4b15      	ldr	r3, [pc, #84]	; (14794 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1473e:	2102      	movs	r1, #2
			m.param = instance;
   14740:	609c      	str	r4, [r3, #8]
}
   14742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14746:	4608      	mov	r0, r1
   14748:	f7f3 bb4a 	b.w	7de0 <mayfly_enqueue>
			m.param = instance;
   1474c:	4b12      	ldr	r3, [pc, #72]	; (14798 <hal_ticker_instance0_sched+0x14c>)
   1474e:	609c      	str	r4, [r3, #8]
}
   14750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14754:	2101      	movs	r1, #1
   14756:	2002      	movs	r0, #2
   14758:	f7f3 bb42 	b.w	7de0 <mayfly_enqueue>
		LL_ASSERT(0);
   1475c:	4a06      	ldr	r2, [pc, #24]	; (14778 <hal_ticker_instance0_sched+0x12c>)
   1475e:	4907      	ldr	r1, [pc, #28]	; (1477c <hal_ticker_instance0_sched+0x130>)
   14760:	4807      	ldr	r0, [pc, #28]	; (14780 <hal_ticker_instance0_sched+0x134>)
   14762:	23be      	movs	r3, #190	; 0xbe
   14764:	f004 ff6b 	bl	1963e <assert_print>
   14768:	4040      	eors	r0, r0
   1476a:	f380 8811 	msr	BASEPRI, r0
   1476e:	f04f 0003 	mov.w	r0, #3
   14772:	df02      	svc	2
}
   14774:	bd10      	pop	{r4, pc}
   14776:	bf00      	nop
   14778:	0001f080 	.word	0x0001f080
   1477c:	0001e220 	.word	0x0001e220
   14780:	0001e1a4 	.word	0x0001e1a4
   14784:	20000654 	.word	0x20000654
   14788:	200006a4 	.word	0x200006a4
   1478c:	20000694 	.word	0x20000694
   14790:	20000684 	.word	0x20000684
   14794:	20000664 	.word	0x20000664
   14798:	20000674 	.word	0x20000674

0001479c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1479c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1479e:	2000      	movs	r0, #0
   147a0:	f7ff ba52 	b.w	13c48 <cntr_cmp_set>

000147a4 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   147a4:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   147a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   147aa:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   147ac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   147b0:	3201      	adds	r2, #1
   147b2:	d03e      	beq.n	14832 <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   147b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   147b8:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   147bc:	f010 0001 	ands.w	r0, r0, #1
   147c0:	d100      	bne.n	147c4 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   147c2:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   147c4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   147c8:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   147cc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   147d0:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   147d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   147d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   147dc:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   147e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   147e4:	3301      	adds	r3, #1
   147e6:	d01c      	beq.n	14822 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   147e8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   147ec:	3301      	adds	r3, #1
   147ee:	d018      	beq.n	14822 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   147f0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   147f4:	3301      	adds	r3, #1
   147f6:	d014      	beq.n	14822 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   147f8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   147fc:	3301      	adds	r3, #1
   147fe:	d010      	beq.n	14822 <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   14800:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   14804:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   14808:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1480c:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   14810:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   14814:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   14818:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1481c:	f8cc 3012 	str.w	r3, [ip, #18]
}
   14820:	e005      	b.n	1482e <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   14822:	2210      	movs	r2, #16
   14824:	2100      	movs	r1, #0
   14826:	f10c 0006 	add.w	r0, ip, #6
   1482a:	f005 f9ee 	bl	19c0a <memset>
		return 1;
   1482e:	2001      	movs	r0, #1
}
   14830:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   14832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   14836:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1483a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1483c:	4293      	cmp	r3, r2
   1483e:	d1b9      	bne.n	147b4 <hci_vendor_read_static_addr+0x10>
	return 0;
   14840:	2000      	movs	r0, #0
}
   14842:	bd08      	pop	{r3, pc}

00014844 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   14844:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   14846:	2210      	movs	r2, #16
{
   14848:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1484a:	2100      	movs	r1, #0
   1484c:	f005 f9dd 	bl	19c0a <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   14850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14854:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   14858:	3201      	adds	r2, #1
   1485a:	d018      	beq.n	1488e <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1485c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   14860:	3201      	adds	r2, #1
   14862:	d014      	beq.n	1488e <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   14864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   14868:	3201      	adds	r2, #1
   1486a:	d010      	beq.n	1488e <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1486c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   14870:	3201      	adds	r2, #1
   14872:	d00c      	beq.n	1488e <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   14874:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   14878:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1487a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   1487e:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   14880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14884:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   14886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   1488a:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1488c:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1488e:	4620      	mov	r0, r4
   14890:	2210      	movs	r2, #16
}
   14892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   14896:	2100      	movs	r1, #0
   14898:	f005 b9b7 	b.w	19c0a <memset>

0001489c <net_buf_pool_get>:
	struct net_buf_pool *pool;

	STRUCT_SECTION_GET(net_buf_pool, id, &pool);

	return pool;
}
   1489c:	4b02      	ldr	r3, [pc, #8]	; (148a8 <net_buf_pool_get+0xc>)
   1489e:	222c      	movs	r2, #44	; 0x2c
   148a0:	fb02 3000 	mla	r0, r2, r0, r3
   148a4:	4770      	bx	lr
   148a6:	bf00      	nop
   148a8:	20000954 	.word	0x20000954

000148ac <net_buf_id>:
	return pool - TYPE_SECTION_START(net_buf_pool);
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   148ac:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   148ae:	4b06      	ldr	r3, [pc, #24]	; (148c8 <net_buf_id+0x1c>)
   148b0:	212c      	movs	r1, #44	; 0x2c
   148b2:	fb01 3302 	mla	r3, r1, r2, r3
   148b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   148b8:	7f1b      	ldrb	r3, [r3, #28]
   148ba:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   148bc:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   148be:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   148c2:	fbb0 f0f3 	udiv	r0, r0, r3
   148c6:	4770      	bx	lr
   148c8:	20000954 	.word	0x20000954

000148cc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   148cc:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   148ce:	4b0a      	ldr	r3, [pc, #40]	; (148f8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   148d0:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   148d2:	242c      	movs	r4, #44	; 0x2c
   148d4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   148d8:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   148da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   148dc:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   148de:	681a      	ldr	r2, [r3, #0]
   148e0:	4294      	cmp	r4, r2
   148e2:	bf94      	ite	ls
   148e4:	600c      	strls	r4, [r1, #0]
   148e6:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   148e8:	e9d3 5400 	ldrd	r5, r4, [r3]
   148ec:	f7ff ffde 	bl	148ac <net_buf_id>
}
   148f0:	fb05 4000 	mla	r0, r5, r0, r4
   148f4:	bd38      	pop	{r3, r4, r5, pc}
   148f6:	bf00      	nop
   148f8:	20000954 	.word	0x20000954

000148fc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   148fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14900:	b085      	sub	sp, #20
   14902:	4605      	mov	r5, r0
	k_timepoint_t end = sys_timepoint_calc(timeout);
   14904:	4668      	mov	r0, sp
{
   14906:	9103      	str	r1, [sp, #12]
   14908:	4690      	mov	r8, r2
   1490a:	461c      	mov	r4, r3
	k_timepoint_t end = sys_timepoint_calc(timeout);
   1490c:	f008 fe07 	bl	1d51e <sys_timepoint_calc>
   14910:	e9dd 6700 	ldrd	r6, r7, [sp]
   14914:	f04f 0320 	mov.w	r3, #32
   14918:	f3ef 8911 	mrs	r9, BASEPRI
   1491c:	f383 8812 	msr	BASEPRI_MAX, r3
   14920:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14924:	8b6b      	ldrh	r3, [r5, #26]
   14926:	2b00      	cmp	r3, #0
   14928:	d045      	beq.n	149b6 <net_buf_alloc_len+0xba>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1492a:	8b2a      	ldrh	r2, [r5, #24]
   1492c:	429a      	cmp	r2, r3
   1492e:	d929      	bls.n	14984 <net_buf_alloc_len+0x88>
	return z_impl_k_queue_get(queue, timeout);
   14930:	2200      	movs	r2, #0
   14932:	2300      	movs	r3, #0
   14934:	4628      	mov	r0, r5
   14936:	f003 fa3b 	bl	17db0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1493a:	4604      	mov	r4, r0
   1493c:	b310      	cbz	r0, 14984 <net_buf_alloc_len+0x88>
	__asm__ volatile(
   1493e:	f389 8811 	msr	BASEPRI, r9
   14942:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   14946:	9b03      	ldr	r3, [sp, #12]
   14948:	2b00      	cmp	r3, #0
   1494a:	d045      	beq.n	149d8 <net_buf_alloc_len+0xdc>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		timeout = sys_timepoint_timeout(end);
   1494c:	4632      	mov	r2, r6
   1494e:	463b      	mov	r3, r7
   14950:	4668      	mov	r0, sp
   14952:	f008 fe08 	bl	1d566 <sys_timepoint_timeout>
	return pool->alloc->cb->alloc(buf, size, timeout);
   14956:	4d26      	ldr	r5, [pc, #152]	; (149f0 <net_buf_alloc_len+0xf4>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14958:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1495a:	262c      	movs	r6, #44	; 0x2c
   1495c:	fb06 5303 	mla	r3, r6, r3, r5
   14960:	a903      	add	r1, sp, #12
   14962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14964:	681b      	ldr	r3, [r3, #0]
   14966:	4620      	mov	r0, r4
   14968:	681f      	ldr	r7, [r3, #0]
   1496a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1496e:	47b8      	blx	r7
		buf->__buf = data_alloc(buf, &size, timeout);
   14970:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   14972:	2800      	cmp	r0, #0
   14974:	d131      	bne.n	149da <net_buf_alloc_len+0xde>
	k_lifo_put(&pool->free, buf);
   14976:	7aa0      	ldrb	r0, [r4, #10]
   14978:	4621      	mov	r1, r4
   1497a:	fb00 5006 	mla	r0, r0, r6, r5
   1497e:	f008 fb72 	bl	1d066 <k_queue_prepend>
}
   14982:	e024      	b.n	149ce <net_buf_alloc_len+0xd2>
		uninit_count = pool->uninit_count--;
   14984:	8b69      	ldrh	r1, [r5, #26]
   14986:	1e4b      	subs	r3, r1, #1
   14988:	836b      	strh	r3, [r5, #26]
   1498a:	f389 8811 	msr	BASEPRI, r9
   1498e:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14992:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   14994:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   14996:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   14998:	331b      	adds	r3, #27
   1499a:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1499e:	1a52      	subs	r2, r2, r1
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   149a0:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - TYPE_SECTION_START(net_buf_pool);
   149a4:	4b12      	ldr	r3, [pc, #72]	; (149f0 <net_buf_alloc_len+0xf4>)
   149a6:	4a13      	ldr	r2, [pc, #76]	; (149f4 <net_buf_alloc_len+0xf8>)
   149a8:	1aeb      	subs	r3, r5, r3
   149aa:	109b      	asrs	r3, r3, #2
   149ac:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   149ae:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   149b0:	7f2b      	ldrb	r3, [r5, #28]
   149b2:	72e3      	strb	r3, [r4, #11]
		goto success;
   149b4:	e7c7      	b.n	14946 <net_buf_alloc_len+0x4a>
   149b6:	f389 8811 	msr	BASEPRI, r9
   149ba:	f3bf 8f6f 	isb	sy
   149be:	4623      	mov	r3, r4
   149c0:	4642      	mov	r2, r8
   149c2:	4628      	mov	r0, r5
   149c4:	f003 f9f4 	bl	17db0 <z_impl_k_queue_get>
	if (!buf) {
   149c8:	4604      	mov	r4, r0
   149ca:	2800      	cmp	r0, #0
   149cc:	d1bb      	bne.n	14946 <net_buf_alloc_len+0x4a>
		return NULL;
   149ce:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   149d0:	4620      	mov	r0, r4
   149d2:	b005      	add	sp, #20
   149d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf->__buf = NULL;
   149d8:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   149da:	2300      	movs	r3, #0
	buf->ref   = 1U;
   149dc:	2201      	movs	r2, #1
	buf->frags = NULL;
   149de:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   149e0:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   149e2:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   149e4:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   149e6:	6963      	ldr	r3, [r4, #20]
   149e8:	8262      	strh	r2, [r4, #18]
   149ea:	60e3      	str	r3, [r4, #12]
	return buf;
   149ec:	e7f0      	b.n	149d0 <net_buf_alloc_len+0xd4>
   149ee:	bf00      	nop
   149f0:	20000954 	.word	0x20000954
   149f4:	ba2e8ba3 	.word	0xba2e8ba3

000149f8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   149f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149fc:	4d16      	ldr	r5, [pc, #88]	; (14a58 <net_buf_unref+0x60>)
   149fe:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   14a00:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   14a02:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   14a04:	b90c      	cbnz	r4, 14a0a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   14a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   14a0a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   14a0c:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   14a10:	3b01      	subs	r3, #1
   14a12:	b2db      	uxtb	r3, r3
   14a14:	7223      	strb	r3, [r4, #8]
   14a16:	2b00      	cmp	r3, #0
   14a18:	d1f5      	bne.n	14a06 <net_buf_unref+0xe>
		if (buf->__buf) {
   14a1a:	6961      	ldr	r1, [r4, #20]
   14a1c:	b159      	cbz	r1, 14a36 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   14a1e:	7a63      	ldrb	r3, [r4, #9]
   14a20:	07db      	lsls	r3, r3, #31
   14a22:	d407      	bmi.n	14a34 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14a24:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   14a26:	fb07 5303 	mla	r3, r7, r3, r5
   14a2a:	4620      	mov	r0, r4
   14a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14a2e:	681b      	ldr	r3, [r3, #0]
   14a30:	689b      	ldr	r3, [r3, #8]
   14a32:	4798      	blx	r3
			buf->__buf = NULL;
   14a34:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   14a36:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   14a38:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   14a3a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   14a3e:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   14a40:	6a1b      	ldr	r3, [r3, #32]
   14a42:	b11b      	cbz	r3, 14a4c <net_buf_unref+0x54>
			pool->destroy(buf);
   14a44:	4620      	mov	r0, r4
   14a46:	4798      	blx	r3
{
   14a48:	4644      	mov	r4, r8
   14a4a:	e7db      	b.n	14a04 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   14a4c:	4621      	mov	r1, r4
   14a4e:	fb00 5007 	mla	r0, r0, r7, r5
   14a52:	f008 fb08 	bl	1d066 <k_queue_prepend>
}
   14a56:	e7f7      	b.n	14a48 <net_buf_unref+0x50>
   14a58:	20000954 	.word	0x20000954

00014a5c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   14a5c:	4b08      	ldr	r3, [pc, #32]	; (14a80 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14a5e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   14a60:	1ac3      	subs	r3, r0, r3
{
   14a62:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   14a64:	4907      	ldr	r1, [pc, #28]	; (14a84 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   14a66:	109b      	asrs	r3, r3, #2
{
   14a68:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   14a6a:	4359      	muls	r1, r3
   14a6c:	4806      	ldr	r0, [pc, #24]	; (14a88 <onoff_stop+0x2c>)
   14a6e:	2240      	movs	r2, #64	; 0x40
   14a70:	f007 f8b0 	bl	1bbd4 <stop>
	notify(mgr, res);
   14a74:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   14a76:	4601      	mov	r1, r0
	notify(mgr, res);
   14a78:	4620      	mov	r0, r4
}
   14a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   14a7e:	4718      	bx	r3
   14a80:	20002424 	.word	0x20002424
   14a84:	b6db6db7 	.word	0xb6db6db7
   14a88:	0001d934 	.word	0x0001d934

00014a8c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   14a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   14a8e:	4c0c      	ldr	r4, [pc, #48]	; (14ac0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14a90:	4a0c      	ldr	r2, [pc, #48]	; (14ac4 <onoff_start+0x38>)
   14a92:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   14a94:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14a96:	9300      	str	r3, [sp, #0]
{
   14a98:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14a9a:	460b      	mov	r3, r1
   14a9c:	490a      	ldr	r1, [pc, #40]	; (14ac8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   14a9e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14aa0:	4361      	muls	r1, r4
{
   14aa2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14aa4:	4809      	ldr	r0, [pc, #36]	; (14acc <onoff_start+0x40>)
   14aa6:	f007 f8c2 	bl	1bc2e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   14aaa:	1e01      	subs	r1, r0, #0
   14aac:	da05      	bge.n	14aba <onoff_start+0x2e>
		notify(mgr, err);
   14aae:	4630      	mov	r0, r6
   14ab0:	462b      	mov	r3, r5
	}
}
   14ab2:	b002      	add	sp, #8
   14ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   14ab8:	4718      	bx	r3
}
   14aba:	b002      	add	sp, #8
   14abc:	bd70      	pop	{r4, r5, r6, pc}
   14abe:	bf00      	nop
   14ac0:	20002424 	.word	0x20002424
   14ac4:	0001bc9b 	.word	0x0001bc9b
   14ac8:	b6db6db7 	.word	0xb6db6db7
   14acc:	0001d934 	.word	0x0001d934

00014ad0 <generic_hfclk_stop>:
{
   14ad0:	b510      	push	{r4, lr}
	__asm__ volatile(
   14ad2:	f04f 0320 	mov.w	r3, #32
   14ad6:	f3ef 8411 	mrs	r4, BASEPRI
   14ada:	f383 8812 	msr	BASEPRI_MAX, r3
   14ade:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   14ae2:	4a07      	ldr	r2, [pc, #28]	; (14b00 <generic_hfclk_stop+0x30>)
   14ae4:	6813      	ldr	r3, [r2, #0]
   14ae6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   14aea:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   14aec:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   14aee:	d402      	bmi.n	14af6 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14af0:	2001      	movs	r0, #1
   14af2:	f008 f81e 	bl	1cb32 <nrfx_clock_stop>
	__asm__ volatile(
   14af6:	f384 8811 	msr	BASEPRI, r4
   14afa:	f3bf 8f6f 	isb	sy
}
   14afe:	bd10      	pop	{r4, pc}
   14b00:	20002474 	.word	0x20002474

00014b04 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14b04:	2200      	movs	r2, #0
{
   14b06:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14b08:	2101      	movs	r1, #1
{
   14b0a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14b0c:	4610      	mov	r0, r2
   14b0e:	f7ee feff 	bl	3910 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14b12:	480f      	ldr	r0, [pc, #60]	; (14b50 <clk_init+0x4c>)
   14b14:	f001 fea6 	bl	16864 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14b18:	4b0e      	ldr	r3, [pc, #56]	; (14b54 <clk_init+0x50>)
   14b1a:	4298      	cmp	r0, r3
   14b1c:	d115      	bne.n	14b4a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   14b1e:	f007 fffb 	bl	1cb18 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   14b22:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   14b24:	490c      	ldr	r1, [pc, #48]	; (14b58 <clk_init+0x54>)
   14b26:	4630      	mov	r0, r6
   14b28:	f004 fc40 	bl	193ac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14b2c:	2800      	cmp	r0, #0
   14b2e:	db0b      	blt.n	14b48 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14b30:	2501      	movs	r5, #1
   14b32:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   14b34:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   14b36:	4908      	ldr	r1, [pc, #32]	; (14b58 <clk_init+0x54>)
   14b38:	f104 001c 	add.w	r0, r4, #28
   14b3c:	f004 fc36 	bl	193ac <onoff_manager_init>
		if (err < 0) {
   14b40:	2800      	cmp	r0, #0
   14b42:	db01      	blt.n	14b48 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14b44:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   14b46:	2000      	movs	r0, #0
}
   14b48:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14b4a:	f06f 0004 	mvn.w	r0, #4
   14b4e:	e7fb      	b.n	14b48 <clk_init+0x44>
   14b50:	00014b91 	.word	0x00014b91
   14b54:	0bad0000 	.word	0x0bad0000
   14b58:	0001f110 	.word	0x0001f110

00014b5c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14b5c:	b570      	push	{r4, r5, r6, lr}
   14b5e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14b60:	230c      	movs	r3, #12
   14b62:	4809      	ldr	r0, [pc, #36]	; (14b88 <clkstarted_handle.constprop.0+0x2c>)
   14b64:	434b      	muls	r3, r1
   14b66:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   14b68:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   14b6c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   14b6e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   14b70:	4418      	add	r0, r3
	sub_data->cb = NULL;
   14b72:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   14b74:	f007 f81b 	bl	1bbae <set_on_state>
	if (callback) {
   14b78:	b12d      	cbz	r5, 14b86 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14b7a:	4632      	mov	r2, r6
   14b7c:	462b      	mov	r3, r5
   14b7e:	4803      	ldr	r0, [pc, #12]	; (14b8c <clkstarted_handle.constprop.0+0x30>)
}
   14b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   14b84:	4718      	bx	r3
}
   14b86:	bd70      	pop	{r4, r5, r6, pc}
   14b88:	20002424 	.word	0x20002424
   14b8c:	0001d934 	.word	0x0001d934

00014b90 <clock_event_handler>:
	switch (event) {
   14b90:	b110      	cbz	r0, 14b98 <clock_event_handler+0x8>
   14b92:	2801      	cmp	r0, #1
   14b94:	d004      	beq.n	14ba0 <clock_event_handler+0x10>
   14b96:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   14b98:	4b03      	ldr	r3, [pc, #12]	; (14ba8 <clock_event_handler+0x18>)
   14b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14b9c:	075b      	lsls	r3, r3, #29
   14b9e:	d101      	bne.n	14ba4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   14ba0:	f7ff bfdc 	b.w	14b5c <clkstarted_handle.constprop.0>
}
   14ba4:	4770      	bx	lr
   14ba6:	bf00      	nop
   14ba8:	20002424 	.word	0x20002424

00014bac <generic_hfclk_start>:
{
   14bac:	b508      	push	{r3, lr}
	__asm__ volatile(
   14bae:	f04f 0320 	mov.w	r3, #32
   14bb2:	f3ef 8111 	mrs	r1, BASEPRI
   14bb6:	f383 8812 	msr	BASEPRI_MAX, r3
   14bba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14bbe:	4a12      	ldr	r2, [pc, #72]	; (14c08 <generic_hfclk_start+0x5c>)
   14bc0:	6813      	ldr	r3, [r2, #0]
   14bc2:	f043 0002 	orr.w	r0, r3, #2
   14bc6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14bc8:	07da      	lsls	r2, r3, #31
   14bca:	d408      	bmi.n	14bde <generic_hfclk_start+0x32>
	__asm__ volatile(
   14bcc:	f381 8811 	msr	BASEPRI, r1
   14bd0:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14bd4:	2001      	movs	r0, #1
}
   14bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14bda:	f001 be53 	b.w	16884 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   14bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14be2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14be6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14bea:	07db      	lsls	r3, r3, #31
   14bec:	d5ee      	bpl.n	14bcc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   14bee:	4807      	ldr	r0, [pc, #28]	; (14c0c <generic_hfclk_start+0x60>)
   14bf0:	f006 ffdd 	bl	1bbae <set_on_state>
   14bf4:	f381 8811 	msr	BASEPRI, r1
   14bf8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   14bfc:	2000      	movs	r0, #0
}
   14bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14c02:	f7ff bfab 	b.w	14b5c <clkstarted_handle.constprop.0>
   14c06:	bf00      	nop
   14c08:	20002474 	.word	0x20002474
   14c0c:	20002464 	.word	0x20002464

00014c10 <api_blocking_start>:
{
   14c10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14c12:	2200      	movs	r2, #0
   14c14:	2301      	movs	r3, #1
   14c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14c1a:	ab04      	add	r3, sp, #16
   14c1c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14c20:	4a09      	ldr	r2, [pc, #36]	; (14c48 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14c22:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14c26:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14c28:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14c2c:	f007 f82e 	bl	1bc8c <api_start>
	if (err < 0) {
   14c30:	2800      	cmp	r0, #0
   14c32:	db05      	blt.n	14c40 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   14c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14c38:	2300      	movs	r3, #0
   14c3a:	4668      	mov	r0, sp
   14c3c:	f003 f912 	bl	17e64 <z_impl_k_sem_take>
}
   14c40:	b007      	add	sp, #28
   14c42:	f85d fb04 	ldr.w	pc, [sp], #4
   14c46:	bf00      	nop
   14c48:	0001bcb3 	.word	0x0001bcb3

00014c4c <lfclk_start>:
{
   14c4c:	b510      	push	{r4, lr}
	if (!once) {
   14c4e:	4c07      	ldr	r4, [pc, #28]	; (14c6c <lfclk_start+0x20>)
   14c50:	7823      	ldrb	r3, [r4, #0]
   14c52:	b92b      	cbnz	r3, 14c60 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   14c54:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   14c58:	f008 f859 	bl	1cd0e <z_impl_k_busy_wait>
		once = true;
   14c5c:	2301      	movs	r3, #1
   14c5e:	7023      	strb	r3, [r4, #0]
}
   14c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14c64:	2000      	movs	r0, #0
   14c66:	f001 be0d 	b.w	16884 <nrfx_clock_start>
   14c6a:	bf00      	nop
   14c6c:	20002724 	.word	0x20002724

00014c70 <z_nrf_clock_control_get_onoff>:
}
   14c70:	4a02      	ldr	r2, [pc, #8]	; (14c7c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   14c72:	b2c3      	uxtb	r3, r0
}
   14c74:	201c      	movs	r0, #28
   14c76:	fb03 2000 	mla	r0, r3, r0, r2
   14c7a:	4770      	bx	lr
   14c7c:	20002424 	.word	0x20002424

00014c80 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c80:	4b09      	ldr	r3, [pc, #36]	; (14ca8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   14c82:	f3bf 8f5b 	dmb	ish
   14c86:	e853 2f00 	ldrex	r2, [r3]
   14c8a:	f042 0101 	orr.w	r1, r2, #1
   14c8e:	e843 1000 	strex	r0, r1, [r3]
   14c92:	2800      	cmp	r0, #0
   14c94:	d1f7      	bne.n	14c86 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   14c96:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   14c9a:	0793      	lsls	r3, r2, #30
   14c9c:	d402      	bmi.n	14ca4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14c9e:	2001      	movs	r0, #1
   14ca0:	f001 bdf0 	b.w	16884 <nrfx_clock_start>
}
   14ca4:	4770      	bx	lr
   14ca6:	bf00      	nop
   14ca8:	20002474 	.word	0x20002474

00014cac <z_nrf_clock_bt_ctlr_hf_release>:
{
   14cac:	b510      	push	{r4, lr}
	__asm__ volatile(
   14cae:	f04f 0320 	mov.w	r3, #32
   14cb2:	f3ef 8411 	mrs	r4, BASEPRI
   14cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   14cba:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_BT;
   14cbe:	4a07      	ldr	r2, [pc, #28]	; (14cdc <z_nrf_clock_bt_ctlr_hf_release+0x30>)
   14cc0:	6813      	ldr	r3, [r2, #0]
   14cc2:	f023 0101 	bic.w	r1, r3, #1
	if (!(hfclk_users & HF_USER_GENERIC)) {
   14cc6:	079b      	lsls	r3, r3, #30
	hfclk_users &= ~HF_USER_BT;
   14cc8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_GENERIC)) {
   14cca:	d402      	bmi.n	14cd2 <z_nrf_clock_bt_ctlr_hf_release+0x26>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14ccc:	2001      	movs	r0, #1
   14cce:	f007 ff30 	bl	1cb32 <nrfx_clock_stop>
	__asm__ volatile(
   14cd2:	f384 8811 	msr	BASEPRI, r4
   14cd6:	f3bf 8f6f 	isb	sy
}
   14cda:	bd10      	pop	{r4, pc}
   14cdc:	20002474 	.word	0x20002474

00014ce0 <z_nrf_clock_control_lf_on>:
{
   14ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14ce4:	4938      	ldr	r1, [pc, #224]	; (14dc8 <z_nrf_clock_control_lf_on+0xe8>)
   14ce6:	f3bf 8f5b 	dmb	ish
   14cea:	4607      	mov	r7, r0
   14cec:	2201      	movs	r2, #1
   14cee:	e851 3f00 	ldrex	r3, [r1]
   14cf2:	e841 2000 	strex	r0, r2, [r1]
   14cf6:	2800      	cmp	r0, #0
   14cf8:	d1f9      	bne.n	14cee <z_nrf_clock_control_lf_on+0xe>
   14cfa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   14cfe:	b933      	cbnz	r3, 14d0e <z_nrf_clock_control_lf_on+0x2e>
   14d00:	4932      	ldr	r1, [pc, #200]	; (14dcc <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   14d02:	4833      	ldr	r0, [pc, #204]	; (14dd0 <z_nrf_clock_control_lf_on+0xf0>)
   14d04:	604b      	str	r3, [r1, #4]
   14d06:	60cb      	str	r3, [r1, #12]
   14d08:	608a      	str	r2, [r1, #8]
   14d0a:	f004 fb62 	bl	193d2 <onoff_request>
	switch (start_mode) {
   14d0e:	1e7b      	subs	r3, r7, #1
   14d10:	2b01      	cmp	r3, #1
   14d12:	d82b      	bhi.n	14d6c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14d14:	2f01      	cmp	r7, #1
   14d16:	d107      	bne.n	14d28 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSRCCOPY & NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d1c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   14d20:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
   14d24:	2b01      	cmp	r3, #1
   14d26:	d021      	beq.n	14d6c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14d28:	f008 f8d3 	bl	1ced2 <k_is_in_isr>
   14d2c:	4605      	mov	r5, r0
   14d2e:	b9f8      	cbnz	r0, 14d70 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   14d30:	4b28      	ldr	r3, [pc, #160]	; (14dd4 <z_nrf_clock_control_lf_on+0xf4>)
   14d32:	781b      	ldrb	r3, [r3, #0]
   14d34:	b1e3      	cbz	r3, 14d70 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   14d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d3a:	2202      	movs	r2, #2
   14d3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   14d40:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14d42:	f8df 8094 	ldr.w	r8, [pc, #148]	; 14dd8 <z_nrf_clock_control_lf_on+0xf8>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   14d46:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   14d4a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   14d4e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14d52:	03d2      	lsls	r2, r2, #15
   14d54:	d516      	bpl.n	14d84 <z_nrf_clock_control_lf_on+0xa4>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   14d56:	f003 0303 	and.w	r3, r3, #3
   14d5a:	2b01      	cmp	r3, #1
   14d5c:	d001      	beq.n	14d62 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14d5e:	2f01      	cmp	r7, #1
   14d60:	d110      	bne.n	14d84 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   14d62:	b35d      	cbz	r5, 14dbc <z_nrf_clock_control_lf_on+0xdc>
   14d64:	f386 8811 	msr	BASEPRI, r6
   14d68:	f3bf 8f6f 	isb	sy
}
   14d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   14d70:	f04f 0320 	mov.w	r3, #32
   14d74:	f3ef 8611 	mrs	r6, BASEPRI
   14d78:	f383 8812 	msr	BASEPRI_MAX, r3
   14d7c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14d80:	2501      	movs	r5, #1
   14d82:	e7de      	b.n	14d42 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14d84:	b1ad      	cbz	r5, 14db2 <z_nrf_clock_control_lf_on+0xd2>
	arch_cpu_atomic_idle(key);
   14d86:	4630      	mov	r0, r6
   14d88:	f7ee fd86 	bl	3898 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
   14d8c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
   14d90:	2b00      	cmp	r3, #0
   14d92:	d1da      	bne.n	14d4a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14d94:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   14d98:	2a00      	cmp	r2, #0
   14d9a:	d0d6      	beq.n	14d4a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d9c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14da0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   14da4:	2301      	movs	r3, #1
   14da6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   14daa:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14dae:	60a3      	str	r3, [r4, #8]
}
   14db0:	e7cb      	b.n	14d4a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   14db2:	2100      	movs	r1, #0
   14db4:	2021      	movs	r0, #33	; 0x21
   14db6:	f003 fd31 	bl	1881c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14dba:	e7e7      	b.n	14d8c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   14dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14dc0:	2202      	movs	r2, #2
   14dc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14dc6:	e7d1      	b.n	14d6c <z_nrf_clock_control_lf_on+0x8c>
   14dc8:	20002420 	.word	0x20002420
   14dcc:	20002410 	.word	0x20002410
   14dd0:	20002440 	.word	0x20002440
   14dd4:	20002b57 	.word	0x20002b57
   14dd8:	e000e100 	.word	0xe000e100

00014ddc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   14ddc:	b508      	push	{r3, lr}
   14dde:	4807      	ldr	r0, [pc, #28]	; (14dfc <uart_console_init+0x20>)
   14de0:	f007 ff9a 	bl	1cd18 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   14de4:	b138      	cbz	r0, 14df6 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   14de6:	4806      	ldr	r0, [pc, #24]	; (14e00 <uart_console_init+0x24>)
   14de8:	f7ef f8fc 	bl	3fe4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   14dec:	4804      	ldr	r0, [pc, #16]	; (14e00 <uart_console_init+0x24>)
   14dee:	f7ed fbf9 	bl	25e4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   14df2:	2000      	movs	r0, #0
}
   14df4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   14df6:	f06f 0012 	mvn.w	r0, #18
   14dfa:	e7fb      	b.n	14df4 <uart_console_init+0x18>
   14dfc:	0001d984 	.word	0x0001d984
   14e00:	00014e05 	.word	0x00014e05

00014e04 <console_out>:
	if ('\n' == c) {
   14e04:	280a      	cmp	r0, #10
{
   14e06:	b538      	push	{r3, r4, r5, lr}
   14e08:	4d07      	ldr	r5, [pc, #28]	; (14e28 <console_out+0x24>)
   14e0a:	4604      	mov	r4, r0
	if ('\n' == c) {
   14e0c:	d104      	bne.n	14e18 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14e0e:	68ab      	ldr	r3, [r5, #8]
   14e10:	210d      	movs	r1, #13
   14e12:	685b      	ldr	r3, [r3, #4]
   14e14:	4628      	mov	r0, r5
   14e16:	4798      	blx	r3
   14e18:	68ab      	ldr	r3, [r5, #8]
   14e1a:	4803      	ldr	r0, [pc, #12]	; (14e28 <console_out+0x24>)
   14e1c:	685b      	ldr	r3, [r3, #4]
   14e1e:	b2e1      	uxtb	r1, r4
   14e20:	4798      	blx	r3
}
   14e22:	4620      	mov	r0, r4
   14e24:	bd38      	pop	{r3, r4, r5, pc}
   14e26:	bf00      	nop
   14e28:	0001d984 	.word	0x0001d984

00014e2c <random_byte_get>:
   14e2c:	f04f 0320 	mov.w	r3, #32
   14e30:	f3ef 8211 	mrs	r2, BASEPRI
   14e34:	f383 8812 	msr	BASEPRI_MAX, r3
   14e38:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   14e3c:	4b09      	ldr	r3, [pc, #36]	; (14e64 <random_byte_get+0x38>)
   14e3e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   14e42:	b161      	cbz	r1, 14e5e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14e44:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   14e46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14e4a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   14e4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   14e52:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   14e54:	f382 8811 	msr	BASEPRI, r2
   14e58:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   14e5c:	4770      	bx	lr
	int retval = -EAGAIN;
   14e5e:	f06f 000a 	mvn.w	r0, #10
   14e62:	e7f7      	b.n	14e54 <random_byte_get+0x28>
   14e64:	4000d000 	.word	0x4000d000

00014e68 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   14e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e6a:	4603      	mov	r3, r0
   14e6c:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   14e6e:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   14e70:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   14e74:	f04f 0520 	mov.w	r5, #32
   14e78:	f3ef 8211 	mrs	r2, BASEPRI
   14e7c:	f385 8812 	msr	BASEPRI_MAX, r5
   14e80:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   14e84:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   14e86:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   14e8a:	1be4      	subs	r4, r4, r7
   14e8c:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   14e90:	42a0      	cmp	r0, r4
		len = available;
   14e92:	bf88      	it	hi
   14e94:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   14e96:	183e      	adds	r6, r7, r0
   14e98:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   14e9c:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   14e9e:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   14ea0:	f382 8811 	msr	BASEPRI, r2
   14ea4:	f3bf 8f6f 	isb	sy
   14ea8:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   14eaa:	428a      	cmp	r2, r1
   14eac:	d117      	bne.n	14ede <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   14eae:	4577      	cmp	r7, lr
   14eb0:	d10d      	bne.n	14ece <rng_pool_get+0x66>
	__asm__ volatile(
   14eb2:	f04f 0120 	mov.w	r1, #32
   14eb6:	f3ef 8211 	mrs	r2, BASEPRI
   14eba:	f381 8812 	msr	BASEPRI_MAX, r1
   14ebe:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   14ec2:	7819      	ldrb	r1, [r3, #0]
   14ec4:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   14ec6:	f382 8811 	msr	BASEPRI, r2
   14eca:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   14ece:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   14ed0:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   14ed2:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   14ed4:	bf22      	ittt	cs
   14ed6:	4b06      	ldrcs	r3, [pc, #24]	; (14ef0 <rng_pool_get+0x88>)
   14ed8:	2201      	movcs	r2, #1
   14eda:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   14edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   14ede:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   14ee0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   14ee2:	7976      	ldrb	r6, [r6, #5]
   14ee4:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   14ee8:	ea05 050c 	and.w	r5, r5, ip
   14eec:	e7dd      	b.n	14eaa <rng_pool_get+0x42>
   14eee:	bf00      	nop
   14ef0:	4000d000 	.word	0x4000d000

00014ef4 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   14ef4:	43db      	mvns	r3, r3
{
   14ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   14efa:	f013 0501 	ands.w	r5, r3, #1
{
   14efe:	460e      	mov	r6, r1
   14f00:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   14f02:	d004      	beq.n	14f0e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   14f04:	4823      	ldr	r0, [pc, #140]	; (14f94 <entropy_nrf5_get_entropy_isr+0xa0>)
   14f06:	f7ff ffaf 	bl	14e68 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   14f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   14f0e:	b3a2      	cbz	r2, 14f7a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   14f10:	f04f 0320 	mov.w	r3, #32
   14f14:	f3ef 8811 	mrs	r8, BASEPRI
   14f18:	f383 8812 	msr	BASEPRI_MAX, r3
   14f1c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   14f20:	200d      	movs	r0, #13
   14f22:	f7ee fce7 	bl	38f4 <arch_irq_is_enabled>
   14f26:	4607      	mov	r7, r0
		irq_disable(IRQN);
   14f28:	200d      	movs	r0, #13
   14f2a:	f7ee fccf 	bl	38cc <arch_irq_disable>
	__asm__ volatile(
   14f2e:	f388 8811 	msr	BASEPRI, r8
   14f32:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14f36:	f8df a060 	ldr.w	sl, [pc, #96]	; 14f98 <entropy_nrf5_get_entropy_isr+0xa4>
   14f3a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 14f9c <entropy_nrf5_get_entropy_isr+0xa8>
   14f3e:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   14f42:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   14f46:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   14f4a:	2301      	movs	r3, #1
   14f4c:	f8ca 3000 	str.w	r3, [sl]
   14f50:	4625      	mov	r5, r4
   14f52:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   14f56:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   14f5a:	b183      	cbz	r3, 14f7e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   14f5c:	f7ff ff66 	bl	14e2c <random_byte_get>
			if (byte < 0) {
   14f60:	1e03      	subs	r3, r0, #0
   14f62:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   14f66:	dbf6      	blt.n	14f56 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   14f68:	3d01      	subs	r5, #1
   14f6a:	b2ad      	uxth	r5, r5
   14f6c:	5573      	strb	r3, [r6, r5]
		} while (len);
   14f6e:	2d00      	cmp	r5, #0
   14f70:	d1f1      	bne.n	14f56 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   14f72:	b117      	cbz	r7, 14f7a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   14f74:	200d      	movs	r0, #13
   14f76:	f7ee fc9b 	bl	38b0 <arch_irq_enable>
	return cnt;
   14f7a:	4620      	mov	r0, r4
   14f7c:	e7c5      	b.n	14f0a <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   14f7e:	f04f 0320 	mov.w	r3, #32
   14f82:	f3ef 8011 	mrs	r0, BASEPRI
   14f86:	f383 8812 	msr	BASEPRI_MAX, r3
   14f8a:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   14f8e:	f7ee fc83 	bl	3898 <arch_cpu_atomic_idle>
}
   14f92:	e7e0      	b.n	14f56 <entropy_nrf5_get_entropy_isr+0x62>
   14f94:	200024a8 	.word	0x200024a8
   14f98:	4000d000 	.word	0x4000d000
   14f9c:	e000e100 	.word	0xe000e100

00014fa0 <entropy_nrf5_get_entropy>:
{
   14fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   14fa4:	4f12      	ldr	r7, [pc, #72]	; (14ff0 <entropy_nrf5_get_entropy+0x50>)
   14fa6:	460d      	mov	r5, r1
   14fa8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   14faa:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   14fae:	b914      	cbnz	r4, 14fb6 <entropy_nrf5_get_entropy+0x16>
}
   14fb0:	4620      	mov	r0, r4
   14fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14fbe:	4638      	mov	r0, r7
   14fc0:	f002 ff50 	bl	17e64 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   14fc4:	4622      	mov	r2, r4
   14fc6:	4629      	mov	r1, r5
   14fc8:	4640      	mov	r0, r8
   14fca:	f7ff ff4d 	bl	14e68 <rng_pool_get>
   14fce:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   14fd0:	4638      	mov	r0, r7
   14fd2:	f002 ff21 	bl	17e18 <z_impl_k_sem_give>
		if (bytes == 0U) {
   14fd6:	b93e      	cbnz	r6, 14fe8 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   14fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fe0:	4804      	ldr	r0, [pc, #16]	; (14ff4 <entropy_nrf5_get_entropy+0x54>)
   14fe2:	f002 ff3f 	bl	17e64 <z_impl_k_sem_take>
	while (len) {
   14fe6:	e7e6      	b.n	14fb6 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   14fe8:	1ba4      	subs	r4, r4, r6
   14fea:	b2a4      	uxth	r4, r4
		buf += bytes;
   14fec:	4435      	add	r5, r6
   14fee:	e7de      	b.n	14fae <entropy_nrf5_get_entropy+0xe>
   14ff0:	20002478 	.word	0x20002478
   14ff4:	20002490 	.word	0x20002490

00014ff8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   14ff8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   14ffa:	4c19      	ldr	r4, [pc, #100]	; (15060 <entropy_nrf5_init+0x68>)
   14ffc:	2201      	movs	r2, #1
   14ffe:	4611      	mov	r1, r2
   15000:	4620      	mov	r0, r4
   15002:	f008 f83e 	bl	1d082 <z_impl_k_sem_init>
   15006:	2201      	movs	r2, #1
   15008:	2100      	movs	r1, #0
   1500a:	f104 0018 	add.w	r0, r4, #24
   1500e:	f008 f838 	bl	1d082 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   15012:	f240 4307 	movw	r3, #1031	; 0x407
   15016:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1501a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1501e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   15020:	230c      	movs	r3, #12
   15022:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   15026:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   15028:	4b0e      	ldr	r3, [pc, #56]	; (15064 <entropy_nrf5_init+0x6c>)
   1502a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1502e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   15032:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   15036:	f042 0201 	orr.w	r2, r2, #1
   1503a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1503e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15040:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   15044:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15048:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1504c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1504e:	6019      	str	r1, [r3, #0]
   15050:	200d      	movs	r0, #13
   15052:	f7ee fc5d 	bl	3910 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   15056:	200d      	movs	r0, #13
   15058:	f7ee fc2a 	bl	38b0 <arch_irq_enable>

	return 0;
}
   1505c:	4628      	mov	r0, r5
   1505e:	bd38      	pop	{r3, r4, r5, pc}
   15060:	20002478 	.word	0x20002478
   15064:	4000d000 	.word	0x4000d000

00015068 <isr>:
{
   15068:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1506a:	f7ff fedf 	bl	14e2c <random_byte_get>
	if (byte < 0) {
   1506e:	2800      	cmp	r0, #0
   15070:	db20      	blt.n	150b4 <isr+0x4c>
	uint8_t last  = rngp->last;
   15072:	4b17      	ldr	r3, [pc, #92]	; (150d0 <isr+0x68>)
   15074:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   15078:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1507c:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   15080:	1b14      	subs	r4, r2, r4
   15082:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   15086:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   15088:	d10d      	bne.n	150a6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1508a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1508e:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   15092:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   15096:	1b14      	subs	r4, r2, r4
   15098:	ea31 0404 	bics.w	r4, r1, r4
   1509c:	d10b      	bne.n	150b6 <isr+0x4e>
   1509e:	4b0d      	ldr	r3, [pc, #52]	; (150d4 <isr+0x6c>)
   150a0:	2201      	movs	r2, #1
   150a2:	605a      	str	r2, [r3, #4]
}
   150a4:	e00e      	b.n	150c4 <isr+0x5c>
	rngp->buffer[last] = byte;
   150a6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   150a8:	3201      	adds	r2, #1
   150aa:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   150ac:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   150b0:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   150b4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   150b6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   150b8:	3201      	adds	r2, #1
   150ba:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   150bc:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   150c0:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   150c4:	4804      	ldr	r0, [pc, #16]	; (150d8 <isr+0x70>)
}
   150c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   150ca:	f002 bea5 	b.w	17e18 <z_impl_k_sem_give>
   150ce:	bf00      	nop
   150d0:	20002478 	.word	0x20002478
   150d4:	4000d000 	.word	0x4000d000
   150d8:	20002490 	.word	0x20002490

000150dc <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   150dc:	b530      	push	{r4, r5, lr}
	return port->config;
   150de:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   150e0:	7b05      	ldrb	r5, [r0, #12]
   150e2:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   150e6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   150ea:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   150ec:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   150f0:	d105      	bne.n	150fe <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   150f2:	4620      	mov	r0, r4
   150f4:	f001 feae 	bl	16e54 <nrfx_gpiote_trigger_disable>

		return 0;
   150f8:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   150fa:	b005      	add	sp, #20
   150fc:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   150fe:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   15100:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   15104:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   15108:	d114      	bne.n	15134 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1510a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1510e:	bf0c      	ite	eq
   15110:	2304      	moveq	r3, #4
   15112:	2305      	movne	r3, #5
   15114:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15118:	2300      	movs	r3, #0
   1511a:	4619      	mov	r1, r3
   1511c:	aa02      	add	r2, sp, #8
   1511e:	4620      	mov	r0, r4
   15120:	f001 fccc 	bl	16abc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15124:	4b21      	ldr	r3, [pc, #132]	; (151ac <gpio_nrfx_pin_interrupt_configure+0xd0>)
   15126:	4298      	cmp	r0, r3
   15128:	d139      	bne.n	1519e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1512a:	2101      	movs	r1, #1
   1512c:	4620      	mov	r0, r4
   1512e:	f001 fe45 	bl	16dbc <nrfx_gpiote_trigger_enable>
	return 0;
   15132:	e7e1      	b.n	150f8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15134:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   15138:	d026      	beq.n	15188 <gpio_nrfx_pin_interrupt_configure+0xac>
   1513a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1513e:	bf14      	ite	ne
   15140:	2301      	movne	r3, #1
   15142:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   15144:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   15148:	6883      	ldr	r3, [r0, #8]
   1514a:	fa23 f101 	lsr.w	r1, r3, r1
   1514e:	f011 0101 	ands.w	r1, r1, #1
   15152:	d1e1      	bne.n	15118 <gpio_nrfx_pin_interrupt_configure+0x3c>
   15154:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   15158:	d1de      	bne.n	15118 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1515a:	f004 031f 	and.w	r3, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1515e:	0962      	lsrs	r2, r4, #5
   15160:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15164:	d11e      	bne.n	151a4 <gpio_nrfx_pin_interrupt_configure+0xc8>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15166:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1516a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1516e:	07db      	lsls	r3, r3, #31
   15170:	d4d2      	bmi.n	15118 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15172:	f10d 0507 	add.w	r5, sp, #7
   15176:	4629      	mov	r1, r5
   15178:	4620      	mov	r0, r4
   1517a:	f001 fdcb 	bl	16d14 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1517e:	4b0c      	ldr	r3, [pc, #48]	; (151b0 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   15180:	4298      	cmp	r0, r3
   15182:	d003      	beq.n	1518c <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   15184:	9503      	str	r5, [sp, #12]
   15186:	e7c7      	b.n	15118 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   15188:	2303      	movs	r3, #3
   1518a:	e7db      	b.n	15144 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1518c:	4628      	mov	r0, r5
   1518e:	f001 fe0f 	bl	16db0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   15192:	4b06      	ldr	r3, [pc, #24]	; (151ac <gpio_nrfx_pin_interrupt_configure+0xd0>)
   15194:	4298      	cmp	r0, r3
   15196:	d0f5      	beq.n	15184 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   15198:	f06f 000b 	mvn.w	r0, #11
   1519c:	e7ad      	b.n	150fa <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1519e:	f06f 0015 	mvn.w	r0, #21
   151a2:	e7aa      	b.n	150fa <gpio_nrfx_pin_interrupt_configure+0x1e>
   151a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   151a8:	deff      	udf	#255	; 0xff
   151aa:	bf00      	nop
   151ac:	0bad0000 	.word	0x0bad0000
   151b0:	0bad0004 	.word	0x0bad0004

000151b4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   151b4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   151b6:	f001 fdeb 	bl	16d90 <nrfx_gpiote_is_init>
   151ba:	4604      	mov	r4, r0
   151bc:	b968      	cbnz	r0, 151da <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   151be:	f001 fdbf 	bl	16d40 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   151c2:	4b08      	ldr	r3, [pc, #32]	; (151e4 <gpio_nrfx_init+0x30>)
   151c4:	4298      	cmp	r0, r3
   151c6:	d10a      	bne.n	151de <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   151c8:	4807      	ldr	r0, [pc, #28]	; (151e8 <gpio_nrfx_init+0x34>)
   151ca:	4621      	mov	r1, r4
   151cc:	f001 fd9c 	bl	16d08 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   151d0:	4622      	mov	r2, r4
   151d2:	2105      	movs	r1, #5
   151d4:	2006      	movs	r0, #6
   151d6:	f7ee fb9b 	bl	3910 <z_arm_irq_priority_set>
		return 0;
   151da:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   151dc:	bd10      	pop	{r4, pc}
		return -EIO;
   151de:	f06f 0004 	mvn.w	r0, #4
   151e2:	e7fb      	b.n	151dc <gpio_nrfx_init+0x28>
   151e4:	0bad0000 	.word	0x0bad0000
   151e8:	000151ed 	.word	0x000151ed

000151ec <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   151ec:	0943      	lsrs	r3, r0, #5
{
   151ee:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   151f0:	d107      	bne.n	15202 <nrfx_gpio_handler+0x16>
	return list->head;
   151f2:	4b0b      	ldr	r3, [pc, #44]	; (15220 <nrfx_gpio_handler+0x34>)
   151f4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   151f6:	b121      	cbz	r1, 15202 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   151f8:	2501      	movs	r5, #1
	return node->next;
   151fa:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   151fc:	4e09      	ldr	r6, [pc, #36]	; (15224 <nrfx_gpio_handler+0x38>)
   151fe:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15200:	b901      	cbnz	r1, 15204 <nrfx_gpio_handler+0x18>
}
   15202:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   15204:	688a      	ldr	r2, [r1, #8]
   15206:	402a      	ands	r2, r5
   15208:	d002      	beq.n	15210 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   1520a:	684b      	ldr	r3, [r1, #4]
   1520c:	4630      	mov	r0, r6
   1520e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15210:	b11c      	cbz	r4, 1521a <nrfx_gpio_handler+0x2e>
   15212:	6823      	ldr	r3, [r4, #0]
   15214:	4621      	mov	r1, r4
   15216:	461c      	mov	r4, r3
   15218:	e7f2      	b.n	15200 <nrfx_gpio_handler+0x14>
   1521a:	4623      	mov	r3, r4
   1521c:	e7fa      	b.n	15214 <nrfx_gpio_handler+0x28>
   1521e:	bf00      	nop
   15220:	200024cc 	.word	0x200024cc
   15224:	0001d948 	.word	0x0001d948

00015228 <gpio_nrfx_pin_configure>:
{
   15228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1522c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1522e:	7b3b      	ldrb	r3, [r7, #12]
   15230:	f001 051f 	and.w	r5, r1, #31
   15234:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   15238:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1523a:	4628      	mov	r0, r5
   1523c:	f10d 0103 	add.w	r1, sp, #3
{
   15240:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   15242:	f001 fd67 	bl	16d14 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   15246:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1524a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1524c:	d10b      	bne.n	15266 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1524e:	4628      	mov	r0, r5
   15250:	f001 fe26 	bl	16ea0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   15254:	4b3d      	ldr	r3, [pc, #244]	; (1534c <gpio_nrfx_pin_configure+0x124>)
   15256:	4598      	cmp	r8, r3
   15258:	d103      	bne.n	15262 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1525a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1525e:	f001 fda1 	bl	16da4 <nrfx_gpiote_channel_free>
		return 0;
   15262:	2000      	movs	r0, #0
   15264:	e00c      	b.n	15280 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   15266:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15268:	4619      	mov	r1, r3
   1526a:	aa02      	add	r2, sp, #8
   1526c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1526e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   15272:	f001 fc23 	bl	16abc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   15276:	4b35      	ldr	r3, [pc, #212]	; (1534c <gpio_nrfx_pin_configure+0x124>)
   15278:	4298      	cmp	r0, r3
   1527a:	d004      	beq.n	15286 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1527c:	f06f 0015 	mvn.w	r0, #21
}
   15280:	b004      	add	sp, #16
   15282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   15286:	4580      	cmp	r8, r0
   15288:	d103      	bne.n	15292 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1528a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1528e:	f001 fd89 	bl	16da4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   15292:	03a3      	lsls	r3, r4, #14
   15294:	d54b      	bpl.n	1532e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   15296:	f240 3306 	movw	r3, #774	; 0x306
   1529a:	4023      	ands	r3, r4
   1529c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   152a0:	d019      	beq.n	152d6 <gpio_nrfx_pin_configure+0xae>
   152a2:	d80c      	bhi.n	152be <gpio_nrfx_pin_configure+0x96>
   152a4:	2b06      	cmp	r3, #6
   152a6:	d017      	beq.n	152d8 <gpio_nrfx_pin_configure+0xb0>
   152a8:	d804      	bhi.n	152b4 <gpio_nrfx_pin_configure+0x8c>
   152aa:	b1ab      	cbz	r3, 152d8 <gpio_nrfx_pin_configure+0xb0>
   152ac:	2b02      	cmp	r3, #2
   152ae:	d1e5      	bne.n	1527c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   152b0:	2304      	movs	r3, #4
   152b2:	e011      	b.n	152d8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   152b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   152b8:	d1e0      	bne.n	1527c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   152ba:	2301      	movs	r3, #1
   152bc:	e00c      	b.n	152d8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   152be:	f240 2202 	movw	r2, #514	; 0x202
   152c2:	4293      	cmp	r3, r2
   152c4:	d027      	beq.n	15316 <gpio_nrfx_pin_configure+0xee>
   152c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   152ca:	d026      	beq.n	1531a <gpio_nrfx_pin_configure+0xf2>
   152cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   152d0:	d1d4      	bne.n	1527c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   152d2:	2302      	movs	r3, #2
   152d4:	e000      	b.n	152d8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   152d6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   152d8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   152dc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   152e0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   152e4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   152e6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   152ea:	bf54      	ite	pl
   152ec:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   152f0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   152f2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   152f4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   152f8:	d511      	bpl.n	1531e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   152fa:	687a      	ldr	r2, [r7, #4]
   152fc:	2301      	movs	r3, #1
   152fe:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   15300:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   15304:	2200      	movs	r2, #0
   15306:	a901      	add	r1, sp, #4
   15308:	4628      	mov	r0, r5
   1530a:	f001 fc87 	bl	16c1c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1530e:	4b0f      	ldr	r3, [pc, #60]	; (1534c <gpio_nrfx_pin_configure+0x124>)
   15310:	4298      	cmp	r0, r3
   15312:	d0a6      	beq.n	15262 <gpio_nrfx_pin_configure+0x3a>
   15314:	e7b2      	b.n	1527c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   15316:	2305      	movs	r3, #5
   15318:	e7de      	b.n	152d8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1531a:	2303      	movs	r3, #3
   1531c:	e7dc      	b.n	152d8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1531e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   15320:	bf41      	itttt	mi
   15322:	2301      	movmi	r3, #1
   15324:	687a      	ldrmi	r2, [r7, #4]
   15326:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   15328:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1532c:	e7ea      	b.n	15304 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1532e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15330:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   15334:	bf54      	ite	pl
   15336:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1533a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1533c:	461a      	mov	r2, r3
   1533e:	a901      	add	r1, sp, #4
   15340:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   15342:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   15346:	f001 fbb9 	bl	16abc <nrfx_gpiote_input_configure>
   1534a:	e7e0      	b.n	1530e <gpio_nrfx_pin_configure+0xe6>
   1534c:	0bad0000 	.word	0x0bad0000

00015350 <i2c_nrfx_twim_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int i2c_nrfx_twim_init(const struct device *dev)
{
   15350:	b538      	push	{r3, r4, r5, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   15352:	6844      	ldr	r4, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   15354:	6905      	ldr	r5, [r0, #16]

	dev_config->irq_connect();
   15356:	69e3      	ldr	r3, [r4, #28]
   15358:	4798      	blx	r3

	int err = pinctrl_apply_state(dev_config->pcfg,
   1535a:	6a20      	ldr	r0, [r4, #32]
   1535c:	f006 ff01 	bl	1c162 <pinctrl_apply_state.constprop.0>
				      COND_CODE_1(CONFIG_PM_DEVICE_RUNTIME,
						  (PINCTRL_STATE_SLEEP),
						  (PINCTRL_STATE_DEFAULT)));
	if (err < 0) {
   15360:	2800      	cmp	r0, #0
   15362:	db0d      	blt.n	15380 <i2c_nrfx_twim_init+0x30>
		return err;
	}

	if (nrfx_twim_init(&dev_config->twim, &dev_config->twim_config,
   15364:	462b      	mov	r3, r5
   15366:	4a08      	ldr	r2, [pc, #32]	; (15388 <i2c_nrfx_twim_init+0x38>)
   15368:	f104 0108 	add.w	r1, r4, #8
   1536c:	4620      	mov	r0, r4
   1536e:	f001 ff5b 	bl	17228 <nrfx_twim_init>
   15372:	4b06      	ldr	r3, [pc, #24]	; (1538c <i2c_nrfx_twim_init+0x3c>)
   15374:	4298      	cmp	r0, r3
   15376:	d104      	bne.n	15382 <i2c_nrfx_twim_init+0x32>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_init_suspended(dev);
	pm_device_runtime_enable(dev);
#else
	nrfx_twim_enable(&dev_config->twim);
   15378:	4620      	mov	r0, r4
   1537a:	f001 ffb5 	bl	172e8 <nrfx_twim_enable>
#endif

	return 0;
   1537e:	2000      	movs	r0, #0
}
   15380:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   15382:	f06f 0004 	mvn.w	r0, #4
   15386:	e7fb      	b.n	15380 <i2c_nrfx_twim_init+0x30>
   15388:	000153cd 	.word	0x000153cd
   1538c:	0bad0000 	.word	0x0bad0000

00015390 <i2c_nrfx_twim_recover_bus>:
{
   15390:	b570      	push	{r4, r5, r6, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   15392:	6844      	ldr	r4, [r0, #4]
	scl_pin = nrf_twim_scl_pin_get(dev_config->twim.p_twim);
   15394:	6823      	ldr	r3, [r4, #0]
    p_reg->PSEL.SDA = sda_pin;
}

NRF_STATIC_INLINE uint32_t nrf_twim_scl_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SCL;
   15396:	f8d3 5508 	ldr.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twim_sda_pin_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->PSEL.SDA;
   1539a:	f8d3 650c 	ldr.w	r6, [r3, #1292]	; 0x50c
		nrfx_twim_disable(&dev_config->twim);
   1539e:	4620      	mov	r0, r4
   153a0:	f001 ffb2 	bl	17308 <nrfx_twim_disable>
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   153a4:	4631      	mov	r1, r6
   153a6:	4628      	mov	r0, r5
   153a8:	f002 f984 	bl	176b4 <nrfx_twi_twim_bus_recover>
   153ac:	4605      	mov	r5, r0
		(void)pinctrl_apply_state(dev_config->pcfg,
   153ae:	6a20      	ldr	r0, [r4, #32]
   153b0:	f006 fed7 	bl	1c162 <pinctrl_apply_state.constprop.0>
		nrfx_twim_enable(&dev_config->twim);
   153b4:	4620      	mov	r0, r4
   153b6:	f001 ff97 	bl	172e8 <nrfx_twim_enable>
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   153ba:	4b03      	ldr	r3, [pc, #12]	; (153c8 <i2c_nrfx_twim_recover_bus+0x38>)
   153bc:	429d      	cmp	r5, r3
}
   153be:	bf14      	ite	ne
   153c0:	f06f 000f 	mvnne.w	r0, #15
   153c4:	2000      	moveq	r0, #0
   153c6:	bd70      	pop	{r4, r5, r6, pc}
   153c8:	0bad0000 	.word	0x0bad0000

000153cc <event_handler>:
	switch (p_event->type) {
   153cc:	7803      	ldrb	r3, [r0, #0]
   153ce:	2b01      	cmp	r3, #1
   153d0:	d008      	beq.n	153e4 <event_handler+0x18>
   153d2:	2b02      	cmp	r3, #2
   153d4:	d008      	beq.n	153e8 <event_handler+0x1c>
   153d6:	b94b      	cbnz	r3, 153ec <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   153d8:	4b05      	ldr	r3, [pc, #20]	; (153f0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   153da:	630b      	str	r3, [r1, #48]	; 0x30
   153dc:	f101 0018 	add.w	r0, r1, #24
   153e0:	f002 bd1a 	b.w	17e18 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   153e4:	4b03      	ldr	r3, [pc, #12]	; (153f4 <event_handler+0x28>)
   153e6:	e7f8      	b.n	153da <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   153e8:	4b03      	ldr	r3, [pc, #12]	; (153f8 <event_handler+0x2c>)
   153ea:	e7f6      	b.n	153da <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   153ec:	4b03      	ldr	r3, [pc, #12]	; (153fc <event_handler+0x30>)
   153ee:	e7f4      	b.n	153da <event_handler+0xe>
   153f0:	0bad0000 	.word	0x0bad0000
   153f4:	0bae0001 	.word	0x0bae0001
   153f8:	0bae0002 	.word	0x0bae0002
   153fc:	0bad0001 	.word	0x0bad0001

00015400 <i2c_nrfx_twim_transfer>:
{
   15400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15404:	461d      	mov	r5, r3
   15406:	b08b      	sub	sp, #44	; 0x2c
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   15408:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   1540a:	6906      	ldr	r6, [r0, #16]
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1540c:	9300      	str	r3, [sp, #0]
{
   1540e:	4691      	mov	r9, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   15410:	2214      	movs	r2, #20
	uint16_t msg_buf_size = dev_config->msg_buf_size;
   15412:	8b1b      	ldrh	r3, [r3, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   15414:	f8d6 a034 	ldr.w	sl, [r6, #52]	; 0x34
	uint16_t msg_buf_size = dev_config->msg_buf_size;
   15418:	9302      	str	r3, [sp, #8]
{
   1541a:	4680      	mov	r8, r0
   1541c:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   1541e:	eb0d 0002 	add.w	r0, sp, r2
   15422:	2100      	movs	r1, #0
   15424:	f004 fbf1 	bl	19c0a <memset>
   15428:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   1542c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15434:	4630      	mov	r0, r6
   15436:	f002 fd15 	bl	17e64 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1543a:	f106 0318 	add.w	r3, r6, #24
   1543e:	9301      	str	r3, [sp, #4]
   15440:	2200      	movs	r2, #0
   15442:	2300      	movs	r3, #0
   15444:	f106 0018 	add.w	r0, r6, #24
   15448:	f002 fd0c 	bl	17e64 <z_impl_k_sem_take>
	for (size_t i = 0; i < num_msgs; i++) {
   1544c:	2700      	movs	r7, #0
		if (res != NRFX_SUCCESS) {
   1544e:	f8df b118 	ldr.w	fp, [pc, #280]	; 15568 <i2c_nrfx_twim_transfer+0x168>
	uint16_t msg_buf_used = 0;
   15452:	463d      	mov	r5, r7
	for (size_t i = 0; i < num_msgs; i++) {
   15454:	454f      	cmp	r7, r9
   15456:	d301      	bcc.n	1545c <i2c_nrfx_twim_transfer+0x5c>
   15458:	2400      	movs	r4, #0
   1545a:	e05a      	b.n	15512 <i2c_nrfx_twim_transfer+0x112>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1545c:	7a20      	ldrb	r0, [r4, #8]
   1545e:	0702      	lsls	r2, r0, #28
   15460:	d47b      	bmi.n	1555a <i2c_nrfx_twim_transfer+0x15a>
		bool concat_next = ((i + 1) < num_msgs)
   15462:	3701      	adds	r7, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   15464:	454f      	cmp	r7, r9
		bool dma_accessible = nrf_dma_accessible_check(&dev_config->twim, msgs[i].buf);
   15466:	6821      	ldr	r1, [r4, #0]
				&& ((msgs[i].flags & I2C_MSG_READ)
   15468:	d20a      	bcs.n	15480 <i2c_nrfx_twim_transfer+0x80>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   1546a:	0783      	lsls	r3, r0, #30
   1546c:	d408      	bmi.n	15480 <i2c_nrfx_twim_transfer+0x80>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1546e:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   15470:	ea80 0203 	eor.w	r2, r0, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   15474:	f002 0201 	and.w	r2, r2, #1
   15478:	f003 0304 	and.w	r3, r3, #4
   1547c:	431a      	orrs	r2, r3
   1547e:	d007      	beq.n	15490 <i2c_nrfx_twim_transfer+0x90>
		if (concat_next || (msg_buf_used != 0) || !dma_accessible) {
   15480:	b925      	cbnz	r5, 1548c <i2c_nrfx_twim_transfer+0x8c>
{
#if defined(NRF_DMA_ACCESS_EXT)
    NRF_DMA_ACCESS_EXT
#else
    (void)p_reg;
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   15482:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   15486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1548a:	d017      	beq.n	154bc <i2c_nrfx_twim_transfer+0xbc>
		bool concat_next = ((i + 1) < num_msgs)
   1548c:	2300      	movs	r3, #0
   1548e:	e000      	b.n	15492 <i2c_nrfx_twim_transfer+0x92>
   15490:	2301      	movs	r3, #1
			if ((msg_buf_used + msgs[i].len) > msg_buf_size) {
   15492:	6862      	ldr	r2, [r4, #4]
   15494:	f8dd e008 	ldr.w	lr, [sp, #8]
   15498:	eb05 0c02 	add.w	ip, r5, r2
   1549c:	45f4      	cmp	ip, lr
   1549e:	d85f      	bhi.n	15560 <i2c_nrfx_twim_transfer+0x160>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   154a0:	07c0      	lsls	r0, r0, #31
   154a2:	d405      	bmi.n	154b0 <i2c_nrfx_twim_transfer+0xb0>
				memcpy(msg_buf + msg_buf_used,
   154a4:	eb0a 0005 	add.w	r0, sl, r5
   154a8:	9303      	str	r3, [sp, #12]
   154aa:	f004 fba3 	bl	19bf4 <memcpy>
   154ae:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   154b0:	6862      	ldr	r2, [r4, #4]
   154b2:	442a      	add	r2, r5
   154b4:	b295      	uxth	r5, r2
		if (concat_next) {
   154b6:	2b00      	cmp	r3, #0
   154b8:	d139      	bne.n	1552e <i2c_nrfx_twim_transfer+0x12e>
		if (msg_buf_used == 0) {
   154ba:	b9d5      	cbnz	r5, 154f2 <i2c_nrfx_twim_transfer+0xf2>
			cur_xfer.p_primary_buf = msgs[i].buf;
   154bc:	6823      	ldr	r3, [r4, #0]
   154be:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   154c0:	6863      	ldr	r3, [r4, #4]
   154c2:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   154c4:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   154c6:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   154c8:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   154cc:	f082 0202 	eor.w	r2, r2, #2
   154d0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   154d4:	9800      	ldr	r0, [sp, #0]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   154d6:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   154da:	0152      	lsls	r2, r2, #5
   154dc:	a905      	add	r1, sp, #20
   154de:	f001 ff31 	bl	17344 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   154e2:	4558      	cmp	r0, fp
   154e4:	d009      	beq.n	154fa <i2c_nrfx_twim_transfer+0xfa>
			if (res == NRFX_ERROR_BUSY) {
   154e6:	4b21      	ldr	r3, [pc, #132]	; (1556c <i2c_nrfx_twim_transfer+0x16c>)
   154e8:	4298      	cmp	r0, r3
   154ea:	d110      	bne.n	1550e <i2c_nrfx_twim_transfer+0x10e>
				ret = -EBUSY;
   154ec:	f06f 040f 	mvn.w	r4, #15
   154f0:	e00f      	b.n	15512 <i2c_nrfx_twim_transfer+0x112>
			cur_xfer.p_primary_buf = msg_buf;
   154f2:	f8cd a020 	str.w	sl, [sp, #32]
			cur_xfer.primary_length = msg_buf_used;
   154f6:	462b      	mov	r3, r5
   154f8:	e7e4      	b.n	154c4 <i2c_nrfx_twim_transfer+0xc4>
   154fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   154fe:	9801      	ldr	r0, [sp, #4]
   15500:	2300      	movs	r3, #0
   15502:	f002 fcaf 	bl	17e64 <z_impl_k_sem_take>
		if (ret != 0) {
   15506:	b158      	cbz	r0, 15520 <i2c_nrfx_twim_transfer+0x120>
			(void)i2c_nrfx_twim_recover_bus(dev);
   15508:	4640      	mov	r0, r8
   1550a:	f7ff ff41 	bl	15390 <i2c_nrfx_twim_recover_bus>
				ret = -EIO;
   1550e:	f06f 0404 	mvn.w	r4, #4
	z_impl_k_sem_give(sem);
   15512:	4630      	mov	r0, r6
   15514:	f002 fc80 	bl	17e18 <z_impl_k_sem_give>
}
   15518:	4620      	mov	r0, r4
   1551a:	b00b      	add	sp, #44	; 0x2c
   1551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dev_data->res;
   15520:	6b33      	ldr	r3, [r6, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   15522:	455b      	cmp	r3, fp
   15524:	d1f3      	bne.n	1550e <i2c_nrfx_twim_transfer+0x10e>
		if ((msgs[i].flags & I2C_MSG_READ)
   15526:	7a23      	ldrb	r3, [r4, #8]
   15528:	07db      	lsls	r3, r3, #31
   1552a:	d402      	bmi.n	15532 <i2c_nrfx_twim_transfer+0x132>
		msg_buf_used = 0;
   1552c:	2500      	movs	r5, #0
   1552e:	340c      	adds	r4, #12
   15530:	e790      	b.n	15454 <i2c_nrfx_twim_transfer+0x54>
		    && cur_xfer.p_primary_buf == msg_buf) {
   15532:	9b08      	ldr	r3, [sp, #32]
   15534:	459a      	cmp	sl, r3
   15536:	d1f9      	bne.n	1552c <i2c_nrfx_twim_transfer+0x12c>
   15538:	4623      	mov	r3, r4
   1553a:	e008      	b.n	1554e <i2c_nrfx_twim_transfer+0x14e>
				msg_buf_used -= msgs[j].len;
   1553c:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   1553e:	68d8      	ldr	r0, [r3, #12]
   15540:	9303      	str	r3, [sp, #12]
				msg_buf_used -= msgs[j].len;
   15542:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   15544:	fa1a f181 	uxtah	r1, sl, r1
   15548:	f004 fb54 	bl	19bf4 <memcpy>
				j--;
   1554c:	9b03      	ldr	r3, [sp, #12]
			while (msg_buf_used >= msgs[j].len) {
   1554e:	685a      	ldr	r2, [r3, #4]
   15550:	4295      	cmp	r5, r2
   15552:	f1a3 030c 	sub.w	r3, r3, #12
   15556:	d2f1      	bcs.n	1553c <i2c_nrfx_twim_transfer+0x13c>
   15558:	e7e8      	b.n	1552c <i2c_nrfx_twim_transfer+0x12c>
			ret = -ENOTSUP;
   1555a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1555e:	e7d8      	b.n	15512 <i2c_nrfx_twim_transfer+0x112>
				ret = -ENOSPC;
   15560:	f06f 041b 	mvn.w	r4, #27
   15564:	e7d5      	b.n	15512 <i2c_nrfx_twim_transfer+0x112>
   15566:	bf00      	nop
   15568:	0bad0000 	.word	0x0bad0000
   1556c:	0bad000b 	.word	0x0bad000b

00015570 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   15570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cnf &= ~to_update;
   15574:	4f3a      	ldr	r7, [pc, #232]	; (15660 <pinctrl_configure_pins+0xf0>)
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   15576:	2600      	movs	r6, #0
   15578:	b2f3      	uxtb	r3, r6
   1557a:	4299      	cmp	r1, r3
   1557c:	d802      	bhi.n	15584 <pinctrl_configure_pins+0x14>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1557e:	2000      	movs	r0, #0
}
   15580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   15584:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
		uint32_t psel = NRF_GET_PIN(pins[i]);
   15588:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1558c:	f3c4 2e43 	ubfx	lr, r4, #9, #4
			psel = PSEL_DISCONNECTED;
   15590:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   15592:	ea4f 4414 	mov.w	r4, r4, lsr #16
			psel = PSEL_DISCONNECTED;
   15596:	bf08      	it	eq
   15598:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   1559c:	2c0c      	cmp	r4, #12
   1559e:	d851      	bhi.n	15644 <pinctrl_configure_pins+0xd4>
   155a0:	e8df f004 	tbb	[pc, r4]
   155a4:	16130d07 	.word	0x16130d07
   155a8:	50505050 	.word	0x50505050
   155ac:	19505050 	.word	0x19505050
   155b0:	43          	.byte	0x43
   155b1:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = psel;
   155b2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
   155b6:	1c5c      	adds	r4, r3, #1
   155b8:	d13a      	bne.n	15630 <pinctrl_configure_pins+0xc0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   155ba:	3601      	adds	r6, #1
   155bc:	e7dc      	b.n	15578 <pinctrl_configure_pins+0x8>
			NRF_PSEL_UART(reg, RXD) = psel;
   155be:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
		if (psel != PSEL_DISCONNECTED) {
   155c2:	1c5d      	adds	r5, r3, #1
   155c4:	d0f9      	beq.n	155ba <pinctrl_configure_pins+0x4a>
			dir = NRF_GPIO_PIN_DIR_INPUT;
   155c6:	2400      	movs	r4, #0
   155c8:	e00f      	b.n	155ea <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RTS) = psel;
   155ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   155ce:	e7f2      	b.n	155b6 <pinctrl_configure_pins+0x46>
			NRF_PSEL_UART(reg, CTS) = psel;
   155d0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
		if (psel != PSEL_DISCONNECTED) {
   155d4:	e7f5      	b.n	155c2 <pinctrl_configure_pins+0x52>
			NRF_PSEL_TWIM(reg, SCL) = psel;
   155d6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   155da:	f1be 0f00 	cmp.w	lr, #0
   155de:	d1f0      	bne.n	155c2 <pinctrl_configure_pins+0x52>
		if (psel != PSEL_DISCONNECTED) {
   155e0:	1c5c      	adds	r4, r3, #1
   155e2:	d0ea      	beq.n	155ba <pinctrl_configure_pins+0x4a>
			dir = NRF_GPIO_PIN_DIR_INPUT;
   155e4:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   155e6:	f04f 0e06 	mov.w	lr, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   155ea:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
   155ee:	f408 5500 	and.w	r5, r8, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   155f2:	2d00      	cmp	r5, #0
   155f4:	bf0e      	itee	eq
   155f6:	46a4      	moveq	ip, r4
   155f8:	f04f 0c01 	movne.w	ip, #1
   155fc:	2400      	movne	r4, #0
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   155fe:	f003 051f 	and.w	r5, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15602:	095b      	lsrs	r3, r3, #5
   15604:	d125      	bne.n	15652 <pinctrl_configure_pins+0xe2>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15606:	00ad      	lsls	r5, r5, #2
   15608:	f105 45a0 	add.w	r5, r5, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
   1560c:	f3c8 18c1 	ubfx	r8, r8, #7, #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15610:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
    cnf &= ~to_update;
   15614:	403b      	ands	r3, r7
   15616:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
   1561a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   1561e:	4323      	orrs	r3, r4
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   15620:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   15624:	f8c5 3700 	str.w	r3, [r5, #1792]	; 0x700
   15628:	e7c7      	b.n	155ba <pinctrl_configure_pins+0x4a>
			NRF_PSEL_TWIM(reg, SDA) = psel;
   1562a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1562e:	e7d4      	b.n	155da <pinctrl_configure_pins+0x6a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15630:	095c      	lsrs	r4, r3, #5
   15632:	d10a      	bne.n	1564a <pinctrl_configure_pins+0xda>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15634:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   15636:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1563a:	fa04 fc03 	lsl.w	ip, r4, r3
    p_reg->OUTSET = set_mask;
   1563e:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
   15642:	e7d2      	b.n	155ea <pinctrl_configure_pins+0x7a>
		switch (NRF_GET_FUN(pins[i])) {
   15644:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15648:	e79a      	b.n	15580 <pinctrl_configure_pins+0x10>
   1564a:	2300      	movs	r3, #0
   1564c:	f8c3 3508 	str.w	r3, [r3, #1288]	; 0x508
   15650:	deff      	udf	#255	; 0xff
    uint32_t cnf = reg->PIN_CNF[pin_number];
   15652:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   15656:	2300      	movs	r3, #0
   15658:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1565c:	e7f8      	b.n	15650 <pinctrl_configure_pins+0xe0>
   1565e:	bf00      	nop
   15660:	fffcf8f0 	.word	0xfffcf8f0

00015664 <regulator_fixed_enable>:
struct regulator_fixed_data {
	struct regulator_common_data common;
};

static int regulator_fixed_enable(const struct device *dev)
{
   15664:	b538      	push	{r3, r4, r5, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   15666:	6844      	ldr	r4, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   15668:	2201      	movs	r2, #1
   1566a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   1566e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   15670:	f006 fe41 	bl	1c2f6 <gpio_pin_set>
	int ret;

	ret = gpio_pin_set_dt(&cfg->enable, 1);
	if (ret < 0) {
   15674:	2800      	cmp	r0, #0
   15676:	db02      	blt.n	1567e <regulator_fixed_enable+0x1a>
		return ret;
	}

	if (cfg->off_on_delay_us > 0U) {
   15678:	6a24      	ldr	r4, [r4, #32]
   1567a:	b90c      	cbnz	r4, 15680 <regulator_fixed_enable+0x1c>
		k_sleep(K_USEC(cfg->off_on_delay_us));
	}

	return 0;
   1567c:	2000      	movs	r0, #0
}
   1567e:	bd38      	pop	{r3, r4, r5, pc}
   15680:	4806      	ldr	r0, [pc, #24]	; (1569c <regulator_fixed_enable+0x38>)
   15682:	4a07      	ldr	r2, [pc, #28]	; (156a0 <regulator_fixed_enable+0x3c>)
   15684:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   15688:	2100      	movs	r1, #0
   1568a:	2300      	movs	r3, #0
   1568c:	fbe4 0105 	umlal	r0, r1, r4, r5
   15690:	f7eb f994 	bl	9bc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   15694:	f003 f8c2 	bl	1881c <z_impl_k_sleep>
   15698:	e7f0      	b.n	1567c <regulator_fixed_enable+0x18>
   1569a:	bf00      	nop
   1569c:	000f423f 	.word	0x000f423f
   156a0:	000f4240 	.word	0x000f4240

000156a4 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   156a4:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   156a6:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   156a8:	2904      	cmp	r1, #4
   156aa:	d81c      	bhi.n	156e6 <ccs811_channel_get+0x42>
   156ac:	e8df f001 	tbb	[pc, r1]
   156b0:	0b1b0903 	.word	0x0b1b0903
   156b4:	17          	.byte	0x17
   156b5:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   156b6:	8819      	ldrh	r1, [r3, #0]
		val->val2 = 0;

		break;
   156b8:	2300      	movs	r3, #0
		val->val2 = 0;
   156ba:	e9c2 1300 	strd	r1, r3, [r2]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   156be:	2000      	movs	r0, #0
   156c0:	4770      	bx	lr
		val->val1 = rp->voc;
   156c2:	8859      	ldrh	r1, [r3, #2]
		break;
   156c4:	e7f8      	b.n	156b8 <ccs811_channel_get+0x14>
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   156c6:	889b      	ldrh	r3, [r3, #4]
		val->val1 = uval / 1000000U;
   156c8:	4808      	ldr	r0, [pc, #32]	; (156ec <ccs811_channel_get+0x48>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   156ca:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   156ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   156d2:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   156d4:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   156d8:	fb00 3311 	mls	r3, r0, r1, r3
		break;
   156dc:	e7ed      	b.n	156ba <ccs811_channel_get+0x16>
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   156de:	889b      	ldrh	r3, [r3, #4]
		break;
   156e0:	2100      	movs	r1, #0
		val->val2 = uval % 1000000;
   156e2:	0a9b      	lsrs	r3, r3, #10
		break;
   156e4:	e7e9      	b.n	156ba <ccs811_channel_get+0x16>
	switch (chan) {
   156e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   156ea:	4770      	bx	lr
   156ec:	000f4240 	.word	0x000f4240

000156f0 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   156f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_config *config = dev->config;
   156f2:	6844      	ldr	r4, [r0, #4]
	struct ccs811_data *drv_data = dev->data;
   156f4:	6906      	ldr	r6, [r0, #16]
{
   156f6:	4605      	mov	r5, r0
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	if (!device_is_ready(config->i2c.bus)) {
   156f8:	6820      	ldr	r0, [r4, #0]
   156fa:	f007 fb0d 	bl	1cd18 <z_device_is_ready>
   156fe:	b920      	cbnz	r0, 1570a <ccs811_init+0x1a>
		LOG_ERR("I2C bus device not ready");
		return -ENODEV;
   15700:	f06f 0412 	mvn.w	r4, #18
#endif

out:
	set_wake(dev, false);
	return ret;
}
   15704:	4620      	mov	r0, r4
   15706:	b003      	add	sp, #12
   15708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (config->wake_gpio.port) {
   1570a:	69a0      	ldr	r0, [r4, #24]
   1570c:	b180      	cbz	r0, 15730 <ccs811_init+0x40>
   1570e:	f007 fb03 	bl	1cd18 <z_device_is_ready>
		if (!device_is_ready(config->wake_gpio.port)) {
   15712:	2800      	cmp	r0, #0
   15714:	d0f4      	beq.n	15700 <ccs811_init+0x10>
		gpio_pin_configure_dt(&config->wake_gpio, GPIO_OUTPUT_INACTIVE);
   15716:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   1571a:	f104 0018 	add.w	r0, r4, #24
   1571e:	f006 fe68 	bl	1c3f2 <gpio_pin_configure_dt.isra.0>
		set_wake(dev, true);
   15722:	6868      	ldr	r0, [r5, #4]
   15724:	2101      	movs	r1, #1
   15726:	f006 fec5 	bl	1c4b4 <set_wake.isra.0>
		k_msleep(1);
   1572a:	2001      	movs	r0, #1
   1572c:	f006 fe3d 	bl	1c3aa <k_msleep.isra.0>
	if (config->reset_gpio.port) {
   15730:	6920      	ldr	r0, [r4, #16]
   15732:	b160      	cbz	r0, 1574e <ccs811_init+0x5e>
   15734:	f007 faf0 	bl	1cd18 <z_device_is_ready>
		if (!device_is_ready(config->reset_gpio.port)) {
   15738:	2800      	cmp	r0, #0
   1573a:	d0e1      	beq.n	15700 <ccs811_init+0x10>
		gpio_pin_configure_dt(&config->reset_gpio, GPIO_OUTPUT_ACTIVE);
   1573c:	f104 0010 	add.w	r0, r4, #16
   15740:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   15744:	f006 fe55 	bl	1c3f2 <gpio_pin_configure_dt.isra.0>
		k_msleep(1);
   15748:	2001      	movs	r0, #1
   1574a:	f006 fe2e 	bl	1c3aa <k_msleep.isra.0>
	if (config->irq_gpio.port) {
   1574e:	68a0      	ldr	r0, [r4, #8]
   15750:	b998      	cbnz	r0, 1577a <ccs811_init+0x8a>
	k_msleep(20);            /* t_START assuming recent power-on */
   15752:	2014      	movs	r0, #20
   15754:	f006 fe29 	bl	1c3aa <k_msleep.isra.0>
	if (config->reset_gpio.port) {
   15758:	6923      	ldr	r3, [r4, #16]
   1575a:	b99b      	cbnz	r3, 15784 <ccs811_init+0x94>
 * @return a value from i2c_write()
 */
static inline int i2c_write_dt(const struct i2c_dt_spec *spec,
			       const uint8_t *buf, uint32_t num_bytes)
{
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   1575c:	88a3      	ldrh	r3, [r4, #4]
   1575e:	493f      	ldr	r1, [pc, #252]	; (1585c <ccs811_init+0x16c>)
   15760:	6820      	ldr	r0, [r4, #0]
   15762:	2205      	movs	r2, #5
   15764:	f006 fe99 	bl	1c49a <i2c_write>
		if (i2c_write_dt(&config->i2c, reset_seq, sizeof(reset_seq)) < 0) {
   15768:	2800      	cmp	r0, #0
   1576a:	da18      	bge.n	1579e <ccs811_init+0xae>
			ret = -EIO;
   1576c:	f06f 0404 	mvn.w	r4, #4
	set_wake(dev, false);
   15770:	6868      	ldr	r0, [r5, #4]
   15772:	2100      	movs	r1, #0
   15774:	f006 fe9e 	bl	1c4b4 <set_wake.isra.0>
	return ret;
   15778:	e7c4      	b.n	15704 <ccs811_init+0x14>
   1577a:	f007 facd 	bl	1cd18 <z_device_is_ready>
		if (!device_is_ready(config->irq_gpio.port)) {
   1577e:	2800      	cmp	r0, #0
   15780:	d1e7      	bne.n	15752 <ccs811_init+0x62>
   15782:	e7bd      	b.n	15700 <ccs811_init+0x10>
		gpio_pin_set_dt(&config->reset_gpio, 1);
   15784:	f104 0710 	add.w	r7, r4, #16
   15788:	2101      	movs	r1, #1
   1578a:	4638      	mov	r0, r7
   1578c:	f006 fe1d 	bl	1c3ca <gpio_pin_set_dt.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   15790:	200f      	movs	r0, #15
   15792:	f007 fabc 	bl	1cd0e <z_impl_k_busy_wait>
		gpio_pin_set_dt(&config->reset_gpio, 0);
   15796:	2100      	movs	r1, #0
   15798:	4638      	mov	r0, r7
   1579a:	f006 fe16 	bl	1c3ca <gpio_pin_set_dt.isra.0>
	k_msleep(2);             /* t_START after reset */
   1579e:	2002      	movs	r0, #2
   157a0:	f006 fe03 	bl	1c3aa <k_msleep.isra.0>
	const struct ccs811_config *config = dev->config;
   157a4:	686f      	ldr	r7, [r5, #4]
	status = fetch_status(dev);
   157a6:	4638      	mov	r0, r7
   157a8:	f006 fe58 	bl	1c45c <fetch_status.isra.0>
	if (status < 0) {
   157ac:	2800      	cmp	r0, #0
   157ae:	dbdd      	blt.n	1576c <ccs811_init+0x7c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   157b0:	06c1      	lsls	r1, r0, #27
   157b2:	d402      	bmi.n	157ba <ccs811_init+0xca>
		return -EINVAL;
   157b4:	f06f 0415 	mvn.w	r4, #21
   157b8:	e7da      	b.n	15770 <ccs811_init+0x80>
	if (status & CCS811_STATUS_FW_MODE) {
   157ba:	0602      	lsls	r2, r0, #24
   157bc:	d537      	bpl.n	1582e <ccs811_init+0x13e>
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_HW_ID, &hw_id) < 0) {
   157be:	f10d 0203 	add.w	r2, sp, #3
   157c2:	2120      	movs	r1, #32
   157c4:	4620      	mov	r0, r4
   157c6:	f006 fe2e 	bl	1c426 <i2c_reg_read_byte_dt>
   157ca:	2800      	cmp	r0, #0
   157cc:	dbce      	blt.n	1576c <ccs811_init+0x7c>
	if (hw_id != CCS881_HW_ID) {
   157ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
   157d2:	2b81      	cmp	r3, #129	; 0x81
   157d4:	d1ee      	bne.n	157b4 <ccs811_init+0xc4>
	cmd = CCS811_REG_FW_APP_VERSION;
   157d6:	2324      	movs	r3, #36	; 0x24
   157d8:	f88d 3002 	strb.w	r3, [sp, #2]
	if (i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), &fw_ver, sizeof(fw_ver)) < 0) {
   157dc:	2302      	movs	r3, #2
   157de:	f10d 0206 	add.w	r2, sp, #6
   157e2:	eb0d 0103 	add.w	r1, sp, r3
   157e6:	4620      	mov	r0, r4
   157e8:	f006 fdc7 	bl	1c37a <i2c_write_read_dt.constprop.0>
   157ec:	2800      	cmp	r0, #0
   157ee:	dbbd      	blt.n	1576c <ccs811_init+0x7c>
	fw_ver = sys_be16_to_cpu(fw_ver);
   157f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   157f4:	ba5b      	rev16	r3, r3
   157f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	drv_data->app_fw_ver = fw_ver >> 8U;
   157fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
   157fe:	7273      	strb	r3, [r6, #9]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   15800:	f241 0301 	movw	r3, #4097	; 0x1001
   15804:	f8ad 3004 	strh.w	r3, [sp, #4]

	return i2c_write(dev, tx_buf, 2, dev_addr);
   15808:	6820      	ldr	r0, [r4, #0]
   1580a:	88a3      	ldrh	r3, [r4, #4]
   1580c:	2202      	movs	r2, #2
   1580e:	a901      	add	r1, sp, #4
   15810:	f006 fe43 	bl	1c49a <i2c_write>
	if (i2c_reg_write_byte_dt(&config->i2c, CCS811_REG_MEAS_MODE, meas_mode) < 0) {
   15814:	2800      	cmp	r0, #0
   15816:	dba9      	blt.n	1576c <ccs811_init+0x7c>
	drv_data->mode = meas_mode;
   15818:	2310      	movs	r3, #16
   1581a:	7233      	strb	r3, [r6, #8]
	status = fetch_status(dev);
   1581c:	6868      	ldr	r0, [r5, #4]
   1581e:	f006 fe1d 	bl	1c45c <fetch_status.isra.0>
	if (status < 0) {
   15822:	1e04      	subs	r4, r0, #0
   15824:	dba2      	blt.n	1576c <ccs811_init+0x7c>
	if (status & CCS811_STATUS_ERROR) {
   15826:	f014 0401 	ands.w	r4, r4, #1
   1582a:	d0a1      	beq.n	15770 <ccs811_init+0x80>
   1582c:	e7c2      	b.n	157b4 <ccs811_init+0xc4>
	buf = CCS811_REG_APP_START;
   1582e:	23f4      	movs	r3, #244	; 0xf4
   15830:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   15834:	88bb      	ldrh	r3, [r7, #4]
   15836:	6838      	ldr	r0, [r7, #0]
   15838:	2201      	movs	r2, #1
   1583a:	f10d 0106 	add.w	r1, sp, #6
   1583e:	f006 fe2c 	bl	1c49a <i2c_write>
	if (i2c_write_dt(&config->i2c, &buf, 1) < 0) {
   15842:	2800      	cmp	r0, #0
   15844:	db92      	blt.n	1576c <ccs811_init+0x7c>
	k_msleep(1);             /* t_APP_START */
   15846:	2001      	movs	r0, #1
   15848:	f006 fdaf 	bl	1c3aa <k_msleep.isra.0>
	status = fetch_status(dev);
   1584c:	6868      	ldr	r0, [r5, #4]
   1584e:	f006 fe05 	bl	1c45c <fetch_status.isra.0>
	if (status < 0) {
   15852:	2800      	cmp	r0, #0
   15854:	db8a      	blt.n	1576c <ccs811_init+0x7c>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   15856:	0603      	lsls	r3, r0, #24
   15858:	d4b1      	bmi.n	157be <ccs811_init+0xce>
   1585a:	e7ab      	b.n	157b4 <ccs811_init+0xc4>
   1585c:	0001fb17 	.word	0x0001fb17

00015860 <hts221_channel_get>:
};

static int hts221_channel_get(const struct device *dev,
			      enum sensor_channel chan,
			      struct sensor_value *val)
{
   15860:	b530      	push	{r4, r5, lr}

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   15862:	290d      	cmp	r1, #13
	struct hts221_data *data = dev->data;
   15864:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   15866:	d120      	bne.n	158aa <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   15868:	88c4      	ldrh	r4, [r0, #6]
			   (data->t_sample - data->t0_out) /
   1586a:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   1586e:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   15870:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   15874:	1b1b      	subs	r3, r3, r4
			   (data->t_sample - data->t0_out) /
   15876:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   15878:	434b      	muls	r3, r1
			   (data->t1_out - data->t0_out) +
   1587a:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   1587e:	1b49      	subs	r1, r1, r5
			   (data->t_sample - data->t0_out) /
   15880:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   15884:	4423      	add	r3, r4
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   15886:	2b00      	cmp	r3, #0
   15888:	4619      	mov	r1, r3
   1588a:	bfb8      	it	lt
   1588c:	1dd9      	addlt	r1, r3, #7
		val->val2 = (conv_val % 8) * (1000000 / 8);
   1588e:	4258      	negs	r0, r3
   15890:	f000 0007 	and.w	r0, r0, #7
   15894:	f003 0307 	and.w	r3, r3, #7
   15898:	bf58      	it	pl
   1589a:	4243      	negpl	r3, r0
   1589c:	4812      	ldr	r0, [pc, #72]	; (158e8 <hts221_channel_get+0x88>)
		val->val1 = conv_val / 8;
   1589e:	10c9      	asrs	r1, r1, #3
		val->val2 = (conv_val % 8) * (1000000 / 8);
   158a0:	4343      	muls	r3, r0
   158a2:	e9c2 1300 	strd	r1, r3, [r2]
		val->val2 = (conv_val % 2) * 500000;
	} else {
		return -ENOTSUP;
	}

	return 0;
   158a6:	2000      	movs	r0, #0
}
   158a8:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   158aa:	2910      	cmp	r1, #16
   158ac:	d119      	bne.n	158e2 <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   158ae:	7904      	ldrb	r4, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   158b0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   158b4:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   158b6:	f9b0 1000 	ldrsh.w	r1, [r0]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   158ba:	1b1b      	subs	r3, r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   158bc:	1b49      	subs	r1, r1, r5
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   158be:	434b      	muls	r3, r1
			   (data->h1_t0_out - data->h0_t0_out) +
   158c0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		val->val2 = (conv_val % 2) * 500000;
   158c4:	4809      	ldr	r0, [pc, #36]	; (158ec <hts221_channel_get+0x8c>)
			   (data->h1_t0_out - data->h0_t0_out) +
   158c6:	1b49      	subs	r1, r1, r5
			   (data->rh_sample - data->h0_t0_out) /
   158c8:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   158cc:	4423      	add	r3, r4
		val->val1 = conv_val / 2;
   158ce:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
		val->val2 = (conv_val % 2) * 500000;
   158d2:	2b00      	cmp	r3, #0
   158d4:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   158d8:	ea4f 0161 	mov.w	r1, r1, asr #1
		val->val2 = (conv_val % 2) * 500000;
   158dc:	bfb8      	it	lt
   158de:	425b      	neglt	r3, r3
   158e0:	e7de      	b.n	158a0 <hts221_channel_get+0x40>
		return -ENOTSUP;
   158e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   158e6:	e7df      	b.n	158a8 <hts221_channel_get+0x48>
   158e8:	0001e848 	.word	0x0001e848
   158ec:	0007a120 	.word	0x0007a120

000158f0 <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   158f0:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   158f2:	6845      	ldr	r5, [r0, #4]
{
   158f4:	b087      	sub	sp, #28
   158f6:	4604      	mov	r4, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   158f8:	f10d 0107 	add.w	r1, sp, #7
   158fc:	4628      	mov	r0, r5
   158fe:	f003 fee6 	bl	196ce <hts221_device_id_get>
	if (status < 0) {
   15902:	2800      	cmp	r0, #0
   15904:	db05      	blt.n	15912 <hts221_init+0x22>
		LOG_ERR("Failed to read chip ID.");
		return status;
	}

	if (id != HTS221_ID) {
   15906:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1590a:	2bbc      	cmp	r3, #188	; 0xbc
   1590c:	d003      	beq.n	15916 <hts221_init+0x26>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
   1590e:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   15912:	b007      	add	sp, #28
   15914:	bd30      	pop	{r4, r5, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   15916:	492e      	ldr	r1, [pc, #184]	; (159d0 <hts221_init+0xe0>)
   15918:	4608      	mov	r0, r1
   1591a:	f004 f94f 	bl	19bbc <strcmp>
   1591e:	4603      	mov	r3, r0
   15920:	b160      	cbz	r0, 1593c <hts221_init+0x4c>
   15922:	492b      	ldr	r1, [pc, #172]	; (159d0 <hts221_init+0xe0>)
   15924:	482b      	ldr	r0, [pc, #172]	; (159d4 <hts221_init+0xe4>)
   15926:	f004 f949 	bl	19bbc <strcmp>
   1592a:	2800      	cmp	r0, #0
   1592c:	d04d      	beq.n	159ca <hts221_init+0xda>
   1592e:	4928      	ldr	r1, [pc, #160]	; (159d0 <hts221_init+0xe0>)
   15930:	4829      	ldr	r0, [pc, #164]	; (159d8 <hts221_init+0xe8>)
   15932:	f004 f943 	bl	19bbc <strcmp>
   15936:	2800      	cmp	r0, #0
   15938:	d1e9      	bne.n	1590e <hts221_init+0x1e>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
   1593a:	2302      	movs	r3, #2
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   1593c:	4a27      	ldr	r2, [pc, #156]	; (159dc <hts221_init+0xec>)
   1593e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15942:	4628      	mov	r0, r5
   15944:	7919      	ldrb	r1, [r3, #4]
   15946:	f003 fe94 	bl	19672 <hts221_data_rate_set>
	if (status < 0) {
   1594a:	2800      	cmp	r0, #0
   1594c:	dbe1      	blt.n	15912 <hts221_init+0x22>
	status = hts221_block_data_update_set(ctx, 1);
   1594e:	2101      	movs	r1, #1
   15950:	4628      	mov	r0, r5
   15952:	f003 fea5 	bl	196a0 <hts221_block_data_update_set>
	if (status < 0) {
   15956:	2800      	cmp	r0, #0
   15958:	dbdb      	blt.n	15912 <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
   1595a:	2101      	movs	r1, #1
   1595c:	4628      	mov	r0, r5
   1595e:	f003 febd 	bl	196dc <hts221_power_on_set>
	if (status < 0) {
   15962:	2800      	cmp	r0, #0
   15964:	dbd5      	blt.n	15912 <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
   15966:	2100      	movs	r1, #0
   15968:	2063      	movs	r0, #99	; 0x63
   1596a:	f002 ff57 	bl	1881c <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   1596e:	6860      	ldr	r0, [r4, #4]
	struct hts221_data *data = dev->data;
   15970:	6925      	ldr	r5, [r4, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   15972:	2310      	movs	r3, #16
   15974:	aa02      	add	r2, sp, #8
   15976:	21b0      	movs	r1, #176	; 0xb0
   15978:	f003 fe6f 	bl	1965a <hts221_read_reg>
	if (status < 0) {
   1597c:	2800      	cmp	r0, #0
   1597e:	dbc8      	blt.n	15912 <hts221_init+0x22>
	data->h0_rh_x2 = buf[0];
   15980:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   15984:	80ab      	strh	r3, [r5, #4]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   15986:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1598a:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1598e:	0219      	lsls	r1, r3, #8
   15990:	f401 7140 	and.w	r1, r1, #768	; 0x300
   15994:	430a      	orrs	r2, r1
   15996:	80ea      	strh	r2, [r5, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   15998:	019b      	lsls	r3, r3, #6
   1599a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1599e:	f403 7340 	and.w	r3, r3, #768	; 0x300
   159a2:	4313      	orrs	r3, r2
   159a4:	812b      	strh	r3, [r5, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   159a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   159aa:	816b      	strh	r3, [r5, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   159ac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   159b0:	81ab      	strh	r3, [r5, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   159b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   159b6:	81eb      	strh	r3, [r5, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   159b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   159bc:	822b      	strh	r3, [r5, #16]
	status = hts221_init_interrupt(dev);
   159be:	4620      	mov	r0, r4
   159c0:	f000 f80e 	bl	159e0 <hts221_init_interrupt>
	if (status < 0) {
   159c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   159c8:	e7a3      	b.n	15912 <hts221_init+0x22>
	for (idx = 0U; idx < ARRAY_SIZE(hts221_odrs); idx++) {
   159ca:	2301      	movs	r3, #1
   159cc:	e7b6      	b.n	1593c <hts221_init+0x4c>
   159ce:	bf00      	nop
   159d0:	0001fb2b 	.word	0x0001fb2b
   159d4:	0001fb2d 	.word	0x0001fb2d
   159d8:	0001fb2f 	.word	0x0001fb2f
   159dc:	0001f358 	.word	0x0001f358

000159e0 <hts221_init_interrupt>:
	process_drdy(data->dev);
}
#endif

int hts221_init_interrupt(const struct device *dev)
{
   159e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct hts221_data *data = dev->data;
	const struct hts221_config *cfg = dev->config;
   159e2:	6844      	ldr	r4, [r0, #4]
{
   159e4:	4605      	mov	r5, r0
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
	int status;

	if (cfg->gpio_drdy.port == NULL) {
   159e6:	69a0      	ldr	r0, [r4, #24]
   159e8:	2800      	cmp	r0, #0
   159ea:	d03e      	beq.n	15a6a <hts221_init_interrupt+0x8a>
	struct hts221_data *data = dev->data;
   159ec:	692e      	ldr	r6, [r5, #16]
   159ee:	f007 f993 	bl	1cd18 <z_device_is_ready>
		LOG_DBG("gpio_drdy not defined in DT");
		return 0;
	}

	if (!device_is_ready(cfg->gpio_drdy.port)) {
   159f2:	2800      	cmp	r0, #0
   159f4:	d03b      	beq.n	15a6e <hts221_init_interrupt+0x8e>
		LOG_ERR("device %s is not ready", cfg->gpio_drdy.port->name);
		return -ENODEV;
	}

	data->dev = dev;
   159f6:	6175      	str	r5, [r6, #20]
				  spec->dt_flags | extra_flags);
   159f8:	8be3      	ldrh	r3, [r4, #30]
	return gpio_pin_configure(spec->port,
   159fa:	69a0      	ldr	r0, [r4, #24]
				  spec->pin,
   159fc:	7f21      	ldrb	r1, [r4, #28]
	return gpio_pin_configure(spec->port,
   159fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
   15a02:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   15a06:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   15a0a:	f8dc 7000 	ldr.w	r7, [ip]
   15a0e:	f013 0f01 	tst.w	r3, #1
   15a12:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   15a16:	fa03 f301 	lsl.w	r3, r3, r1
   15a1a:	bf14      	ite	ne
   15a1c:	433b      	orrne	r3, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15a1e:	ea27 0303 	biceq.w	r3, r7, r3
   15a22:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
   15a26:	f8de 3000 	ldr.w	r3, [lr]
   15a2a:	4798      	blx	r3

	/* setup data ready gpio interrupt */
	status = gpio_pin_configure_dt(&cfg->gpio_drdy, GPIO_INPUT);
	if (status < 0) {
   15a2c:	2800      	cmp	r0, #0
   15a2e:	db1d      	blt.n	15a6c <hts221_init_interrupt+0x8c>
		return status;
	}

	gpio_init_callback(&data->drdy_cb,
			   hts221_drdy_callback,
			   BIT(cfg->gpio_drdy.pin));
   15a30:	7f23      	ldrb	r3, [r4, #28]
	callback->handler = handler;
   15a32:	4a12      	ldr	r2, [pc, #72]	; (15a7c <hts221_init_interrupt+0x9c>)
   15a34:	2701      	movs	r7, #1
   15a36:	fa07 f303 	lsl.w	r3, r7, r3
	callback->pin_mask = pin_mask;
   15a3a:	e9c6 2307 	strd	r2, r3, [r6, #28]

	status = gpio_add_callback(cfg->gpio_drdy.port, &data->drdy_cb);
   15a3e:	69a0      	ldr	r0, [r4, #24]
	if (api->manage_callback == NULL) {
   15a40:	6883      	ldr	r3, [r0, #8]
   15a42:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->drdy_cb,
   15a44:	f106 0118 	add.w	r1, r6, #24
   15a48:	b1a3      	cbz	r3, 15a74 <hts221_init_interrupt+0x94>
	return api->manage_callback(port, callback, true);
   15a4a:	463a      	mov	r2, r7
   15a4c:	4798      	blx	r3
	if (status < 0) {
   15a4e:	2800      	cmp	r0, #0
   15a50:	db0c      	blt.n	15a6c <hts221_init_interrupt+0x8c>
		LOG_ERR("Could not set gpio callback.");
		return status;
	}

	/* enable data-ready interrupt */
	status = hts221_drdy_on_int_set(ctx, 1);
   15a52:	4639      	mov	r1, r7
   15a54:	4620      	mov	r0, r4
   15a56:	f003 fe58 	bl	1970a <hts221_drdy_on_int_set>
	if (status < 0) {
   15a5a:	2800      	cmp	r0, #0
   15a5c:	db06      	blt.n	15a6c <hts221_init_interrupt+0x8c>
			CONFIG_HTS221_THREAD_STACK_SIZE,
			(k_thread_entry_t)hts221_thread, data,
			NULL, NULL, K_PRIO_COOP(CONFIG_HTS221_THREAD_PRIORITY),
			0, K_NO_WAIT);
#elif defined(CONFIG_HTS221_TRIGGER_GLOBAL_THREAD)
	data->work.handler = hts221_work_cb;
   15a5e:	4b08      	ldr	r3, [pc, #32]	; (15a80 <hts221_init_interrupt+0xa0>)
   15a60:	6333      	str	r3, [r6, #48]	; 0x30
#endif

	setup_drdy(dev, true);
   15a62:	6868      	ldr	r0, [r5, #4]
   15a64:	4639      	mov	r1, r7
   15a66:	f006 fdce 	bl	1c606 <setup_drdy.isra.0>
		return 0;
   15a6a:	2000      	movs	r0, #0

	return 0;
}
   15a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   15a6e:	f06f 0012 	mvn.w	r0, #18
   15a72:	e7fb      	b.n	15a6c <hts221_init_interrupt+0x8c>
		return -ENOTSUP;
   15a74:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15a78:	e7f8      	b.n	15a6c <hts221_init_interrupt+0x8c>
   15a7a:	bf00      	nop
   15a7c:	0001c641 	.word	0x0001c641
   15a80:	0001c65d 	.word	0x0001c65d

00015a84 <lis2dh_channel_get>:
{
   15a84:	b570      	push	{r4, r5, r6, lr}
   15a86:	2903      	cmp	r1, #3
	struct lis2dh_data *lis2dh = dev->data;
   15a88:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   15a8a:	d81c      	bhi.n	15ac6 <lis2dh_channel_get+0x42>
   15a8c:	4b0f      	ldr	r3, [pc, #60]	; (15acc <lis2dh_channel_get+0x48>)
   15a8e:	5658      	ldrsb	r0, [r3, r1]
   15a90:	4b0f      	ldr	r3, [pc, #60]	; (15ad0 <lis2dh_channel_get+0x4c>)
   15a92:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   15a94:	490f      	ldr	r1, [pc, #60]	; (15ad4 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   15a96:	42b0      	cmp	r0, r6
   15a98:	f102 0208 	add.w	r2, r2, #8
   15a9c:	dd01      	ble.n	15aa2 <lis2dh_channel_get+0x1e>
	return 0;
   15a9e:	2000      	movs	r0, #0
}
   15aa0:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   15aa2:	1d03      	adds	r3, r0, #4
   15aa4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   15aa8:	6925      	ldr	r5, [r4, #16]
   15aaa:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   15aae:	111b      	asrs	r3, r3, #4
   15ab0:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   15ab2:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   15ab6:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   15aba:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   15abe:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   15ac2:	3001      	adds	r0, #1
   15ac4:	e7e7      	b.n	15a96 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   15ac6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15aca:	e7e9      	b.n	15aa0 <lis2dh_channel_get+0x1c>
   15acc:	0001fb49 	.word	0x0001fb49
   15ad0:	0001fb45 	.word	0x0001fb45
   15ad4:	000f4240 	.word	0x000f4240

00015ad8 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   15ad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   15ada:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
   15adc:	6905      	ldr	r5, [r0, #16]
	int status;
	uint8_t id;
	uint8_t raw[6];

	status = cfg->bus_init(dev);
   15ade:	6833      	ldr	r3, [r6, #0]
{
   15ae0:	4604      	mov	r4, r0
	status = cfg->bus_init(dev);
   15ae2:	4798      	blx	r3
	if (status < 0) {
   15ae4:	2800      	cmp	r0, #0
   15ae6:	db2e      	blt.n	15b46 <lis2dh_init+0x6e>
		return status;
	}

	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   15ae8:	686b      	ldr	r3, [r5, #4]
   15aea:	f10d 0207 	add.w	r2, sp, #7
   15aee:	689b      	ldr	r3, [r3, #8]
   15af0:	210f      	movs	r1, #15
   15af2:	4620      	mov	r0, r4
   15af4:	4798      	blx	r3
	if (status < 0) {
   15af6:	2800      	cmp	r0, #0
   15af8:	db25      	blt.n	15b46 <lis2dh_init+0x6e>
		LOG_ERR("Failed to read chip id.");
		return status;
	}

	if (id != LIS2DH_CHIP_ID) {
   15afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15afe:	2b33      	cmp	r3, #51	; 0x33
   15b00:	d13f      	bne.n	15b82 <lis2dh_init+0xaa>
		LOG_ERR("Invalid chip ID: %02x\n", id);
		return -EINVAL;
	}

	/* Fix LSM303AGR_ACCEL device scale values */
	if (cfg->hw.is_lsm303agr_dev) {
   15b02:	7b32      	ldrb	r2, [r6, #12]
   15b04:	07d3      	lsls	r3, r2, #31
   15b06:	d50b      	bpl.n	15b20 <lis2dh_init+0x48>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   15b08:	4b1f      	ldr	r3, [pc, #124]	; (15b88 <lis2dh_init+0xb0>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   15b0a:	f644 1116 	movw	r1, #18710	; 0x4916
   15b0e:	f242 408b 	movw	r0, #9355	; 0x248b
   15b12:	e9c3 0100 	strd	r0, r1, [r3]
		lis2dh_reg_val_to_scale[2] = ACCEL_SCALE(6252);
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   15b16:	491d      	ldr	r1, [pc, #116]	; (15b8c <lis2dh_init+0xb4>)
   15b18:	f249 262d 	movw	r6, #37421	; 0x922d
   15b1c:	e9c3 6102 	strd	r6, r1, [r3, #8]
	}

	if (cfg->hw.disc_pull_up) {
   15b20:	0793      	lsls	r3, r2, #30
   15b22:	d412      	bmi.n	15b4a <lis2dh_init+0x72>
	/* Initialize control register ctrl1 to ctrl 6 to default boot values
	 * to avoid warm start/reset issues as the accelerometer has no reset
	 * pin. Register values are retained if power is not removed.
	 * Default values see LIS2DH documentation page 30, chapter 6.
	 */
	(void)memset(raw, 0, sizeof(raw));
   15b24:	2206      	movs	r2, #6
   15b26:	2100      	movs	r1, #0
   15b28:	a802      	add	r0, sp, #8
   15b2a:	f004 f86e 	bl	19c0a <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   15b2e:	2307      	movs	r3, #7
   15b30:	f88d 3008 	strb.w	r3, [sp, #8]

	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   15b34:	686b      	ldr	r3, [r5, #4]
   15b36:	aa02      	add	r2, sp, #8
   15b38:	685e      	ldr	r6, [r3, #4]
   15b3a:	2120      	movs	r1, #32
   15b3c:	2306      	movs	r3, #6
   15b3e:	4620      	mov	r0, r4
   15b40:	47b0      	blx	r6
					   sizeof(raw));

	if (status < 0) {
   15b42:	2800      	cmp	r0, #0
   15b44:	da0b      	bge.n	15b5e <lis2dh_init+0x86>

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   15b46:	b004      	add	sp, #16
   15b48:	bd70      	pop	{r4, r5, r6, pc}
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   15b4a:	686b      	ldr	r3, [r5, #4]
   15b4c:	691e      	ldr	r6, [r3, #16]
   15b4e:	2380      	movs	r3, #128	; 0x80
   15b50:	461a      	mov	r2, r3
   15b52:	211e      	movs	r1, #30
   15b54:	4620      	mov	r0, r4
   15b56:	47b0      	blx	r6
		if (status < 0) {
   15b58:	2800      	cmp	r0, #0
   15b5a:	dae3      	bge.n	15b24 <lis2dh_init+0x4c>
   15b5c:	e7f3      	b.n	15b46 <lis2dh_init+0x6e>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   15b5e:	4b0a      	ldr	r3, [pc, #40]	; (15b88 <lis2dh_init+0xb0>)
   15b60:	681b      	ldr	r3, [r3, #0]
   15b62:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
   15b64:	686b      	ldr	r3, [r5, #4]
   15b66:	2200      	movs	r2, #0
   15b68:	68db      	ldr	r3, [r3, #12]
   15b6a:	2123      	movs	r1, #35	; 0x23
   15b6c:	4620      	mov	r0, r4
   15b6e:	4798      	blx	r3
	if (status < 0) {
   15b70:	2800      	cmp	r0, #0
   15b72:	dbe8      	blt.n	15b46 <lis2dh_init+0x6e>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   15b74:	686b      	ldr	r3, [r5, #4]
   15b76:	2247      	movs	r2, #71	; 0x47
   15b78:	68db      	ldr	r3, [r3, #12]
   15b7a:	2120      	movs	r1, #32
   15b7c:	4620      	mov	r0, r4
   15b7e:	4798      	blx	r3
   15b80:	e7e1      	b.n	15b46 <lis2dh_init+0x6e>
		return -EINVAL;
   15b82:	f06f 0015 	mvn.w	r0, #21
   15b86:	e7de      	b.n	15b46 <lis2dh_init+0x6e>
   15b88:	20000758 	.word	0x20000758
   15b8c:	0001b694 	.word	0x0001b694

00015b90 <lis2dh_i2c_init>:
	.write_reg  = lis2dh_i2c_write_reg,
	.update_reg = lis2dh_i2c_update_reg,
};

int lis2dh_i2c_init(const struct device *dev)
{
   15b90:	b510      	push	{r4, lr}
	struct lis2dh_data *data = dev->data;
	const struct lis2dh_config *cfg = dev->config;

	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   15b92:	6843      	ldr	r3, [r0, #4]
	struct lis2dh_data *data = dev->data;
   15b94:	6904      	ldr	r4, [r0, #16]
	if (!device_is_ready(cfg->bus_cfg.i2c.bus)) {
   15b96:	6858      	ldr	r0, [r3, #4]
   15b98:	f007 f8be 	bl	1cd18 <z_device_is_ready>
   15b9c:	b118      	cbz	r0, 15ba6 <lis2dh_i2c_init+0x16>
		LOG_ERR("Bus device is not ready");
		return -ENODEV;
	}

	data->hw_tf = &lis2dh_i2c_transfer_fn;
   15b9e:	4b03      	ldr	r3, [pc, #12]	; (15bac <lis2dh_i2c_init+0x1c>)
   15ba0:	6063      	str	r3, [r4, #4]

	return 0;
   15ba2:	2000      	movs	r0, #0
}
   15ba4:	bd10      	pop	{r4, pc}
		return -ENODEV;
   15ba6:	f06f 0012 	mvn.w	r0, #18
   15baa:	e7fb      	b.n	15ba4 <lis2dh_i2c_init+0x14>
   15bac:	0001f39c 	.word	0x0001f39c

00015bb0 <lps22hb_channel_get>:
}

static int lps22hb_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
   15bb0:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
   15bb2:	290e      	cmp	r1, #14
	struct lps22hb_data *data = dev->data;
   15bb4:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
   15bb6:	d111      	bne.n	15bdc <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
   15bb8:	6819      	ldr	r1, [r3, #0]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   15bba:	4c11      	ldr	r4, [pc, #68]	; (15c00 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
   15bbc:	130b      	asrs	r3, r1, #12
   15bbe:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   15bc0:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
   15bc4:	fb93 f0f5 	sdiv	r0, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   15bc8:	fb05 3310 	mls	r3, r5, r0, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   15bcc:	4361      	muls	r1, r4
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   15bce:	4363      	muls	r3, r4
   15bd0:	eb03 3311 	add.w	r3, r3, r1, lsr #12
   15bd4:	e9c2 0300 	strd	r0, r3, [r2]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
   15bd8:	2000      	movs	r0, #0
}
   15bda:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   15bdc:	290d      	cmp	r1, #13
   15bde:	d10c      	bne.n	15bfa <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
   15be0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	val->val1 = raw_val / 100;
   15be4:	2464      	movs	r4, #100	; 0x64
   15be6:	fb93 f1f4 	sdiv	r1, r3, r4
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   15bea:	fb04 3311 	mls	r3, r4, r1, r3
	val->val1 = raw_val / 100;
   15bee:	b208      	sxth	r0, r1
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   15bf0:	f242 7110 	movw	r1, #10000	; 0x2710
   15bf4:	fb13 f301 	smulbb	r3, r3, r1
}
   15bf8:	e7ec      	b.n	15bd4 <lps22hb_channel_get+0x24>
		return -ENOTSUP;
   15bfa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15bfe:	e7ec      	b.n	15bda <lps22hb_channel_get+0x2a>
   15c00:	000186a0 	.word	0x000186a0

00015c04 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   15c04:	4b01      	ldr	r3, [pc, #4]	; (15c0c <hfclk_on_callback+0x8>)
   15c06:	2201      	movs	r2, #1
   15c08:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   15c0a:	4770      	bx	lr
   15c0c:	4000c000 	.word	0x4000c000

00015c10 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   15c10:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   15c12:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   15c14:	d10b      	bne.n	15c2e <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   15c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15c18:	4906      	ldr	r1, [pc, #24]	; (15c34 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   15c1a:	4807      	ldr	r0, [pc, #28]	; (15c38 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   15c1c:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
   15c1e:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
   15c22:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
   15c26:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
   15c28:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   15c2a:	2000      	movs	r0, #0
   15c2c:	4770      	bx	lr
		return -ENOTSUP;
   15c2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   15c32:	4770      	bx	lr
   15c34:	0003d090 	.word	0x0003d090
   15c38:	000f4240 	.word	0x000f4240

00015c3c <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15c3c:	4b04      	ldr	r3, [pc, #16]	; (15c50 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   15c3e:	6900      	ldr	r0, [r0, #16]
   15c40:	2200      	movs	r2, #0
   15c42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    (void)*((volatile uint32_t *)(p_event_reg));
   15c46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
   15c4a:	f002 b8e5 	b.w	17e18 <z_impl_k_sem_give>
   15c4e:	bf00      	nop
   15c50:	4000c000 	.word	0x4000c000

00015c54 <temp_nrf5_sample_fetch>:
{
   15c54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   15c56:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   15c58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   15c5a:	b363      	cbz	r3, 15cb6 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   15c5c:	2939      	cmp	r1, #57	; 0x39
   15c5e:	d001      	beq.n	15c64 <temp_nrf5_sample_fetch+0x10>
   15c60:	290c      	cmp	r1, #12
   15c62:	d12b      	bne.n	15cbc <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
   15c64:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   15c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15c70:	4630      	mov	r0, r6
   15c72:	f001 ffe7 	bl	17c44 <z_impl_k_mutex_lock>
	*notify = (struct sys_notify){
   15c76:	4b13      	ldr	r3, [pc, #76]	; (15cc4 <temp_nrf5_sample_fetch+0x70>)
   15c78:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   15c7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   15c7c:	2303      	movs	r3, #3
   15c7e:	2400      	movs	r4, #0
   15c80:	4669      	mov	r1, sp
   15c82:	9403      	str	r4, [sp, #12]
   15c84:	9302      	str	r3, [sp, #8]
   15c86:	f003 fba4 	bl	193d2 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   15c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15c92:	4628      	mov	r0, r5
   15c94:	f002 f8e6 	bl	17e64 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   15c98:	6b28      	ldr	r0, [r5, #48]	; 0x30
   15c9a:	f003 fbf2 	bl	19482 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   15c9e:	4b0a      	ldr	r3, [pc, #40]	; (15cc8 <temp_nrf5_sample_fetch+0x74>)
   15ca0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   15ca4:	62ea      	str	r2, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   15ca6:	2201      	movs	r2, #1
   15ca8:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
   15caa:	4630      	mov	r0, r6
   15cac:	f002 f844 	bl	17d38 <z_impl_k_mutex_unlock>
	return 0;
   15cb0:	4620      	mov	r0, r4
}
   15cb2:	b004      	add	sp, #16
   15cb4:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   15cb6:	f06f 000a 	mvn.w	r0, #10
   15cba:	e7fa      	b.n	15cb2 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
   15cbc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15cc0:	e7f7      	b.n	15cb2 <temp_nrf5_sample_fetch+0x5e>
   15cc2:	bf00      	nop
   15cc4:	00015c05 	.word	0x00015c05
   15cc8:	4000c000 	.word	0x4000c000

00015ccc <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   15ccc:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   15cce:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   15cd0:	2000      	movs	r0, #0
   15cd2:	f7fe ffcd 	bl	14c70 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   15cd6:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   15cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15cdc:	2100      	movs	r1, #0
   15cde:	4620      	mov	r0, r4
   15ce0:	f007 f9cf 	bl	1d082 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   15ce4:	f104 0018 	add.w	r0, r4, #24
   15ce8:	f007 f90d 	bl	1cf06 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   15cec:	2200      	movs	r2, #0
   15cee:	2101      	movs	r1, #1
   15cf0:	200c      	movs	r0, #12
   15cf2:	f7ed fe0d 	bl	3910 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   15cf6:	200c      	movs	r0, #12
   15cf8:	f7ed fdda 	bl	38b0 <arch_irq_enable>
    p_reg->INTENSET = mask;
   15cfc:	4b02      	ldr	r3, [pc, #8]	; (15d08 <temp_nrf5_init+0x3c>)
   15cfe:	2201      	movs	r2, #1
   15d00:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   15d04:	2000      	movs	r0, #0
   15d06:	bd10      	pop	{r4, pc}
   15d08:	4000c000 	.word	0x4000c000

00015d0c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15d0c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   15d0e:	794b      	ldrb	r3, [r1, #5]
   15d10:	2b01      	cmp	r3, #1
   15d12:	d120      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15d14:	798b      	ldrb	r3, [r1, #6]
   15d16:	2b03      	cmp	r3, #3
   15d18:	d11d      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15d1a:	79cd      	ldrb	r5, [r1, #7]
   15d1c:	b10d      	cbz	r5, 15d22 <uarte_nrfx_configure+0x16>
   15d1e:	2d01      	cmp	r5, #1
   15d20:	d119      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15d22:	790a      	ldrb	r2, [r1, #4]
   15d24:	b112      	cbz	r2, 15d2c <uarte_nrfx_configure+0x20>
   15d26:	2a02      	cmp	r2, #2
   15d28:	d115      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
   15d2a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15d2c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15d2e:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   15d30:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15d34:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   15d36:	d064      	beq.n	15e02 <uarte_nrfx_configure+0xf6>
   15d38:	d82b      	bhi.n	15d92 <uarte_nrfx_configure+0x86>
   15d3a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15d3e:	d063      	beq.n	15e08 <uarte_nrfx_configure+0xfc>
   15d40:	d814      	bhi.n	15d6c <uarte_nrfx_configure+0x60>
   15d42:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15d46:	d061      	beq.n	15e0c <uarte_nrfx_configure+0x100>
   15d48:	d808      	bhi.n	15d5c <uarte_nrfx_configure+0x50>
   15d4a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15d4e:	d060      	beq.n	15e12 <uarte_nrfx_configure+0x106>
   15d50:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15d54:	d060      	beq.n	15e18 <uarte_nrfx_configure+0x10c>
   15d56:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15d5a:	e051      	b.n	15e00 <uarte_nrfx_configure+0xf4>
   15d5c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15d60:	d05d      	beq.n	15e1e <uarte_nrfx_configure+0x112>
   15d62:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15d66:	d1f6      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15d68:	4b37      	ldr	r3, [pc, #220]	; (15e48 <uarte_nrfx_configure+0x13c>)
   15d6a:	e03c      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15d6c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15d70:	d058      	beq.n	15e24 <uarte_nrfx_configure+0x118>
   15d72:	d807      	bhi.n	15d84 <uarte_nrfx_configure+0x78>
   15d74:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15d78:	d056      	beq.n	15e28 <uarte_nrfx_configure+0x11c>
   15d7a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15d7e:	d1ea      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15d80:	4b32      	ldr	r3, [pc, #200]	; (15e4c <uarte_nrfx_configure+0x140>)
   15d82:	e030      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15d84:	f647 2412 	movw	r4, #31250	; 0x7a12
   15d88:	42a3      	cmp	r3, r4
   15d8a:	d1e4      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15d8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15d90:	e029      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15d92:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15d96:	d049      	beq.n	15e2c <uarte_nrfx_configure+0x120>
   15d98:	d813      	bhi.n	15dc2 <uarte_nrfx_configure+0xb6>
   15d9a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15d9e:	d048      	beq.n	15e32 <uarte_nrfx_configure+0x126>
   15da0:	d809      	bhi.n	15db6 <uarte_nrfx_configure+0xaa>
   15da2:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   15da6:	42a3      	cmp	r3, r4
   15da8:	d045      	beq.n	15e36 <uarte_nrfx_configure+0x12a>
   15daa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15dae:	d1d2      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15db0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15db4:	e017      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15db6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15dba:	d1cc      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15dbc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15dc0:	e011      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15dc2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15dc6:	d039      	beq.n	15e3c <uarte_nrfx_configure+0x130>
   15dc8:	d808      	bhi.n	15ddc <uarte_nrfx_configure+0xd0>
   15dca:	4c21      	ldr	r4, [pc, #132]	; (15e50 <uarte_nrfx_configure+0x144>)
   15dcc:	42a3      	cmp	r3, r4
   15dce:	d038      	beq.n	15e42 <uarte_nrfx_configure+0x136>
   15dd0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15dd4:	d1bf      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15dd6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15dda:	e004      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15ddc:	4c1d      	ldr	r4, [pc, #116]	; (15e54 <uarte_nrfx_configure+0x148>)
   15dde:	42a3      	cmp	r3, r4
   15de0:	d1b9      	bne.n	15d56 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15de2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   15de6:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15de8:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   15dec:	6843      	ldr	r3, [r0, #4]
   15dee:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   15df0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15df2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   15df6:	c903      	ldmia	r1, {r0, r1}
   15df8:	1d23      	adds	r3, r4, #4
   15dfa:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15dfe:	2000      	movs	r0, #0
}
   15e00:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15e02:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15e06:	e7ee      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15e08:	4b13      	ldr	r3, [pc, #76]	; (15e58 <uarte_nrfx_configure+0x14c>)
   15e0a:	e7ec      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15e0c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15e10:	e7e9      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   15e12:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15e16:	e7e6      	b.n	15de6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15e18:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15e1c:	e7e3      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15e1e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15e22:	e7e0      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15e24:	4b0d      	ldr	r3, [pc, #52]	; (15e5c <uarte_nrfx_configure+0x150>)
   15e26:	e7de      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15e28:	4b0d      	ldr	r3, [pc, #52]	; (15e60 <uarte_nrfx_configure+0x154>)
   15e2a:	e7dc      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15e2c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15e30:	e7d9      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15e32:	4b0c      	ldr	r3, [pc, #48]	; (15e64 <uarte_nrfx_configure+0x158>)
   15e34:	e7d7      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15e36:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15e3a:	e7d4      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15e3c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15e40:	e7d1      	b.n	15de6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15e42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15e46:	e7ce      	b.n	15de6 <uarte_nrfx_configure+0xda>
   15e48:	0013b000 	.word	0x0013b000
   15e4c:	004ea000 	.word	0x004ea000
   15e50:	0003d090 	.word	0x0003d090
   15e54:	000f4240 	.word	0x000f4240
   15e58:	00275000 	.word	0x00275000
   15e5c:	0075c000 	.word	0x0075c000
   15e60:	003af000 	.word	0x003af000
   15e64:	013a9000 	.word	0x013a9000

00015e68 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_HAS_HW_NRF_UARTE0
UART_NRF_UARTE_DEVICE(0);
   15e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15e6c:	4680      	mov	r8, r0
   15e6e:	2200      	movs	r2, #0
   15e70:	2101      	movs	r1, #1
   15e72:	2002      	movs	r0, #2
   15e74:	f7ed fd4c 	bl	3910 <z_arm_irq_priority_set>
   15e78:	2002      	movs	r0, #2
   15e7a:	f7ed fd19 	bl	38b0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   15e7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   15e82:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   15e86:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15e88:	2100      	movs	r1, #0
   15e8a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   15e8e:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   15e92:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   15e96:	aa01      	add	r2, sp, #4
   15e98:	4648      	mov	r0, r9
   15e9a:	f006 f972 	bl	1c182 <pinctrl_lookup_state>
	if (ret < 0) {
   15e9e:	1e05      	subs	r5, r0, #0
   15ea0:	db4c      	blt.n	15f3c <uarte_0_init+0xd4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   15ea2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   15ea4:	f8d9 2000 	ldr.w	r2, [r9]
   15ea8:	7919      	ldrb	r1, [r3, #4]
   15eaa:	6818      	ldr	r0, [r3, #0]
   15eac:	f7ff fb60 	bl	15570 <pinctrl_configure_pins>
	if (err < 0) {
   15eb0:	1e05      	subs	r5, r0, #0
   15eb2:	db43      	blt.n	15f3c <uarte_0_init+0xd4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   15eb4:	1d31      	adds	r1, r6, #4
   15eb6:	4640      	mov	r0, r8
   15eb8:	f7ff ff28 	bl	15d0c <uarte_nrfx_configure>
	if (err) {
   15ebc:	4605      	mov	r5, r0
   15ebe:	2800      	cmp	r0, #0
   15ec0:	d13c      	bne.n	15f3c <uarte_0_init+0xd4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   15ec2:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   15ec4:	0799      	lsls	r1, r3, #30
   15ec6:	d512      	bpl.n	15eee <uarte_0_init+0x86>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   15ec8:	f106 0018 	add.w	r0, r6, #24
   15ecc:	f001 f8d2 	bl	17074 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   15ed0:	4b1e      	ldr	r3, [pc, #120]	; (15f4c <uarte_0_init+0xe4>)
   15ed2:	4298      	cmp	r0, r3
   15ed4:	d136      	bne.n	15f44 <uarte_0_init+0xdc>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   15ed6:	7e30      	ldrb	r0, [r6, #24]
   15ed8:	f104 020c 	add.w	r2, r4, #12
   15edc:	f504 7190 	add.w	r1, r4, #288	; 0x120
   15ee0:	f006 fe10 	bl	1cb04 <nrfx_gppi_channel_endpoints_setup>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15ee4:	7e33      	ldrb	r3, [r6, #24]
   15ee6:	2001      	movs	r0, #1
   15ee8:	4098      	lsls	r0, r3
   15eea:	f000 fc53 	bl	16794 <nrfx_gppi_channels_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15eee:	2308      	movs	r3, #8
   15ef0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   15ef4:	7a3b      	ldrb	r3, [r7, #8]
   15ef6:	b953      	cbnz	r3, 15f0e <uarte_0_init+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ef8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   15efc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
{
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.RX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.RX.MAXCNT = length;
#else
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15f00:	6973      	ldr	r3, [r6, #20]
   15f02:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15f06:	2301      	movs	r3, #1
   15f08:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f0c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   15f0e:	687b      	ldr	r3, [r7, #4]
   15f10:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   15f12:	bf5c      	itt	pl
   15f14:	f44f 7380 	movpl.w	r3, #256	; 0x100
   15f18:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15f1c:	687b      	ldr	r3, [r7, #4]
   15f1e:	06db      	lsls	r3, r3, #27
   15f20:	bf44      	itt	mi
   15f22:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   15f26:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15f2a:	6933      	ldr	r3, [r6, #16]
   15f2c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15f30:	2300      	movs	r3, #0
   15f32:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f36:	2301      	movs	r3, #1
   15f38:	60a3      	str	r3, [r4, #8]
   15f3a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15f3c:	4628      	mov	r0, r5
   15f3e:	b003      	add	sp, #12
   15f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   15f44:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   15f48:	e7f8      	b.n	15f3c <uarte_0_init+0xd4>
   15f4a:	bf00      	nop
   15f4c:	0bad0000 	.word	0x0bad0000

00015f50 <uarte_nrfx_poll_out>:
{
   15f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f52:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   15f54:	6907      	ldr	r7, [r0, #16]
{
   15f56:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15f58:	f006 ffbb 	bl	1ced2 <k_is_in_isr>
   15f5c:	b9b0      	cbnz	r0, 15f8c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   15f5e:	4b2e      	ldr	r3, [pc, #184]	; (16018 <uarte_nrfx_poll_out+0xc8>)
   15f60:	781b      	ldrb	r3, [r3, #0]
   15f62:	b19b      	cbz	r3, 15f8c <uarte_nrfx_poll_out+0x3c>
{
   15f64:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   15f66:	6860      	ldr	r0, [r4, #4]
   15f68:	f006 fd61 	bl	1ca2e <is_tx_ready.isra.0>
   15f6c:	bb00      	cbnz	r0, 15fb0 <uarte_nrfx_poll_out+0x60>
   15f6e:	2001      	movs	r0, #1
   15f70:	f006 fdc6 	bl	1cb00 <nrfx_busy_wait>
   15f74:	3e01      	subs	r6, #1
   15f76:	d1f6      	bne.n	15f66 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   15f78:	2100      	movs	r1, #0
   15f7a:	2021      	movs	r0, #33	; 0x21
   15f7c:	f002 fc4e 	bl	1881c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15f80:	e7f0      	b.n	15f64 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   15f82:	f386 8811 	msr	BASEPRI, r6
   15f86:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15f8a:	e7f5      	b.n	15f78 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   15f8c:	f04f 0320 	mov.w	r3, #32
   15f90:	f3ef 8611 	mrs	r6, BASEPRI
   15f94:	f383 8812 	msr	BASEPRI_MAX, r3
   15f98:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   15f9c:	6860      	ldr	r0, [r4, #4]
   15f9e:	4631      	mov	r1, r6
   15fa0:	f006 fd45 	bl	1ca2e <is_tx_ready.isra.0>
   15fa4:	b990      	cbnz	r0, 15fcc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   15fa6:	f386 8811 	msr	BASEPRI, r6
   15faa:	f3bf 8f6f 	isb	sy
}
   15fae:	e7ed      	b.n	15f8c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   15fb0:	f04f 0320 	mov.w	r3, #32
   15fb4:	f3ef 8611 	mrs	r6, BASEPRI
   15fb8:	f383 8812 	msr	BASEPRI_MAX, r3
   15fbc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   15fc0:	6860      	ldr	r0, [r4, #4]
   15fc2:	4631      	mov	r1, r6
   15fc4:	f006 fd33 	bl	1ca2e <is_tx_ready.isra.0>
   15fc8:	2800      	cmp	r0, #0
   15fca:	d0da      	beq.n	15f82 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   15fcc:	693b      	ldr	r3, [r7, #16]
   15fce:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   15fd0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15fd2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   15fd4:	6813      	ldr	r3, [r2, #0]
   15fd6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15fda:	2001      	movs	r0, #1
   15fdc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fe0:	2000      	movs	r0, #0
   15fe2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   15fe6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   15fea:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15fee:	6852      	ldr	r2, [r2, #4]
   15ff0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   15ff4:	06d2      	lsls	r2, r2, #27
   15ff6:	d508      	bpl.n	1600a <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   15ff8:	6862      	ldr	r2, [r4, #4]
   15ffa:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15ffc:	2008      	movs	r0, #8
   15ffe:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   16002:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   16006:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1600a:	2201      	movs	r2, #1
   1600c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1600e:	f381 8811 	msr	BASEPRI, r1
   16012:	f3bf 8f6f 	isb	sy
}
   16016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16018:	20002b57 	.word	0x20002b57

0001601c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1601c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1601e:	2301      	movs	r3, #1
   16020:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16022:	4a0e      	ldr	r2, [pc, #56]	; (1605c <compare_int_lock+0x40>)
   16024:	f3bf 8f5b 	dmb	ish
   16028:	43dc      	mvns	r4, r3
   1602a:	e852 1f00 	ldrex	r1, [r2]
   1602e:	ea01 0504 	and.w	r5, r1, r4
   16032:	e842 5600 	strex	r6, r5, [r2]
   16036:	2e00      	cmp	r6, #0
   16038:	d1f7      	bne.n	1602a <compare_int_lock+0xe>
   1603a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   1603e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16042:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   16044:	4806      	ldr	r0, [pc, #24]	; (16060 <compare_int_lock+0x44>)
   16046:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1604a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1604e:	f3bf 8f6f 	isb	sy

	barrier_dmem_fence_full();
	barrier_isync_fence_full();

	return prev & BIT(chan);
   16052:	420b      	tst	r3, r1
}
   16054:	bf14      	ite	ne
   16056:	2001      	movne	r0, #1
   16058:	2000      	moveq	r0, #0
   1605a:	bd70      	pop	{r4, r5, r6, pc}
   1605c:	20002598 	.word	0x20002598
   16060:	40011000 	.word	0x40011000

00016064 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   16064:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   16066:	490e      	ldr	r1, [pc, #56]	; (160a0 <sys_clock_timeout_handler+0x3c>)
   16068:	e9d1 3400 	ldrd	r3, r4, [r1]
   1606c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1606e:	18c3      	adds	r3, r0, r3
   16070:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   16074:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   16078:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1607c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   16080:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   16084:	d209      	bcs.n	1609a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   16086:	4b07      	ldr	r3, [pc, #28]	; (160a4 <sys_clock_timeout_handler+0x40>)
   16088:	681b      	ldr	r3, [r3, #0]
   1608a:	0a1a      	lsrs	r2, r3, #8
   1608c:	061b      	lsls	r3, r3, #24
   1608e:	199c      	adds	r4, r3, r6
   16090:	4b05      	ldr	r3, [pc, #20]	; (160a8 <sys_clock_timeout_handler+0x44>)
   16092:	f142 0500 	adc.w	r5, r2, #0
   16096:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
   1609a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1609c:	f002 bd26 	b.w	18aec <sys_clock_announce>
   160a0:	20000fb8 	.word	0x20000fb8
   160a4:	2000259c 	.word	0x2000259c
   160a8:	20000fc0 	.word	0x20000fc0

000160ac <compare_int_unlock>:
	if (key) {
   160ac:	b311      	cbz	r1, 160f4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   160ae:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   160b2:	2301      	movs	r3, #1
   160b4:	4a10      	ldr	r2, [pc, #64]	; (160f8 <compare_int_unlock+0x4c>)
   160b6:	4083      	lsls	r3, r0
   160b8:	e852 cf00 	ldrex	ip, [r2]
   160bc:	ea4c 0c03 	orr.w	ip, ip, r3
   160c0:	e842 c100 	strex	r1, ip, [r2]
   160c4:	2900      	cmp	r1, #0
   160c6:	d1f7      	bne.n	160b8 <compare_int_unlock+0xc>
   160c8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   160cc:	4a0b      	ldr	r2, [pc, #44]	; (160fc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   160ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   160d2:	4083      	lsls	r3, r0
   160d4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   160d8:	4b09      	ldr	r3, [pc, #36]	; (16100 <compare_int_unlock+0x54>)
   160da:	f3bf 8f5b 	dmb	ish
   160de:	681b      	ldr	r3, [r3, #0]
   160e0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   160e4:	40c3      	lsrs	r3, r0
   160e6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160e8:	bf42      	ittt	mi
   160ea:	4b06      	ldrmi	r3, [pc, #24]	; (16104 <compare_int_unlock+0x58>)
   160ec:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   160f0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   160f4:	4770      	bx	lr
   160f6:	bf00      	nop
   160f8:	20002598 	.word	0x20002598
   160fc:	40011000 	.word	0x40011000
   16100:	20002594 	.word	0x20002594
   16104:	e000e100 	.word	0xe000e100

00016108 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   16108:	4b0d      	ldr	r3, [pc, #52]	; (16140 <z_nrf_rtc_timer_read+0x38>)
   1610a:	6818      	ldr	r0, [r3, #0]
   1610c:	0a01      	lsrs	r1, r0, #8
   1610e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   16110:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   16114:	4b0b      	ldr	r3, [pc, #44]	; (16144 <z_nrf_rtc_timer_read+0x3c>)
   16116:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1611a:	1818      	adds	r0, r3, r0
   1611c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   16120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16124:	d20a      	bcs.n	1613c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   16126:	4b08      	ldr	r3, [pc, #32]	; (16148 <z_nrf_rtc_timer_read+0x40>)
   16128:	e9d3 2300 	ldrd	r2, r3, [r3]
   1612c:	4290      	cmp	r0, r2
   1612e:	eb71 0303 	sbcs.w	r3, r1, r3
   16132:	d203      	bcs.n	1613c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   16134:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   16138:	f141 0100 	adc.w	r1, r1, #0
}
   1613c:	4770      	bx	lr
   1613e:	bf00      	nop
   16140:	2000259c 	.word	0x2000259c
   16144:	40011000 	.word	0x40011000
   16148:	20000fc0 	.word	0x20000fc0

0001614c <compare_set>:
{
   1614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16150:	b085      	sub	sp, #20
   16152:	4616      	mov	r6, r2
   16154:	461f      	mov	r7, r3
   16156:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
   1615a:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1615c:	f7ff ff5e 	bl	1601c <compare_int_lock>
   16160:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   16162:	f7ff ffd1 	bl	16108 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   16166:	42b0      	cmp	r0, r6
   16168:	eb71 0307 	sbcs.w	r3, r1, r7
   1616c:	d254      	bcs.n	16218 <compare_set+0xcc>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1616e:	4b3e      	ldr	r3, [pc, #248]	; (16268 <compare_set+0x11c>)
   16170:	1a30      	subs	r0, r6, r0
   16172:	eb67 0101 	sbc.w	r1, r7, r1
   16176:	4298      	cmp	r0, r3
   16178:	f171 0100 	sbcs.w	r1, r1, #0
   1617c:	d24f      	bcs.n	1621e <compare_set+0xd2>
		if (target_time != cc_data[chan].target_time) {
   1617e:	4b3b      	ldr	r3, [pc, #236]	; (1626c <compare_set+0x120>)
   16180:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   16184:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   16188:	429f      	cmp	r7, r3
   1618a:	bf08      	it	eq
   1618c:	4296      	cmpeq	r6, r2
   1618e:	d05e      	beq.n	1624e <compare_set+0x102>
    p_reg->EVTENCLR = mask;
   16190:	4937      	ldr	r1, [pc, #220]	; (16270 <compare_set+0x124>)
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   16192:	f44f 3880 	mov.w	r8, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   16196:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, NRF_RTC_CHANNEL_INT_MASK(chan));
   1619a:	fa08 f804 	lsl.w	r8, r8, r4
	return nrf_rtc_event_check(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   1619e:	00ad      	lsls	r5, r5, #2
   161a0:	f8c1 8348 	str.w	r8, [r1, #840]	; 0x348
	event_clear(chan);
   161a4:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   161a6:	b2ad      	uxth	r5, r5
   161a8:	f006 fc8b 	bl	1cac2 <event_clear>
	return absolute_time & COUNTER_MAX;
   161ac:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   161b0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   161b4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   161b8:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   161bc:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   161be:	f04f 0903 	mov.w	r9, #3
    p_reg->CC[ch] = cc_val;
   161c2:	9302      	str	r3, [sp, #8]
   161c4:	9a02      	ldr	r2, [sp, #8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   161c6:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
   161ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    p_reg->EVTENSET = mask;
   161ce:	f8c1 8344 	str.w	r8, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   161d2:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   161d6:	4a27      	ldr	r2, [pc, #156]	; (16274 <compare_set+0x128>)
	return (a - b) & COUNTER_MAX;
   161d8:	f06f 0002 	mvn.w	r0, #2
   161dc:	1ac0      	subs	r0, r0, r3
   161de:	4460      	add	r0, ip
   161e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   161e4:	4290      	cmp	r0, r2
   161e6:	d932      	bls.n	1624e <compare_set+0x102>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   161e8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   161ea:	b168      	cbz	r0, 16208 <compare_set+0xbc>
     return p_reg->COUNTER;
   161ec:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   161f0:	9303      	str	r3, [sp, #12]
   161f2:	eba3 000b 	sub.w	r0, r3, fp
   161f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   161fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   161fe:	d926      	bls.n	1624e <compare_set+0x102>
					event_clear(chan);
   16200:	4620      	mov	r0, r4
   16202:	f006 fc5e 	bl	1cac2 <event_clear>
					if (exact) {
   16206:	9b03      	ldr	r3, [sp, #12]
			} else if (exact) {
   16208:	f1ba 0f00 	cmp.w	sl, #0
   1620c:	d107      	bne.n	1621e <compare_set+0xd2>
			cc_val = now + cc_inc;
   1620e:	eb09 0c03 	add.w	ip, r9, r3
			cc_inc++;
   16212:	f109 0901 	add.w	r9, r9, #1
	for (;;) {
   16216:	e7d5      	b.n	161c4 <compare_set+0x78>
	} else if (!exact) {
   16218:	f1ba 0f00 	cmp.w	sl, #0
   1621c:	d009      	beq.n	16232 <compare_set+0xe6>
			return -EINVAL;
   1621e:	f06f 0515 	mvn.w	r5, #21
	compare_int_unlock(chan, key);
   16222:	4620      	mov	r0, r4
   16224:	9901      	ldr	r1, [sp, #4]
   16226:	f7ff ff41 	bl	160ac <compare_int_unlock>
}
   1622a:	4628      	mov	r0, r5
   1622c:	b005      	add	sp, #20
   1622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
   16232:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16234:	4a10      	ldr	r2, [pc, #64]	; (16278 <compare_set+0x12c>)
   16236:	f3bf 8f5b 	dmb	ish
   1623a:	40a3      	lsls	r3, r4
   1623c:	e852 0f00 	ldrex	r0, [r2]
   16240:	4318      	orrs	r0, r3
   16242:	e842 0100 	strex	r1, r0, [r2]
   16246:	2900      	cmp	r1, #0
   16248:	d1f8      	bne.n	1623c <compare_set+0xf0>
   1624a:	f3bf 8f5b 	dmb	ish
		cc_data[chan].target_time = target_time;
   1624e:	4907      	ldr	r1, [pc, #28]	; (1626c <compare_set+0x120>)
		cc_data[chan].callback = handler;
   16250:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc_data[chan].target_time = target_time;
   16252:	0123      	lsls	r3, r4, #4
   16254:	eb01 1204 	add.w	r2, r1, r4, lsl #4
		cc_data[chan].callback = handler;
   16258:	50c8      	str	r0, [r1, r3]
		cc_data[chan].user_context = user_data;
   1625a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1625c:	6053      	str	r3, [r2, #4]
		cc_data[chan].target_time = target_time;
   1625e:	e9c2 6702 	strd	r6, r7, [r2, #8]
		cc_data[chan].user_context = user_data;
   16262:	2500      	movs	r5, #0
   16264:	e7dd      	b.n	16222 <compare_set+0xd6>
   16266:	bf00      	nop
   16268:	00800001 	.word	0x00800001
   1626c:	20000fa8 	.word	0x20000fa8
   16270:	40011000 	.word	0x40011000
   16274:	007ffffd 	.word	0x007ffffd
   16278:	20002594 	.word	0x20002594

0001627c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1627c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1627e:	4c1c      	ldr	r4, [pc, #112]	; (162f0 <sys_clock_driver_init+0x74>)
   16280:	4b1c      	ldr	r3, [pc, #112]	; (162f4 <sys_clock_driver_init+0x78>)
   16282:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   16286:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1628a:	4b1b      	ldr	r3, [pc, #108]	; (162f8 <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
   1628c:	2500      	movs	r5, #0
   1628e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16292:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16296:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1629a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1629e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   162a2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   162a6:	4b15      	ldr	r3, [pc, #84]	; (162fc <sys_clock_driver_init+0x80>)
   162a8:	2602      	movs	r6, #2
   162aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   162ae:	2101      	movs	r1, #1
   162b0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   162b4:	2011      	movs	r0, #17
   162b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   162ba:	462a      	mov	r2, r5
   162bc:	f7ed fb28 	bl	3910 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   162c0:	2011      	movs	r0, #17
   162c2:	f7ed faf5 	bl	38b0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   162c6:	4a0e      	ldr	r2, [pc, #56]	; (16300 <sys_clock_driver_init+0x84>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   162c8:	2301      	movs	r3, #1
   162ca:	60a3      	str	r3, [r4, #8]
   162cc:	6023      	str	r3, [r4, #0]
   162ce:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
   162d0:	4b0c      	ldr	r3, [pc, #48]	; (16304 <sys_clock_driver_init+0x88>)
   162d2:	4a0d      	ldr	r2, [pc, #52]	; (16308 <sys_clock_driver_init+0x8c>)
   162d4:	9300      	str	r3, [sp, #0]
   162d6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   162da:	2300      	movs	r3, #0
   162dc:	4628      	mov	r0, r5
   162de:	f7ff ff35 	bl	1614c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   162e2:	4630      	mov	r0, r6
   162e4:	f7fe fcfc 	bl	14ce0 <z_nrf_clock_control_lf_on>

	return 0;
}
   162e8:	4628      	mov	r0, r5
   162ea:	b004      	add	sp, #16
   162ec:	bd70      	pop	{r4, r5, r6, pc}
   162ee:	bf00      	nop
   162f0:	40011000 	.word	0x40011000
   162f4:	000f0003 	.word	0x000f0003
   162f8:	20000fa8 	.word	0x20000fa8
   162fc:	e000e100 	.word	0xe000e100
   16300:	20002598 	.word	0x20002598
   16304:	00016065 	.word	0x00016065
   16308:	007fffff 	.word	0x007fffff

0001630c <rtc_nrf_isr>:
{
   1630c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   16310:	4c2f      	ldr	r4, [pc, #188]	; (163d0 <rtc_nrf_isr+0xc4>)
   16312:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   16316:	0799      	lsls	r1, r3, #30
   16318:	d50b      	bpl.n	16332 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1631a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1631e:	b143      	cbz	r3, 16332 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   16320:	4a2c      	ldr	r2, [pc, #176]	; (163d4 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16322:	2300      	movs	r3, #0
   16324:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   16328:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1632c:	6813      	ldr	r3, [r2, #0]
   1632e:	3301      	adds	r3, #1
   16330:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   16332:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
   16336:	03da      	lsls	r2, r3, #15
   16338:	d52a      	bpl.n	16390 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1633a:	f3bf 8f5b 	dmb	ish
   1633e:	4b26      	ldr	r3, [pc, #152]	; (163d8 <rtc_nrf_isr+0xcc>)
   16340:	e853 2f00 	ldrex	r2, [r3]
   16344:	f022 0101 	bic.w	r1, r2, #1
   16348:	e843 1000 	strex	r0, r1, [r3]
   1634c:	2800      	cmp	r0, #0
   1634e:	d1f7      	bne.n	16340 <rtc_nrf_isr+0x34>
   16350:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   16354:	07d3      	lsls	r3, r2, #31
   16356:	d402      	bmi.n	1635e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16358:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1635c:	b1c3      	cbz	r3, 16390 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1635e:	2500      	movs	r5, #0
   16360:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   16364:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   16368:	f7ff fece 	bl	16108 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1636c:	f04f 0320 	mov.w	r3, #32
   16370:	f3ef 8211 	mrs	r2, BASEPRI
   16374:	f383 8812 	msr	BASEPRI_MAX, r3
   16378:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1637c:	4b17      	ldr	r3, [pc, #92]	; (163dc <rtc_nrf_isr+0xd0>)
   1637e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   16382:	42b0      	cmp	r0, r6
   16384:	41b9      	sbcs	r1, r7
   16386:	d206      	bcs.n	16396 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
   16388:	f382 8811 	msr	BASEPRI, r2
   1638c:	f3bf 8f6f 	isb	sy
}
   16390:	b003      	add	sp, #12
   16392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   16396:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1639a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1639e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   163a2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   163a6:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   163a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   163ac:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   163b0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   163b4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   163b8:	f382 8811 	msr	BASEPRI, r2
   163bc:	f3bf 8f6f 	isb	sy
		if (handler) {
   163c0:	2900      	cmp	r1, #0
   163c2:	d0e5      	beq.n	16390 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
   163c4:	9000      	str	r0, [sp, #0]
   163c6:	4632      	mov	r2, r6
   163c8:	463b      	mov	r3, r7
   163ca:	4628      	mov	r0, r5
   163cc:	4788      	blx	r1
   163ce:	e7df      	b.n	16390 <rtc_nrf_isr+0x84>
   163d0:	40011000 	.word	0x40011000
   163d4:	2000259c 	.word	0x2000259c
   163d8:	20002594 	.word	0x20002594
   163dc:	20000fa8 	.word	0x20000fa8

000163e0 <sys_clock_set_timeout>:
{
   163e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   163e2:	1c43      	adds	r3, r0, #1
   163e4:	d023      	beq.n	1642e <sys_clock_set_timeout+0x4e>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   163e6:	2801      	cmp	r0, #1
   163e8:	dd23      	ble.n	16432 <sys_clock_set_timeout+0x52>
   163ea:	4a13      	ldr	r2, [pc, #76]	; (16438 <sys_clock_set_timeout+0x58>)
   163ec:	4b13      	ldr	r3, [pc, #76]	; (1643c <sys_clock_set_timeout+0x5c>)
   163ee:	4290      	cmp	r0, r2
   163f0:	bfd4      	ite	le
   163f2:	4604      	movle	r4, r0
   163f4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   163f6:	f7ff fe87 	bl	16108 <z_nrf_rtc_timer_read>
   163fa:	4b11      	ldr	r3, [pc, #68]	; (16440 <sys_clock_set_timeout+0x60>)
	if (cyc > MAX_CYCLES) {
   163fc:	490f      	ldr	r1, [pc, #60]	; (1643c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   163fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   16402:	1a80      	subs	r0, r0, r2
		cyc = 0;
   16404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   16408:	bf28      	it	cs
   1640a:	2400      	movcs	r4, #0
	cyc += unannounced;
   1640c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1640e:	428c      	cmp	r4, r1
   16410:	bf28      	it	cs
   16412:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   16414:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   16416:	490b      	ldr	r1, [pc, #44]	; (16444 <sys_clock_set_timeout+0x64>)
   16418:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1641a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   1641e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   16422:	f143 0300 	adc.w	r3, r3, #0
   16426:	f7ff fe91 	bl	1614c <compare_set>
}
   1642a:	b004      	add	sp, #16
   1642c:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1642e:	4c03      	ldr	r4, [pc, #12]	; (1643c <sys_clock_set_timeout+0x5c>)
   16430:	e7e1      	b.n	163f6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   16432:	2401      	movs	r4, #1
   16434:	e7df      	b.n	163f6 <sys_clock_set_timeout+0x16>
   16436:	bf00      	nop
   16438:	007ffffe 	.word	0x007ffffe
   1643c:	007fffff 	.word	0x007fffff
   16440:	20000fb8 	.word	0x20000fb8
   16444:	00016065 	.word	0x00016065

00016448 <sys_clock_elapsed>:
{
   16448:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1644a:	f7ff fe5d 	bl	16108 <z_nrf_rtc_timer_read>
   1644e:	4b02      	ldr	r3, [pc, #8]	; (16458 <sys_clock_elapsed+0x10>)
   16450:	681b      	ldr	r3, [r3, #0]
}
   16452:	1ac0      	subs	r0, r0, r3
   16454:	bd08      	pop	{r3, pc}
   16456:	bf00      	nop
   16458:	20000fb8 	.word	0x20000fb8

0001645c <nrf52_errata_16>:
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1645c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   16460:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            if (var1 == 0x06)
   16464:	2a06      	cmp	r2, #6
   16466:	d109      	bne.n	1647c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   16468:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1646c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   16470:	3b03      	subs	r3, #3
   16472:	2b04      	cmp	r3, #4
   16474:	d802      	bhi.n	1647c <nrf52_errata_16+0x20>
   16476:	4a02      	ldr	r2, [pc, #8]	; (16480 <nrf52_errata_16+0x24>)
   16478:	5cd0      	ldrb	r0, [r2, r3]
   1647a:	4770      	bx	lr
                        return false;
   1647c:	2000      	movs	r0, #0
}
   1647e:	4770      	bx	lr
   16480:	0001fbbe 	.word	0x0001fbbe

00016484 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   16484:	4a02      	ldr	r2, [pc, #8]	; (16490 <nvmc_wait+0xc>)
   16486:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1648a:	2b00      	cmp	r3, #0
   1648c:	d0fb      	beq.n	16486 <nvmc_wait+0x2>
}
   1648e:	4770      	bx	lr
   16490:	4001e000 	.word	0x4001e000

00016494 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   16494:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   16496:	f006 fb24 	bl	1cae2 <nrf52_errata_108>
   1649a:	b140      	cbz	r0, 164ae <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1649c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   164a0:	4a8e      	ldr	r2, [pc, #568]	; (166dc <SystemInit+0x248>)
   164a2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   164a6:	f3c3 2304 	ubfx	r3, r3, #8, #5
   164aa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   164ae:	f7ff ffd5 	bl	1645c <nrf52_errata_16>
   164b2:	b110      	cbz	r0, 164ba <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   164b4:	4b8a      	ldr	r3, [pc, #552]	; (166e0 <SystemInit+0x24c>)
   164b6:	4a8b      	ldr	r2, [pc, #556]	; (166e4 <SystemInit+0x250>)
   164b8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   164ba:	f006 fb12 	bl	1cae2 <nrf52_errata_108>
   164be:	b148      	cbz	r0, 164d4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   164c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   164c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   164c8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   164cc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   164d0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   164d4:	f7ff ffc2 	bl	1645c <nrf52_errata_16>
   164d8:	b130      	cbz	r0, 164e8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   164da:	4a83      	ldr	r2, [pc, #524]	; (166e8 <SystemInit+0x254>)
   164dc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   164e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   164e4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   164e8:	f006 fafb 	bl	1cae2 <nrf52_errata_108>
   164ec:	b140      	cbz	r0, 16500 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   164ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   164f2:	2200      	movs	r2, #0
   164f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   164f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   164fc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   16500:	f7ff ffac 	bl	1645c <nrf52_errata_16>
   16504:	b120      	cbz	r0, 16510 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   16506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1650a:	2203      	movs	r2, #3
   1650c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   16510:	f7ff ffa4 	bl	1645c <nrf52_errata_16>
   16514:	b160      	cbz	r0, 16530 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   16516:	4b75      	ldr	r3, [pc, #468]	; (166ec <SystemInit+0x258>)
   16518:	2205      	movs	r2, #5
   1651a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1651e:	2201      	movs	r2, #1
   16520:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   16524:	2200      	movs	r2, #0
   16526:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1652a:	223f      	movs	r2, #63	; 0x3f
   1652c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   16530:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16534:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   16538:	1c51      	adds	r1, r2, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1653a:	bf09      	itett	eq
   1653c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = *(uint32_t *)0x10000134ul;
   16540:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   16544:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   16548:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1654c:	bf08      	it	eq
   1654e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            if (var1 == 0x06)
   16552:	2a06      	cmp	r2, #6
   16554:	d14d      	bne.n	165f2 <SystemInit+0x15e>
                switch(var2)
   16556:	3b03      	subs	r3, #3
   16558:	2b04      	cmp	r3, #4
   1655a:	d803      	bhi.n	16564 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1655c:	4a64      	ldr	r2, [pc, #400]	; (166f0 <SystemInit+0x25c>)
   1655e:	5cd3      	ldrb	r3, [r2, r3]
   16560:	2b00      	cmp	r3, #0
   16562:	d046      	beq.n	165f2 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   16564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16568:	4b62      	ldr	r3, [pc, #392]	; (166f4 <SystemInit+0x260>)
   1656a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1656e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   16572:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   16576:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1657a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1657e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   16582:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   16586:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1658a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1658e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   16592:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   16596:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1659a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1659e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   165a2:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   165a6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   165aa:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   165ae:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   165b2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   165b6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   165ba:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   165be:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   165c2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   165c6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   165ca:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   165ce:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   165d2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   165d6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   165da:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   165de:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   165e2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   165e6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   165ea:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   165ee:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   165f2:	f006 fa76 	bl	1cae2 <nrf52_errata_108>
   165f6:	b148      	cbz	r0, 1660c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   165f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   165fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16600:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   16604:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   16608:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1660c:	f006 fa69 	bl	1cae2 <nrf52_errata_108>
   16610:	b148      	cbz	r0, 16626 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   16612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16616:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1661a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1661c:	bf44      	itt	mi
   1661e:	f06f 0201 	mvnmi.w	r2, #1
   16622:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16626:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1662a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1662e:	2a06      	cmp	r2, #6
   16630:	d126      	bne.n	16680 <SystemInit+0x1ec>
            {
                switch(var2)
   16632:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16636:	3b03      	subs	r3, #3
   16638:	2b04      	cmp	r3, #4
   1663a:	d802      	bhi.n	16642 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1663c:	4a2e      	ldr	r2, [pc, #184]	; (166f8 <SystemInit+0x264>)
   1663e:	5cd3      	ldrb	r3, [r2, r3]
   16640:	b163      	cbz	r3, 1665c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   16642:	4a2e      	ldr	r2, [pc, #184]	; (166fc <SystemInit+0x268>)
   16644:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   16648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1664c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   16650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   16654:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   16658:	2b06      	cmp	r3, #6
   1665a:	d111      	bne.n	16680 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1665c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16660:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   16664:	3b03      	subs	r3, #3
   16666:	2b04      	cmp	r3, #4
   16668:	d802      	bhi.n	16670 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1666a:	4a25      	ldr	r2, [pc, #148]	; (16700 <SystemInit+0x26c>)
   1666c:	5cd3      	ldrb	r3, [r2, r3]
   1666e:	b13b      	cbz	r3, 16680 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   16670:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16674:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   16678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1667c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16680:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   16684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   16688:	2a00      	cmp	r2, #0
   1668a:	db03      	blt.n	16694 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1668c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   16690:	2b00      	cmp	r3, #0
   16692:	da22      	bge.n	166da <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   16694:	491b      	ldr	r1, [pc, #108]	; (16704 <SystemInit+0x270>)
   16696:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   16698:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1669c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   166a0:	2415      	movs	r4, #21
    nvmc_wait();
   166a2:	f7ff feef 	bl	16484 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   166a6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   166aa:	f7ff feeb 	bl	16484 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   166ae:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   166b2:	f7ff fee7 	bl	16484 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   166b6:	2300      	movs	r3, #0
   166b8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   166bc:	f7ff fee2 	bl	16484 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   166c0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   166c4:	4908      	ldr	r1, [pc, #32]	; (166e8 <SystemInit+0x254>)
   166c6:	4b10      	ldr	r3, [pc, #64]	; (16708 <SystemInit+0x274>)
   166c8:	68ca      	ldr	r2, [r1, #12]
   166ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   166ce:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   166d0:	60cb      	str	r3, [r1, #12]
   166d2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   166d6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   166d8:	e7fd      	b.n	166d6 <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   166da:	bd10      	pop	{r4, pc}
   166dc:	40013000 	.word	0x40013000
   166e0:	4007c000 	.word	0x4007c000
   166e4:	baadf00d 	.word	0xbaadf00d
   166e8:	e000ed00 	.word	0xe000ed00
   166ec:	40005000 	.word	0x40005000
   166f0:	0001fbb9 	.word	0x0001fbb9
   166f4:	4000c000 	.word	0x4000c000
   166f8:	0001fbb4 	.word	0x0001fbb4
   166fc:	40001000 	.word	0x40001000
   16700:	0001fbaf 	.word	0x0001fbaf
   16704:	4001e000 	.word	0x4001e000
   16708:	05fa0004 	.word	0x05fa0004

0001670c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1670c:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1670e:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
   16710:	b1cc      	cbz	r4, 16746 <nrfx_flag32_alloc+0x3a>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16712:	f3bf 8f5b 	dmb	ish
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
   16716:	fab4 f384 	clz	r3, r4
   1671a:	f1c3 031f 	rsb	r3, r3, #31
   1671e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   16720:	2201      	movs	r2, #1
   16722:	409a      	lsls	r2, r3
   16724:	ea24 0202 	bic.w	r2, r4, r2
   16728:	e850 5f00 	ldrex	r5, [r0]
   1672c:	42a5      	cmp	r5, r4
   1672e:	d104      	bne.n	1673a <nrfx_flag32_alloc+0x2e>
   16730:	e840 2c00 	strex	ip, r2, [r0]
   16734:	f1bc 0f00 	cmp.w	ip, #0
   16738:	d1f6      	bne.n	16728 <nrfx_flag32_alloc+0x1c>
   1673a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1673e:	d1e6      	bne.n	1670e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
   16740:	4802      	ldr	r0, [pc, #8]	; (1674c <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   16742:	700b      	strb	r3, [r1, #0]
}
   16744:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
   16746:	4802      	ldr	r0, [pc, #8]	; (16750 <nrfx_flag32_alloc+0x44>)
   16748:	e7fc      	b.n	16744 <nrfx_flag32_alloc+0x38>
   1674a:	bf00      	nop
   1674c:	0bad0000 	.word	0x0bad0000
   16750:	0bad0002 	.word	0x0bad0002

00016754 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   16754:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   16756:	6803      	ldr	r3, [r0, #0]
   16758:	40cb      	lsrs	r3, r1
   1675a:	07db      	lsls	r3, r3, #31
   1675c:	d414      	bmi.n	16788 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1675e:	2301      	movs	r3, #1
   16760:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   16762:	6802      	ldr	r2, [r0, #0]
   16764:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   16768:	ea43 0102 	orr.w	r1, r3, r2
   1676c:	e850 4f00 	ldrex	r4, [r0]
   16770:	4294      	cmp	r4, r2
   16772:	d104      	bne.n	1677e <nrfx_flag32_free+0x2a>
   16774:	e840 1c00 	strex	ip, r1, [r0]
   16778:	f1bc 0f00 	cmp.w	ip, #0
   1677c:	d1f6      	bne.n	1676c <nrfx_flag32_free+0x18>
   1677e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   16782:	d1ee      	bne.n	16762 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   16784:	4801      	ldr	r0, [pc, #4]	; (1678c <nrfx_flag32_free+0x38>)
}
   16786:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16788:	4801      	ldr	r0, [pc, #4]	; (16790 <nrfx_flag32_free+0x3c>)
   1678a:	e7fc      	b.n	16786 <nrfx_flag32_free+0x32>
   1678c:	0bad0000 	.word	0x0bad0000
   16790:	0bad0004 	.word	0x0bad0004

00016794 <nrfx_gppi_channels_enable>:
   16794:	4b01      	ldr	r3, [pc, #4]	; (1679c <nrfx_gppi_channels_enable+0x8>)
   16796:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}

void nrfx_gppi_channels_enable(uint32_t mask)
{
    nrf_ppi_channels_enable(NRF_PPI, mask);
}
   1679a:	4770      	bx	lr
   1679c:	4001f000 	.word	0x4001f000

000167a0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   167a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   167a2:	4604      	mov	r4, r0
   167a4:	b118      	cbz	r0, 167ae <clock_stop+0xe>
   167a6:	2801      	cmp	r0, #1
   167a8:	d023      	beq.n	167f2 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   167aa:	b003      	add	sp, #12
   167ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   167ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   167b2:	2202      	movs	r2, #2
   167b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167b8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   167bc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167c0:	2201      	movs	r2, #1
   167c2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   167c4:	4606      	mov	r6, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   167c6:	2301      	movs	r3, #1
   167c8:	f88d 3007 	strb.w	r3, [sp, #7]
   167cc:	f242 7510 	movw	r5, #10000	; 0x2710
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   167d0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    switch (domain)
   167d4:	b1d4      	cbz	r4, 1680c <clock_stop+0x6c>
   167d6:	2c01      	cmp	r4, #1
   167d8:	d1e7      	bne.n	167aa <clock_stop+0xa>
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   167da:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
   167de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
   167e2:	bbae      	cbnz	r6, 16850 <clock_stop+0xb0>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   167e4:	b383      	cbz	r3, 16848 <clock_stop+0xa8>
   167e6:	2001      	movs	r0, #1
   167e8:	f006 f98a 	bl	1cb00 <nrfx_busy_wait>
   167ec:	3d01      	subs	r5, #1
   167ee:	d1f4      	bne.n	167da <clock_stop+0x3a>
   167f0:	e02a      	b.n	16848 <clock_stop+0xa8>
    p_reg->INTENCLR = mask;
   167f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167f6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   167f8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16800:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16804:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   16806:	f10d 0607 	add.w	r6, sp, #7
   1680a:	e7dc      	b.n	167c6 <clock_stop+0x26>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   1680c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
   16810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
            if (p_clk_src != NULL)
   16814:	b93e      	cbnz	r6, 16826 <clock_stop+0x86>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   16816:	2b00      	cmp	r3, #0
   16818:	d0c7      	beq.n	167aa <clock_stop+0xa>
   1681a:	2001      	movs	r0, #1
   1681c:	f006 f970 	bl	1cb00 <nrfx_busy_wait>
   16820:	3d01      	subs	r5, #1
   16822:	d1f3      	bne.n	1680c <clock_stop+0x6c>
   16824:	e7c1      	b.n	167aa <clock_stop+0xa>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   16826:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   1682a:	f002 0203 	and.w	r2, r2, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1682e:	6032      	str	r2, [r6, #0]
   16830:	2b00      	cmp	r3, #0
   16832:	d0ba      	beq.n	167aa <clock_stop+0xa>
   16834:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16838:	2801      	cmp	r0, #1
   1683a:	d103      	bne.n	16844 <clock_stop+0xa4>
   1683c:	f006 f960 	bl	1cb00 <nrfx_busy_wait>
   16840:	3d01      	subs	r5, #1
   16842:	d1c7      	bne.n	167d4 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   16844:	2c01      	cmp	r4, #1
   16846:	d1b0      	bne.n	167aa <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   16848:	4b05      	ldr	r3, [pc, #20]	; (16860 <clock_stop+0xc0>)
   1684a:	2200      	movs	r2, #0
   1684c:	715a      	strb	r2, [r3, #5]
   1684e:	e7ac      	b.n	167aa <clock_stop+0xa>
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16850:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
   16854:	f002 0201 	and.w	r2, r2, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   16858:	7032      	strb	r2, [r6, #0]
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1685a:	2b00      	cmp	r3, #0
   1685c:	d1ea      	bne.n	16834 <clock_stop+0x94>
   1685e:	e7f3      	b.n	16848 <clock_stop+0xa8>
   16860:	200025a0 	.word	0x200025a0

00016864 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16864:	4b04      	ldr	r3, [pc, #16]	; (16878 <nrfx_clock_init+0x14>)
   16866:	791a      	ldrb	r2, [r3, #4]
   16868:	b922      	cbnz	r2, 16874 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1686a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1686c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1686e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   16870:	4802      	ldr	r0, [pc, #8]	; (1687c <nrfx_clock_init+0x18>)
   16872:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16874:	4802      	ldr	r0, [pc, #8]	; (16880 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16876:	4770      	bx	lr
   16878:	200025a0 	.word	0x200025a0
   1687c:	0bad0000 	.word	0x0bad0000
   16880:	0bad000c 	.word	0x0bad000c

00016884 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   16884:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   16886:	b110      	cbz	r0, 1688e <nrfx_clock_start+0xa>
   16888:	2801      	cmp	r0, #1
   1688a:	d043      	beq.n	16914 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1688c:	bd38      	pop	{r3, r4, r5, pc}
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   1688e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   16892:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   16896:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc))
   1689a:	03c8      	lsls	r0, r1, #15
   1689c:	d52e      	bpl.n	168fc <nrfx_clock_start+0x78>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   1689e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   168a2:	2b01      	cmp	r3, #1
   168a4:	d004      	beq.n	168b0 <nrfx_clock_start+0x2c>
   168a6:	b113      	cbz	r3, 168ae <nrfx_clock_start+0x2a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   168a8:	2000      	movs	r0, #0
   168aa:	f7ff ff79 	bl	167a0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   168ae:	2300      	movs	r3, #0
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   168b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   168b4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168b8:	2300      	movs	r3, #0
   168ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   168be:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   168c2:	2302      	movs	r3, #2
   168c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   168c8:	4a18      	ldr	r2, [pc, #96]	; (1692c <nrfx_clock_start+0xa8>)
   168ca:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   168ce:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   168d2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   168d6:	4b16      	ldr	r3, [pc, #88]	; (16930 <nrfx_clock_start+0xac>)
   168d8:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   168da:	f044 0101 	orr.w	r1, r4, #1
   168de:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   168e0:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   168e2:	6859      	ldr	r1, [r3, #4]
   168e4:	1b49      	subs	r1, r1, r5
   168e6:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   168ea:	d3fa      	bcc.n	168e2 <nrfx_clock_start+0x5e>
    DWT->CTRL = dwt_ctrl;
   168ec:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   168f2:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   168f6:	2201      	movs	r2, #1
   168f8:	609a      	str	r2, [r3, #8]
}
   168fa:	e7c7      	b.n	1688c <nrfx_clock_start+0x8>
            return ((p_reg->NRF_LFCLKRUN & NRF_CLOCK_LFCLKRUN_STATUS_Msk)
   168fc:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   16900:	07d9      	lsls	r1, r3, #31
   16902:	d5d4      	bpl.n	168ae <nrfx_clock_start+0x2a>
    return (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSRCCOPY & NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk)
   16904:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   16908:	079b      	lsls	r3, r3, #30
   1690a:	d4cd      	bmi.n	168a8 <nrfx_clock_start+0x24>
    p_reg->INTENSET = mask;
   1690c:	2302      	movs	r3, #2
   1690e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   16912:	e7bb      	b.n	1688c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16918:	2200      	movs	r2, #0
   1691a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1691e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16922:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16926:	6018      	str	r0, [r3, #0]
}
   16928:	e7b0      	b.n	1688c <nrfx_clock_start+0x8>
   1692a:	bf00      	nop
   1692c:	e000ed00 	.word	0xe000ed00
   16930:	e0001000 	.word	0xe0001000

00016934 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16934:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1693a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1693e:	b16a      	cbz	r2, 1695c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16940:	2200      	movs	r2, #0
   16942:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16946:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1694a:	2201      	movs	r2, #1
   1694c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   16950:	4b11      	ldr	r3, [pc, #68]	; (16998 <nrfx_power_clock_irq_handler+0x64>)
   16952:	7958      	ldrb	r0, [r3, #5]
   16954:	b910      	cbnz	r0, 1695c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   16956:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16958:	681b      	ldr	r3, [r3, #0]
   1695a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1695c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16960:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16964:	b172      	cbz	r2, 16984 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16966:	2200      	movs	r2, #0
   16968:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1696c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   16970:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   16974:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16978:	0792      	lsls	r2, r2, #30
   1697a:	d104      	bne.n	16986 <nrfx_power_clock_irq_handler+0x52>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   1697c:	2201      	movs	r2, #1
   1697e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16982:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   16984:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   16986:	2202      	movs	r2, #2
   16988:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1698c:	4b02      	ldr	r3, [pc, #8]	; (16998 <nrfx_power_clock_irq_handler+0x64>)
}
   1698e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16992:	681b      	ldr	r3, [r3, #0]
   16994:	2001      	movs	r0, #1
   16996:	4718      	bx	r3
   16998:	200025a0 	.word	0x200025a0

0001699c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_TE_USED;
   1699c:	b2c0      	uxtb	r0, r0
   1699e:	4b03      	ldr	r3, [pc, #12]	; (169ac <pin_in_use_by_te+0x10>)
   169a0:	3008      	adds	r0, #8
   169a2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   169a6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   169aa:	4770      	bx	lr
   169ac:	20000784 	.word	0x20000784

000169b0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[get_pin_idx(pin)]);
   169b0:	b2c0      	uxtb	r0, r0
   169b2:	4b03      	ldr	r3, [pc, #12]	; (169c0 <pin_is_output+0x10>)
   169b4:	3008      	adds	r0, #8
   169b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   169ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
   169be:	4770      	bx	lr
   169c0:	20000784 	.word	0x20000784

000169c4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   169c4:	b2c0      	uxtb	r0, r0
   169c6:	4b03      	ldr	r3, [pc, #12]	; (169d4 <pin_te_get+0x10>)
   169c8:	3008      	adds	r0, #8
   169ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   169ce:	0b40      	lsrs	r0, r0, #13
   169d0:	4770      	bx	lr
   169d2:	bf00      	nop
   169d4:	20000784 	.word	0x20000784

000169d8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   169d8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   169da:	f100 0308 	add.w	r3, r0, #8
   169de:	4c0c      	ldr	r4, [pc, #48]	; (16a10 <call_handler+0x38>)
   169e0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   169e4:	05da      	lsls	r2, r3, #23
{
   169e6:	4605      	mov	r5, r0
   169e8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   169ea:	d507      	bpl.n	169fc <call_handler+0x24>
   169ec:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   169f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   169f4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   169f8:	6852      	ldr	r2, [r2, #4]
   169fa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   169fc:	68a3      	ldr	r3, [r4, #8]
   169fe:	b12b      	cbz	r3, 16a0c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   16a00:	68e2      	ldr	r2, [r4, #12]
   16a02:	4631      	mov	r1, r6
   16a04:	4628      	mov	r0, r5
    }
}
   16a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   16a0a:	4718      	bx	r3
}
   16a0c:	bd70      	pop	{r4, r5, r6, pc}
   16a0e:	bf00      	nop
   16a10:	20000784 	.word	0x20000784

00016a14 <release_handler>:
{
   16a14:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[idx]);
   16a16:	b2c0      	uxtb	r0, r0
   16a18:	4a11      	ldr	r2, [pc, #68]	; (16a60 <release_handler+0x4c>)
   16a1a:	3008      	adds	r0, #8
   16a1c:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   16a20:	05d9      	lsls	r1, r3, #23
   16a22:	d51b      	bpl.n	16a5c <release_handler+0x48>
   16a24:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[idx] &= ~PIN_HANDLER_MASK;
   16a28:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   16a2c:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16a30:	f102 040e 	add.w	r4, r2, #14
   16a34:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   16a36:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   16a3a:	f413 7f80 	tst.w	r3, #256	; 0x100
   16a3e:	d003      	beq.n	16a48 <release_handler+0x34>
   16a40:	f3c3 2343 	ubfx	r3, r3, #9, #4
   16a44:	4299      	cmp	r1, r3
   16a46:	d009      	beq.n	16a5c <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   16a48:	3001      	adds	r0, #1
   16a4a:	2820      	cmp	r0, #32
   16a4c:	d1f3      	bne.n	16a36 <release_handler+0x22>
        m_cb.handlers[handler_id].handler = NULL;
   16a4e:	2300      	movs	r3, #0
   16a50:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16a54:	4803      	ldr	r0, [pc, #12]	; (16a64 <release_handler+0x50>)
}
   16a56:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   16a58:	f7ff be7c 	b.w	16754 <nrfx_flag32_free>
}
   16a5c:	bc10      	pop	{r4}
   16a5e:	4770      	bx	lr
   16a60:	20000784 	.word	0x20000784
   16a64:	200007d8 	.word	0x200007d8

00016a68 <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
   16a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a6a:	4601      	mov	r1, r0
   16a6c:	4a10      	ldr	r2, [pc, #64]	; (16ab0 <__nrfy_internal_gpiote_events_process.constprop.0+0x48>)
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   16a6e:	4c11      	ldr	r4, [pc, #68]	; (16ab4 <__nrfy_internal_gpiote_events_process.constprop.0+0x4c>)
    uint32_t event_mask = 0;
   16a70:	2000      	movs	r0, #0
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   16a72:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16a74:	4606      	mov	r6, r0
   16a76:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
   16a7a:	f5a3 43c2 	sub.w	r3, r3, #24832	; 0x6100
   16a7e:	089b      	lsrs	r3, r3, #2
   16a80:	fa05 f303 	lsl.w	r3, r5, r3
   16a84:	4219      	tst	r1, r3
   16a86:	d004      	beq.n	16a92 <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a88:	6817      	ldr	r7, [r2, #0]
   16a8a:	b117      	cbz	r7, 16a92 <__nrfy_internal_gpiote_events_process.constprop.0+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16a8c:	6016      	str	r6, [r2, #0]
   16a8e:	6817      	ldr	r7, [r2, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   16a90:	4318      	orrs	r0, r3
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   16a92:	3204      	adds	r2, #4
   16a94:	42a2      	cmp	r2, r4
   16a96:	d1ee      	bne.n	16a76 <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a98:	4b07      	ldr	r3, [pc, #28]	; (16ab8 <__nrfy_internal_gpiote_events_process.constprop.0+0x50>)
   16a9a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   16a9e:	b132      	cbz	r2, 16aae <__nrfy_internal_gpiote_events_process.constprop.0+0x46>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16aa0:	2200      	movs	r2, #0
   16aa2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   16aa6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   16aaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
   16aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ab0:	40006100 	.word	0x40006100
   16ab4:	40006120 	.word	0x40006120
   16ab8:	40006000 	.word	0x40006000

00016abc <nrfx_gpiote_input_configure>:
{
   16abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16abe:	4604      	mov	r4, r0
   16ac0:	b085      	sub	sp, #20
   16ac2:	4617      	mov	r7, r2
   16ac4:	461d      	mov	r5, r3
    if (p_input_config)
   16ac6:	b301      	cbz	r1, 16b0a <nrfx_gpiote_input_configure+0x4e>
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   16ac8:	f7ff ff72 	bl	169b0 <pin_is_output>
   16acc:	b118      	cbz	r0, 16ad6 <nrfx_gpiote_input_configure+0x1a>
   16ace:	4620      	mov	r0, r4
   16ad0:	f7ff ff64 	bl	1699c <pin_in_use_by_te>
   16ad4:	bb08      	cbnz	r0, 16b1a <nrfx_gpiote_input_configure+0x5e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   16ad6:	2300      	movs	r3, #0
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
   16ad8:	e9cd 3300 	strd	r3, r3, [sp]
   16adc:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   16ae0:	f88d 300f 	strb.w	r3, [sp, #15]
   16ae4:	f10d 020f 	add.w	r2, sp, #15
   16ae8:	460b      	mov	r3, r1
   16aea:	4620      	mov	r0, r4
   16aec:	f10d 010e 	add.w	r1, sp, #14
   16af0:	f006 f82b 	bl	1cb4a <nrf_gpio_reconfigure>
        m_cb.pin_flags[idx] &= ~PIN_FLAG_OUTPUT;
   16af4:	b2e3      	uxtb	r3, r4
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE;
   16af6:	4944      	ldr	r1, [pc, #272]	; (16c08 <nrfx_gpiote_input_configure+0x14c>)
   16af8:	3308      	adds	r3, #8
        m_cb.pin_flags[idx] &= ~PIN_FLAG_OUTPUT;
   16afa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   16afe:	f022 0202 	bic.w	r2, r2, #2
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE;
   16b02:	f042 0201 	orr.w	r2, r2, #1
   16b06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    if (p_trigger_config)
   16b0a:	b357      	cbz	r7, 16b62 <nrfx_gpiote_input_configure+0xa6>
        if (pin_is_output(pin))
   16b0c:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   16b0e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   16b10:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   16b12:	f7ff ff4d 	bl	169b0 <pin_is_output>
   16b16:	b110      	cbz	r0, 16b1e <nrfx_gpiote_input_configure+0x62>
            if (use_evt)
   16b18:	b1c2      	cbz	r2, 16b4c <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
   16b1a:	483c      	ldr	r0, [pc, #240]	; (16c0c <nrfx_gpiote_input_configure+0x150>)
   16b1c:	e023      	b.n	16b66 <nrfx_gpiote_input_configure+0xaa>
            m_cb.pin_flags[idx] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   16b1e:	b2e3      	uxtb	r3, r4
   16b20:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 16c08 <nrfx_gpiote_input_configure+0x14c>
   16b24:	3308      	adds	r3, #8
   16b26:	f83c 1013 	ldrh.w	r1, [ip, r3, lsl #1]
   16b2a:	f021 0120 	bic.w	r1, r1, #32
   16b2e:	04c9      	lsls	r1, r1, #19
   16b30:	0cc9      	lsrs	r1, r1, #19
   16b32:	f82c 1013 	strh.w	r1, [ip, r3, lsl #1]
            if (use_evt)
   16b36:	b14a      	cbz	r2, 16b4c <nrfx_gpiote_input_configure+0x90>
                if (!edge)
   16b38:	2e03      	cmp	r6, #3
   16b3a:	d8ee      	bhi.n	16b1a <nrfx_gpiote_input_configure+0x5e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   16b3c:	687a      	ldr	r2, [r7, #4]
   16b3e:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   16b40:	b99e      	cbnz	r6, 16b6a <nrfx_gpiote_input_configure+0xae>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   16b42:	4b33      	ldr	r3, [pc, #204]	; (16c10 <nrfx_gpiote_input_configure+0x154>)
   16b44:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   16b48:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[idx] &= ~PIN_FLAG_TRIG_MODE_MASK;
   16b4c:	b2e3      	uxtb	r3, r4
        m_cb.pin_flags[idx] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   16b4e:	492e      	ldr	r1, [pc, #184]	; (16c08 <nrfx_gpiote_input_configure+0x14c>)
   16b50:	3308      	adds	r3, #8
        m_cb.pin_flags[idx] &= ~PIN_FLAG_TRIG_MODE_MASK;
   16b52:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   16b56:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[idx] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   16b5a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   16b5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    if (p_handler_config)
   16b62:	bb3d      	cbnz	r5, 16bb4 <nrfx_gpiote_input_configure+0xf8>
        err = NRFX_SUCCESS;
   16b64:	482b      	ldr	r0, [pc, #172]	; (16c14 <nrfx_gpiote_input_configure+0x158>)
}
   16b66:	b005      	add	sp, #20
   16b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16b6a:	00ba      	lsls	r2, r7, #2
   16b6c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16b70:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[idx] |= PIN_FLAG_TE_ID(ch);
   16b74:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   16b78:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   16b7c:	f020 0003 	bic.w	r0, r0, #3
   16b80:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16b84:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   16b88:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   16b8c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   16b90:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16b94:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   16b98:	0220      	lsls	r0, r4, #8
   16b9a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   16b9e:	ea40 000e 	orr.w	r0, r0, lr
   16ba2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   16ba6:	f041 0120 	orr.w	r1, r1, #32
   16baa:	f82c 1013 	strh.w	r1, [ip, r3, lsl #1]
   16bae:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   16bb2:	e7cb      	b.n	16b4c <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   16bb4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   16bb8:	4620      	mov	r0, r4
   16bba:	f7ff ff2b 	bl	16a14 <release_handler>
    if (!handler)
   16bbe:	2e00      	cmp	r6, #0
   16bc0:	d0d0      	beq.n	16b64 <nrfx_gpiote_input_configure+0xa8>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16bc2:	4d11      	ldr	r5, [pc, #68]	; (16c08 <nrfx_gpiote_input_configure+0x14c>)
   16bc4:	e9d5 2300 	ldrd	r2, r3, [r5]
   16bc8:	4296      	cmp	r6, r2
   16bca:	d101      	bne.n	16bd0 <nrfx_gpiote_input_configure+0x114>
   16bcc:	429f      	cmp	r7, r3
   16bce:	d019      	beq.n	16c04 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   16bd0:	4811      	ldr	r0, [pc, #68]	; (16c18 <nrfx_gpiote_input_configure+0x15c>)
   16bd2:	f10d 010f 	add.w	r1, sp, #15
   16bd6:	f7ff fd99 	bl	1670c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   16bda:	4b0e      	ldr	r3, [pc, #56]	; (16c14 <nrfx_gpiote_input_configure+0x158>)
   16bdc:	4298      	cmp	r0, r3
   16bde:	d1c2      	bne.n	16b66 <nrfx_gpiote_input_configure+0xaa>
        handler_id = (int32_t)id;
   16be0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   16be4:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   16be8:	b2e4      	uxtb	r4, r4
    m_cb.handlers[handler_id].p_context = p_context;
   16bea:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   16bee:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   16bf0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   16bf2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   16bf6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   16bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16bfe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   16c02:	e7af      	b.n	16b64 <nrfx_gpiote_input_configure+0xa8>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   16c04:	2200      	movs	r2, #0
   16c06:	e7ed      	b.n	16be4 <nrfx_gpiote_input_configure+0x128>
   16c08:	20000784 	.word	0x20000784
   16c0c:	0bad0004 	.word	0x0bad0004
   16c10:	40006000 	.word	0x40006000
   16c14:	0bad0000 	.word	0x0bad0000
   16c18:	200007d8 	.word	0x200007d8

00016c1c <nrfx_gpiote_output_configure>:
{
   16c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c1e:	4604      	mov	r4, r0
   16c20:	b085      	sub	sp, #20
   16c22:	4616      	mov	r6, r2
    if (p_config)
   16c24:	b329      	cbz	r1, 16c72 <nrfx_gpiote_output_configure+0x56>
    return !pin_is_output(pin);
   16c26:	f7ff fec3 	bl	169b0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   16c2a:	b920      	cbnz	r0, 16c36 <nrfx_gpiote_output_configure+0x1a>
   16c2c:	4620      	mov	r0, r4
   16c2e:	f7ff feb5 	bl	1699c <pin_in_use_by_te>
   16c32:	2800      	cmp	r0, #0
   16c34:	d15f      	bne.n	16cf6 <nrfx_gpiote_output_configure+0xda>
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]) != NRFX_GPIOTE_TRIGGER_NONE;
   16c36:	b2e5      	uxtb	r5, r4
   16c38:	4f30      	ldr	r7, [pc, #192]	; (16cfc <nrfx_gpiote_output_configure+0xe0>)
   16c3a:	3508      	adds	r5, #8
   16c3c:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   16c40:	f013 0f1c 	tst.w	r3, #28
   16c44:	d002      	beq.n	16c4c <nrfx_gpiote_output_configure+0x30>
   16c46:	784b      	ldrb	r3, [r1, #1]
   16c48:	2b01      	cmp	r3, #1
   16c4a:	d054      	beq.n	16cf6 <nrfx_gpiote_output_configure+0xda>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   16c4c:	2301      	movs	r3, #1
   16c4e:	f88d 300f 	strb.w	r3, [sp, #15]
   16c52:	2300      	movs	r3, #0
   16c54:	e9cd 1300 	strd	r1, r3, [sp]
   16c58:	1c4a      	adds	r2, r1, #1
   16c5a:	1c8b      	adds	r3, r1, #2
   16c5c:	4620      	mov	r0, r4
   16c5e:	f10d 010f 	add.w	r1, sp, #15
   16c62:	f005 ff72 	bl	1cb4a <nrf_gpio_reconfigure>
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   16c66:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
   16c6a:	f043 0303 	orr.w	r3, r3, #3
   16c6e:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
    if (p_task_config)
   16c72:	b916      	cbnz	r6, 16c7a <nrfx_gpiote_output_configure+0x5e>
    return NRFX_SUCCESS;
   16c74:	4822      	ldr	r0, [pc, #136]	; (16d00 <nrfx_gpiote_output_configure+0xe4>)
}
   16c76:	b005      	add	sp, #20
   16c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   16c7a:	4620      	mov	r0, r4
   16c7c:	f7ff fe98 	bl	169b0 <pin_is_output>
        if (pin_is_input(pin))
   16c80:	b3c8      	cbz	r0, 16cf6 <nrfx_gpiote_output_configure+0xda>
        m_cb.pin_flags[idx] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   16c82:	b2e5      	uxtb	r5, r4
   16c84:	4f1d      	ldr	r7, [pc, #116]	; (16cfc <nrfx_gpiote_output_configure+0xe0>)
        uint32_t ch = p_task_config->task_ch;
   16c86:	f896 c000 	ldrb.w	ip, [r6]
        m_cb.pin_flags[idx] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   16c8a:	3508      	adds	r5, #8
   16c8c:	4661      	mov	r1, ip
   16c8e:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
   16c92:	0089      	lsls	r1, r1, #2
   16c94:	f020 0020 	bic.w	r0, r0, #32
   16c98:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16c9c:	04c0      	lsls	r0, r0, #19
   16c9e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   16ca2:	0cc0      	lsrs	r0, r0, #19
   16ca4:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
    p_reg->CONFIG[idx] = 0;
   16ca8:	2300      	movs	r3, #0
   16caa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   16cae:	7872      	ldrb	r2, [r6, #1]
   16cb0:	2a00      	cmp	r2, #0
   16cb2:	d0df      	beq.n	16c74 <nrfx_gpiote_output_configure+0x58>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   16cb4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
   16cb8:	78b6      	ldrb	r6, [r6, #2]
   16cba:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   16cbe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   16cc2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16cc6:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16cc8:	0223      	lsls	r3, r4, #8
   16cca:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16cce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16cd2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   16cd6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   16cd8:	0532      	lsls	r2, r6, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16cda:	ea43 030e 	orr.w	r3, r3, lr
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   16cde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[idx] |= PIN_FLAG_TE_ID(ch);
   16ce2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16ce6:	4313      	orrs	r3, r2
   16ce8:	f040 0020 	orr.w	r0, r0, #32
   16cec:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
   16cf0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16cf4:	e7be      	b.n	16c74 <nrfx_gpiote_output_configure+0x58>
{
   16cf6:	4803      	ldr	r0, [pc, #12]	; (16d04 <nrfx_gpiote_output_configure+0xe8>)
   16cf8:	e7bd      	b.n	16c76 <nrfx_gpiote_output_configure+0x5a>
   16cfa:	bf00      	nop
   16cfc:	20000784 	.word	0x20000784
   16d00:	0bad0000 	.word	0x0bad0000
   16d04:	0bad0004 	.word	0x0bad0004

00016d08 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16d08:	4b01      	ldr	r3, [pc, #4]	; (16d10 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   16d0a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   16d0e:	4770      	bx	lr
   16d10:	20000784 	.word	0x20000784

00016d14 <nrfx_gpiote_channel_get>:
{
   16d14:	b508      	push	{r3, lr}
   16d16:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   16d18:	f7ff fe40 	bl	1699c <pin_in_use_by_te>
   16d1c:	b140      	cbz	r0, 16d30 <nrfx_gpiote_channel_get+0x1c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   16d1e:	b2d2      	uxtb	r2, r2
   16d20:	4b04      	ldr	r3, [pc, #16]	; (16d34 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   16d22:	4805      	ldr	r0, [pc, #20]	; (16d38 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   16d24:	3208      	adds	r2, #8
   16d26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d2a:	0b5b      	lsrs	r3, r3, #13
   16d2c:	700b      	strb	r3, [r1, #0]
}
   16d2e:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16d30:	4802      	ldr	r0, [pc, #8]	; (16d3c <nrfx_gpiote_channel_get+0x28>)
   16d32:	e7fc      	b.n	16d2e <nrfx_gpiote_channel_get+0x1a>
   16d34:	20000784 	.word	0x20000784
   16d38:	0bad0000 	.word	0x0bad0000
   16d3c:	0bad0004 	.word	0x0bad0004

00016d40 <nrfx_gpiote_init>:
{
   16d40:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16d42:	4c0f      	ldr	r4, [pc, #60]	; (16d80 <nrfx_gpiote_init+0x40>)
   16d44:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
   16d48:	b9be      	cbnz	r6, 16d7a <nrfx_gpiote_init+0x3a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16d4a:	4d0e      	ldr	r5, [pc, #56]	; (16d84 <nrfx_gpiote_init+0x44>)
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   16d4c:	2240      	movs	r2, #64	; 0x40
   16d4e:	4631      	mov	r1, r6
   16d50:	f104 0010 	add.w	r0, r4, #16
   16d54:	f002 ff59 	bl	19c0a <memset>
   16d58:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    NRFX_IRQ_ENABLE(irqn);
   16d5c:	2006      	movs	r0, #6
   16d5e:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
   16d62:	f7ec fda5 	bl	38b0 <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   16d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   16d6a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return err_code;
   16d6e:	4806      	ldr	r0, [pc, #24]	; (16d88 <nrfx_gpiote_init+0x48>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16d70:	2301      	movs	r3, #1
   16d72:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   16d76:	6563      	str	r3, [r4, #84]	; 0x54
}
   16d78:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   16d7a:	4804      	ldr	r0, [pc, #16]	; (16d8c <nrfx_gpiote_init+0x4c>)
   16d7c:	e7fc      	b.n	16d78 <nrfx_gpiote_init+0x38>
   16d7e:	bf00      	nop
   16d80:	20000784 	.word	0x20000784
   16d84:	40006000 	.word	0x40006000
   16d88:	0bad0000 	.word	0x0bad0000
   16d8c:	0bad0005 	.word	0x0bad0005

00016d90 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   16d90:	4b03      	ldr	r3, [pc, #12]	; (16da0 <nrfx_gpiote_is_init+0x10>)
   16d92:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   16d96:	3800      	subs	r0, #0
   16d98:	bf18      	it	ne
   16d9a:	2001      	movne	r0, #1
   16d9c:	4770      	bx	lr
   16d9e:	bf00      	nop
   16da0:	20000784 	.word	0x20000784

00016da4 <nrfx_gpiote_channel_free>:
{
   16da4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   16da6:	4801      	ldr	r0, [pc, #4]	; (16dac <nrfx_gpiote_channel_free+0x8>)
   16da8:	f7ff bcd4 	b.w	16754 <nrfx_flag32_free>
   16dac:	200007d4 	.word	0x200007d4

00016db0 <nrfx_gpiote_channel_alloc>:
{
   16db0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   16db2:	4801      	ldr	r0, [pc, #4]	; (16db8 <nrfx_gpiote_channel_alloc+0x8>)
   16db4:	f7ff bcaa 	b.w	1670c <nrfx_flag32_alloc>
   16db8:	200007d4 	.word	0x200007d4

00016dbc <nrfx_gpiote_trigger_enable>:
{
   16dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16dbe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16dc0:	f7ff fdec 	bl	1699c <pin_in_use_by_te>
   16dc4:	b308      	cbz	r0, 16e0a <nrfx_gpiote_trigger_enable+0x4e>
    return !pin_is_output(pin);
   16dc6:	4620      	mov	r0, r4
   16dc8:	f7ff fdf2 	bl	169b0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16dcc:	4605      	mov	r5, r0
   16dce:	b9e0      	cbnz	r0, 16e0a <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
   16dd0:	4620      	mov	r0, r4
   16dd2:	f7ff fdf7 	bl	169c4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   16dd6:	b203      	sxth	r3, r0
   16dd8:	009b      	lsls	r3, r3, #2
    return ((uint32_t)p_reg + event);
   16dda:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   16dde:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   16de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16de6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16dea:	6015      	str	r5, [r2, #0]
   16dec:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16dee:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16df2:	f042 0201 	orr.w	r2, r2, #1
   16df6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   16dfa:	b121      	cbz	r1, 16e06 <nrfx_gpiote_trigger_enable+0x4a>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   16dfc:	4a13      	ldr	r2, [pc, #76]	; (16e4c <nrfx_gpiote_trigger_enable+0x90>)
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   16dfe:	2301      	movs	r3, #1
   16e00:	4083      	lsls	r3, r0
   16e02:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16e06:	b003      	add	sp, #12
   16e08:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]);
   16e0a:	b2e3      	uxtb	r3, r4
   16e0c:	4a10      	ldr	r2, [pc, #64]	; (16e50 <nrfx_gpiote_trigger_enable+0x94>)
   16e0e:	3308      	adds	r3, #8
   16e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   16e14:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   16e18:	2b04      	cmp	r3, #4
   16e1a:	d012      	beq.n	16e42 <nrfx_gpiote_trigger_enable+0x86>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   16e1c:	2b05      	cmp	r3, #5
   16e1e:	d012      	beq.n	16e46 <nrfx_gpiote_trigger_enable+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16e20:	a801      	add	r0, sp, #4
   16e22:	9401      	str	r4, [sp, #4]
   16e24:	f005 fe87 	bl	1cb36 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16e28:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   16e2a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16e2e:	40d9      	lsrs	r1, r3
   16e30:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
   16e34:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   16e36:	4620      	mov	r0, r4
}
   16e38:	b003      	add	sp, #12
   16e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16e3e:	f005 becd 	b.w	1cbdc <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   16e42:	2103      	movs	r1, #3
   16e44:	e7f7      	b.n	16e36 <nrfx_gpiote_trigger_enable+0x7a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   16e46:	2102      	movs	r1, #2
   16e48:	e7f5      	b.n	16e36 <nrfx_gpiote_trigger_enable+0x7a>
   16e4a:	bf00      	nop
   16e4c:	40006000 	.word	0x40006000
   16e50:	20000784 	.word	0x20000784

00016e54 <nrfx_gpiote_trigger_disable>:
{
   16e54:	b508      	push	{r3, lr}
   16e56:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16e58:	f7ff fda0 	bl	1699c <pin_in_use_by_te>
   16e5c:	b1c0      	cbz	r0, 16e90 <nrfx_gpiote_trigger_disable+0x3c>
    return !pin_is_output(pin);
   16e5e:	4610      	mov	r0, r2
   16e60:	f7ff fda6 	bl	169b0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   16e64:	b9a0      	cbnz	r0, 16e90 <nrfx_gpiote_trigger_disable+0x3c>
        uint8_t ch = pin_te_get(pin);
   16e66:	4610      	mov	r0, r2
   16e68:	f7ff fdac 	bl	169c4 <pin_te_get>
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
   16e6c:	4a0b      	ldr	r2, [pc, #44]	; (16e9c <nrfx_gpiote_trigger_disable+0x48>)
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   16e6e:	2301      	movs	r3, #1
   16e70:	4083      	lsls	r3, r0
   16e72:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   16e76:	b203      	sxth	r3, r0
   16e78:	009b      	lsls	r3, r3, #2
   16e7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16e7e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16e82:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16e86:	f022 0203 	bic.w	r2, r2, #3
   16e8a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   16e8e:	bd08      	pop	{r3, pc}
   16e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16e94:	2100      	movs	r1, #0
   16e96:	4610      	mov	r0, r2
   16e98:	f005 bea0 	b.w	1cbdc <nrf_gpio_cfg_sense_set>
   16e9c:	40006000 	.word	0x40006000

00016ea0 <nrfx_gpiote_pin_uninit>:
{
   16ea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_IN_USE;
   16ea2:	b2c5      	uxtb	r5, r0
   16ea4:	4e17      	ldr	r6, [pc, #92]	; (16f04 <nrfx_gpiote_pin_uninit+0x64>)
   16ea6:	3508      	adds	r5, #8
{
   16ea8:	4604      	mov	r4, r0
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_IN_USE;
   16eaa:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
    if (!pin_in_use(pin))
   16eae:	07db      	lsls	r3, r3, #31
   16eb0:	d526      	bpl.n	16f00 <nrfx_gpiote_pin_uninit+0x60>
    nrfx_gpiote_trigger_disable(pin);
   16eb2:	f7ff ffcf 	bl	16e54 <nrfx_gpiote_trigger_disable>
    if (pin_in_use_by_te(pin))
   16eb6:	4620      	mov	r0, r4
   16eb8:	f7ff fd70 	bl	1699c <pin_in_use_by_te>
   16ebc:	b140      	cbz	r0, 16ed0 <nrfx_gpiote_pin_uninit+0x30>
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   16ebe:	4620      	mov	r0, r4
   16ec0:	f7ff fd80 	bl	169c4 <pin_te_get>
    p_reg->CONFIG[idx] = 0;
   16ec4:	4b10      	ldr	r3, [pc, #64]	; (16f08 <nrfx_gpiote_pin_uninit+0x68>)
   16ec6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   16eca:	2200      	movs	r2, #0
   16ecc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   16ed0:	4620      	mov	r0, r4
   16ed2:	f7ff fd9f 	bl	16a14 <release_handler>
    m_cb.pin_flags[get_pin_idx(pin)] = PIN_FLAG_NOT_USED;
   16ed6:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16ed8:	a801      	add	r0, sp, #4
   16eda:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    nrf_gpio_cfg(
   16ede:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16ee0:	f005 fe29 	bl	1cb36 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   16ee4:	9b01      	ldr	r3, [sp, #4]
   16ee6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
   16eea:	4b08      	ldr	r3, [pc, #32]	; (16f0c <nrfx_gpiote_pin_uninit+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   16eec:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   16ef0:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   16ef2:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   16ef6:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    nrf_gpio_cfg(
   16efa:	4805      	ldr	r0, [pc, #20]	; (16f10 <nrfx_gpiote_pin_uninit+0x70>)
}
   16efc:	b002      	add	sp, #8
   16efe:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16f00:	4804      	ldr	r0, [pc, #16]	; (16f14 <nrfx_gpiote_pin_uninit+0x74>)
   16f02:	e7fb      	b.n	16efc <nrfx_gpiote_pin_uninit+0x5c>
   16f04:	20000784 	.word	0x20000784
   16f08:	40006000 	.word	0x40006000
   16f0c:	fffcf8f0 	.word	0xfffcf8f0
   16f10:	0bad0000 	.word	0x0bad0000
   16f14:	0bad0004 	.word	0x0bad0004

00016f18 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   16f18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
   16f1c:	4b53      	ldr	r3, [pc, #332]	; (1706c <nrfx_gpiote_irq_handler+0x154>)
   16f1e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   16f22:	b2c0      	uxtb	r0, r0
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
   16f24:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   16f28:	f7ff fd9e 	bl	16a68 <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   16f2c:	1e05      	subs	r5, r0, #0
   16f2e:	da1a      	bge.n	16f66 <nrfx_gpiote_irq_handler+0x4e>
        *p_masks = gpio_regs[i]->LATCH;
   16f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(abs_pin)]);
   16f34:	f8df 8138 	ldr.w	r8, [pc, #312]	; 17070 <nrfx_gpiote_irq_handler+0x158>
   16f38:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   16f3c:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   16f3e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   16f42:	2701      	movs	r7, #1
            while (latch[i])
   16f44:	9c00      	ldr	r4, [sp, #0]
   16f46:	b9a4      	cbnz	r4, 16f72 <nrfx_gpiote_irq_handler+0x5a>
   16f48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   16f4c:	f7ff fd8c 	bl	16a68 <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
   16f50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   16f54:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   16f58:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   16f5a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   16f5e:	2b00      	cmp	r3, #0
   16f60:	d1ef      	bne.n	16f42 <nrfx_gpiote_irq_handler+0x2a>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   16f62:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
   16f66:	2401      	movs	r4, #1
    while (mask)
   16f68:	2d00      	cmp	r5, #0
   16f6a:	d166      	bne.n	1703a <nrfx_gpiote_irq_handler+0x122>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
   16f6c:	b002      	add	sp, #8
   16f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   16f72:	fa94 f4a4 	rbit	r4, r4
   16f76:	fab4 f484 	clz	r4, r4
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   16f7a:	08e0      	lsrs	r0, r4, #3
                    PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(abs_pin)]);
   16f7c:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   16f80:	f004 0207 	and.w	r2, r4, #7
   16f84:	f838 9013 	ldrh.w	r9, [r8, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   16f88:	f81d 3000 	ldrb.w	r3, [sp, r0]
   16f8c:	9401      	str	r4, [sp, #4]
   16f8e:	fa07 f202 	lsl.w	r2, r7, r2
   16f92:	ea23 0302 	bic.w	r3, r3, r2
   16f96:	f80d 3000 	strb.w	r3, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16f9a:	a801      	add	r0, sp, #4
   16f9c:	f005 fdcb 	bl	1cb36 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16fa0:	9b01      	ldr	r3, [sp, #4]
   16fa2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16fa6:	ea4f 0199 	mov.w	r1, r9, lsr #2
   16faa:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   16fae:	f3c9 0a82 	ubfx	sl, r9, #2, #3
    if (is_level(trigger))
   16fb2:	074b      	lsls	r3, r1, #29
                nrfx_gpiote_trigger_t trigger =
   16fb4:	46d1      	mov	r9, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   16fb6:	f3c6 4601 	ubfx	r6, r6, #16, #2
    if (is_level(trigger))
   16fba:	d523      	bpl.n	17004 <nrfx_gpiote_irq_handler+0xec>
        call_handler(pin, trigger);
   16fbc:	4620      	mov	r0, r4
   16fbe:	4651      	mov	r1, sl
   16fc0:	f7ff fd0a 	bl	169d8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16fc4:	a801      	add	r0, sp, #4
   16fc6:	9401      	str	r4, [sp, #4]
   16fc8:	f005 fdb5 	bl	1cb36 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   16fcc:	9b01      	ldr	r3, [sp, #4]
   16fce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16fd2:	b2f6      	uxtb	r6, r6
   16fd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
   16fd8:	f3c3 4301 	ubfx	r3, r3, #16, #2
   16fdc:	429e      	cmp	r6, r3
   16fde:	d107      	bne.n	16ff0 <nrfx_gpiote_irq_handler+0xd8>
   16fe0:	2100      	movs	r1, #0
   16fe2:	4620      	mov	r0, r4
   16fe4:	f005 fdfa 	bl	1cbdc <nrf_gpio_cfg_sense_set>
   16fe8:	4631      	mov	r1, r6
   16fea:	4620      	mov	r0, r4
   16fec:	f005 fdf6 	bl	1cbdc <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16ff0:	a801      	add	r0, sp, #4
   16ff2:	9401      	str	r4, [sp, #4]
   16ff4:	f005 fd9f 	bl	1cb36 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   16ff8:	9b01      	ldr	r3, [sp, #4]
   16ffa:	fa07 f303 	lsl.w	r3, r7, r3
   16ffe:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
/** @refhal{nrf_gpio_pin_latch_clear} */
NRFY_STATIC_INLINE void nrfy_gpio_pin_latch_clear(uint32_t pin_number)
{
    nrf_gpio_pin_latch_clear(pin_number);
    nrf_barrier_w();
}
   17002:	e79f      	b.n	16f44 <nrfx_gpiote_irq_handler+0x2c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   17004:	2e02      	cmp	r6, #2
   17006:	d10c      	bne.n	17022 <nrfx_gpiote_irq_handler+0x10a>
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   17008:	2103      	movs	r1, #3
   1700a:	4620      	mov	r0, r4
   1700c:	f005 fde6 	bl	1cbdc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   17010:	f00a 0305 	and.w	r3, sl, #5
   17014:	2b01      	cmp	r3, #1
   17016:	d1eb      	bne.n	16ff0 <nrfx_gpiote_irq_handler+0xd8>
            call_handler(pin, trigger);
   17018:	4649      	mov	r1, r9
   1701a:	4620      	mov	r0, r4
   1701c:	f7ff fcdc 	bl	169d8 <call_handler>
   17020:	e7e6      	b.n	16ff0 <nrfx_gpiote_irq_handler+0xd8>
   17022:	2102      	movs	r1, #2
   17024:	4620      	mov	r0, r4
   17026:	f005 fdd9 	bl	1cbdc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1702a:	f1ba 0f03 	cmp.w	sl, #3
   1702e:	d0f3      	beq.n	17018 <nrfx_gpiote_irq_handler+0x100>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   17030:	2e03      	cmp	r6, #3
   17032:	d1dd      	bne.n	16ff0 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   17034:	f1ba 0f02 	cmp.w	sl, #2
   17038:	e7ed      	b.n	17016 <nrfx_gpiote_irq_handler+0xfe>
        uint32_t ch = NRF_CTZ(mask);
   1703a:	fa95 f3a5 	rbit	r3, r5
   1703e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   17042:	fa04 f203 	lsl.w	r2, r4, r3
   17046:	009b      	lsls	r3, r3, #2
   17048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1704c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   17050:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17054:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   17058:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1705c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   17060:	f3c1 4101 	ubfx	r1, r1, #16, #2
   17064:	f7ff fcb8 	bl	169d8 <call_handler>
   17068:	e77e      	b.n	16f68 <nrfx_gpiote_irq_handler+0x50>
   1706a:	bf00      	nop
   1706c:	40006000 	.word	0x40006000
   17070:	20000784 	.word	0x20000784

00017074 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   17074:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   17076:	4801      	ldr	r0, [pc, #4]	; (1707c <nrfx_ppi_channel_alloc+0x8>)
   17078:	f7ff bb48 	b.w	1670c <nrfx_flag32_alloc>
   1707c:	200007e0 	.word	0x200007e0

00017080 <twim_configure>:
    return transfer_complete;
}

static void twim_configure(nrfx_twim_t const *        p_instance,
                           nrfx_twim_config_t const * p_config)
{
   17080:	b410      	push	{r4}
 * @param[in] p_config Pointer to the peripheral configuration structure.
 */
NRFY_STATIC_INLINE void nrfy_twim_periph_configure(NRF_TWIM_Type *            p_reg,
                                                   nrfy_twim_config_t const * p_config)
{
    if (!p_config->skip_psel_cfg)
   17082:	7bcc      	ldrb	r4, [r1, #15]
    {
        .pins = {
            .scl_pin = p_config->scl_pin,
            .sda_pin = p_config->sda_pin
        },
        .frequency     = p_config->frequency,
   17084:	688a      	ldr	r2, [r1, #8]
        .skip_psel_cfg = p_config->skip_psel_cfg
    };

    nrfy_twim_periph_configure(p_instance->p_twim, &nrfy_config);
   17086:	6803      	ldr	r3, [r0, #0]
   17088:	b92c      	cbnz	r4, 17096 <twim_configure+0x16>
            .sda_pin = p_config->sda_pin
   1708a:	e9d1 4100 	ldrd	r4, r1, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1708e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   17092:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   17096:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    if (m_cb[p_instance->drv_inst_idx].handler)
   1709a:	7903      	ldrb	r3, [r0, #4]
   1709c:	2228      	movs	r2, #40	; 0x28
   1709e:	4353      	muls	r3, r2
   170a0:	4a05      	ldr	r2, [pc, #20]	; (170b8 <twim_configure+0x38>)
   170a2:	58d3      	ldr	r3, [r2, r3]
   170a4:	b12b      	cbz	r3, 170b2 <twim_configure+0x32>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   170a6:	6800      	ldr	r0, [r0, #0]
    {
        nrfy_twim_int_init(p_instance->p_twim, 0, p_config->interrupt_priority, false);
    }
}
   170a8:	bc10      	pop	{r4}
    __nrfy_internal_twim_event_enabled_clear(p_reg, mask, NRF_TWIM_EVENT_SUSPENDED);
    __nrfy_internal_twim_event_enabled_clear(p_reg, mask, NRF_TWIM_EVENT_ERROR);
    nrf_barrier_w();

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_reg), irq_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_reg));
   170aa:	f340 3007 	sbfx	r0, r0, #12, #8
   170ae:	f7ec bbff 	b.w	38b0 <arch_irq_enable>
   170b2:	bc10      	pop	{r4}
   170b4:	4770      	bx	lr
   170b6:	bf00      	nop
   170b8:	200025a8 	.word	0x200025a8

000170bc <irq_handler>:
{
    return nrfy_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   170bc:	b570      	push	{r4, r5, r6, lr}
   170be:	460c      	mov	r4, r1
   170c0:	b086      	sub	sp, #24
 */
NRFY_STATIC_INLINE uint32_t nrfy_twim_events_process(NRF_TWIM_Type *               p_reg,
                                                     uint32_t                      mask,
                                                     nrfy_twim_xfer_desc_t const * p_xfer)
{
    uint32_t evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
   170c2:	2102      	movs	r1, #2
   170c4:	4605      	mov	r5, r0
   170c6:	f005 fdda 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
   170ca:	f44f 7100 	mov.w	r1, #512	; 0x200
   170ce:	4606      	mov	r6, r0
   170d0:	4628      	mov	r0, r5
   170d2:	f005 fdd4 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>

    bool stopped = nrfy_twim_events_process(p_twim,
                                            NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_STOPPED),
                                            p_xfer);

    if (nrfy_twim_events_process(p_twim,
   170d6:	b1d0      	cbz	r0, 1710e <irq_handler+0x52>
                                 NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR),
                                 p_xfer))
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!stopped)
   170d8:	b9d6      	cbnz	r6, 17110 <irq_handler+0x54>
        {
            nrfy_twim_int_disable(p_twim, p_cb->int_mask);
   170da:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   170dc:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   170e0:	2302      	movs	r3, #2
   170e2:	60a3      	str	r3, [r4, #8]
            nrfy_twim_int_enable(p_twim, p_cb->int_mask);
   170e4:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   170e6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   170ea:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   170ee:	4628      	mov	r0, r5
   170f0:	f005 fdc5 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>

            if (!(nrfy_twim_events_process(p_twim,
   170f4:	b118      	cbz	r0, 170fe <irq_handler+0x42>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   170f6:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   170fa:	059b      	lsls	r3, r3, #22
   170fc:	d402      	bmi.n	17104 <irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   170fe:	2301      	movs	r3, #1
   17100:	622b      	str	r3, [r5, #32]
   17102:	616b      	str	r3, [r5, #20]
            {
                nrfy_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrfy_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   17104:	2301      	movs	r3, #1
   17106:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   1710a:	b006      	add	sp, #24
   1710c:	bd70      	pop	{r4, r5, r6, pc}
    if (stopped)
   1710e:	b3ae      	cbz	r6, 1717c <irq_handler+0xc0>
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   17110:	69e3      	ldr	r3, [r4, #28]
   17112:	065e      	lsls	r6, r3, #25
   17114:	d40a      	bmi.n	1712c <irq_handler+0x70>
   17116:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1711a:	b93b      	cbnz	r3, 1712c <irq_handler+0x70>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1711c:	4621      	mov	r1, r4
   1711e:	4628      	mov	r0, r5
   17120:	f005 fd6b 	bl	1cbfa <xfer_completeness_check>
   17124:	f080 0001 	eor.w	r0, r0, #1
   17128:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1712c:	69e3      	ldr	r3, [r4, #28]
   1712e:	f013 0304 	ands.w	r3, r3, #4
   17132:	d13b      	bne.n	171ac <irq_handler+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17134:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
   17138:	f8d5 2160 	ldr.w	r2, [r5, #352]	; 0x160
   1713c:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
   17140:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   17144:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17148:	b113      	cbz	r3, 17150 <irq_handler+0x94>
   1714a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1714e:	b313      	cbz	r3, 17196 <irq_handler+0xda>
    p_reg->SHORTS = mask;
   17150:	2300      	movs	r3, #0
   17152:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   17156:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   17158:	4b31      	ldr	r3, [pc, #196]	; (17220 <irq_handler+0x164>)
   1715a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1715e:	f345 3307 	sbfx	r3, r5, #12, #8
  if ((int32_t)(IRQn) >= 0)
   17162:	2b00      	cmp	r3, #0
   17164:	db17      	blt.n	17196 <irq_handler+0xda>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17166:	095a      	lsrs	r2, r3, #5
   17168:	2101      	movs	r1, #1
   1716a:	f003 031f 	and.w	r3, r3, #31
   1716e:	4099      	lsls	r1, r3
   17170:	f102 0360 	add.w	r3, r2, #96	; 0x60
   17174:	4a2b      	ldr	r2, [pc, #172]	; (17224 <irq_handler+0x168>)
   17176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1717a:	e00c      	b.n	17196 <irq_handler+0xda>
   1717c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   17180:	4628      	mov	r0, r5
   17182:	f005 fd7c 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
        if (p_cb->xfer_type == NRFX_TWIM_XFER_TX)
   17186:	f894 3020 	ldrb.w	r3, [r4, #32]
   1718a:	2b00      	cmp	r3, #0
   1718c:	d12f      	bne.n	171ee <irq_handler+0x132>
            if (!p_cb->repeated)
   1718e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17192:	2b00      	cmp	r3, #0
   17194:	d0dd      	beq.n	17152 <irq_handler+0x96>
            event.xfer_desc.type    = p_cb->xfer_type;
   17196:	8c23      	ldrh	r3, [r4, #32]
   17198:	f8ad 3004 	strh.w	r3, [sp, #4]
            event.xfer_desc.p_primary_buf    = p_cb->xfer_desc_primary.p_buffer;
   1719c:	68e3      	ldr	r3, [r4, #12]
   1719e:	9304      	str	r3, [sp, #16]
            event.xfer_desc.primary_length   = p_cb->xfer_desc_primary.length;
   171a0:	6923      	ldr	r3, [r4, #16]
   171a2:	9302      	str	r3, [sp, #8]
            event.xfer_desc.p_secondary_buf  = p_cb->xfer_desc_secondary.p_buffer;
   171a4:	6963      	ldr	r3, [r4, #20]
   171a6:	9305      	str	r3, [sp, #20]
            event.xfer_desc.secondary_length = p_cb->xfer_desc_secondary.length;
   171a8:	69a3      	ldr	r3, [r4, #24]
   171aa:	9303      	str	r3, [sp, #12]
    uint32_t error_source = p_reg->ERRORSRC;
   171ac:	f8d5 34c4 	ldr.w	r3, [r5, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   171b0:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   171b4:	0798      	lsls	r0, r3, #30
   171b6:	d42c      	bmi.n	17212 <irq_handler+0x156>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   171b8:	0759      	lsls	r1, r3, #29
   171ba:	d42c      	bmi.n	17216 <irq_handler+0x15a>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   171bc:	07da      	lsls	r2, r3, #31
   171be:	d42c      	bmi.n	1721a <irq_handler+0x15e>
    else if (p_cb->error)
   171c0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   171c4:	009b      	lsls	r3, r3, #2
   171c6:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   171c8:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   171cc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   171d0:	b90b      	cbnz	r3, 171d6 <irq_handler+0x11a>
        p_cb->busy = false;
   171d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   171d6:	69e3      	ldr	r3, [r4, #28]
   171d8:	075b      	lsls	r3, r3, #29
   171da:	d503      	bpl.n	171e4 <irq_handler+0x128>
   171dc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   171e0:	2b00      	cmp	r3, #0
   171e2:	d092      	beq.n	1710a <irq_handler+0x4e>
        p_cb->handler(&event, p_cb->p_context);
   171e4:	e9d4 3100 	ldrd	r3, r1, [r4]
   171e8:	4668      	mov	r0, sp
   171ea:	4798      	blx	r3
   171ec:	e78d      	b.n	1710a <irq_handler+0x4e>
    p_reg->SHORTS = mask;
   171ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   171f2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   171f6:	f240 2302 	movw	r3, #514	; 0x202
   171fa:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   171fc:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   17200:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrfy_twim_int_enable(p_twim, p_cb->int_mask);
   17204:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   17206:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1720a:	2301      	movs	r3, #1
   1720c:	60ab      	str	r3, [r5, #8]
   1720e:	622b      	str	r3, [r5, #32]
            return;
   17210:	e77b      	b.n	1710a <irq_handler+0x4e>
   17212:	2301      	movs	r3, #1
   17214:	e7d8      	b.n	171c8 <irq_handler+0x10c>
   17216:	2302      	movs	r3, #2
   17218:	e7d6      	b.n	171c8 <irq_handler+0x10c>
   1721a:	2303      	movs	r3, #3
   1721c:	e7d4      	b.n	171c8 <irq_handler+0x10c>
   1721e:	bf00      	nop
   17220:	019c0202 	.word	0x019c0202
   17224:	e000e100 	.word	0xe000e100

00017228 <nrfx_twim_init>:
{
   17228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1722a:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1722c:	4c2a      	ldr	r4, [pc, #168]	; (172d8 <nrfx_twim_init+0xb0>)
   1722e:	f04f 0c28 	mov.w	ip, #40	; 0x28
   17232:	fb0c fc06 	mul.w	ip, ip, r6
   17236:	eb04 050c 	add.w	r5, r4, ip
   1723a:	f895 7022 	ldrb.w	r7, [r5, #34]	; 0x22
   1723e:	2f00      	cmp	r7, #0
   17240:	d13e      	bne.n	172c0 <nrfx_twim_init+0x98>
    p_cb->int_mask        = 0;
   17242:	60af      	str	r7, [r5, #8]
    p_cb->handler         = event_handler;
   17244:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context       = p_context;
   17248:	606b      	str	r3, [r5, #4]
    p_cb->repeated        = false;
   1724a:	f885 7025 	strb.w	r7, [r5, #37]	; 0x25
    p_cb->busy            = false;
   1724e:	f885 7024 	strb.w	r7, [r5, #36]	; 0x24
    if (p_config)
   17252:	b369      	cbz	r1, 172b0 <nrfx_twim_init+0x88>
        p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   17254:	7b8f      	ldrb	r7, [r1, #14]
   17256:	f885 7027 	strb.w	r7, [r5, #39]	; 0x27
   if (!p_config->skip_gpio_cfg)
   1725a:	bb0f      	cbnz	r7, 172a0 <nrfx_twim_init+0x78>
        TWIM_PIN_INIT(p_config->scl_pin, pin_drive);
   1725c:	680a      	ldr	r2, [r1, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1725e:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17262:	0952      	lsrs	r2, r2, #5
   17264:	d12e      	bne.n	172c4 <nrfx_twim_init+0x9c>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   17266:	009b      	lsls	r3, r3, #2
   17268:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    cnf &= ~to_update;
   1726c:	f8df c06c 	ldr.w	ip, [pc, #108]	; 172dc <nrfx_twim_init+0xb4>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   17270:	f8d3 5700 	ldr.w	r5, [r3, #1792]	; 0x700
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   17274:	f240 670c 	movw	r7, #1548	; 0x60c
    cnf &= ~to_update;
   17278:	ea05 050c 	and.w	r5, r5, ip
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   1727c:	433d      	orrs	r5, r7
    reg->PIN_CNF[pin_number] = cnf;
   1727e:	f8c3 5700 	str.w	r5, [r3, #1792]	; 0x700
        TWIM_PIN_INIT(p_config->sda_pin, pin_drive);
   17282:	684d      	ldr	r5, [r1, #4]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   17284:	f005 031f 	and.w	r3, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17288:	096d      	lsrs	r5, r5, #5
   1728a:	d120      	bne.n	172ce <nrfx_twim_init+0xa6>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1728c:	009b      	lsls	r3, r3, #2
   1728e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   17292:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    cnf &= ~to_update;
   17296:	ea02 020c 	and.w	r2, r2, ip
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   1729a:	433a      	orrs	r2, r7
    reg->PIN_CNF[pin_number] = cnf;
   1729c:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
        p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   172a0:	2328      	movs	r3, #40	; 0x28
   172a2:	fb03 4306 	mla	r3, r3, r6, r4
   172a6:	7b4a      	ldrb	r2, [r1, #13]
   172a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        twim_configure(p_instance, p_config);
   172ac:	f7ff fee8 	bl	17080 <twim_configure>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   172b0:	2328      	movs	r3, #40	; 0x28
   172b2:	fb03 4406 	mla	r4, r3, r6, r4
    return err_code;
   172b6:	480a      	ldr	r0, [pc, #40]	; (172e0 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   172b8:	2301      	movs	r3, #1
   172ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
   172be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   172c0:	4808      	ldr	r0, [pc, #32]	; (172e4 <nrfx_twim_init+0xbc>)
   172c2:	e7fc      	b.n	172be <nrfx_twim_init+0x96>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   172c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   172c8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   172cc:	deff      	udf	#255	; 0xff
   172ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   172d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172d6:	e7f9      	b.n	172cc <nrfx_twim_init+0xa4>
   172d8:	200025a8 	.word	0x200025a8
   172dc:	fffcf8f0 	.word	0xfffcf8f0
   172e0:	0bad0000 	.word	0x0bad0000
   172e4:	0bad0005 	.word	0x0bad0005

000172e8 <nrfx_twim_enable>:
    nrfy_twim_enable(p_instance->p_twim);
   172e8:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   172ea:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   172ec:	2106      	movs	r1, #6
   172ee:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   172f2:	4b04      	ldr	r3, [pc, #16]	; (17304 <nrfx_twim_enable+0x1c>)
   172f4:	2128      	movs	r1, #40	; 0x28
   172f6:	fb01 3302 	mla	r3, r1, r2, r3
   172fa:	2202      	movs	r2, #2
   172fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
   17300:	4770      	bx	lr
   17302:	bf00      	nop
   17304:	200025a8 	.word	0x200025a8

00017308 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   17308:	7902      	ldrb	r2, [r0, #4]
    p_cb->int_mask = 0;
   1730a:	4b0c      	ldr	r3, [pc, #48]	; (1733c <nrfx_twim_disable+0x34>)
   1730c:	2128      	movs	r1, #40	; 0x28
   1730e:	fb01 3302 	mla	r3, r1, r2, r3
   17312:	2100      	movs	r1, #0
   17314:	6099      	str	r1, [r3, #8]
    nrfy_twim_stop(p_instance->p_twim);
   17316:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   17318:	4809      	ldr	r0, [pc, #36]	; (17340 <nrfx_twim_disable+0x38>)
   1731a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1731e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   17322:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   17326:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1732a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1732e:	2201      	movs	r2, #1
   17330:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    p_cb->busy = false;
   17334:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
}
   17338:	4770      	bx	lr
   1733a:	bf00      	nop
   1733c:	200025a8 	.word	0x200025a8
   17340:	019c0202 	.word	0x019c0202

00017344 <nrfx_twim_xfer>:
{
   17344:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p_cb->error = false;
   17348:	4db0      	ldr	r5, [pc, #704]	; (1760c <nrfx_twim_xfer+0x2c8>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1734a:	f890 9004 	ldrb.w	r9, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1734e:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   17350:	2328      	movs	r3, #40	; 0x28
   17352:	fb03 5309 	mla	r3, r3, r9, r5
{
   17356:	4690      	mov	r8, r2
    p_cb->error = false;
   17358:	2200      	movs	r2, #0
   1735a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    if (p_xfer_desc->primary_length != 0 &&
   1735e:	684b      	ldr	r3, [r1, #4]
{
   17360:	460e      	mov	r6, r1
    if (p_xfer_desc->primary_length != 0 &&
   17362:	b133      	cbz	r3, 17372 <nrfx_twim_xfer+0x2e>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   17364:	68cb      	ldr	r3, [r1, #12]
   17366:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1736a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1736e:	f040 8185 	bne.w	1767c <nrfx_twim_xfer+0x338>
    if ((p_xfer_desc->type == NRFX_TWIM_XFER_TXTX ||
   17372:	7833      	ldrb	r3, [r6, #0]
   17374:	3b02      	subs	r3, #2
   17376:	2b01      	cmp	r3, #1
   17378:	d806      	bhi.n	17388 <nrfx_twim_xfer+0x44>
   1737a:	6933      	ldr	r3, [r6, #16]
   1737c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
         p_xfer_desc->type == NRFX_TWIM_XFER_TXRX) &&
   17380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   17384:	f040 817a 	bne.w	1767c <nrfx_twim_xfer+0x338>
    p_reg->INTENCLR = mask;
   17388:	4ba1      	ldr	r3, [pc, #644]	; (17610 <nrfx_twim_xfer+0x2cc>)
   1738a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   1738e:	2328      	movs	r3, #40	; 0x28
   17390:	fb03 5309 	mla	r3, r3, r9, r5
   17394:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   17398:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1739c:	b139      	cbz	r1, 173ae <nrfx_twim_xfer+0x6a>
        nrfy_twim_int_enable(p_twim, p_cb->int_mask);
   1739e:	689b      	ldr	r3, [r3, #8]
        return err_code;
   173a0:	f8df b270 	ldr.w	fp, [pc, #624]	; 17614 <nrfx_twim_xfer+0x2d0>
    p_reg->INTENSET = mask;
   173a4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   173a8:	4658      	mov	r0, fp
   173aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false : true;
   173ae:	f018 0f14 	tst.w	r8, #20
   173b2:	bf0c      	ite	eq
   173b4:	2101      	moveq	r1, #1
   173b6:	2100      	movne	r1, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   173b8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
    p_cb->xfer_type = p_xfer_desc->type;
   173bc:	7831      	ldrb	r1, [r6, #0]
   173be:	f883 1020 	strb.w	r1, [r3, #32]
    p_cb->address   = p_xfer_desc->address;
   173c2:	7871      	ldrb	r1, [r6, #1]
   173c4:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    p_cb->xfer_desc_primary.p_buffer   = p_xfer_desc->p_primary_buf;
   173c8:	68f1      	ldr	r1, [r6, #12]
   173ca:	60d9      	str	r1, [r3, #12]
    p_cb->xfer_desc_primary.length     = p_xfer_desc->primary_length;
   173cc:	6871      	ldr	r1, [r6, #4]
   173ce:	6119      	str	r1, [r3, #16]
    p_cb->xfer_desc_secondary.p_buffer = p_xfer_desc->p_secondary_buf;
   173d0:	6931      	ldr	r1, [r6, #16]
   173d2:	6159      	str	r1, [r3, #20]
    p_cb->xfer_desc_secondary.length   = p_xfer_desc->secondary_length;
   173d4:	68b1      	ldr	r1, [r6, #8]
   173d6:	6199      	str	r1, [r3, #24]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   173d8:	f3c8 1100 	ubfx	r1, r8, #4, #1
   173dc:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    p_cb->flags = flags;
   173e0:	f8c3 801c 	str.w	r8, [r3, #28]
    p_reg->ADDRESS = address;
   173e4:	7873      	ldrb	r3, [r6, #1]
   173e6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173ea:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
   173ee:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   173f2:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   173f6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   173fa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   173fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17402:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17406:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 * @param[in] p_reg  Pointer to the structure of registers of the peripheral.
 * @param[in] enable True if TX list feature is to be enabled, false otherwise.
 */
NRFY_STATIC_INLINE void nrfy_twim_tx_list_set(NRF_TWIM_Type * p_reg, bool enable)
{
    if (enable)
   1740a:	f018 0301 	ands.w	r3, r8, #1
}

#if NRF_TWIM_HAS_ARRAY_LIST
NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1740e:	bf18      	it	ne
   17410:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   17412:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
 * @param[in] p_reg  Pointer to the structure of registers of the peripheral.
 * @param[in] enable True if RX list feature is to be enabled, false otherwise.
 */
NRFY_STATIC_INLINE void nrfy_twim_rx_list_set(NRF_TWIM_Type * p_reg, bool enable)
{
    if (enable)
   17416:	f018 0302 	ands.w	r3, r8, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1741a:	bf18      	it	ne
   1741c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1741e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   17422:	7833      	ldrb	r3, [r6, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   17424:	eb09 0789 	add.w	r7, r9, r9, lsl #2
   17428:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
    switch (p_xfer_desc->type)
   1742c:	2b03      	cmp	r3, #3
   1742e:	f200 80a3 	bhi.w	17578 <nrfx_twim_xfer+0x234>
   17432:	e8df f003 	tbb	[pc, r3]
   17436:	9879      	.short	0x9879
   17438:	0262      	.short	0x0262
    p_reg->SHORTS = mask;
   1743a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1743e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17442:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
   17446:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1744a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1744e:	2301      	movs	r3, #1
   17450:	60a3      	str	r3, [r4, #8]
    uint32_t evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
   17452:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   17456:	4620      	mov	r0, r4
   17458:	f005 fc11 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
            while (nrfy_twim_events_process(p_twim,
   1745c:	2800      	cmp	r0, #0
   1745e:	d1f8      	bne.n	17452 <nrfx_twim_xfer+0x10e>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17460:	e9d7 2305 	ldrd	r2, r3, [r7, #20]
   17464:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17468:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1746c:	2328      	movs	r3, #40	; 0x28
   1746e:	fb03 5309 	mla	r3, r3, r9, r5
   17472:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   17476:	609a      	str	r2, [r3, #8]
    nrfx_err_t err_code = NRFX_SUCCESS;
   17478:	f8df b19c 	ldr.w	fp, [pc, #412]	; 17618 <nrfx_twim_xfer+0x2d4>
            nrfy_twim_rx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
   1747c:	2228      	movs	r2, #40	; 0x28
   1747e:	fb02 f209 	mul.w	r2, r2, r9
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   17482:	f018 0a08 	ands.w	sl, r8, #8
            nrfy_twim_rx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
   17486:	58ab      	ldr	r3, [r5, r2]
   17488:	eb05 0002 	add.w	r0, r5, r2
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1748c:	d113      	bne.n	174b6 <nrfx_twim_xfer+0x172>
   1748e:	7831      	ldrb	r1, [r6, #0]
   17490:	2903      	cmp	r1, #3
   17492:	d010      	beq.n	174b6 <nrfx_twim_xfer+0x172>
        if (p_xfer_desc->type == NRFX_TWIM_XFER_RX)
   17494:	2901      	cmp	r1, #1
   17496:	f040 8085 	bne.w	175a4 <nrfx_twim_xfer+0x260>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1749a:	6021      	str	r1, [r4, #0]
            nrfy_twim_rx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
   1749c:	2b00      	cmp	r3, #0
   1749e:	d06e      	beq.n	1757e <nrfx_twim_xfer+0x23a>
        if (p_xfer_desc->primary_length == 0 && p_cb->handler)
   174a0:	2228      	movs	r2, #40	; 0x28
   174a2:	fb02 f209 	mul.w	r2, r2, r9
   174a6:	6871      	ldr	r1, [r6, #4]
   174a8:	58aa      	ldr	r2, [r5, r2]
   174aa:	b921      	cbnz	r1, 174b6 <nrfx_twim_xfer+0x172>
   174ac:	2a00      	cmp	r2, #0
   174ae:	f000 80bb 	beq.w	17628 <nrfx_twim_xfer+0x2e4>
   174b2:	2201      	movs	r2, #1
   174b4:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   174b6:	2228      	movs	r2, #40	; 0x28
   174b8:	fb02 f209 	mul.w	r2, r2, r9
   174bc:	18a9      	adds	r1, r5, r2
   174be:	58aa      	ldr	r2, [r5, r2]
   174c0:	2a00      	cmp	r2, #0
   174c2:	f000 80b1 	beq.w	17628 <nrfx_twim_xfer+0x2e4>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   174c6:	f018 0f04 	tst.w	r8, #4
            p_cb->int_mask = 0;
   174ca:	bf1c      	itt	ne
   174cc:	2200      	movne	r2, #0
   174ce:	608a      	strne	r2, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   174d0:	f018 0f40 	tst.w	r8, #64	; 0x40
   174d4:	d106      	bne.n	174e4 <nrfx_twim_xfer+0x1a0>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   174d6:	2228      	movs	r2, #40	; 0x28
   174d8:	fb02 5209 	mla	r2, r2, r9, r5
   174dc:	6891      	ldr	r1, [r2, #8]
   174de:	f041 0102 	orr.w	r1, r1, #2
   174e2:	6091      	str	r1, [r2, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   174e4:	2228      	movs	r2, #40	; 0x28
   174e6:	fb02 5209 	mla	r2, r2, r9, r5
   174ea:	6891      	ldr	r1, [r2, #8]
   174ec:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   174f0:	6091      	str	r1, [r2, #8]
        nrfy_twim_int_enable(p_twim, p_cb->int_mask);
   174f2:	6892      	ldr	r2, [r2, #8]
    p_reg->INTENSET = mask;
   174f4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
NRFY_STATIC_INLINE void nrfy_twim_int_enable(NRF_TWIM_Type * p_reg,
                                             uint32_t        mask)
{
    nrf_twim_int_enable(p_reg, mask);
    nrf_barrier_w();
}
   174f8:	e756      	b.n	173a8 <nrfx_twim_xfer+0x64>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   174fa:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
   174fe:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17502:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17506:	e9d7 2305 	ldrd	r2, r3, [r7, #20]
   1750a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1750e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   17512:	f44f 5384 	mov.w	r3, #4224	; 0x1080
   17516:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1751a:	2301      	movs	r3, #1
   1751c:	6223      	str	r3, [r4, #32]
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1751e:	2328      	movs	r3, #40	; 0x28
   17520:	fb03 5309 	mla	r3, r3, r9, r5
   17524:	2202      	movs	r2, #2
   17526:	e7a6      	b.n	17476 <nrfx_twim_xfer+0x132>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   17528:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
            if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1752c:	f018 0f20 	tst.w	r8, #32
   17530:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17534:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   17538:	f04f 0328 	mov.w	r3, #40	; 0x28
    p_reg->SHORTS = mask;
   1753c:	bf15      	itete	ne
   1753e:	f44f 7280 	movne.w	r2, #256	; 0x100
   17542:	f44f 7200 	moveq.w	r2, #512	; 0x200
                p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   17546:	fb03 5309 	mlane	r3, r3, r9, r5
                p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1754a:	fb03 5309 	mlaeq	r3, r3, r9, r5
   1754e:	bf15      	itete	ne
   17550:	f8c4 2200 	strne.w	r2, [r4, #512]	; 0x200
   17554:	f8c4 2200 	streq.w	r2, [r4, #512]	; 0x200
                p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   17558:	f44f 2280 	movne.w	r2, #262144	; 0x40000
                p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1755c:	2202      	moveq	r2, #2
   1755e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17560:	2301      	movs	r3, #1
   17562:	6223      	str	r3, [r4, #32]
}
   17564:	e788      	b.n	17478 <nrfx_twim_xfer+0x134>
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17566:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
   1756a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1756e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   17572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17576:	e7ce      	b.n	17516 <nrfx_twim_xfer+0x1d2>
    switch (p_xfer_desc->type)
   17578:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 1761c <nrfx_twim_xfer+0x2d8>
   1757c:	e77e      	b.n	1747c <nrfx_twim_xfer+0x138>
        if (p_xfer->length == 0)
   1757e:	6902      	ldr	r2, [r0, #16]
   17580:	b902      	cbnz	r2, 17584 <nrfx_twim_xfer+0x240>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17582:	6161      	str	r1, [r4, #20]
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
   17584:	4926      	ldr	r1, [pc, #152]	; (17620 <nrfx_twim_xfer+0x2dc>)
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
   17586:	f8df a09c 	ldr.w	sl, [pc, #156]	; 17624 <nrfx_twim_xfer+0x2e0>
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
   1758a:	4620      	mov	r0, r4
   1758c:	f005 fb77 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
   17590:	2201      	movs	r2, #1
   17592:	f410 7f00 	tst.w	r0, #512	; 0x200
   17596:	bf18      	it	ne
   17598:	6162      	strne	r2, [r4, #20]
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
   1759a:	ea10 0f0a 	tst.w	r0, sl
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
   1759e:	4920      	ldr	r1, [pc, #128]	; (17620 <nrfx_twim_xfer+0x2dc>)
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
   175a0:	d0f3      	beq.n	1758a <nrfx_twim_xfer+0x246>
   175a2:	e77d      	b.n	174a0 <nrfx_twim_xfer+0x15c>
            nrfy_twim_tx_start(p_twim, p_cb->handler ? NULL : &p_cb->xfer_desc_primary);
   175a4:	2101      	movs	r1, #1
   175a6:	60a1      	str	r1, [r4, #8]
   175a8:	2b00      	cmp	r3, #0
   175aa:	f47f af79 	bne.w	174a0 <nrfx_twim_xfer+0x15c>
        if (p_xfer->length == 0)
   175ae:	6900      	ldr	r0, [r0, #16]
   175b0:	b318      	cbz	r0, 175fa <nrfx_twim_xfer+0x2b6>
        while (!(evt_mask & (NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_SUSPENDED) |
   175b2:	4b1c      	ldr	r3, [pc, #112]	; (17624 <nrfx_twim_xfer+0x2e0>)
   175b4:	ea1a 0f03 	tst.w	sl, r3
   175b8:	f47f af72 	bne.w	174a0 <nrfx_twim_xfer+0x15c>
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
   175bc:	4918      	ldr	r1, [pc, #96]	; (17620 <nrfx_twim_xfer+0x2dc>)
   175be:	4620      	mov	r0, r4
   175c0:	f005 fb5d 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
   175c4:	f410 7f00 	tst.w	r0, #512	; 0x200
            evt_mask = __nrfy_internal_twim_events_process(p_reg, mask, p_xfer);
   175c8:	4682      	mov	sl, r0
            if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_TWIM_EVENT_ERROR))
   175ca:	d0f2      	beq.n	175b2 <nrfx_twim_xfer+0x26e>
                bool lasttx_triggered = __nrfy_internal_twim_events_process(p_reg,
   175cc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   175d0:	4620      	mov	r0, r4
   175d2:	f005 fb54 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
    return p_reg->SHORTS;
   175d6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   175da:	b180      	cbz	r0, 175fe <nrfx_twim_xfer+0x2ba>
   175dc:	f411 7000 	ands.w	r0, r1, #512	; 0x200
   175e0:	d103      	bne.n	175ea <nrfx_twim_xfer+0x2a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175e2:	2201      	movs	r2, #1
   175e4:	6222      	str	r2, [r4, #32]
                    evt_mask = 0;
   175e6:	4682      	mov	sl, r0
   175e8:	6162      	str	r2, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   175ea:	05cb      	lsls	r3, r1, #23
   175ec:	d5e1      	bpl.n	175b2 <nrfx_twim_xfer+0x26e>
                    (void)__nrfy_internal_twim_events_process(p_reg,
   175ee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   175f2:	4620      	mov	r0, r4
   175f4:	f005 fb43 	bl	1cc7e <__nrfy_internal_twim_events_process.constprop.0>
                    evt_mask = 0;
   175f8:	e004      	b.n	17604 <nrfx_twim_xfer+0x2c0>
   175fa:	6161      	str	r1, [r4, #20]
}
   175fc:	e7d9      	b.n	175b2 <nrfx_twim_xfer+0x26e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175fe:	2201      	movs	r2, #1
   17600:	6222      	str	r2, [r4, #32]
   17602:	6162      	str	r2, [r4, #20]
                    evt_mask = 0;
   17604:	f04f 0a00 	mov.w	sl, #0
   17608:	e7d3      	b.n	175b2 <nrfx_twim_xfer+0x26e>
   1760a:	bf00      	nop
   1760c:	200025a8 	.word	0x200025a8
   17610:	019c0202 	.word	0x019c0202
   17614:	0bad000b 	.word	0x0bad000b
   17618:	0bad0000 	.word	0x0bad0000
   1761c:	0bad0004 	.word	0x0bad0004
   17620:	00040202 	.word	0x00040202
   17624:	00040002 	.word	0x00040002
        p_cb->busy = false;
   17628:	2128      	movs	r1, #40	; 0x28
    uint32_t error_source = p_reg->ERRORSRC;
   1762a:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1762e:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
   17632:	fb01 5509 	mla	r5, r1, r9, r5
   17636:	2100      	movs	r1, #0
   17638:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
        if (errorsrc)
   1763c:	b18a      	cbz	r2, 17662 <nrfx_twim_xfer+0x31e>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1763e:	4911      	ldr	r1, [pc, #68]	; (17684 <nrfx_twim_xfer+0x340>)
   17640:	4b11      	ldr	r3, [pc, #68]	; (17688 <nrfx_twim_xfer+0x344>)
   17642:	f012 0f01 	tst.w	r2, #1
   17646:	bf14      	ite	ne
   17648:	468b      	movne	fp, r1
   1764a:	469b      	moveq	fp, r3
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1764c:	3101      	adds	r1, #1
   1764e:	f012 0f02 	tst.w	r2, #2
   17652:	bf18      	it	ne
   17654:	468b      	movne	fp, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17656:	f012 0f04 	tst.w	r2, #4
   1765a:	4a0c      	ldr	r2, [pc, #48]	; (1768c <nrfx_twim_xfer+0x348>)
   1765c:	bf18      	it	ne
   1765e:	4693      	movne	fp, r2
   17660:	e6a2      	b.n	173a8 <nrfx_twim_xfer+0x64>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   17662:	f018 0f40 	tst.w	r8, #64	; 0x40
   17666:	f47f ae9f 	bne.w	173a8 <nrfx_twim_xfer+0x64>
                !xfer_completeness_check(p_twim, p_cb))
   1766a:	4639      	mov	r1, r7
   1766c:	4620      	mov	r0, r4
   1766e:	f005 fac4 	bl	1cbfa <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   17672:	4a05      	ldr	r2, [pc, #20]	; (17688 <nrfx_twim_xfer+0x344>)
   17674:	2800      	cmp	r0, #0
   17676:	bf08      	it	eq
   17678:	4693      	moveq	fp, r2
   1767a:	e695      	b.n	173a8 <nrfx_twim_xfer+0x64>
        return err_code;
   1767c:	f8df b010 	ldr.w	fp, [pc, #16]	; 17690 <nrfx_twim_xfer+0x34c>
   17680:	e692      	b.n	173a8 <nrfx_twim_xfer+0x64>
   17682:	bf00      	nop
   17684:	0bae0000 	.word	0x0bae0000
   17688:	0bad0001 	.word	0x0bad0001
   1768c:	0bae0002 	.word	0x0bae0002
   17690:	0bad000a 	.word	0x0bad000a

00017694 <nrfx_twim_0_irq_handler>:

NRFX_INSTANCE_IRQ_HANDLERS(TWIM, twim)
   17694:	4901      	ldr	r1, [pc, #4]	; (1769c <nrfx_twim_0_irq_handler+0x8>)
   17696:	4802      	ldr	r0, [pc, #8]	; (176a0 <nrfx_twim_0_irq_handler+0xc>)
   17698:	f7ff bd10 	b.w	170bc <irq_handler>
   1769c:	200025a8 	.word	0x200025a8
   176a0:	40003000 	.word	0x40003000

000176a4 <nrfx_twim_1_irq_handler>:
   176a4:	4902      	ldr	r1, [pc, #8]	; (176b0 <nrfx_twim_1_irq_handler+0xc>)
   176a6:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   176aa:	f7ff bd07 	b.w	170bc <irq_handler>
   176ae:	bf00      	nop
   176b0:	200025d0 	.word	0x200025d0

000176b4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   176b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   176b6:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   176b8:	f005 fb15 	bl	1cce6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   176bc:	4608      	mov	r0, r1
   176be:	f005 fb12 	bl	1cce6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   176c2:	a801      	add	r0, sp, #4
   176c4:	9601      	str	r6, [sp, #4]
   176c6:	f005 fb04 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   176ca:	9b01      	ldr	r3, [sp, #4]
    cnf &= ~to_update;
   176cc:	4d2e      	ldr	r5, [pc, #184]	; (17788 <nrfx_twi_twim_bus_recover+0xd4>)
   176ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
   176d2:	460c      	mov	r4, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   176d4:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   176d8:	9401      	str	r4, [sp, #4]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   176da:	f240 610d 	movw	r1, #1549	; 0x60d
    cnf &= ~to_update;
   176de:	402b      	ands	r3, r5
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   176e0:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   176e2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   176e6:	a801      	add	r0, sp, #4
   176e8:	f005 faf3 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   176ec:	9b01      	ldr	r3, [sp, #4]
   176ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   176f2:	2701      	movs	r7, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   176f4:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   176f8:	402b      	ands	r3, r5
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   176fa:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   176fc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   17700:	2004      	movs	r0, #4
   17702:	f005 f9fd 	bl	1cb00 <nrfx_busy_wait>
   17706:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17708:	a801      	add	r0, sp, #4
   1770a:	9401      	str	r4, [sp, #4]
   1770c:	f005 fae1 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17710:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   17712:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17716:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   17718:	07db      	lsls	r3, r3, #31
   1771a:	d415      	bmi.n	17748 <nrfx_twi_twim_bus_recover+0x94>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1771c:	a801      	add	r0, sp, #4
   1771e:	9601      	str	r6, [sp, #4]
   17720:	f005 fad7 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   17724:	9b01      	ldr	r3, [sp, #4]
   17726:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1772a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1772e:	2004      	movs	r0, #4
   17730:	f005 f9e6 	bl	1cb00 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   17734:	4630      	mov	r0, r6
   17736:	f005 fad6 	bl	1cce6 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1773a:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1773c:	2004      	movs	r0, #4
   1773e:	f005 f9df 	bl	1cb00 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   17742:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   17746:	d1df      	bne.n	17708 <nrfx_twi_twim_bus_recover+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17748:	a801      	add	r0, sp, #4
   1774a:	9401      	str	r4, [sp, #4]
   1774c:	f005 fac1 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   17750:	9a01      	ldr	r2, [sp, #4]
   17752:	2301      	movs	r3, #1
   17754:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   17756:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1775a:	2004      	movs	r0, #4
   1775c:	f005 f9d0 	bl	1cb00 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   17760:	4620      	mov	r0, r4
   17762:	f005 fac0 	bl	1cce6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   17766:	2004      	movs	r0, #4
   17768:	f005 f9ca 	bl	1cb00 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1776c:	a801      	add	r0, sp, #4
   1776e:	9401      	str	r4, [sp, #4]
   17770:	f005 faaf 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   17774:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   17776:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1777a:	4804      	ldr	r0, [pc, #16]	; (1778c <nrfx_twi_twim_bus_recover+0xd8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1777c:	40d3      	lsrs	r3, r2
   1777e:	f003 0301 	and.w	r3, r3, #1
   17782:	1ac0      	subs	r0, r0, r3
   17784:	b003      	add	sp, #12
   17786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17788:	fffcf8f0 	.word	0xfffcf8f0
   1778c:	0bad0001 	.word	0x0bad0001

00017790 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   17790:	b510      	push	{r4, lr}
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
   17792:	4c14      	ldr	r4, [pc, #80]	; (177e4 <_DoInit+0x54>)
   17794:	22a8      	movs	r2, #168	; 0xa8
   17796:	2100      	movs	r1, #0
   17798:	4620      	mov	r0, r4
   1779a:	f002 fa36 	bl	19c0a <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1779e:	2303      	movs	r3, #3
   177a0:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   177a2:	4a11      	ldr	r2, [pc, #68]	; (177e8 <_DoInit+0x58>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   177a4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   177a6:	4b11      	ldr	r3, [pc, #68]	; (177ec <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
   177a8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   177aa:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   177ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   177b0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   177b2:	2300      	movs	r3, #0
   177b4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   177b6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   177b8:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   177ba:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   177bc:	4a0c      	ldr	r2, [pc, #48]	; (177f0 <_DoInit+0x60>)
   177be:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   177c0:	2210      	movs	r2, #16
   177c2:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   177c4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   177c6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   177c8:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
   177ca:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
   177ce:	4a09      	ldr	r2, [pc, #36]	; (177f4 <_DoInit+0x64>)
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
   177d0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   177d4:	54e1      	strb	r1, [r4, r3]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
   177d6:	3301      	adds	r3, #1
   177d8:	2b10      	cmp	r3, #16
   177da:	d1f9      	bne.n	177d0 <_DoInit+0x40>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
   177dc:	f3bf 8f5f 	dmb	sy
}
   177e0:	bd10      	pop	{r4, pc}
   177e2:	bf00      	nop
   177e4:	200025f8 	.word	0x200025f8
   177e8:	0001fbed 	.word	0x0001fbed
   177ec:	20002757 	.word	0x20002757
   177f0:	20002747 	.word	0x20002747
   177f4:	0001fc06 	.word	0x0001fc06

000177f8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   177f8:	4b10      	ldr	r3, [pc, #64]	; (1783c <z_sys_init_run_level+0x44>)
{
   177fa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   177fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17800:	3001      	adds	r0, #1
   17802:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17806:	42a6      	cmp	r6, r4
   17808:	d800      	bhi.n	1780c <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1780a:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
   1780c:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   17810:	b195      	cbz	r5, 17838 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
   17812:	b153      	cbz	r3, 1782a <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
   17814:	4628      	mov	r0, r5
   17816:	4798      	blx	r3
				if (rc != 0) {
   17818:	b138      	cbz	r0, 1782a <z_sys_init_run_level+0x32>
					if (rc < 0) {
   1781a:	2800      	cmp	r0, #0
   1781c:	bfb8      	it	lt
   1781e:	4240      	neglt	r0, r0
					dev->state->init_res = rc;
   17820:	68eb      	ldr	r3, [r5, #12]
					if (rc > UINT8_MAX) {
   17822:	28ff      	cmp	r0, #255	; 0xff
   17824:	bfa8      	it	ge
   17826:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
   17828:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1782a:	68ea      	ldr	r2, [r5, #12]
   1782c:	7853      	ldrb	r3, [r2, #1]
   1782e:	f043 0301 	orr.w	r3, r3, #1
   17832:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17834:	3408      	adds	r4, #8
   17836:	e7e6      	b.n	17806 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   17838:	4798      	blx	r3
   1783a:	e7fb      	b.n	17834 <z_sys_init_run_level+0x3c>
   1783c:	0001f434 	.word	0x0001f434

00017840 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   17840:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   17842:	4b0a      	ldr	r3, [pc, #40]	; (1786c <bg_thread_main+0x2c>)
   17844:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   17846:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   17848:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1784a:	f7ff ffd5 	bl	177f8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1784e:	f001 fb17 	bl	18e80 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   17852:	2004      	movs	r0, #4
   17854:	f7ff ffd0 	bl	177f8 <z_sys_init_run_level>

	z_init_static_threads();
   17858:	f000 f97c 	bl	17b54 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1785c:	f7ea fdbc 	bl	23d8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17860:	4a03      	ldr	r2, [pc, #12]	; (17870 <bg_thread_main+0x30>)
   17862:	7b13      	ldrb	r3, [r2, #12]
   17864:	f023 0301 	bic.w	r3, r3, #1
   17868:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1786a:	bd08      	pop	{r3, pc}
   1786c:	20002b57 	.word	0x20002b57
   17870:	20001048 	.word	0x20001048

00017874 <z_bss_zero>:
{
   17874:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   17876:	4803      	ldr	r0, [pc, #12]	; (17884 <z_bss_zero+0x10>)
   17878:	4a03      	ldr	r2, [pc, #12]	; (17888 <z_bss_zero+0x14>)
   1787a:	2100      	movs	r1, #0
   1787c:	1a12      	subs	r2, r2, r0
   1787e:	f005 fa7d 	bl	1cd7c <z_early_memset>
}
   17882:	bd08      	pop	{r3, pc}
   17884:	20000a60 	.word	0x20000a60
   17888:	20002b5c 	.word	0x20002b5c

0001788c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1788c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1788e:	2300      	movs	r3, #0
{
   17890:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   17892:	2201      	movs	r2, #1
   17894:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   17898:	4e19      	ldr	r6, [pc, #100]	; (17900 <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1789a:	4d1a      	ldr	r5, [pc, #104]	; (17904 <z_init_cpu+0x78>)
	z_setup_new_thread(thread, stack,
   1789c:	9301      	str	r3, [sp, #4]
   1789e:	220f      	movs	r2, #15
   178a0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   178a4:	4918      	ldr	r1, [pc, #96]	; (17908 <z_init_cpu+0x7c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   178a6:	2314      	movs	r3, #20
   178a8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   178ac:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   178b0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   178b2:	f44f 70c0 	mov.w	r0, #384	; 0x180
   178b6:	4b15      	ldr	r3, [pc, #84]	; (1790c <z_init_cpu+0x80>)
   178b8:	9500      	str	r5, [sp, #0]
   178ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
   178be:	fb00 1104 	mla	r1, r0, r4, r1
   178c2:	4630      	mov	r0, r6
   178c4:	f000 f8e8 	bl	17a98 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   178c8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   178ca:	4a11      	ldr	r2, [pc, #68]	; (17910 <z_init_cpu+0x84>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   178cc:	60ee      	str	r6, [r5, #12]
   178ce:	f023 0304 	bic.w	r3, r3, #4
   178d2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   178d4:	f44f 6304 	mov.w	r3, #2112	; 0x840
   178d8:	fb04 3303 	mla	r3, r4, r3, r3
   178dc:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
   178de:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   178e0:	4b0c      	ldr	r3, [pc, #48]	; (17914 <z_init_cpu+0x88>)
	_kernel.cpus[id].id = id;
   178e2:	742c      	strb	r4, [r5, #16]
   178e4:	f3bf 8f5b 	dmb	ish
   178e8:	e853 1f00 	ldrex	r1, [r3]
   178ec:	3101      	adds	r1, #1
   178ee:	e843 1200 	strex	r2, r1, [r3]
   178f2:	2a00      	cmp	r2, #0
   178f4:	d1f8      	bne.n	178e8 <z_init_cpu+0x5c>
   178f6:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
   178fa:	b006      	add	sp, #24
   178fc:	bd70      	pop	{r4, r5, r6, pc}
   178fe:	bf00      	nop
   17900:	20000fc8 	.word	0x20000fc8
   17904:	200026a4 	.word	0x200026a4
   17908:	20004380 	.word	0x20004380
   1790c:	00017c0d 	.word	0x00017c0d
   17910:	20003b40 	.word	0x20003b40
   17914:	200026a0 	.word	0x200026a0

00017918 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   17918:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1791a:	2000      	movs	r0, #0
{
   1791c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1791e:	f7ff ff6b 	bl	177f8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   17922:	4b2d      	ldr	r3, [pc, #180]	; (179d8 <z_cstart+0xc0>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17924:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   17928:	4d2c      	ldr	r5, [pc, #176]	; (179dc <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1792a:	4e2d      	ldr	r6, [pc, #180]	; (179e0 <z_cstart+0xc8>)
   1792c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1792e:	4f2d      	ldr	r7, [pc, #180]	; (179e4 <z_cstart+0xcc>)
   17930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17934:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17936:	2400      	movs	r4, #0
   17938:	23e0      	movs	r3, #224	; 0xe0
   1793a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1793e:	77ec      	strb	r4, [r5, #31]
   17940:	762c      	strb	r4, [r5, #24]
   17942:	766c      	strb	r4, [r5, #25]
   17944:	76ac      	strb	r4, [r5, #26]
   17946:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1794a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1794c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17950:	626b      	str	r3, [r5, #36]	; 0x24
   17952:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17956:	f7ec fa31 	bl	3dbc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1795a:	f7eb ff89 	bl	3870 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1795e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17962:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17964:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   17966:	f7ec fb0d 	bl	3f84 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1796a:	f7ec fa73 	bl	3e54 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1796e:	f240 1301 	movw	r3, #257	; 0x101
   17972:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17976:	ab06      	add	r3, sp, #24
   17978:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1797a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1797e:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   17980:	f005 f9c9 	bl	1cd16 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   17984:	2001      	movs	r0, #1
   17986:	f7ff ff37 	bl	177f8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1798a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1798c:	4d16      	ldr	r5, [pc, #88]	; (179e8 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1798e:	f7ff ff33 	bl	177f8 <z_sys_init_run_level>
	z_sched_init();
   17992:	f000 feb9 	bl	18708 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17996:	4b15      	ldr	r3, [pc, #84]	; (179ec <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   17998:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1799a:	9305      	str	r3, [sp, #20]
   1799c:	2301      	movs	r3, #1
   1799e:	4914      	ldr	r1, [pc, #80]	; (179f0 <z_cstart+0xd8>)
   179a0:	9400      	str	r4, [sp, #0]
   179a2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   179a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   179aa:	463b      	mov	r3, r7
   179ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
   179b0:	4628      	mov	r0, r5
   179b2:	f000 f871 	bl	17a98 <z_setup_new_thread>
   179b6:	7b6a      	ldrb	r2, [r5, #13]
   179b8:	4606      	mov	r6, r0
   179ba:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   179be:	4628      	mov	r0, r5
   179c0:	736a      	strb	r2, [r5, #13]
   179c2:	f005 fcbb 	bl	1d33c <z_ready_thread>
	z_init_cpu(0);
   179c6:	4620      	mov	r0, r4
   179c8:	f7ff ff60 	bl	1788c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   179cc:	463a      	mov	r2, r7
   179ce:	4631      	mov	r1, r6
   179d0:	4628      	mov	r0, r5
   179d2:	f7ec f871 	bl	3ab8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   179d6:	bf00      	nop
   179d8:	20004380 	.word	0x20004380
   179dc:	e000ed00 	.word	0xe000ed00
   179e0:	200026a4 	.word	0x200026a4
   179e4:	00017841 	.word	0x00017841
   179e8:	20001048 	.word	0x20001048
   179ec:	0001fc07 	.word	0x0001fc07
   179f0:	20004500 	.word	0x20004500

000179f4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   179f4:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   179f6:	4c06      	ldr	r4, [pc, #24]	; (17a10 <statics_init+0x1c>)
   179f8:	4d06      	ldr	r5, [pc, #24]	; (17a14 <statics_init+0x20>)
   179fa:	42ac      	cmp	r4, r5
   179fc:	d301      	bcc.n	17a02 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   179fe:	2000      	movs	r0, #0
   17a00:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17a02:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17a06:	4620      	mov	r0, r4
   17a08:	f005 f9bc 	bl	1cd84 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   17a0c:	3414      	adds	r4, #20
   17a0e:	e7f4      	b.n	179fa <statics_init+0x6>
   17a10:	20000924 	.word	0x20000924
   17a14:	20000924 	.word	0x20000924

00017a18 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   17a18:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17a1a:	4c06      	ldr	r4, [pc, #24]	; (17a34 <init_mem_slab_module+0x1c>)
   17a1c:	4d06      	ldr	r5, [pc, #24]	; (17a38 <init_mem_slab_module+0x20>)
	int rc = 0;
   17a1e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17a20:	42ac      	cmp	r4, r5
   17a22:	d300      	bcc.n	17a26 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   17a24:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   17a26:	4620      	mov	r0, r4
   17a28:	f005 fa14 	bl	1ce54 <create_free_list>
		if (rc < 0) {
   17a2c:	2800      	cmp	r0, #0
   17a2e:	dbf9      	blt.n	17a24 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17a30:	341c      	adds	r4, #28
   17a32:	e7f5      	b.n	17a20 <init_mem_slab_module+0x8>
   17a34:	200008d0 	.word	0x200008d0
   17a38:	20000924 	.word	0x20000924

00017a3c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17a3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17a3e:	460c      	mov	r4, r1
	__asm__ volatile(
   17a40:	f04f 0520 	mov.w	r5, #32
   17a44:	f3ef 8111 	mrs	r1, BASEPRI
   17a48:	f385 8812 	msr	BASEPRI_MAX, r5
   17a4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   17a50:	6945      	ldr	r5, [r0, #20]
   17a52:	b15d      	cbz	r5, 17a6c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   17a54:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   17a56:	682b      	ldr	r3, [r5, #0]
   17a58:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17a5a:	6983      	ldr	r3, [r0, #24]
   17a5c:	3301      	adds	r3, #1
   17a5e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17a60:	2000      	movs	r0, #0
	__asm__ volatile(
   17a62:	f381 8811 	msr	BASEPRI, r1
   17a66:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   17a6a:	e011      	b.n	17a90 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17a6c:	ea52 0603 	orrs.w	r6, r2, r3
   17a70:	d103      	bne.n	17a7a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   17a72:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   17a74:	f06f 000b 	mvn.w	r0, #11
   17a78:	e7f3      	b.n	17a62 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17a7a:	e9cd 2300 	strd	r2, r3, [sp]
   17a7e:	4602      	mov	r2, r0
   17a80:	3008      	adds	r0, #8
   17a82:	f000 fd4b 	bl	1851c <z_pend_curr>
		if (result == 0) {
   17a86:	b918      	cbnz	r0, 17a90 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   17a88:	4b02      	ldr	r3, [pc, #8]	; (17a94 <k_mem_slab_alloc+0x58>)
   17a8a:	689b      	ldr	r3, [r3, #8]
   17a8c:	695b      	ldr	r3, [r3, #20]
   17a8e:	6023      	str	r3, [r4, #0]
}
   17a90:	b002      	add	sp, #8
   17a92:	bd70      	pop	{r4, r5, r6, pc}
   17a94:	200026a4 	.word	0x200026a4

00017a98 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17a98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17a9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   17a9e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   17aa0:	2604      	movs	r6, #4
   17aa2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   17aa4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   17aa6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   17aa8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   17aac:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17aae:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17ab0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   17ab6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17ab8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   17abc:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   17abe:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   17ac2:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   17ac6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   17ac8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   17aca:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17acc:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17ad0:	9202      	str	r2, [sp, #8]
   17ad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17ad4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   17ad6:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17ada:	9200      	str	r2, [sp, #0]
   17adc:	4642      	mov	r2, r8
{
   17ade:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17ae0:	f7eb ffb8 	bl	3a54 <arch_new_thread>
	if (!_current) {
   17ae4:	4b04      	ldr	r3, [pc, #16]	; (17af8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   17ae6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   17ae8:	689b      	ldr	r3, [r3, #8]
   17aea:	b103      	cbz	r3, 17aee <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   17aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   17aee:	6763      	str	r3, [r4, #116]	; 0x74
}
   17af0:	4640      	mov	r0, r8
   17af2:	b004      	add	sp, #16
   17af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17af8:	200026a4 	.word	0x200026a4

00017afc <z_impl_k_thread_create>:
{
   17afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17afe:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17b00:	2500      	movs	r5, #0
   17b02:	9505      	str	r5, [sp, #20]
   17b04:	9d10      	ldr	r5, [sp, #64]	; 0x40
   17b06:	9504      	str	r5, [sp, #16]
   17b08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17b0a:	9503      	str	r5, [sp, #12]
   17b0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17b0e:	9502      	str	r5, [sp, #8]
{
   17b10:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17b14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   17b16:	9501      	str	r5, [sp, #4]
   17b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   17b1a:	9500      	str	r5, [sp, #0]
{
   17b1c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17b1e:	f7ff ffbb 	bl	17a98 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   17b22:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   17b26:	bf08      	it	eq
   17b28:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   17b2c:	d005      	beq.n	17b3a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17b2e:	ea56 0307 	orrs.w	r3, r6, r7
   17b32:	d105      	bne.n	17b40 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   17b34:	4620      	mov	r0, r4
   17b36:	f000 fd67 	bl	18608 <z_sched_start>
}
   17b3a:	4620      	mov	r0, r4
   17b3c:	b007      	add	sp, #28
   17b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17b40:	4903      	ldr	r1, [pc, #12]	; (17b50 <z_impl_k_thread_create+0x54>)
   17b42:	463a      	mov	r2, r7
   17b44:	4633      	mov	r3, r6
   17b46:	f104 0018 	add.w	r0, r4, #24
   17b4a:	f000 ff59 	bl	18a00 <z_add_timeout>
   17b4e:	e7f4      	b.n	17b3a <z_impl_k_thread_create+0x3e>
   17b50:	0001d3c5 	.word	0x0001d3c5

00017b54 <z_init_static_threads>:
{
   17b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17b58:	4c29      	ldr	r4, [pc, #164]	; (17c00 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   17b5a:	4d2a      	ldr	r5, [pc, #168]	; (17c04 <z_init_static_threads+0xb0>)
{
   17b5c:	b087      	sub	sp, #28
   17b5e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   17b60:	42ae      	cmp	r6, r5
   17b62:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   17b66:	d30f      	bcc.n	17b88 <z_init_static_threads+0x34>
	k_sched_lock();
   17b68:	f000 fd9e 	bl	186a8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17b6c:	4c24      	ldr	r4, [pc, #144]	; (17c00 <z_init_static_threads+0xac>)
   17b6e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 17c08 <z_init_static_threads+0xb4>
   17b72:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17b76:	f240 37e7 	movw	r7, #999	; 0x3e7
   17b7a:	42ac      	cmp	r4, r5
   17b7c:	d320      	bcc.n	17bc0 <z_init_static_threads+0x6c>
}
   17b7e:	b007      	add	sp, #28
   17b80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   17b84:	f000 bda4 	b.w	186d0 <k_sched_unlock>
		z_setup_new_thread(
   17b88:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17b8c:	9305      	str	r3, [sp, #20]
   17b8e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   17b92:	9304      	str	r3, [sp, #16]
   17b94:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17b98:	9303      	str	r3, [sp, #12]
   17b9a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17b9e:	9302      	str	r3, [sp, #8]
   17ba0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17ba4:	9301      	str	r3, [sp, #4]
   17ba6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   17baa:	9300      	str	r3, [sp, #0]
   17bac:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   17bb0:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   17bb4:	f7ff ff70 	bl	17a98 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17bb8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   17bbc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17bbe:	e7ce      	b.n	17b5e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17bc2:	1c5a      	adds	r2, r3, #1
   17bc4:	d00d      	beq.n	17be2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   17bc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17bca:	2100      	movs	r1, #0
   17bcc:	4638      	mov	r0, r7
   17bce:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17bd2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   17bd6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17bda:	d104      	bne.n	17be6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   17bdc:	4640      	mov	r0, r8
   17bde:	f000 fd13 	bl	18608 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17be2:	342c      	adds	r4, #44	; 0x2c
   17be4:	e7c9      	b.n	17b7a <z_init_static_threads+0x26>
   17be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17bea:	2300      	movs	r3, #0
   17bec:	f7e8 fee6 	bl	9bc <__aeabi_uldivmod>
   17bf0:	4602      	mov	r2, r0
   17bf2:	460b      	mov	r3, r1
   17bf4:	f108 0018 	add.w	r0, r8, #24
   17bf8:	4649      	mov	r1, r9
   17bfa:	f000 ff01 	bl	18a00 <z_add_timeout>
   17bfe:	e7f0      	b.n	17be2 <z_init_static_threads+0x8e>
   17c00:	0001db98 	.word	0x0001db98
   17c04:	0001db98 	.word	0x0001db98
   17c08:	0001d3c5 	.word	0x0001d3c5

00017c0c <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
   17c0c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   17c0e:	4c0b      	ldr	r4, [pc, #44]	; (17c3c <idle+0x30>)
	return !z_sys_post_kernel;
   17c10:	4d0b      	ldr	r5, [pc, #44]	; (17c40 <idle+0x34>)
	__asm__ volatile(
   17c12:	f04f 0220 	mov.w	r2, #32
   17c16:	f3ef 8311 	mrs	r3, BASEPRI
   17c1a:	f382 8812 	msr	BASEPRI_MAX, r2
   17c1e:	f3bf 8f6f 	isb	sy
   17c22:	f005 fc66 	bl	1d4f2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17c26:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   17c28:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   17c2a:	b913      	cbnz	r3, 17c32 <idle+0x26>
	arch_cpu_idle();
   17c2c:	f7eb fe26 	bl	387c <arch_cpu_idle>
}
   17c30:	e7ef      	b.n	17c12 <idle+0x6>
   17c32:	f7eb fcc5 	bl	35c0 <pm_system_suspend>
   17c36:	2800      	cmp	r0, #0
   17c38:	d1eb      	bne.n	17c12 <idle+0x6>
   17c3a:	e7f7      	b.n	17c2c <idle+0x20>
   17c3c:	200026a4 	.word	0x200026a4
   17c40:	20002b57 	.word	0x20002b57

00017c44 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17c48:	4604      	mov	r4, r0
   17c4a:	4617      	mov	r7, r2
   17c4c:	461e      	mov	r6, r3
   17c4e:	f04f 0320 	mov.w	r3, #32
   17c52:	f3ef 8811 	mrs	r8, BASEPRI
   17c56:	f383 8812 	msr	BASEPRI_MAX, r3
   17c5a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17c5e:	68c3      	ldr	r3, [r0, #12]
   17c60:	4a33      	ldr	r2, [pc, #204]	; (17d30 <z_impl_k_mutex_lock+0xec>)
   17c62:	b17b      	cbz	r3, 17c84 <z_impl_k_mutex_lock+0x40>
   17c64:	6880      	ldr	r0, [r0, #8]
   17c66:	6891      	ldr	r1, [r2, #8]
   17c68:	4288      	cmp	r0, r1
   17c6a:	d019      	beq.n	17ca0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17c6c:	ea57 0306 	orrs.w	r3, r7, r6
   17c70:	d118      	bne.n	17ca4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   17c72:	f388 8811 	msr	BASEPRI, r8
   17c76:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   17c7a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   17c7e:	b002      	add	sp, #8
   17c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   17c84:	6891      	ldr	r1, [r2, #8]
   17c86:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17c8a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   17c8c:	3301      	adds	r3, #1
   17c8e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17c90:	6893      	ldr	r3, [r2, #8]
   17c92:	60a3      	str	r3, [r4, #8]
   17c94:	f388 8811 	msr	BASEPRI, r8
   17c98:	f3bf 8f6f 	isb	sy
		return 0;
   17c9c:	2000      	movs	r0, #0
   17c9e:	e7ee      	b.n	17c7e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   17ca0:	6921      	ldr	r1, [r4, #16]
   17ca2:	e7f2      	b.n	17c8a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17ca4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17ca8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   17cac:	4299      	cmp	r1, r3
   17cae:	bfa8      	it	ge
   17cb0:	4619      	movge	r1, r3
   17cb2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   17cb6:	4291      	cmp	r1, r2
   17cb8:	bfb8      	it	lt
   17cba:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17cbc:	428b      	cmp	r3, r1
   17cbe:	dd2e      	ble.n	17d1e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   17cc0:	f005 f919 	bl	1cef6 <adjust_owner_prio.isra.0>
   17cc4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17cc6:	e9cd 7600 	strd	r7, r6, [sp]
   17cca:	481a      	ldr	r0, [pc, #104]	; (17d34 <z_impl_k_mutex_lock+0xf0>)
   17ccc:	4622      	mov	r2, r4
   17cce:	4641      	mov	r1, r8
   17cd0:	f000 fc24 	bl	1851c <z_pend_curr>
	if (got_mutex == 0) {
   17cd4:	2800      	cmp	r0, #0
   17cd6:	d0e1      	beq.n	17c9c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   17cd8:	f04f 0320 	mov.w	r3, #32
   17cdc:	f3ef 8611 	mrs	r6, BASEPRI
   17ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   17ce4:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   17ce8:	68a0      	ldr	r0, [r4, #8]
   17cea:	b1d0      	cbz	r0, 17d22 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17cec:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17cee:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17cf0:	429c      	cmp	r4, r3
   17cf2:	d00a      	beq.n	17d0a <z_impl_k_mutex_lock+0xc6>
   17cf4:	b14b      	cbz	r3, 17d0a <z_impl_k_mutex_lock+0xc6>
   17cf6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17cfa:	4299      	cmp	r1, r3
   17cfc:	bfa8      	it	ge
   17cfe:	4619      	movge	r1, r3
   17d00:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   17d04:	4299      	cmp	r1, r3
   17d06:	bfb8      	it	lt
   17d08:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   17d0a:	f005 f8f4 	bl	1cef6 <adjust_owner_prio.isra.0>
   17d0e:	b140      	cbz	r0, 17d22 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   17d10:	4808      	ldr	r0, [pc, #32]	; (17d34 <z_impl_k_mutex_lock+0xf0>)
   17d12:	4631      	mov	r1, r6
   17d14:	f000 fc66 	bl	185e4 <z_reschedule>
	return -EAGAIN;
   17d18:	f06f 000a 	mvn.w	r0, #10
   17d1c:	e7af      	b.n	17c7e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   17d1e:	2500      	movs	r5, #0
   17d20:	e7d1      	b.n	17cc6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   17d22:	2d00      	cmp	r5, #0
   17d24:	d1f4      	bne.n	17d10 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   17d26:	f386 8811 	msr	BASEPRI, r6
   17d2a:	f3bf 8f6f 	isb	sy
   17d2e:	e7f3      	b.n	17d18 <z_impl_k_mutex_lock+0xd4>
   17d30:	200026a4 	.word	0x200026a4
   17d34:	20002b58 	.word	0x20002b58

00017d38 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17d38:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   17d3a:	6883      	ldr	r3, [r0, #8]
{
   17d3c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   17d3e:	b36b      	cbz	r3, 17d9c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17d40:	4a19      	ldr	r2, [pc, #100]	; (17da8 <z_impl_k_mutex_unlock+0x70>)
   17d42:	6892      	ldr	r2, [r2, #8]
   17d44:	4293      	cmp	r3, r2
   17d46:	d12c      	bne.n	17da2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   17d48:	68c3      	ldr	r3, [r0, #12]
   17d4a:	2b01      	cmp	r3, #1
   17d4c:	d903      	bls.n	17d56 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   17d4e:	3b01      	subs	r3, #1
   17d50:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   17d52:	2000      	movs	r0, #0
}
   17d54:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17d56:	f04f 0320 	mov.w	r3, #32
   17d5a:	f3ef 8511 	mrs	r5, BASEPRI
   17d5e:	f383 8812 	msr	BASEPRI_MAX, r3
   17d62:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17d66:	6901      	ldr	r1, [r0, #16]
   17d68:	6880      	ldr	r0, [r0, #8]
   17d6a:	f005 f8c4 	bl	1cef6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17d6e:	4620      	mov	r0, r4
   17d70:	f005 fb2c 	bl	1d3cc <z_unpend_first_thread>
	mutex->owner = new_owner;
   17d74:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17d76:	b158      	cbz	r0, 17d90 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   17d78:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17d7c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17d7e:	2200      	movs	r2, #0
   17d80:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   17d82:	f005 fadb 	bl	1d33c <z_ready_thread>
		z_reschedule(&lock, key);
   17d86:	4809      	ldr	r0, [pc, #36]	; (17dac <z_impl_k_mutex_unlock+0x74>)
   17d88:	4629      	mov	r1, r5
   17d8a:	f000 fc2b 	bl	185e4 <z_reschedule>
   17d8e:	e7e0      	b.n	17d52 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   17d90:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   17d92:	f385 8811 	msr	BASEPRI, r5
   17d96:	f3bf 8f6f 	isb	sy
   17d9a:	e7da      	b.n	17d52 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   17d9c:	f06f 0015 	mvn.w	r0, #21
   17da0:	e7d8      	b.n	17d54 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   17da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17da6:	e7d5      	b.n	17d54 <z_impl_k_mutex_unlock+0x1c>
   17da8:	200026a4 	.word	0x200026a4
   17dac:	20002b58 	.word	0x20002b58

00017db0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   17db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17db2:	4611      	mov	r1, r2
	__asm__ volatile(
   17db4:	f04f 0220 	mov.w	r2, #32
   17db8:	f3ef 8511 	mrs	r5, BASEPRI
   17dbc:	f382 8812 	msr	BASEPRI_MAX, r2
   17dc0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   17dc4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17dc6:	b19c      	cbz	r4, 17df0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17dc8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17dca:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17dcc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17dd0:	4294      	cmp	r4, r2
	list->head = node;
   17dd2:	6003      	str	r3, [r0, #0]
	list->tail = node;
   17dd4:	bf08      	it	eq
   17dd6:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17dd8:	2101      	movs	r1, #1
   17dda:	4620      	mov	r0, r4
   17ddc:	f005 f900 	bl	1cfe0 <z_queue_node_peek>
   17de0:	4604      	mov	r4, r0
	__asm__ volatile(
   17de2:	f385 8811 	msr	BASEPRI, r5
   17de6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17dea:	4620      	mov	r0, r4
   17dec:	b003      	add	sp, #12
   17dee:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17df0:	ea51 0203 	orrs.w	r2, r1, r3
   17df4:	d0f5      	beq.n	17de2 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17df6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17dfa:	e9cd 1300 	strd	r1, r3, [sp]
   17dfe:	4610      	mov	r0, r2
   17e00:	4629      	mov	r1, r5
   17e02:	f000 fb8b 	bl	1851c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17e06:	2800      	cmp	r0, #0
   17e08:	d1ef      	bne.n	17dea <z_impl_k_queue_get+0x3a>
   17e0a:	4b02      	ldr	r3, [pc, #8]	; (17e14 <z_impl_k_queue_get+0x64>)
   17e0c:	689b      	ldr	r3, [r3, #8]
   17e0e:	695c      	ldr	r4, [r3, #20]
   17e10:	e7eb      	b.n	17dea <z_impl_k_queue_get+0x3a>
   17e12:	bf00      	nop
   17e14:	200026a4 	.word	0x200026a4

00017e18 <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17e18:	b538      	push	{r3, r4, r5, lr}
   17e1a:	4604      	mov	r4, r0
	__asm__ volatile(
   17e1c:	f04f 0320 	mov.w	r3, #32
   17e20:	f3ef 8511 	mrs	r5, BASEPRI
   17e24:	f383 8812 	msr	BASEPRI_MAX, r3
   17e28:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17e2c:	f005 face 	bl	1d3cc <z_unpend_first_thread>

	if (thread != NULL) {
   17e30:	b148      	cbz	r0, 17e46 <z_impl_k_sem_give+0x2e>
   17e32:	2200      	movs	r2, #0
   17e34:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17e36:	f005 fa81 	bl	1d33c <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
   17e3a:	4629      	mov	r1, r5
   17e3c:	4808      	ldr	r0, [pc, #32]	; (17e60 <z_impl_k_sem_give+0x48>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   17e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   17e42:	f000 bbcf 	b.w	185e4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   17e46:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   17e4a:	429a      	cmp	r2, r3
   17e4c:	bf18      	it	ne
   17e4e:	3301      	addne	r3, #1
   17e50:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17e52:	2102      	movs	r1, #2
   17e54:	f104 0010 	add.w	r0, r4, #16
   17e58:	f005 fce6 	bl	1d828 <z_handle_obj_poll_events>
	return true;
   17e5c:	e7ed      	b.n	17e3a <z_impl_k_sem_give+0x22>
   17e5e:	bf00      	nop
   17e60:	20002b58 	.word	0x20002b58

00017e64 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   17e64:	b513      	push	{r0, r1, r4, lr}
   17e66:	f04f 0420 	mov.w	r4, #32
   17e6a:	f3ef 8111 	mrs	r1, BASEPRI
   17e6e:	f384 8812 	msr	BASEPRI_MAX, r4
   17e72:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   17e76:	6884      	ldr	r4, [r0, #8]
   17e78:	b144      	cbz	r4, 17e8c <z_impl_k_sem_take+0x28>
		sem->count--;
   17e7a:	3c01      	subs	r4, #1
   17e7c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   17e7e:	f381 8811 	msr	BASEPRI, r1
   17e82:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   17e86:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   17e88:	b002      	add	sp, #8
   17e8a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17e8c:	ea52 0403 	orrs.w	r4, r2, r3
   17e90:	d106      	bne.n	17ea0 <z_impl_k_sem_take+0x3c>
   17e92:	f381 8811 	msr	BASEPRI, r1
   17e96:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   17e9a:	f06f 000f 	mvn.w	r0, #15
   17e9e:	e7f3      	b.n	17e88 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   17ea0:	e9cd 2300 	strd	r2, r3, [sp]
   17ea4:	4602      	mov	r2, r0
   17ea6:	4802      	ldr	r0, [pc, #8]	; (17eb0 <z_impl_k_sem_take+0x4c>)
   17ea8:	f000 fb38 	bl	1851c <z_pend_curr>
	return ret;
   17eac:	e7ec      	b.n	17e88 <z_impl_k_sem_take+0x24>
   17eae:	bf00      	nop
   17eb0:	20002b58 	.word	0x20002b58

00017eb4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   17eb4:	b570      	push	{r4, r5, r6, lr}
   17eb6:	4604      	mov	r4, r0
	__asm__ volatile(
   17eb8:	f04f 0320 	mov.w	r3, #32
   17ebc:	f3ef 8511 	mrs	r5, BASEPRI
   17ec0:	f383 8812 	msr	BASEPRI_MAX, r3
   17ec4:	f3bf 8f6f 	isb	sy
   17ec8:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   17ecc:	4620      	mov	r0, r4
   17ece:	f005 fa7d 	bl	1d3cc <z_unpend_first_thread>
		if (thread == NULL) {
   17ed2:	b118      	cbz	r0, 17edc <z_impl_k_sem_reset+0x28>
   17ed4:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   17ed6:	f005 fa31 	bl	1d33c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   17eda:	e7f7      	b.n	17ecc <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   17edc:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   17ede:	2102      	movs	r1, #2
   17ee0:	f104 0010 	add.w	r0, r4, #16
   17ee4:	f005 fca0 	bl	1d828 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   17ee8:	4629      	mov	r1, r5
   17eea:	4802      	ldr	r0, [pc, #8]	; (17ef4 <z_impl_k_sem_reset+0x40>)
}
   17eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   17ef0:	f000 bb78 	b.w	185e4 <z_reschedule>
   17ef4:	20002b58 	.word	0x20002b58

00017ef8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   17ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   17efa:	4b09      	ldr	r3, [pc, #36]	; (17f20 <k_sys_work_q_init+0x28>)
   17efc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17efe:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   17f00:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   17f02:	9300      	str	r3, [sp, #0]
   17f04:	4907      	ldr	r1, [pc, #28]	; (17f24 <k_sys_work_q_init+0x2c>)
   17f06:	4808      	ldr	r0, [pc, #32]	; (17f28 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   17f08:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17f14:	f000 f924 	bl	18160 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   17f18:	4620      	mov	r0, r4
   17f1a:	b004      	add	sp, #16
   17f1c:	bd10      	pop	{r4, pc}
   17f1e:	bf00      	nop
   17f20:	0001fc0f 	.word	0x0001fc0f
   17f24:	20004940 	.word	0x20004940
   17f28:	200010c8 	.word	0x200010c8

00017f2c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   17f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   17f30:	4e4a      	ldr	r6, [pc, #296]	; (1805c <work_queue_main+0x130>)
   17f32:	b085      	sub	sp, #20
   17f34:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   17f36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17f3a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   17f3e:	f04f 0320 	mov.w	r3, #32
   17f42:	f3ef 8711 	mrs	r7, BASEPRI
   17f46:	f383 8812 	msr	BASEPRI_MAX, r3
   17f4a:	f3bf 8f6f 	isb	sy
   17f4e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   17f52:	b98d      	cbnz	r5, 17f78 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   17f54:	2102      	movs	r1, #2
   17f56:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17f5a:	f005 f8a2 	bl	1d0a2 <flag_test_and_clear>
   17f5e:	2800      	cmp	r0, #0
   17f60:	d143      	bne.n	17fea <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   17f62:	2300      	movs	r3, #0
   17f64:	e9cd 8900 	strd	r8, r9, [sp]
   17f68:	9302      	str	r3, [sp, #8]
   17f6a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   17f6e:	4639      	mov	r1, r7
   17f70:	483b      	ldr	r0, [pc, #236]	; (18060 <work_queue_main+0x134>)
   17f72:	f000 fcd3 	bl	1891c <z_sched_wait>
			continue;
   17f76:	e7e2      	b.n	17f3e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f78:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   17f7c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   17f7e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17f82:	4295      	cmp	r5, r2
	list->tail = node;
   17f84:	bf08      	it	eq
   17f86:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   17f8a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17f8e:	f043 0302 	orr.w	r3, r3, #2
   17f92:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   17f96:	68eb      	ldr	r3, [r5, #12]
   17f98:	f023 0304 	bic.w	r3, r3, #4
   17f9c:	f043 0301 	orr.w	r3, r3, #1
   17fa0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   17fa2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   17fa4:	f387 8811 	msr	BASEPRI, r7
   17fa8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   17fac:	4628      	mov	r0, r5
   17fae:	4798      	blx	r3
	__asm__ volatile(
   17fb0:	f04f 0320 	mov.w	r3, #32
   17fb4:	f3ef 8b11 	mrs	fp, BASEPRI
   17fb8:	f383 8812 	msr	BASEPRI_MAX, r3
   17fbc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   17fc0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17fc2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   17fc4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17fc8:	d419      	bmi.n	17ffe <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   17fca:	60ea      	str	r2, [r5, #12]
   17fcc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17fd0:	f023 0302 	bic.w	r3, r3, #2
   17fd4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   17fd8:	f38b 8811 	msr	BASEPRI, fp
   17fdc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   17fe0:	05db      	lsls	r3, r3, #23
   17fe2:	d4ac      	bmi.n	17f3e <work_queue_main+0x12>
	z_impl_k_yield();
   17fe4:	f000 fb98 	bl	18718 <z_impl_k_yield>
}
   17fe8:	e7a9      	b.n	17f3e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   17fea:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   17fee:	2200      	movs	r2, #0
   17ff0:	2101      	movs	r1, #1
   17ff2:	4628      	mov	r0, r5
   17ff4:	f005 fa44 	bl	1d480 <z_sched_wake>
   17ff8:	2800      	cmp	r0, #0
   17ffa:	d1f8      	bne.n	17fee <work_queue_main+0xc2>
   17ffc:	e7b1      	b.n	17f62 <work_queue_main+0x36>
	return list->head;
   17ffe:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   18000:	f023 0303 	bic.w	r3, r3, #3
   18004:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18006:	2800      	cmp	r0, #0
   18008:	d0e0      	beq.n	17fcc <work_queue_main+0xa0>
	return node->next;
   1800a:	2700      	movs	r7, #0
   1800c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   18010:	463b      	mov	r3, r7
   18012:	2800      	cmp	r0, #0
   18014:	d0da      	beq.n	17fcc <work_queue_main+0xa0>
		if (wc->work == work) {
   18016:	6842      	ldr	r2, [r0, #4]
   18018:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1801a:	4601      	mov	r1, r0
		if (wc->work == work) {
   1801c:	d10c      	bne.n	18038 <work_queue_main+0x10c>
	return node->next;
   1801e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18020:	b99f      	cbnz	r7, 1804a <work_queue_main+0x11e>
   18022:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   18024:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18026:	4282      	cmp	r2, r0
   18028:	d100      	bne.n	1802c <work_queue_main+0x100>
	list->tail = node;
   1802a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1802c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   18030:	f7ff fef2 	bl	17e18 <z_impl_k_sem_give>
}
   18034:	4639      	mov	r1, r7
   18036:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   18038:	f1ba 0f00 	cmp.w	sl, #0
   1803c:	d00b      	beq.n	18056 <work_queue_main+0x12a>
	return node->next;
   1803e:	f8da 2000 	ldr.w	r2, [sl]
   18042:	4650      	mov	r0, sl
   18044:	460f      	mov	r7, r1
   18046:	4692      	mov	sl, r2
   18048:	e7e3      	b.n	18012 <work_queue_main+0xe6>
	parent->next = child;
   1804a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1804c:	6872      	ldr	r2, [r6, #4]
   1804e:	4282      	cmp	r2, r0
	list->tail = node;
   18050:	bf08      	it	eq
   18052:	6077      	streq	r7, [r6, #4]
}
   18054:	e7ea      	b.n	1802c <work_queue_main+0x100>
   18056:	4652      	mov	r2, sl
   18058:	e7f3      	b.n	18042 <work_queue_main+0x116>
   1805a:	bf00      	nop
   1805c:	200026c8 	.word	0x200026c8
   18060:	20002b58 	.word	0x20002b58

00018064 <cancel_sync_locked>:
{
   18064:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   18066:	68c3      	ldr	r3, [r0, #12]
   18068:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1806c:	079b      	lsls	r3, r3, #30
{
   1806e:	4605      	mov	r5, r0
   18070:	460c      	mov	r4, r1
	if (ret) {
   18072:	d50d      	bpl.n	18090 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18074:	2201      	movs	r2, #1
   18076:	2100      	movs	r1, #0
   18078:	f104 0008 	add.w	r0, r4, #8
   1807c:	f005 f801 	bl	1d082 <z_impl_k_sem_init>
	parent->next = child;
   18080:	2300      	movs	r3, #0
   18082:	6023      	str	r3, [r4, #0]
	return list->tail;
   18084:	4b05      	ldr	r3, [pc, #20]	; (1809c <cancel_sync_locked+0x38>)
	canceler->work = work;
   18086:	6065      	str	r5, [r4, #4]
   18088:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1808a:	b91a      	cbnz	r2, 18094 <cancel_sync_locked+0x30>
	list->head = node;
   1808c:	e9c3 4400 	strd	r4, r4, [r3]
}
   18090:	4630      	mov	r0, r6
   18092:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   18094:	6014      	str	r4, [r2, #0]
	list->tail = node;
   18096:	605c      	str	r4, [r3, #4]
}
   18098:	e7fa      	b.n	18090 <cancel_sync_locked+0x2c>
   1809a:	bf00      	nop
   1809c:	200026c8 	.word	0x200026c8

000180a0 <submit_to_queue_locked>:
{
   180a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   180a2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180a4:	079a      	lsls	r2, r3, #30
{
   180a6:	4604      	mov	r4, r0
   180a8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   180aa:	f3c3 0640 	ubfx	r6, r3, #1, #1
   180ae:	d42c      	bmi.n	1810a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   180b0:	075b      	lsls	r3, r3, #29
   180b2:	d41a      	bmi.n	180ea <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   180b4:	680b      	ldr	r3, [r1, #0]
   180b6:	b90b      	cbnz	r3, 180bc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   180b8:	6883      	ldr	r3, [r0, #8]
   180ba:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   180bc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   180be:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   180c0:	bf44      	itt	mi
   180c2:	68a3      	ldrmi	r3, [r4, #8]
   180c4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   180c6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   180c8:	bf4c      	ite	mi
   180ca:	2602      	movmi	r6, #2
		ret = 1;
   180cc:	2601      	movpl	r6, #1
	if (queue == NULL) {
   180ce:	2d00      	cmp	r5, #0
   180d0:	d03a      	beq.n	18148 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   180d2:	4b1f      	ldr	r3, [pc, #124]	; (18150 <submit_to_queue_locked+0xb0>)
   180d4:	689b      	ldr	r3, [r3, #8]
   180d6:	42ab      	cmp	r3, r5
   180d8:	d00a      	beq.n	180f0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   180da:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   180de:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   180e0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   180e4:	d414      	bmi.n	18110 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   180e6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   180ea:	2300      	movs	r3, #0
   180ec:	603b      	str	r3, [r7, #0]
	return ret;
   180ee:	e025      	b.n	1813c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   180f0:	f004 feef 	bl	1ced2 <k_is_in_isr>
   180f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   180f8:	2800      	cmp	r0, #0
   180fa:	d1f0      	bne.n	180de <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   180fc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   180fe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   18102:	d5f0      	bpl.n	180e6 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   18104:	b152      	cbz	r2, 1811c <submit_to_queue_locked+0x7c>
   18106:	075b      	lsls	r3, r3, #29
   18108:	d408      	bmi.n	1811c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1810a:	f06f 060f 	mvn.w	r6, #15
   1810e:	e7ec      	b.n	180ea <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   18110:	2a00      	cmp	r2, #0
   18112:	d1fa      	bne.n	1810a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   18114:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   18118:	2b00      	cmp	r3, #0
   1811a:	d1f6      	bne.n	1810a <submit_to_queue_locked+0x6a>
	parent->next = child;
   1811c:	2300      	movs	r3, #0
   1811e:	6023      	str	r3, [r4, #0]
	return list->tail;
   18120:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   18124:	b963      	cbnz	r3, 18140 <submit_to_queue_locked+0xa0>
	list->head = node;
   18126:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1812a:	4628      	mov	r0, r5
   1812c:	f004 ffd3 	bl	1d0d6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   18130:	68e3      	ldr	r3, [r4, #12]
   18132:	f043 0304 	orr.w	r3, r3, #4
   18136:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   18138:	683b      	ldr	r3, [r7, #0]
   1813a:	60a3      	str	r3, [r4, #8]
}
   1813c:	4630      	mov	r0, r6
   1813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   18140:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18142:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   18146:	e7f0      	b.n	1812a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   18148:	f06f 0615 	mvn.w	r6, #21
   1814c:	e7cd      	b.n	180ea <submit_to_queue_locked+0x4a>
   1814e:	bf00      	nop
   18150:	200026a4 	.word	0x200026a4

00018154 <k_work_submit>:
{
   18154:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   18156:	4801      	ldr	r0, [pc, #4]	; (1815c <k_work_submit+0x8>)
   18158:	f005 b843 	b.w	1d1e2 <k_work_submit_to_queue>
   1815c:	200010c8 	.word	0x200010c8

00018160 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   18160:	b5f0      	push	{r4, r5, r6, r7, lr}
   18162:	b089      	sub	sp, #36	; 0x24
   18164:	4604      	mov	r4, r0
	list->head = NULL;
   18166:	2000      	movs	r0, #0
	list->tail = NULL;
   18168:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1816c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1816e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   18172:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   18176:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1817a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1817e:	b31d      	cbz	r5, 181c8 <k_work_queue_start+0x68>
   18180:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   18182:	2800      	cmp	r0, #0
   18184:	f240 1001 	movw	r0, #257	; 0x101
   18188:	bf08      	it	eq
   1818a:	2001      	moveq	r0, #1
	*flagp = flags;
   1818c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18190:	2000      	movs	r0, #0
   18192:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18196:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1819a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1819e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   181a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   181a6:	4b09      	ldr	r3, [pc, #36]	; (181cc <k_work_queue_start+0x6c>)
   181a8:	9400      	str	r4, [sp, #0]
   181aa:	4620      	mov	r0, r4
   181ac:	f7ff fca6 	bl	17afc <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   181b0:	b125      	cbz	r5, 181bc <k_work_queue_start+0x5c>
   181b2:	6829      	ldr	r1, [r5, #0]
   181b4:	b111      	cbz	r1, 181bc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   181b6:	4620      	mov	r0, r4
   181b8:	f004 fe91 	bl	1cede <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   181bc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   181be:	b009      	add	sp, #36	; 0x24
   181c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   181c4:	f004 be8e 	b.w	1cee4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   181c8:	2001      	movs	r0, #1
   181ca:	e7df      	b.n	1818c <k_work_queue_start+0x2c>
   181cc:	00017f2d 	.word	0x00017f2d

000181d0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   181d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   181d2:	9001      	str	r0, [sp, #4]
   181d4:	4608      	mov	r0, r1
	__asm__ volatile(
   181d6:	f04f 0120 	mov.w	r1, #32
   181da:	f3ef 8411 	mrs	r4, BASEPRI
   181de:	f381 8812 	msr	BASEPRI_MAX, r1
   181e2:	f3bf 8f6f 	isb	sy
	return *flagp;
   181e6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   181e8:	f011 0f0e 	tst.w	r1, #14
   181ec:	d116      	bne.n	1821c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   181ee:	ea53 0502 	orrs.w	r5, r3, r2
   181f2:	d108      	bne.n	18206 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   181f4:	a901      	add	r1, sp, #4
   181f6:	f7ff ff53 	bl	180a0 <submit_to_queue_locked>
	__asm__ volatile(
   181fa:	f384 8811 	msr	BASEPRI, r4
   181fe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   18202:	b003      	add	sp, #12
   18204:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   18206:	f041 0108 	orr.w	r1, r1, #8
   1820a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1820c:	9901      	ldr	r1, [sp, #4]
   1820e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18210:	3010      	adds	r0, #16
   18212:	4903      	ldr	r1, [pc, #12]	; (18220 <k_work_schedule_for_queue+0x50>)
   18214:	f000 fbf4 	bl	18a00 <z_add_timeout>
	return ret;
   18218:	2001      	movs	r0, #1
   1821a:	e7ee      	b.n	181fa <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1821c:	2000      	movs	r0, #0
   1821e:	e7ec      	b.n	181fa <k_work_schedule_for_queue+0x2a>
   18220:	0001d14b 	.word	0x0001d14b

00018224 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   18224:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   18226:	4801      	ldr	r0, [pc, #4]	; (1822c <k_work_schedule+0x8>)
   18228:	f7ff bfd2 	b.w	181d0 <k_work_schedule_for_queue>
   1822c:	200010c8 	.word	0x200010c8

00018230 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   18230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18232:	460c      	mov	r4, r1
   18234:	9001      	str	r0, [sp, #4]
   18236:	4616      	mov	r6, r2
   18238:	461d      	mov	r5, r3
	__asm__ volatile(
   1823a:	f04f 0320 	mov.w	r3, #32
   1823e:	f3ef 8711 	mrs	r7, BASEPRI
   18242:	f383 8812 	msr	BASEPRI_MAX, r3
   18246:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1824a:	4608      	mov	r0, r1
   1824c:	f004 ff34 	bl	1d0b8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18250:	ea55 0306 	orrs.w	r3, r5, r6
   18254:	d109      	bne.n	1826a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   18256:	a901      	add	r1, sp, #4
   18258:	4620      	mov	r0, r4
   1825a:	f7ff ff21 	bl	180a0 <submit_to_queue_locked>
	__asm__ volatile(
   1825e:	f387 8811 	msr	BASEPRI, r7
   18262:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   18266:	b003      	add	sp, #12
   18268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1826a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1826c:	4906      	ldr	r1, [pc, #24]	; (18288 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1826e:	f043 0308 	orr.w	r3, r3, #8
   18272:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   18274:	9b01      	ldr	r3, [sp, #4]
   18276:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   18278:	f104 0010 	add.w	r0, r4, #16
   1827c:	4632      	mov	r2, r6
   1827e:	462b      	mov	r3, r5
   18280:	f000 fbbe 	bl	18a00 <z_add_timeout>
	return ret;
   18284:	2001      	movs	r0, #1
   18286:	e7ea      	b.n	1825e <k_work_reschedule_for_queue+0x2e>
   18288:	0001d14b 	.word	0x0001d14b

0001828c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1828c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1828e:	4801      	ldr	r0, [pc, #4]	; (18294 <k_work_reschedule+0x8>)
   18290:	f7ff bfce 	b.w	18230 <k_work_reschedule_for_queue>
   18294:	200010c8 	.word	0x200010c8

00018298 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   18298:	89c3      	ldrh	r3, [r0, #14]
   1829a:	2b7f      	cmp	r3, #127	; 0x7f
   1829c:	d812      	bhi.n	182c4 <sliceable+0x2c>
	int ret = slice_ticks;
   1829e:	4b0a      	ldr	r3, [pc, #40]	; (182c8 <sliceable+0x30>)
   182a0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   182a2:	b163      	cbz	r3, 182be <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   182a4:	4b09      	ldr	r3, [pc, #36]	; (182cc <sliceable+0x34>)
   182a6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   182aa:	681b      	ldr	r3, [r3, #0]
   182ac:	429a      	cmp	r2, r3
   182ae:	db09      	blt.n	182c4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   182b0:	7b43      	ldrb	r3, [r0, #13]
   182b2:	06db      	lsls	r3, r3, #27
   182b4:	d106      	bne.n	182c4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   182b6:	4b06      	ldr	r3, [pc, #24]	; (182d0 <sliceable+0x38>)
   182b8:	1ac3      	subs	r3, r0, r3
   182ba:	bf18      	it	ne
   182bc:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   182be:	f003 0001 	and.w	r0, r3, #1
   182c2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   182c4:	2300      	movs	r3, #0
   182c6:	e7fa      	b.n	182be <sliceable+0x26>
   182c8:	200026d8 	.word	0x200026d8
   182cc:	200026d4 	.word	0x200026d4
   182d0:	20000fc8 	.word	0x20000fc8

000182d4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   182d4:	4b04      	ldr	r3, [pc, #16]	; (182e8 <slice_timeout+0x14>)
   182d6:	1ac0      	subs	r0, r0, r3
   182d8:	4b04      	ldr	r3, [pc, #16]	; (182ec <slice_timeout+0x18>)
   182da:	10c0      	asrs	r0, r0, #3
   182dc:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   182de:	4b04      	ldr	r3, [pc, #16]	; (182f0 <slice_timeout+0x1c>)
   182e0:	2201      	movs	r2, #1
   182e2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   182e4:	4770      	bx	lr
   182e6:	bf00      	nop
   182e8:	20001168 	.word	0x20001168
   182ec:	aaaaaaab 	.word	0xaaaaaaab
   182f0:	20002b58 	.word	0x20002b58

000182f4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   182f4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   182f6:	4b0e      	ldr	r3, [pc, #56]	; (18330 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   182f8:	4c0e      	ldr	r4, [pc, #56]	; (18334 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   182fa:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   182fc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   18300:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   18304:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   18306:	4620      	mov	r0, r4
   18308:	f005 f8dd 	bl	1d4c6 <z_abort_timeout>
	slice_expired[cpu] = false;
   1830c:	4b0a      	ldr	r3, [pc, #40]	; (18338 <z_reset_time_slice+0x44>)
   1830e:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   18310:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   18312:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   18314:	f7ff ffc0 	bl	18298 <sliceable>
   18318:	b148      	cbz	r0, 1832e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   1831a:	4b08      	ldr	r3, [pc, #32]	; (1833c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1831c:	4908      	ldr	r1, [pc, #32]	; (18340 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   1831e:	681a      	ldr	r2, [r3, #0]
   18320:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   18322:	4620      	mov	r0, r4
   18324:	17d3      	asrs	r3, r2, #31
	}
}
   18326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1832a:	f000 bb69 	b.w	18a00 <z_add_timeout>
}
   1832e:	bd70      	pop	{r4, r5, r6, pc}
   18330:	200026a4 	.word	0x200026a4
   18334:	20001168 	.word	0x20001168
   18338:	20002b58 	.word	0x20002b58
   1833c:	200026d8 	.word	0x200026d8
   18340:	000182d5 	.word	0x000182d5

00018344 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   18344:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   18346:	4d0d      	ldr	r5, [pc, #52]	; (1837c <update_cache+0x38>)
   18348:	462b      	mov	r3, r5
   1834a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1834e:	429c      	cmp	r4, r3
   18350:	d000      	beq.n	18354 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   18352:	b904      	cbnz	r4, 18356 <update_cache+0x12>
   18354:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   18356:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   18358:	b938      	cbnz	r0, 1836a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1835a:	7b5a      	ldrb	r2, [r3, #13]
   1835c:	06d2      	lsls	r2, r2, #27
   1835e:	d104      	bne.n	1836a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18360:	69a2      	ldr	r2, [r4, #24]
   18362:	b912      	cbnz	r2, 1836a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   18364:	89da      	ldrh	r2, [r3, #14]
   18366:	2a7f      	cmp	r2, #127	; 0x7f
   18368:	d805      	bhi.n	18376 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1836a:	429c      	cmp	r4, r3
   1836c:	d002      	beq.n	18374 <update_cache+0x30>
			z_reset_time_slice(thread);
   1836e:	4620      	mov	r0, r4
   18370:	f7ff ffc0 	bl	182f4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   18374:	4623      	mov	r3, r4
   18376:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   18378:	bd38      	pop	{r3, r4, r5, pc}
   1837a:	bf00      	nop
   1837c:	200026a4 	.word	0x200026a4

00018380 <move_thread_to_end_of_prio_q>:
{
   18380:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18382:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18386:	7b43      	ldrb	r3, [r0, #13]
   18388:	2a00      	cmp	r2, #0
{
   1838a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1838c:	da04      	bge.n	18398 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1838e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18392:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   18394:	f004 ff8f 	bl	1d2b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18398:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1839a:	4a15      	ldr	r2, [pc, #84]	; (183f0 <move_thread_to_end_of_prio_q+0x70>)
   1839c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   183a0:	4610      	mov	r0, r2
   183a2:	734b      	strb	r3, [r1, #13]
   183a4:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   183a8:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   183aa:	4283      	cmp	r3, r0
   183ac:	bf08      	it	eq
   183ae:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   183b0:	b923      	cbnz	r3, 183bc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   183b2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   183b6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   183b8:	6211      	str	r1, [r2, #32]
}
   183ba:	e00c      	b.n	183d6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   183bc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   183c0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   183c4:	42b5      	cmp	r5, r6
   183c6:	d00e      	beq.n	183e6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   183c8:	42ae      	cmp	r6, r5
   183ca:	dd0c      	ble.n	183e6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   183cc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   183ce:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   183d2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   183d4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   183d6:	6890      	ldr	r0, [r2, #8]
   183d8:	1a43      	subs	r3, r0, r1
   183da:	4258      	negs	r0, r3
}
   183dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   183e0:	4158      	adcs	r0, r3
   183e2:	f7ff bfaf 	b.w	18344 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   183e6:	429c      	cmp	r4, r3
   183e8:	d0e3      	beq.n	183b2 <move_thread_to_end_of_prio_q+0x32>
   183ea:	681b      	ldr	r3, [r3, #0]
   183ec:	e7e0      	b.n	183b0 <move_thread_to_end_of_prio_q+0x30>
   183ee:	bf00      	nop
   183f0:	200026a4 	.word	0x200026a4

000183f4 <ready_thread>:
{
   183f4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   183f6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   183fa:	7b42      	ldrb	r2, [r0, #13]
   183fc:	2b00      	cmp	r3, #0
   183fe:	db29      	blt.n	18454 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18400:	06d3      	lsls	r3, r2, #27
   18402:	d127      	bne.n	18454 <ready_thread+0x60>
	return node->next != NULL;
   18404:	6983      	ldr	r3, [r0, #24]
   18406:	bb2b      	cbnz	r3, 18454 <ready_thread+0x60>
	return list->head == list;
   18408:	4913      	ldr	r1, [pc, #76]	; (18458 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1840a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1840e:	7342      	strb	r2, [r0, #13]
   18410:	460a      	mov	r2, r1
   18412:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18416:	4294      	cmp	r4, r2
   18418:	bf18      	it	ne
   1841a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1841c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1841e:	b923      	cbnz	r3, 1842a <ready_thread+0x36>
	node->prev = tail;
   18420:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   18424:	6020      	str	r0, [r4, #0]
	list->tail = node;
   18426:	6208      	str	r0, [r1, #32]
}
   18428:	e00c      	b.n	18444 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1842a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1842e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   18432:	42b5      	cmp	r5, r6
   18434:	d00a      	beq.n	1844c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18436:	42ae      	cmp	r6, r5
   18438:	dd08      	ble.n	1844c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1843a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1843c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   18440:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18442:	6058      	str	r0, [r3, #4]
}
   18444:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   18446:	2000      	movs	r0, #0
   18448:	f7ff bf7c 	b.w	18344 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1844c:	42a3      	cmp	r3, r4
   1844e:	d0e7      	beq.n	18420 <ready_thread+0x2c>
   18450:	681b      	ldr	r3, [r3, #0]
   18452:	e7e4      	b.n	1841e <ready_thread+0x2a>
}
   18454:	bc70      	pop	{r4, r5, r6}
   18456:	4770      	bx	lr
   18458:	200026a4 	.word	0x200026a4

0001845c <unready_thread>:
{
   1845c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1845e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   18462:	7b43      	ldrb	r3, [r0, #13]
   18464:	2a00      	cmp	r2, #0
{
   18466:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18468:	da04      	bge.n	18474 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1846a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1846e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18470:	f004 ff21 	bl	1d2b6 <sys_dlist_remove>
	update_cache(thread == _current);
   18474:	4b04      	ldr	r3, [pc, #16]	; (18488 <unready_thread+0x2c>)
   18476:	6898      	ldr	r0, [r3, #8]
   18478:	1a43      	subs	r3, r0, r1
   1847a:	4258      	negs	r0, r3
   1847c:	4158      	adcs	r0, r3
}
   1847e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   18482:	f7ff bf5f 	b.w	18344 <update_cache>
   18486:	bf00      	nop
   18488:	200026a4 	.word	0x200026a4

0001848c <pend_locked>:
{
   1848c:	b570      	push	{r4, r5, r6, lr}
   1848e:	4615      	mov	r5, r2
   18490:	461c      	mov	r4, r3
   18492:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   18494:	f004 ff2a 	bl	1d2ec <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18498:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1849c:	bf08      	it	eq
   1849e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   184a2:	d008      	beq.n	184b6 <pend_locked+0x2a>
   184a4:	462a      	mov	r2, r5
   184a6:	4623      	mov	r3, r4
   184a8:	f106 0018 	add.w	r0, r6, #24
   184ac:	4902      	ldr	r1, [pc, #8]	; (184b8 <pend_locked+0x2c>)
}
   184ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   184b2:	f000 baa5 	b.w	18a00 <z_add_timeout>
   184b6:	bd70      	pop	{r4, r5, r6, pc}
   184b8:	0001d3c5 	.word	0x0001d3c5

000184bc <z_time_slice>:
{
   184bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   184be:	f04f 0320 	mov.w	r3, #32
   184c2:	f3ef 8511 	mrs	r5, BASEPRI
   184c6:	f383 8812 	msr	BASEPRI_MAX, r3
   184ca:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   184ce:	4b10      	ldr	r3, [pc, #64]	; (18510 <z_time_slice+0x54>)
	if (pending_current == curr) {
   184d0:	4a10      	ldr	r2, [pc, #64]	; (18514 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   184d2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   184d4:	6810      	ldr	r0, [r2, #0]
   184d6:	42a0      	cmp	r0, r4
   184d8:	d106      	bne.n	184e8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   184da:	f7ff ff0b 	bl	182f4 <z_reset_time_slice>
	__asm__ volatile(
   184de:	f385 8811 	msr	BASEPRI, r5
   184e2:	f3bf 8f6f 	isb	sy
}
   184e6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   184e8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   184ea:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   184ec:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   184ee:	4a0a      	ldr	r2, [pc, #40]	; (18518 <z_time_slice+0x5c>)
   184f0:	5cd3      	ldrb	r3, [r2, r3]
   184f2:	2b00      	cmp	r3, #0
   184f4:	d0f3      	beq.n	184de <z_time_slice+0x22>
   184f6:	4620      	mov	r0, r4
   184f8:	f7ff fece 	bl	18298 <sliceable>
   184fc:	2800      	cmp	r0, #0
   184fe:	d0ee      	beq.n	184de <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   18500:	7b63      	ldrb	r3, [r4, #13]
   18502:	06db      	lsls	r3, r3, #27
   18504:	d102      	bne.n	1850c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   18506:	4620      	mov	r0, r4
   18508:	f7ff ff3a 	bl	18380 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   1850c:	4620      	mov	r0, r4
   1850e:	e7e4      	b.n	184da <z_time_slice+0x1e>
   18510:	200026a4 	.word	0x200026a4
   18514:	200026d0 	.word	0x200026d0
   18518:	20002b58 	.word	0x20002b58

0001851c <z_pend_curr>:
{
   1851c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1851e:	480c      	ldr	r0, [pc, #48]	; (18550 <z_pend_curr+0x34>)
   18520:	4d0c      	ldr	r5, [pc, #48]	; (18554 <z_pend_curr+0x38>)
   18522:	6886      	ldr	r6, [r0, #8]
   18524:	602e      	str	r6, [r5, #0]
{
   18526:	460c      	mov	r4, r1
   18528:	4611      	mov	r1, r2
   1852a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1852e:	f04f 0620 	mov.w	r6, #32
   18532:	f3ef 8511 	mrs	r5, BASEPRI
   18536:	f386 8812 	msr	BASEPRI_MAX, r6
   1853a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1853e:	6880      	ldr	r0, [r0, #8]
   18540:	f7ff ffa4 	bl	1848c <pend_locked>
	ret = arch_swap(key);
   18544:	4620      	mov	r0, r4
}
   18546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1854a:	f7eb ba2f 	b.w	39ac <arch_swap>
   1854e:	bf00      	nop
   18550:	200026a4 	.word	0x200026a4
   18554:	200026d0 	.word	0x200026d0

00018558 <z_set_prio>:
{
   18558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1855a:	4604      	mov	r4, r0
   1855c:	f04f 0320 	mov.w	r3, #32
   18560:	f3ef 8611 	mrs	r6, BASEPRI
   18564:	f383 8812 	msr	BASEPRI_MAX, r3
   18568:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1856c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1856e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   18570:	b249      	sxtb	r1, r1
   18572:	d119      	bne.n	185a8 <z_set_prio+0x50>
	return node->next != NULL;
   18574:	6985      	ldr	r5, [r0, #24]
   18576:	b9bd      	cbnz	r5, 185a8 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1857c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1857e:	f004 fe9a 	bl	1d2b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   18582:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   18584:	4a16      	ldr	r2, [pc, #88]	; (185e0 <z_set_prio+0x88>)
				thread->base.prio = prio;
   18586:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   18588:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1858c:	7343      	strb	r3, [r0, #13]
   1858e:	4613      	mov	r3, r2
   18590:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18594:	4298      	cmp	r0, r3
   18596:	bf18      	it	ne
   18598:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1859a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1859c:	b95d      	cbnz	r5, 185b6 <z_set_prio+0x5e>
	node->prev = tail;
   1859e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   185a2:	6004      	str	r4, [r0, #0]
	list->tail = node;
   185a4:	6214      	str	r4, [r2, #32]
}
   185a6:	e011      	b.n	185cc <z_set_prio+0x74>
			thread->base.prio = prio;
   185a8:	73a1      	strb	r1, [r4, #14]
   185aa:	2000      	movs	r0, #0
	__asm__ volatile(
   185ac:	f386 8811 	msr	BASEPRI, r6
   185b0:	f3bf 8f6f 	isb	sy
}
   185b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   185b6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   185ba:	42b9      	cmp	r1, r7
   185bc:	d00b      	beq.n	185d6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   185be:	428f      	cmp	r7, r1
   185c0:	dd09      	ble.n	185d6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   185c2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   185c4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   185c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   185ca:	606c      	str	r4, [r5, #4]
			update_cache(1);
   185cc:	2001      	movs	r0, #1
   185ce:	f7ff feb9 	bl	18344 <update_cache>
   185d2:	2001      	movs	r0, #1
   185d4:	e7ea      	b.n	185ac <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   185d6:	42a8      	cmp	r0, r5
   185d8:	d0e1      	beq.n	1859e <z_set_prio+0x46>
   185da:	682d      	ldr	r5, [r5, #0]
   185dc:	e7de      	b.n	1859c <z_set_prio+0x44>
   185de:	bf00      	nop
   185e0:	200026a4 	.word	0x200026a4

000185e4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   185e4:	b949      	cbnz	r1, 185fa <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   185e6:	f3ef 8005 	mrs	r0, IPSR
   185ea:	b930      	cbnz	r0, 185fa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   185ec:	4b05      	ldr	r3, [pc, #20]	; (18604 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   185ee:	699a      	ldr	r2, [r3, #24]
   185f0:	689b      	ldr	r3, [r3, #8]
   185f2:	429a      	cmp	r2, r3
   185f4:	d001      	beq.n	185fa <z_reschedule+0x16>
   185f6:	f7eb b9d9 	b.w	39ac <arch_swap>
   185fa:	f381 8811 	msr	BASEPRI, r1
   185fe:	f3bf 8f6f 	isb	sy
}
   18602:	4770      	bx	lr
   18604:	200026a4 	.word	0x200026a4

00018608 <z_sched_start>:
{
   18608:	b510      	push	{r4, lr}
	__asm__ volatile(
   1860a:	f04f 0220 	mov.w	r2, #32
   1860e:	f3ef 8411 	mrs	r4, BASEPRI
   18612:	f382 8812 	msr	BASEPRI_MAX, r2
   18616:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1861a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1861c:	0751      	lsls	r1, r2, #29
   1861e:	d404      	bmi.n	1862a <z_sched_start+0x22>
	__asm__ volatile(
   18620:	f384 8811 	msr	BASEPRI, r4
   18624:	f3bf 8f6f 	isb	sy
}
   18628:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1862a:	f022 0204 	bic.w	r2, r2, #4
   1862e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18630:	f7ff fee0 	bl	183f4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18634:	4621      	mov	r1, r4
   18636:	4802      	ldr	r0, [pc, #8]	; (18640 <z_sched_start+0x38>)
}
   18638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1863c:	f7ff bfd2 	b.w	185e4 <z_reschedule>
   18640:	20002b59 	.word	0x20002b59

00018644 <z_impl_k_thread_suspend>:
{
   18644:	b570      	push	{r4, r5, r6, lr}
   18646:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18648:	3018      	adds	r0, #24
   1864a:	f004 ff3c 	bl	1d4c6 <z_abort_timeout>
	__asm__ volatile(
   1864e:	f04f 0320 	mov.w	r3, #32
   18652:	f3ef 8611 	mrs	r6, BASEPRI
   18656:	f383 8812 	msr	BASEPRI_MAX, r3
   1865a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1865e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   18662:	7b63      	ldrb	r3, [r4, #13]
   18664:	2a00      	cmp	r2, #0
   18666:	da05      	bge.n	18674 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   18668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1866c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1866e:	4620      	mov	r0, r4
   18670:	f004 fe21 	bl	1d2b6 <sys_dlist_remove>
		update_cache(thread == _current);
   18674:	4d0b      	ldr	r5, [pc, #44]	; (186a4 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18676:	7b63      	ldrb	r3, [r4, #13]
   18678:	68a8      	ldr	r0, [r5, #8]
   1867a:	f043 0310 	orr.w	r3, r3, #16
   1867e:	7363      	strb	r3, [r4, #13]
   18680:	1b03      	subs	r3, r0, r4
   18682:	4258      	negs	r0, r3
   18684:	4158      	adcs	r0, r3
   18686:	f7ff fe5d 	bl	18344 <update_cache>
	__asm__ volatile(
   1868a:	f386 8811 	msr	BASEPRI, r6
   1868e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18692:	68ab      	ldr	r3, [r5, #8]
   18694:	42a3      	cmp	r3, r4
   18696:	d103      	bne.n	186a0 <z_impl_k_thread_suspend+0x5c>
}
   18698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1869c:	f004 bed6 	b.w	1d44c <z_reschedule_unlocked>
}
   186a0:	bd70      	pop	{r4, r5, r6, pc}
   186a2:	bf00      	nop
   186a4:	200026a4 	.word	0x200026a4

000186a8 <k_sched_lock>:
	__asm__ volatile(
   186a8:	f04f 0320 	mov.w	r3, #32
   186ac:	f3ef 8111 	mrs	r1, BASEPRI
   186b0:	f383 8812 	msr	BASEPRI_MAX, r3
   186b4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   186b8:	4b04      	ldr	r3, [pc, #16]	; (186cc <k_sched_lock+0x24>)
   186ba:	689a      	ldr	r2, [r3, #8]
   186bc:	7bd3      	ldrb	r3, [r2, #15]
   186be:	3b01      	subs	r3, #1
   186c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   186c2:	f381 8811 	msr	BASEPRI, r1
   186c6:	f3bf 8f6f 	isb	sy
}
   186ca:	4770      	bx	lr
   186cc:	200026a4 	.word	0x200026a4

000186d0 <k_sched_unlock>:
{
   186d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   186d2:	f04f 0320 	mov.w	r3, #32
   186d6:	f3ef 8411 	mrs	r4, BASEPRI
   186da:	f383 8812 	msr	BASEPRI_MAX, r3
   186de:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   186e2:	4b08      	ldr	r3, [pc, #32]	; (18704 <k_sched_unlock+0x34>)
   186e4:	689a      	ldr	r2, [r3, #8]
   186e6:	7bd3      	ldrb	r3, [r2, #15]
   186e8:	3301      	adds	r3, #1
   186ea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   186ec:	2000      	movs	r0, #0
   186ee:	f7ff fe29 	bl	18344 <update_cache>
	__asm__ volatile(
   186f2:	f384 8811 	msr	BASEPRI, r4
   186f6:	f3bf 8f6f 	isb	sy
}
   186fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   186fe:	f004 bea5 	b.w	1d44c <z_reschedule_unlocked>
   18702:	bf00      	nop
   18704:	200026a4 	.word	0x200026a4

00018708 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   18708:	4b02      	ldr	r3, [pc, #8]	; (18714 <z_sched_init+0xc>)
   1870a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   1870e:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   18712:	4770      	bx	lr
   18714:	200026a4 	.word	0x200026a4

00018718 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   18718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1871a:	f04f 0320 	mov.w	r3, #32
   1871e:	f3ef 8511 	mrs	r5, BASEPRI
   18722:	f383 8812 	msr	BASEPRI_MAX, r3
   18726:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1872a:	4919      	ldr	r1, [pc, #100]	; (18790 <z_impl_k_yield+0x78>)
   1872c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1872e:	7b43      	ldrb	r3, [r0, #13]
   18730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18734:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   18736:	f004 fdbe 	bl	1d2b6 <sys_dlist_remove>
	}
	queue_thread(_current);
   1873a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1873c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1873e:	4608      	mov	r0, r1
   18740:	f062 027f 	orn	r2, r2, #127	; 0x7f
   18744:	735a      	strb	r2, [r3, #13]
   18746:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   1874a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1874c:	4282      	cmp	r2, r0
   1874e:	bf08      	it	eq
   18750:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18752:	b922      	cbnz	r2, 1875e <z_impl_k_yield+0x46>
	node->prev = tail;
   18754:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   18758:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1875a:	620b      	str	r3, [r1, #32]
}
   1875c:	e00c      	b.n	18778 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1875e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   18762:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   18766:	42be      	cmp	r6, r7
   18768:	d00e      	beq.n	18788 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1876a:	42b7      	cmp	r7, r6
   1876c:	dd0c      	ble.n	18788 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1876e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   18770:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   18774:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   18776:	6053      	str	r3, [r2, #4]
	update_cache(1);
   18778:	2001      	movs	r0, #1
   1877a:	f7ff fde3 	bl	18344 <update_cache>
   1877e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   18780:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18784:	f7eb b912 	b.w	39ac <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18788:	42a2      	cmp	r2, r4
   1878a:	d0e3      	beq.n	18754 <z_impl_k_yield+0x3c>
   1878c:	6812      	ldr	r2, [r2, #0]
   1878e:	e7e0      	b.n	18752 <z_impl_k_yield+0x3a>
   18790:	200026a4 	.word	0x200026a4

00018794 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18794:	ea50 0301 	orrs.w	r3, r0, r1
{
   18798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1879c:	4605      	mov	r5, r0
   1879e:	460e      	mov	r6, r1
	if (ticks == 0) {
   187a0:	d103      	bne.n	187aa <z_tick_sleep+0x16>
	z_impl_k_yield();
   187a2:	f7ff ffb9 	bl	18718 <z_impl_k_yield>
		k_yield();
		return 0;
   187a6:	2000      	movs	r0, #0
   187a8:	e02c      	b.n	18804 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   187aa:	1c83      	adds	r3, r0, #2
   187ac:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   187b0:	db2a      	blt.n	18808 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   187b2:	f004 feae 	bl	1d512 <sys_clock_tick_get_32>
   187b6:	182c      	adds	r4, r5, r0
   187b8:	f04f 0320 	mov.w	r3, #32
   187bc:	f3ef 8811 	mrs	r8, BASEPRI
   187c0:	f383 8812 	msr	BASEPRI_MAX, r3
   187c4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   187c8:	4f11      	ldr	r7, [pc, #68]	; (18810 <z_tick_sleep+0x7c>)
   187ca:	4b12      	ldr	r3, [pc, #72]	; (18814 <z_tick_sleep+0x80>)
   187cc:	68b8      	ldr	r0, [r7, #8]
   187ce:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   187d0:	f7ff fe44 	bl	1845c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   187d4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   187d6:	4910      	ldr	r1, [pc, #64]	; (18818 <z_tick_sleep+0x84>)
   187d8:	462a      	mov	r2, r5
   187da:	4633      	mov	r3, r6
   187dc:	3018      	adds	r0, #24
   187de:	f000 f90f 	bl	18a00 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   187e2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   187e4:	7b53      	ldrb	r3, [r2, #13]
   187e6:	f043 0310 	orr.w	r3, r3, #16
   187ea:	7353      	strb	r3, [r2, #13]
   187ec:	4640      	mov	r0, r8
   187ee:	f7eb f8dd 	bl	39ac <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   187f2:	f004 fe8e 	bl	1d512 <sys_clock_tick_get_32>
   187f6:	1a20      	subs	r0, r4, r0
   187f8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   187fc:	2801      	cmp	r0, #1
   187fe:	f173 0300 	sbcs.w	r3, r3, #0
   18802:	dbd0      	blt.n	187a6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   18804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   18808:	f06f 0401 	mvn.w	r4, #1
   1880c:	1a24      	subs	r4, r4, r0
   1880e:	e7d3      	b.n	187b8 <z_tick_sleep+0x24>
   18810:	200026a4 	.word	0x200026a4
   18814:	200026d0 	.word	0x200026d0
   18818:	0001d3c5 	.word	0x0001d3c5

0001881c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1881c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   18820:	bf08      	it	eq
   18822:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   18826:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18828:	d106      	bne.n	18838 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1882a:	4b08      	ldr	r3, [pc, #32]	; (1884c <z_impl_k_sleep+0x30>)
   1882c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1882e:	f7ff ff09 	bl	18644 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   18832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   18836:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   18838:	f7ff ffac 	bl	18794 <z_tick_sleep>
   1883c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18840:	fb80 0303 	smull	r0, r3, r0, r3
   18844:	0bc0      	lsrs	r0, r0, #15
   18846:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1884a:	e7f4      	b.n	18836 <z_impl_k_sleep+0x1a>
   1884c:	200026a4 	.word	0x200026a4

00018850 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18850:	4b01      	ldr	r3, [pc, #4]	; (18858 <z_impl_z_current_get+0x8>)
   18852:	6898      	ldr	r0, [r3, #8]
   18854:	4770      	bx	lr
   18856:	bf00      	nop
   18858:	200026a4 	.word	0x200026a4

0001885c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18860:	4604      	mov	r4, r0
   18862:	f04f 0320 	mov.w	r3, #32
   18866:	f3ef 8611 	mrs	r6, BASEPRI
   1886a:	f383 8812 	msr	BASEPRI_MAX, r3
   1886e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   18872:	7b03      	ldrb	r3, [r0, #12]
   18874:	07d9      	lsls	r1, r3, #31
   18876:	d50b      	bpl.n	18890 <z_thread_abort+0x34>
	__asm__ volatile(
   18878:	f386 8811 	msr	BASEPRI, r6
   1887c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   18880:	4040      	eors	r0, r0
   18882:	f380 8811 	msr	BASEPRI, r0
   18886:	f04f 0004 	mov.w	r0, #4
   1888a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1888c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   18890:	7b43      	ldrb	r3, [r0, #13]
   18892:	071a      	lsls	r2, r3, #28
   18894:	d504      	bpl.n	188a0 <z_thread_abort+0x44>
   18896:	f386 8811 	msr	BASEPRI, r6
   1889a:	f3bf 8f6f 	isb	sy
   1889e:	e7f5      	b.n	1888c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   188a0:	f023 0220 	bic.w	r2, r3, #32
   188a4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   188a8:	09d2      	lsrs	r2, r2, #7
   188aa:	d120      	bne.n	188ee <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   188ac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   188ae:	68a3      	ldr	r3, [r4, #8]
   188b0:	b113      	cbz	r3, 188b8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   188b2:	4620      	mov	r0, r4
   188b4:	f004 fd07 	bl	1d2c6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   188b8:	f104 0018 	add.w	r0, r4, #24
   188bc:	f004 fe03 	bl	1d4c6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   188c0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   188c4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   188c8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188ca:	42bd      	cmp	r5, r7
   188cc:	d000      	beq.n	188d0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   188ce:	b9b5      	cbnz	r5, 188fe <z_thread_abort+0xa2>
		update_cache(1);
   188d0:	2001      	movs	r0, #1
   188d2:	f7ff fd37 	bl	18344 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   188d6:	4b10      	ldr	r3, [pc, #64]	; (18918 <z_thread_abort+0xbc>)
   188d8:	689b      	ldr	r3, [r3, #8]
   188da:	42a3      	cmp	r3, r4
   188dc:	d1db      	bne.n	18896 <z_thread_abort+0x3a>
   188de:	f3ef 8305 	mrs	r3, IPSR
   188e2:	2b00      	cmp	r3, #0
   188e4:	d1d7      	bne.n	18896 <z_thread_abort+0x3a>
   188e6:	4630      	mov	r0, r6
   188e8:	f7eb f860 	bl	39ac <arch_swap>
	return ret;
   188ec:	e7d3      	b.n	18896 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   188ee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   188f2:	f043 0308 	orr.w	r3, r3, #8
   188f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   188f8:	f004 fcdd 	bl	1d2b6 <sys_dlist_remove>
}
   188fc:	e7d7      	b.n	188ae <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   188fe:	4628      	mov	r0, r5
   18900:	f004 fce1 	bl	1d2c6 <unpend_thread_no_timeout>
   18904:	f105 0018 	add.w	r0, r5, #24
   18908:	f004 fddd 	bl	1d4c6 <z_abort_timeout>
   1890c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   18910:	4628      	mov	r0, r5
   18912:	f7ff fd6f 	bl	183f4 <ready_thread>
   18916:	e7d7      	b.n	188c8 <z_thread_abort+0x6c>
   18918:	200026a4 	.word	0x200026a4

0001891c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1891c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1891e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   18922:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   18924:	e9cd 6700 	strd	r6, r7, [sp]
   18928:	f7ff fdf8 	bl	1851c <z_pend_curr>

	if (data != NULL) {
   1892c:	b11c      	cbz	r4, 18936 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1892e:	4b03      	ldr	r3, [pc, #12]	; (1893c <z_sched_wait+0x20>)
   18930:	689b      	ldr	r3, [r3, #8]
   18932:	695b      	ldr	r3, [r3, #20]
   18934:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   18936:	b002      	add	sp, #8
   18938:	bdd0      	pop	{r4, r6, r7, pc}
   1893a:	bf00      	nop
   1893c:	200026a4 	.word	0x200026a4

00018940 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   18940:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   18942:	4806      	ldr	r0, [pc, #24]	; (1895c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   18944:	4a06      	ldr	r2, [pc, #24]	; (18960 <z_data_copy+0x20>)
   18946:	4907      	ldr	r1, [pc, #28]	; (18964 <z_data_copy+0x24>)
   18948:	1a12      	subs	r2, r2, r0
   1894a:	f004 fa19 	bl	1cd80 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1894e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   18952:	4a05      	ldr	r2, [pc, #20]	; (18968 <z_data_copy+0x28>)
   18954:	4905      	ldr	r1, [pc, #20]	; (1896c <z_data_copy+0x2c>)
   18956:	4806      	ldr	r0, [pc, #24]	; (18970 <z_data_copy+0x30>)
   18958:	f004 ba12 	b.w	1cd80 <z_early_memcpy>
   1895c:	20000000 	.word	0x20000000
   18960:	20000a5c 	.word	0x20000a5c
   18964:	0001fc5c 	.word	0x0001fc5c
   18968:	00000000 	.word	0x00000000
   1896c:	0001fc5c 	.word	0x0001fc5c
   18970:	20000000 	.word	0x20000000

00018974 <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   18974:	4b03      	ldr	r3, [pc, #12]	; (18984 <elapsed+0x10>)
   18976:	681b      	ldr	r3, [r3, #0]
   18978:	b90b      	cbnz	r3, 1897e <elapsed+0xa>
   1897a:	f7fd bd65 	b.w	16448 <sys_clock_elapsed>
}
   1897e:	2000      	movs	r0, #0
   18980:	4770      	bx	lr
   18982:	bf00      	nop
   18984:	200026dc 	.word	0x200026dc

00018988 <next_timeout>:

static int32_t next_timeout(void)
{
   18988:	b510      	push	{r4, lr}
	return list->head == list;
   1898a:	4b0e      	ldr	r3, [pc, #56]	; (189c4 <next_timeout+0x3c>)
   1898c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1898e:	429c      	cmp	r4, r3
   18990:	d104      	bne.n	1899c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18992:	f7ff ffef 	bl	18974 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   18996:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   1899a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1899c:	f7ff ffea 	bl	18974 <elapsed>
	if ((to == NULL) ||
   189a0:	2c00      	cmp	r4, #0
   189a2:	d0f8      	beq.n	18996 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   189a4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   189a8:	1a1b      	subs	r3, r3, r0
   189aa:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   189ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   189b2:	f172 0100 	sbcs.w	r1, r2, #0
   189b6:	daee      	bge.n	18996 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   189b8:	2a00      	cmp	r2, #0
   189ba:	bfac      	ite	ge
   189bc:	4618      	movge	r0, r3
   189be:	2000      	movlt	r0, #0
	return ret;
   189c0:	e7eb      	b.n	1899a <next_timeout+0x12>
   189c2:	bf00      	nop
   189c4:	200007e4 	.word	0x200007e4

000189c8 <remove_timeout>:
{
   189c8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   189ca:	b170      	cbz	r0, 189ea <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   189cc:	4b0b      	ldr	r3, [pc, #44]	; (189fc <remove_timeout+0x34>)
   189ce:	685b      	ldr	r3, [r3, #4]
   189d0:	4298      	cmp	r0, r3
   189d2:	d00a      	beq.n	189ea <remove_timeout+0x22>
   189d4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   189d6:	b143      	cbz	r3, 189ea <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   189d8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   189dc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   189e0:	1912      	adds	r2, r2, r4
   189e2:	eb41 0105 	adc.w	r1, r1, r5
   189e6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   189ea:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   189ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   189f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   189f2:	2300      	movs	r3, #0
	node->prev = NULL;
   189f4:	e9c0 3300 	strd	r3, r3, [r0]
}
   189f8:	bd30      	pop	{r4, r5, pc}
   189fa:	bf00      	nop
   189fc:	200007e4 	.word	0x200007e4

00018a00 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18a04:	bf08      	it	eq
   18a06:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   18a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a0c:	4604      	mov	r4, r0
   18a0e:	461d      	mov	r5, r3
   18a10:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18a12:	d05c      	beq.n	18ace <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   18a14:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   18a16:	f04f 0320 	mov.w	r3, #32
   18a1a:	f3ef 8711 	mrs	r7, BASEPRI
   18a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   18a22:	f3bf 8f6f 	isb	sy

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   18a26:	3201      	adds	r2, #1
   18a28:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   18a2c:	da24      	bge.n	18a78 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   18a2e:	492d      	ldr	r1, [pc, #180]	; (18ae4 <z_add_timeout+0xe4>)
   18a30:	e9d1 2000 	ldrd	r2, r0, [r1]
   18a34:	f06f 0301 	mvn.w	r3, #1
   18a38:	1a9b      	subs	r3, r3, r2
   18a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18a3e:	eb62 0000 	sbc.w	r0, r2, r0
   18a42:	1b9e      	subs	r6, r3, r6
   18a44:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   18a48:	2e01      	cmp	r6, #1
   18a4a:	f170 0300 	sbcs.w	r3, r0, #0
   18a4e:	da01      	bge.n	18a54 <z_add_timeout+0x54>
   18a50:	2601      	movs	r6, #1
   18a52:	2000      	movs	r0, #0
   18a54:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   18a58:	4e23      	ldr	r6, [pc, #140]	; (18ae8 <z_add_timeout+0xe8>)
   18a5a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   18a5e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18a60:	45b4      	cmp	ip, r6
   18a62:	bf08      	it	eq
   18a64:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   18a68:	f1bc 0f00 	cmp.w	ip, #0
   18a6c:	d10d      	bne.n	18a8a <z_add_timeout+0x8a>
	node->prev = tail;
   18a6e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   18a72:	602c      	str	r4, [r5, #0]
	list->tail = node;
   18a74:	6074      	str	r4, [r6, #4]
}
   18a76:	e01c      	b.n	18ab2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   18a78:	f7ff ff7c 	bl	18974 <elapsed>
   18a7c:	3601      	adds	r6, #1
   18a7e:	f145 0500 	adc.w	r5, r5, #0
   18a82:	1836      	adds	r6, r6, r0
   18a84:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   18a88:	e7e4      	b.n	18a54 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   18a8a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   18a8e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   18a92:	4293      	cmp	r3, r2
   18a94:	eb71 0e00 	sbcs.w	lr, r1, r0
   18a98:	da1a      	bge.n	18ad0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   18a9a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   18a9c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   18aa0:	eb60 0001 	sbc.w	r0, r0, r1
   18aa4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   18aa8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   18aac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   18aae:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   18ab2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ab4:	42b3      	cmp	r3, r6
   18ab6:	d006      	beq.n	18ac6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18ab8:	429c      	cmp	r4, r3
   18aba:	d104      	bne.n	18ac6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   18abc:	f7ff ff64 	bl	18988 <next_timeout>
   18ac0:	2100      	movs	r1, #0
   18ac2:	f7fd fc8d 	bl	163e0 <sys_clock_set_timeout>
	__asm__ volatile(
   18ac6:	f387 8811 	msr	BASEPRI, r7
   18aca:	f3bf 8f6f 	isb	sy
		}
	}
}
   18ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   18ad0:	1a9b      	subs	r3, r3, r2
   18ad2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   18ad6:	45ac      	cmp	ip, r5
   18ad8:	e9c4 3104 	strd	r3, r1, [r4, #16]
   18adc:	d0c7      	beq.n	18a6e <z_add_timeout+0x6e>
   18ade:	f8dc c000 	ldr.w	ip, [ip]
   18ae2:	e7c1      	b.n	18a68 <z_add_timeout+0x68>
   18ae4:	20001180 	.word	0x20001180
   18ae8:	200007e4 	.word	0x200007e4

00018aec <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   18aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   18af0:	f04f 0320 	mov.w	r3, #32
   18af4:	f3ef 8c11 	mrs	ip, BASEPRI
   18af8:	f383 8812 	msr	BASEPRI_MAX, r3
   18afc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18b00:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 18bb4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   18b04:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 18bb8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   18b08:	4f2c      	ldr	r7, [pc, #176]	; (18bbc <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   18b0a:	f8c9 0000 	str.w	r0, [r9]
   18b0e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   18b12:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b14:	4550      	cmp	r0, sl
   18b16:	bf08      	it	eq
   18b18:	2000      	moveq	r0, #0
   18b1a:	2500      	movs	r5, #0
		curr_tick += dt;
   18b1c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   18b20:	f8d9 3000 	ldr.w	r3, [r9]
   18b24:	46e0      	mov	r8, ip
   18b26:	b380      	cbz	r0, 18b8a <sys_clock_announce+0x9e>
   18b28:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   18b2c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   18b30:	42b3      	cmp	r3, r6
   18b32:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   18b36:	da05      	bge.n	18b44 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   18b38:	1af6      	subs	r6, r6, r3
   18b3a:	eb6c 040e 	sbc.w	r4, ip, lr
   18b3e:	e9c0 6404 	strd	r6, r4, [r0, #16]
   18b42:	e022      	b.n	18b8a <sys_clock_announce+0x9e>
		curr_tick += dt;
   18b44:	18b2      	adds	r2, r6, r2
   18b46:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   18b4a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   18b4e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   18b52:	f7ff ff39 	bl	189c8 <remove_timeout>
	__asm__ volatile(
   18b56:	f388 8811 	msr	BASEPRI, r8
   18b5a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   18b5e:	6883      	ldr	r3, [r0, #8]
   18b60:	4798      	blx	r3
	__asm__ volatile(
   18b62:	f04f 0320 	mov.w	r3, #32
   18b66:	f3ef 8811 	mrs	r8, BASEPRI
   18b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   18b6e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   18b72:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   18b76:	f8da 0000 	ldr.w	r0, [sl]
   18b7a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b7c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   18b7e:	46c4      	mov	ip, r8
   18b80:	f8c9 3000 	str.w	r3, [r9]
   18b84:	d1ca      	bne.n	18b1c <sys_clock_announce+0x30>
		curr_tick += dt;
   18b86:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   18b8a:	189a      	adds	r2, r3, r2
   18b8c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   18b90:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   18b92:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   18b96:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   18b9a:	f7ff fef5 	bl	18988 <next_timeout>
   18b9e:	4621      	mov	r1, r4
   18ba0:	f7fd fc1e 	bl	163e0 <sys_clock_set_timeout>
	__asm__ volatile(
   18ba4:	f388 8811 	msr	BASEPRI, r8
   18ba8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   18bac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   18bb0:	f7ff bc84 	b.w	184bc <z_time_slice>
   18bb4:	200007e4 	.word	0x200007e4
   18bb8:	200026dc 	.word	0x200026dc
   18bbc:	20001180 	.word	0x20001180

00018bc0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   18bc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   18bc2:	f04f 0320 	mov.w	r3, #32
   18bc6:	f3ef 8411 	mrs	r4, BASEPRI
   18bca:	f383 8812 	msr	BASEPRI_MAX, r3
   18bce:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	K_SPINLOCK(&timeout_lock) {
		t = curr_tick + elapsed();
   18bd2:	f7ff fecf 	bl	18974 <elapsed>
   18bd6:	4a06      	ldr	r2, [pc, #24]	; (18bf0 <sys_clock_tick_get+0x30>)
   18bd8:	4603      	mov	r3, r0
   18bda:	e9d2 0100 	ldrd	r0, r1, [r2]
   18bde:	1818      	adds	r0, r3, r0
   18be0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   18be4:	f384 8811 	msr	BASEPRI, r4
   18be8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   18bec:	bd10      	pop	{r4, pc}
   18bee:	bf00      	nop
   18bf0:	20001180 	.word	0x20001180

00018bf4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   18bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bf6:	4604      	mov	r4, r0
	__asm__ volatile(
   18bf8:	f04f 0320 	mov.w	r3, #32
   18bfc:	f3ef 8711 	mrs	r7, BASEPRI
   18c00:	f383 8812 	msr	BASEPRI_MAX, r3
   18c04:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   18c08:	6802      	ldr	r2, [r0, #0]
   18c0a:	b122      	cbz	r2, 18c16 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   18c0c:	f387 8811 	msr	BASEPRI, r7
   18c10:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   18c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   18c16:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   18c1a:	1c58      	adds	r0, r3, #1
   18c1c:	f146 0100 	adc.w	r1, r6, #0
   18c20:	2802      	cmp	r0, #2
   18c22:	f171 0100 	sbcs.w	r1, r1, #0
   18c26:	d327      	bcc.n	18c78 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   18c28:	2b01      	cmp	r3, #1
   18c2a:	f176 0100 	sbcs.w	r1, r6, #0
   18c2e:	bfbc      	itt	lt
   18c30:	2301      	movlt	r3, #1
   18c32:	4616      	movlt	r6, r2
   18c34:	1e5d      	subs	r5, r3, #1
   18c36:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   18c3a:	f004 fc6e 	bl	1d51a <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   18c3e:	3001      	adds	r0, #1
   18c40:	f141 0100 	adc.w	r1, r1, #0
   18c44:	1940      	adds	r0, r0, r5
   18c46:	eb46 0101 	adc.w	r1, r6, r1
   18c4a:	2801      	cmp	r0, #1
   18c4c:	f171 0100 	sbcs.w	r1, r1, #0
   18c50:	db3a      	blt.n	18cc8 <z_timer_expiration_handler+0xd4>
   18c52:	f004 fc62 	bl	1d51a <z_impl_k_uptime_ticks>
   18c56:	3001      	adds	r0, #1
   18c58:	f141 0100 	adc.w	r1, r1, #0
   18c5c:	f06f 0201 	mvn.w	r2, #1
   18c60:	1940      	adds	r0, r0, r5
   18c62:	eb46 0301 	adc.w	r3, r6, r1
   18c66:	1a12      	subs	r2, r2, r0
   18c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18c6c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18c70:	4918      	ldr	r1, [pc, #96]	; (18cd4 <z_timer_expiration_handler+0xe0>)
   18c72:	4620      	mov	r0, r4
   18c74:	f7ff fec4 	bl	18a00 <z_add_timeout>
	timer->status += 1U;
   18c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18c7a:	3301      	adds	r3, #1
   18c7c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   18c7e:	6a23      	ldr	r3, [r4, #32]
   18c80:	b173      	cbz	r3, 18ca0 <z_timer_expiration_handler+0xac>
   18c82:	f387 8811 	msr	BASEPRI, r7
   18c86:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   18c8a:	6a23      	ldr	r3, [r4, #32]
   18c8c:	4620      	mov	r0, r4
   18c8e:	4798      	blx	r3
	__asm__ volatile(
   18c90:	f04f 0320 	mov.w	r3, #32
   18c94:	f3ef 8711 	mrs	r7, BASEPRI
   18c98:	f383 8812 	msr	BASEPRI_MAX, r3
   18c9c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18ca0:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ca4:	42a5      	cmp	r5, r4
   18ca6:	d0b1      	beq.n	18c0c <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   18ca8:	2d00      	cmp	r5, #0
   18caa:	d0af      	beq.n	18c0c <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   18cac:	4628      	mov	r0, r5
   18cae:	f004 fb55 	bl	1d35c <z_unpend_thread_no_timeout>
   18cb2:	2300      	movs	r3, #0
   18cb4:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   18cb6:	f387 8811 	msr	BASEPRI, r7
   18cba:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   18cbe:	4628      	mov	r0, r5
}
   18cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   18cc4:	f004 bb3a 	b.w	1d33c <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   18cc8:	f06f 0201 	mvn.w	r2, #1
   18ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18cd0:	e7ce      	b.n	18c70 <z_timer_expiration_handler+0x7c>
   18cd2:	bf00      	nop
   18cd4:	00018bf5 	.word	0x00018bf5

00018cd8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   18cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18ce0:	bf08      	it	eq
   18ce2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   18ce6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   18cea:	4605      	mov	r5, r0
   18cec:	461c      	mov	r4, r3
   18cee:	4691      	mov	r9, r2
   18cf0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   18cf2:	d01c      	beq.n	18d2e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   18cf4:	1c53      	adds	r3, r2, #1
   18cf6:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   18cfa:	db09      	blt.n	18d10 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   18cfc:	2a01      	cmp	r2, #1
   18cfe:	f174 0300 	sbcs.w	r3, r4, #0
   18d02:	bfbc      	itt	lt
   18d04:	2201      	movlt	r2, #1
   18d06:	2400      	movlt	r4, #0
   18d08:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   18d0c:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   18d10:	4628      	mov	r0, r5
   18d12:	f004 fbd8 	bl	1d4c6 <z_abort_timeout>
	timer->period = period;
   18d16:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   18d1a:	2300      	movs	r3, #0
   18d1c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18d1e:	464a      	mov	r2, r9
   18d20:	4643      	mov	r3, r8
   18d22:	4628      	mov	r0, r5
   18d24:	4903      	ldr	r1, [pc, #12]	; (18d34 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   18d26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   18d2a:	f7ff be69 	b.w	18a00 <z_add_timeout>
}
   18d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d32:	bf00      	nop
   18d34:	00018bf5 	.word	0x00018bf5

00018d38 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   18d38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18d3c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   18d3e:	4b29      	ldr	r3, [pc, #164]	; (18de4 <z_impl_k_poll+0xac>)
   18d40:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   18d42:	2301      	movs	r3, #1
   18d44:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   18d48:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   18d4c:	ea52 0305 	orrs.w	r3, r2, r5
{
   18d50:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   18d52:	bf0c      	ite	eq
   18d54:	2301      	moveq	r3, #1
   18d56:	2300      	movne	r3, #0
   18d58:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   18d5c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   18d5e:	f004 fc54 	bl	1d60a <register_events>
   18d62:	4681      	mov	r9, r0
	__asm__ volatile(
   18d64:	f04f 0320 	mov.w	r3, #32
   18d68:	f3ef 8a11 	mrs	sl, BASEPRI
   18d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   18d70:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   18d74:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   18d78:	b964      	cbnz	r4, 18d94 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   18d7a:	4601      	mov	r1, r0
   18d7c:	4652      	mov	r2, sl
   18d7e:	4640      	mov	r0, r8
   18d80:	f004 fd14 	bl	1d7ac <clear_event_registrations>
	__asm__ volatile(
   18d84:	f38a 8811 	msr	BASEPRI, sl
   18d88:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   18d8c:	4620      	mov	r0, r4
   18d8e:	b002      	add	sp, #8
   18d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   18d94:	2300      	movs	r3, #0
   18d96:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18d9a:	ea56 0305 	orrs.w	r3, r6, r5
   18d9e:	d106      	bne.n	18dae <z_impl_k_poll+0x76>
   18da0:	f38a 8811 	msr	BASEPRI, sl
   18da4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   18da8:	f06f 040a 	mvn.w	r4, #10
   18dac:	e7ee      	b.n	18d8c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   18dae:	e9cd 6500 	strd	r6, r5, [sp]
   18db2:	4a0d      	ldr	r2, [pc, #52]	; (18de8 <z_impl_k_poll+0xb0>)
   18db4:	480d      	ldr	r0, [pc, #52]	; (18dec <z_impl_k_poll+0xb4>)
   18db6:	4651      	mov	r1, sl
   18db8:	f7ff fbb0 	bl	1851c <z_pend_curr>
   18dbc:	4604      	mov	r4, r0
	__asm__ volatile(
   18dbe:	f04f 0320 	mov.w	r3, #32
   18dc2:	f3ef 8511 	mrs	r5, BASEPRI
   18dc6:	f383 8812 	msr	BASEPRI_MAX, r3
   18dca:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   18dce:	462a      	mov	r2, r5
   18dd0:	4649      	mov	r1, r9
   18dd2:	4640      	mov	r0, r8
   18dd4:	f004 fcea 	bl	1d7ac <clear_event_registrations>
	__asm__ volatile(
   18dd8:	f385 8811 	msr	BASEPRI, r5
   18ddc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   18de0:	e7d4      	b.n	18d8c <z_impl_k_poll+0x54>
   18de2:	bf00      	nop
   18de4:	200026a4 	.word	0x200026a4
   18de8:	200007ec 	.word	0x200007ec
   18dec:	20002b59 	.word	0x20002b59

00018df0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   18df0:	b538      	push	{r3, r4, r5, lr}
   18df2:	4603      	mov	r3, r0
	__asm__ volatile(
   18df4:	f04f 0220 	mov.w	r2, #32
   18df8:	f3ef 8511 	mrs	r5, BASEPRI
   18dfc:	f382 8812 	msr	BASEPRI_MAX, r2
   18e00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   18e04:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   18e06:	2101      	movs	r1, #1
   18e08:	6081      	str	r1, [r0, #8]
	return list->head == list;
   18e0a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   18e0c:	4283      	cmp	r3, r0
   18e0e:	d106      	bne.n	18e1e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18e10:	f385 8811 	msr	BASEPRI, r5
   18e14:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   18e18:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   18e1a:	4620      	mov	r0, r4
   18e1c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   18e1e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18e22:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18e24:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18e26:	2300      	movs	r3, #0
	node->prev = NULL;
   18e28:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18e2c:	f004 fc64 	bl	1d6f8 <signal_poll_event>
	z_reschedule(&lock, key);
   18e30:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18e32:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18e34:	4801      	ldr	r0, [pc, #4]	; (18e3c <z_impl_k_poll_signal_raise+0x4c>)
   18e36:	f7ff fbd5 	bl	185e4 <z_reschedule>
	return rc;
   18e3a:	e7ee      	b.n	18e1a <z_impl_k_poll_signal_raise+0x2a>
   18e3c:	20002b59 	.word	0x20002b59

00018e40 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   18e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18e42:	4606      	mov	r6, r0
   18e44:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   18e46:	f004 f844 	bl	1ced2 <k_is_in_isr>
   18e4a:	b978      	cbnz	r0, 18e6c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   18e4c:	4b0b      	ldr	r3, [pc, #44]	; (18e7c <z_thread_aligned_alloc+0x3c>)
   18e4e:	689b      	ldr	r3, [r3, #8]
   18e50:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   18e52:	b17c      	cbz	r4, 18e74 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   18e54:	1d2a      	adds	r2, r5, #4
   18e56:	d209      	bcs.n	18e6c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   18e58:	2000      	movs	r0, #0
   18e5a:	2100      	movs	r1, #0
   18e5c:	e9cd 0100 	strd	r0, r1, [sp]
   18e60:	f046 0104 	orr.w	r1, r6, #4
   18e64:	4620      	mov	r0, r4
   18e66:	f003 ff95 	bl	1cd94 <k_heap_aligned_alloc>
	if (mem == NULL) {
   18e6a:	b908      	cbnz	r0, 18e70 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   18e6c:	2400      	movs	r4, #0
	}

	return ret;
   18e6e:	e001      	b.n	18e74 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   18e70:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   18e72:	1d04      	adds	r4, r0, #4
}
   18e74:	4620      	mov	r0, r4
   18e76:	b002      	add	sp, #8
   18e78:	bd70      	pop	{r4, r5, r6, pc}
   18e7a:	bf00      	nop
   18e7c:	200026a4 	.word	0x200026a4

00018e80 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   18e80:	4801      	ldr	r0, [pc, #4]	; (18e88 <boot_banner+0x8>)
   18e82:	f000 b866 	b.w	18f52 <printk>
   18e86:	bf00      	nop
   18e88:	0001fc18 	.word	0x0001fc18

00018e8c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18e8c:	4770      	bx	lr

00018e8e <gpio_pin_configure_dt>:
{
   18e8e:	b470      	push	{r4, r5, r6}
   18e90:	4603      	mov	r3, r0
   18e92:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   18e94:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   18e96:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   18e98:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   18e9a:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
   18e9c:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   18e9e:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   18ea0:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18ea2:	2401      	movs	r4, #1
   18ea4:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   18ea6:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18eaa:	bf14      	ite	ne
   18eac:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18eae:	43a3      	biceq	r3, r4
   18eb0:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   18eb2:	6833      	ldr	r3, [r6, #0]
}
   18eb4:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   18eb6:	4718      	bx	r3

00018eb8 <write_stat>:
{
   18eb8:	b538      	push	{r3, r4, r5, lr}
   18eba:	460c      	mov	r4, r1
   18ebc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   18ec0:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > 1) {
   18ec2:	461c      	mov	r4, r3
   18ec4:	18c3      	adds	r3, r0, r3
   18ec6:	2b01      	cmp	r3, #1
{
   18ec8:	4611      	mov	r1, r2
	if (offset + len > 1) {
   18eca:	dc05      	bgt.n	18ed8 <write_stat+0x20>
	memcpy(value + offset, buf, len);
   18ecc:	4622      	mov	r2, r4
   18ece:	4428      	add	r0, r5
   18ed0:	f000 fe90 	bl	19bf4 <memcpy>
}
   18ed4:	4620      	mov	r0, r4
   18ed6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18ed8:	f06f 0406 	mvn.w	r4, #6
   18edc:	e7fa      	b.n	18ed4 <write_stat+0x1c>

00018ede <write_3D>:
{
   18ede:	b538      	push	{r3, r4, r5, lr}
   18ee0:	460c      	mov	r4, r1
   18ee2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   18ee6:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(data_to_send)) {
   18ee8:	461c      	mov	r4, r3
   18eea:	18c3      	adds	r3, r0, r3
   18eec:	2b0c      	cmp	r3, #12
{
   18eee:	4611      	mov	r1, r2
	if (offset + len > sizeof(data_to_send)) {
   18ef0:	dc05      	bgt.n	18efe <write_3D+0x20>
	memcpy(value + offset, buf, len);
   18ef2:	4622      	mov	r2, r4
   18ef4:	4428      	add	r0, r5
   18ef6:	f000 fe7d 	bl	19bf4 <memcpy>
}
   18efa:	4620      	mov	r0, r4
   18efc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18efe:	f06f 0406 	mvn.w	r4, #6
   18f02:	e7fa      	b.n	18efa <write_3D+0x1c>

00018f04 <bt_gatt_notify>:
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
   18f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f06:	b087      	sub	sp, #28
   18f08:	4604      	mov	r4, r0
   18f0a:	460f      	mov	r7, r1
   18f0c:	4616      	mov	r6, r2
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   18f0e:	2100      	movs	r1, #0
   18f10:	2218      	movs	r2, #24
   18f12:	4668      	mov	r0, sp
{
   18f14:	461d      	mov	r5, r3
	memset(&params, 0, sizeof(params));
   18f16:	f000 fe78 	bl	19c0a <memset>
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   18f1a:	4669      	mov	r1, sp
   18f1c:	4620      	mov	r0, r4
	params.data = data;
   18f1e:	e9cd 7601 	strd	r7, r6, [sp, #4]
	params.len = len;
   18f22:	f8ad 500c 	strh.w	r5, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   18f26:	f7ee fd09 	bl	793c <bt_gatt_notify_cb>
}
   18f2a:	b007      	add	sp, #28
   18f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018f2e <floats2Bytes>:
void floats2Bytes(float* val,uint8_t* bytes_array){
   18f2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18f30:	4603      	mov	r3, r0
   18f32:	4608      	mov	r0, r1
  u.float_variables[0] = val[0];
   18f34:	681a      	ldr	r2, [r3, #0]
   18f36:	9201      	str	r2, [sp, #4]
  u.float_variables[1] = val[1];
   18f38:	685a      	ldr	r2, [r3, #4]
   18f3a:	9202      	str	r2, [sp, #8]
  u.float_variables[2] = val[2];
   18f3c:	689b      	ldr	r3, [r3, #8]
   18f3e:	9303      	str	r3, [sp, #12]
  memcpy(bytes_array, u.temp_array, 12);
   18f40:	220c      	movs	r2, #12
   18f42:	a901      	add	r1, sp, #4
   18f44:	f000 fe56 	bl	19bf4 <memcpy>
}
   18f48:	b005      	add	sp, #20
   18f4a:	f85d fb04 	ldr.w	pc, [sp], #4

00018f4e <arch_printk_char_out>:
}
   18f4e:	2000      	movs	r0, #0
   18f50:	4770      	bx	lr

00018f52 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   18f52:	b40f      	push	{r0, r1, r2, r3}
   18f54:	b507      	push	{r0, r1, r2, lr}
   18f56:	a904      	add	r1, sp, #16
   18f58:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   18f5c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   18f5e:	f7e9 fb47 	bl	25f0 <vprintk>

	va_end(ap);
}
   18f62:	b003      	add	sp, #12
   18f64:	f85d eb04 	ldr.w	lr, [sp], #4
   18f68:	b004      	add	sp, #16
   18f6a:	4770      	bx	lr

00018f6c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18f6c:	4604      	mov	r4, r0
   18f6e:	b508      	push	{r3, lr}
   18f70:	4608      	mov	r0, r1
   18f72:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   18f74:	461a      	mov	r2, r3
   18f76:	47a0      	blx	r4
	return z_impl_z_current_get();
   18f78:	f7ff fc6a 	bl	18850 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   18f7c:	f7ea ff54 	bl	3e28 <z_impl_k_thread_abort>

00018f80 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   18f80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   18f84:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   18f86:	0840      	lsrs	r0, r0, #1
   18f88:	4770      	bx	lr

00018f8a <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   18f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f8c:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   18f8e:	f7ff fff7 	bl	18f80 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   18f92:	fab0 f080 	clz	r0, r0
   18f96:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   18f9a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   18f9e:	00ca      	lsls	r2, r1, #3
   18fa0:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   18fa4:	1d17      	adds	r7, r2, #4
{
   18fa6:	460c      	mov	r4, r1
   18fa8:	3206      	adds	r2, #6
   18faa:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   18fac:	b956      	cbnz	r6, 18fc4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   18fae:	2101      	movs	r1, #1
   18fb0:	fa01 f000 	lsl.w	r0, r1, r0
   18fb4:	68d9      	ldr	r1, [r3, #12]
   18fb6:	4301      	orrs	r1, r0
   18fb8:	60d9      	str	r1, [r3, #12]
		b->next = c;
   18fba:	f8cc 4010 	str.w	r4, [ip, #16]
   18fbe:	53dd      	strh	r5, [r3, r7]
   18fc0:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   18fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   18fc4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   18fc6:	3104      	adds	r1, #4
   18fc8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   18fca:	53d8      	strh	r0, [r3, r7]
   18fcc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   18fd0:	529e      	strh	r6, [r3, r2]
   18fd2:	80c5      	strh	r5, [r0, #6]
   18fd4:	525d      	strh	r5, [r3, r1]
   18fd6:	e7f4      	b.n	18fc2 <free_list_add+0x38>

00018fd8 <free_list_remove_bidx>:
{
   18fd8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   18fda:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   18fde:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   18fe0:	4299      	cmp	r1, r3
   18fe2:	f102 0104 	add.w	r1, r2, #4
   18fe6:	d10a      	bne.n	18ffe <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   18fe8:	2301      	movs	r3, #1
   18fea:	fa03 f202 	lsl.w	r2, r3, r2
   18fee:	68c3      	ldr	r3, [r0, #12]
   18ff0:	ea23 0302 	bic.w	r3, r3, r2
   18ff4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   18ff6:	2300      	movs	r3, #0
   18ff8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   18ffc:	bd10      	pop	{r4, pc}
   18ffe:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   19000:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   19004:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   19008:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1900c:	80cb      	strh	r3, [r1, #6]
   1900e:	8082      	strh	r2, [r0, #4]
}
   19010:	e7f4      	b.n	18ffc <free_list_remove_bidx+0x24>

00019012 <free_list_remove>:
{
   19012:	b508      	push	{r3, lr}
   19014:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   19016:	f7ff ffb3 	bl	18f80 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1901a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1901e:	f1c2 021f 	rsb	r2, r2, #31
   19022:	4618      	mov	r0, r3
}
   19024:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   19028:	f7ff bfd6 	b.w	18fd8 <free_list_remove_bidx>

0001902c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19030:	fab1 f581 	clz	r5, r1
   19034:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   19038:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   1903c:	4603      	mov	r3, r0
	if (b->next) {
   1903e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   19042:	460e      	mov	r6, r1
	if (b->next) {
   19044:	b1c2      	cbz	r2, 19078 <alloc_chunk+0x4c>
   19046:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   19048:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1904c:	4618      	mov	r0, r3
   1904e:	4621      	mov	r1, r4
   19050:	f7ff ff96 	bl	18f80 <chunk_size>
   19054:	42b0      	cmp	r0, r6
   19056:	d306      	bcc.n	19066 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   19058:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1905a:	4618      	mov	r0, r3
   1905c:	f7ff ffbc 	bl	18fd8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   19060:	4620      	mov	r0, r4
   19062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   19066:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1906a:	3f01      	subs	r7, #1
   1906c:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   1906e:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   19072:	d001      	beq.n	19078 <alloc_chunk+0x4c>
   19074:	4282      	cmp	r2, r0
   19076:	d1e7      	bne.n	19048 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   19078:	f1c5 0220 	rsb	r2, r5, #32
   1907c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19080:	4094      	lsls	r4, r2
   19082:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   19084:	4014      	ands	r4, r2
   19086:	d0eb      	beq.n	19060 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   19088:	fa94 f2a4 	rbit	r2, r4
   1908c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19090:	1d11      	adds	r1, r2, #4
   19092:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   19096:	4621      	mov	r1, r4
   19098:	e7df      	b.n	1905a <alloc_chunk+0x2e>

0001909a <merge_chunks>:
{
   1909a:	b538      	push	{r3, r4, r5, lr}
   1909c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1909e:	f7ff ff6f 	bl	18f80 <chunk_size>
{
   190a2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   190a4:	4604      	mov	r4, r0
   190a6:	4611      	mov	r1, r2
   190a8:	4618      	mov	r0, r3
   190aa:	f7ff ff69 	bl	18f80 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   190ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   190b2:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   190b4:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   190b6:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   190b8:	4618      	mov	r0, r3
   190ba:	f7ff ff61 	bl	18f80 <chunk_size>
	void *cmem = &buf[c];
   190be:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   190c0:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   190c4:	bd38      	pop	{r3, r4, r5, pc}

000190c6 <split_chunks>:
{
   190c6:	b538      	push	{r3, r4, r5, lr}
   190c8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   190ca:	f7ff ff59 	bl	18f80 <chunk_size>
{
   190ce:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   190d0:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   190d2:	1a51      	subs	r1, r2, r1
   190d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   190d8:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   190da:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   190dc:	8060      	strh	r0, [r4, #2]
   190de:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   190e2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   190e4:	8044      	strh	r4, [r0, #2]
   190e6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   190ea:	4618      	mov	r0, r3
   190ec:	4611      	mov	r1, r2
   190ee:	f7ff ff47 	bl	18f80 <chunk_size>
	void *cmem = &buf[c];
   190f2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   190f4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   190f8:	bd38      	pop	{r3, r4, r5, pc}

000190fa <free_chunk>:
{
   190fa:	b538      	push	{r3, r4, r5, lr}
   190fc:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   190fe:	f7ff ff3f 	bl	18f80 <chunk_size>
   19102:	460c      	mov	r4, r1
   19104:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   19106:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1910a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1910c:	07da      	lsls	r2, r3, #31
   1910e:	d40a      	bmi.n	19126 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   19110:	4628      	mov	r0, r5
   19112:	f7ff ff7e 	bl	19012 <free_list_remove>
	return c + chunk_size(h, c);
   19116:	4621      	mov	r1, r4
   19118:	4628      	mov	r0, r5
   1911a:	f7ff ff31 	bl	18f80 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1911e:	1822      	adds	r2, r4, r0
   19120:	4628      	mov	r0, r5
   19122:	f7ff ffba 	bl	1909a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   19126:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1912a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1912c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19130:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   19132:	07db      	lsls	r3, r3, #31
   19134:	d40c      	bmi.n	19150 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   19136:	4628      	mov	r0, r5
   19138:	f7ff ff6b 	bl	19012 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1913c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   19140:	4622      	mov	r2, r4
   19142:	1a61      	subs	r1, r4, r1
   19144:	4628      	mov	r0, r5
   19146:	f7ff ffa8 	bl	1909a <merge_chunks>
   1914a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1914e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   19150:	4621      	mov	r1, r4
   19152:	4628      	mov	r0, r5
}
   19154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   19158:	f7ff bf17 	b.w	18f8a <free_list_add>

0001915c <sys_heap_free>:
	if (mem == NULL) {
   1915c:	b161      	cbz	r1, 19178 <sys_heap_free+0x1c>
   1915e:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19160:	3904      	subs	r1, #4
   19162:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   19164:	f021 0307 	bic.w	r3, r1, #7
   19168:	4403      	add	r3, r0
	free_chunk(h, c);
   1916a:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1916c:	885a      	ldrh	r2, [r3, #2]
   1916e:	f022 0201 	bic.w	r2, r2, #1
   19172:	805a      	strh	r2, [r3, #2]
   19174:	f7ff bfc1 	b.w	190fa <free_chunk>
}
   19178:	4770      	bx	lr

0001917a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1917a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1917c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1917e:	b909      	cbnz	r1, 19184 <sys_heap_alloc+0xa>
		return NULL;
   19180:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   19182:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   19184:	68ab      	ldr	r3, [r5, #8]
   19186:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1918a:	d9f9      	bls.n	19180 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1918c:	310b      	adds	r1, #11
   1918e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19190:	4621      	mov	r1, r4
   19192:	4628      	mov	r0, r5
   19194:	f7ff ff4a 	bl	1902c <alloc_chunk>
	if (c == 0U) {
   19198:	4606      	mov	r6, r0
   1919a:	2800      	cmp	r0, #0
   1919c:	d0f0      	beq.n	19180 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1919e:	4601      	mov	r1, r0
   191a0:	4628      	mov	r0, r5
   191a2:	f7ff feed 	bl	18f80 <chunk_size>
   191a6:	42a0      	cmp	r0, r4
   191a8:	d907      	bls.n	191ba <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   191aa:	1932      	adds	r2, r6, r4
   191ac:	4628      	mov	r0, r5
   191ae:	f7ff ff8a 	bl	190c6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   191b2:	4611      	mov	r1, r2
   191b4:	4628      	mov	r0, r5
   191b6:	f7ff fee8 	bl	18f8a <free_list_add>
	void *cmem = &buf[c];
   191ba:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   191be:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   191c0:	8853      	ldrh	r3, [r2, #2]
   191c2:	f043 0301 	orr.w	r3, r3, #1
   191c6:	8053      	strh	r3, [r2, #2]
   191c8:	3004      	adds	r0, #4
	return mem;
   191ca:	e7da      	b.n	19182 <sys_heap_alloc+0x8>

000191cc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   191cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   191d0:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   191d4:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   191d8:	6806      	ldr	r6, [r0, #0]
{
   191da:	460f      	mov	r7, r1
   191dc:	4614      	mov	r4, r2
	if (align != rew) {
   191de:	d00c      	beq.n	191fa <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   191e0:	424b      	negs	r3, r1
   191e2:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   191e4:	2b04      	cmp	r3, #4
   191e6:	461a      	mov	r2, r3
   191e8:	464f      	mov	r7, r9
   191ea:	bf28      	it	cs
   191ec:	2204      	movcs	r2, #4
	rew = align & -align;
   191ee:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   191f0:	b964      	cbnz	r4, 1920c <sys_heap_aligned_alloc+0x40>
		return NULL;
   191f2:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   191f4:	4628      	mov	r0, r5
   191f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   191fa:	2904      	cmp	r1, #4
   191fc:	d804      	bhi.n	19208 <sys_heap_aligned_alloc+0x3c>
}
   191fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   19202:	4611      	mov	r1, r2
   19204:	f7ff bfb9 	b.w	1917a <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   19208:	2204      	movs	r2, #4
   1920a:	e7f1      	b.n	191f0 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1920c:	68b3      	ldr	r3, [r6, #8]
   1920e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   19212:	d9ee      	bls.n	191f2 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19214:	f104 010b 	add.w	r1, r4, #11
   19218:	4439      	add	r1, r7
   1921a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1921c:	08c9      	lsrs	r1, r1, #3
   1921e:	4630      	mov	r0, r6
   19220:	f7ff ff04 	bl	1902c <alloc_chunk>
	if (c0 == 0) {
   19224:	4680      	mov	r8, r0
   19226:	2800      	cmp	r0, #0
   19228:	d0e3      	beq.n	191f2 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1922a:	f109 0504 	add.w	r5, r9, #4
   1922e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   19232:	1e7b      	subs	r3, r7, #1
   19234:	4435      	add	r5, r6
   19236:	441d      	add	r5, r3
   19238:	fbb5 f5f7 	udiv	r5, r5, r7
   1923c:	437d      	muls	r5, r7
   1923e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19242:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19244:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   19246:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19248:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1924a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1924e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   19250:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   19254:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   19258:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1925c:	d208      	bcs.n	19270 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1925e:	4601      	mov	r1, r0
   19260:	463a      	mov	r2, r7
   19262:	4630      	mov	r0, r6
   19264:	f7ff ff2f 	bl	190c6 <split_chunks>
		free_list_add(h, c0);
   19268:	4641      	mov	r1, r8
   1926a:	4630      	mov	r0, r6
   1926c:	f7ff fe8d 	bl	18f8a <free_list_add>
	return c + chunk_size(h, c);
   19270:	4639      	mov	r1, r7
   19272:	4630      	mov	r0, r6
   19274:	f7ff fe84 	bl	18f80 <chunk_size>
   19278:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1927a:	4284      	cmp	r4, r0
   1927c:	d207      	bcs.n	1928e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1927e:	4630      	mov	r0, r6
   19280:	4622      	mov	r2, r4
   19282:	f7ff ff20 	bl	190c6 <split_chunks>
		free_list_add(h, c_end);
   19286:	4621      	mov	r1, r4
   19288:	4630      	mov	r0, r6
   1928a:	f7ff fe7e 	bl	18f8a <free_list_add>
	void *cmem = &buf[c];
   1928e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19292:	8873      	ldrh	r3, [r6, #2]
   19294:	f043 0301 	orr.w	r3, r3, #1
   19298:	8073      	strh	r3, [r6, #2]
   1929a:	e7ab      	b.n	191f4 <sys_heap_aligned_alloc+0x28>

0001929c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1929c:	3a04      	subs	r2, #4
{
   1929e:	b4f0      	push	{r4, r5, r6, r7}
   192a0:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   192a2:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   192a4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   192a6:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   192aa:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   192ae:	1a0e      	subs	r6, r1, r0
   192b0:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   192b2:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   192b4:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   192b8:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   192ba:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   192be:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   192c0:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   192c2:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   192c4:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   192c8:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   192ca:	f1c2 0220 	rsb	r2, r2, #32
   192ce:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   192d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   192d4:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   192d8:	4294      	cmp	r4, r2
   192da:	d1fb      	bne.n	192d4 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   192dc:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   192de:	f042 0201 	orr.w	r2, r2, #1
   192e2:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   192e4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   192e8:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   192ea:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   192ec:	8007      	strh	r7, [r0, #0]
   192ee:	8065      	strh	r5, [r4, #2]
   192f0:	1984      	adds	r4, r0, r6
   192f2:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   192f6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   192fa:	8067      	strh	r7, [r4, #2]
   192fc:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   192fe:	885a      	ldrh	r2, [r3, #2]
   19300:	f042 0201 	orr.w	r2, r2, #1
   19304:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   19306:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   19308:	f7ff be3f 	b.w	18f8a <free_list_add>

0001930c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1930c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1930e:	f013 0307 	ands.w	r3, r3, #7
   19312:	d105      	bne.n	19320 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19314:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19316:	2b00      	cmp	r3, #0
   19318:	bf0c      	ite	eq
   1931a:	2000      	moveq	r0, #0
   1931c:	2003      	movne	r0, #3
   1931e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19320:	2b02      	cmp	r3, #2
   19322:	d105      	bne.n	19330 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19324:	8b40      	ldrh	r0, [r0, #26]
   19326:	fab0 f080 	clz	r0, r0
   1932a:	0940      	lsrs	r0, r0, #5
   1932c:	0080      	lsls	r0, r0, #2
   1932e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19330:	2b01      	cmp	r3, #1
   19332:	d105      	bne.n	19340 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19334:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19336:	2b00      	cmp	r3, #0
   19338:	bf0c      	ite	eq
   1933a:	2000      	moveq	r0, #0
   1933c:	2005      	movne	r0, #5
   1933e:	4770      	bx	lr
	int evt = EVT_NOP;
   19340:	2000      	movs	r0, #0
}
   19342:	4770      	bx	lr

00019344 <validate_args>:
{
   19344:	b510      	push	{r4, lr}
   19346:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19348:	b100      	cbz	r0, 1934c <validate_args+0x8>
   1934a:	b911      	cbnz	r1, 19352 <validate_args+0xe>
		return -EINVAL;
   1934c:	f06f 0015 	mvn.w	r0, #21
}
   19350:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   19352:	1d08      	adds	r0, r1, #4
   19354:	f000 f8ba 	bl	194cc <sys_notify_validate>
	if ((rv == 0)
   19358:	2800      	cmp	r0, #0
   1935a:	d1f9      	bne.n	19350 <validate_args+0xc>
	    && ((cli->notify.flags
   1935c:	68a3      	ldr	r3, [r4, #8]
   1935e:	2b03      	cmp	r3, #3
   19360:	d9f6      	bls.n	19350 <validate_args+0xc>
   19362:	e7f3      	b.n	1934c <validate_args+0x8>

00019364 <notify_one>:
{
   19364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19368:	460d      	mov	r5, r1
   1936a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1936c:	4619      	mov	r1, r3
   1936e:	1d28      	adds	r0, r5, #4
{
   19370:	4690      	mov	r8, r2
   19372:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19374:	f000 f8be 	bl	194f4 <sys_notify_finalize>
	if (cb) {
   19378:	4604      	mov	r4, r0
   1937a:	b138      	cbz	r0, 1938c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1937c:	4633      	mov	r3, r6
   1937e:	4642      	mov	r2, r8
   19380:	4629      	mov	r1, r5
   19382:	4638      	mov	r0, r7
   19384:	46a4      	mov	ip, r4
}
   19386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1938a:	4760      	bx	ip
}
   1938c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019390 <transition_complete>:
{
   19390:	b410      	push	{r4}
	__asm__ volatile(
   19392:	f04f 0420 	mov.w	r4, #32
   19396:	f3ef 8211 	mrs	r2, BASEPRI
   1939a:	f384 8812 	msr	BASEPRI_MAX, r4
   1939e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   193a2:	6141      	str	r1, [r0, #20]
}
   193a4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   193a6:	2101      	movs	r1, #1
   193a8:	f7e9 b930 	b.w	260c <process_event>

000193ac <onoff_manager_init>:
{
   193ac:	b538      	push	{r3, r4, r5, lr}
   193ae:	460c      	mov	r4, r1
	if ((mgr == NULL)
   193b0:	4605      	mov	r5, r0
   193b2:	b158      	cbz	r0, 193cc <onoff_manager_init+0x20>
	    || (transitions == NULL)
   193b4:	b151      	cbz	r1, 193cc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   193b6:	680b      	ldr	r3, [r1, #0]
   193b8:	b143      	cbz	r3, 193cc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   193ba:	684b      	ldr	r3, [r1, #4]
   193bc:	b133      	cbz	r3, 193cc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   193be:	221c      	movs	r2, #28
   193c0:	2100      	movs	r1, #0
   193c2:	f000 fc22 	bl	19c0a <memset>
   193c6:	612c      	str	r4, [r5, #16]
	return 0;
   193c8:	2000      	movs	r0, #0
}
   193ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   193cc:	f06f 0015 	mvn.w	r0, #21
   193d0:	e7fb      	b.n	193ca <onoff_manager_init+0x1e>

000193d2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   193d2:	b570      	push	{r4, r5, r6, lr}
   193d4:	4605      	mov	r5, r0
   193d6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   193d8:	f7ff ffb4 	bl	19344 <validate_args>

	if (rv < 0) {
   193dc:	1e04      	subs	r4, r0, #0
   193de:	db15      	blt.n	1940c <onoff_request+0x3a>
   193e0:	f04f 0320 	mov.w	r3, #32
   193e4:	f3ef 8211 	mrs	r2, BASEPRI
   193e8:	f383 8812 	msr	BASEPRI_MAX, r3
   193ec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   193f0:	8b6b      	ldrh	r3, [r5, #26]
   193f2:	8b2c      	ldrh	r4, [r5, #24]
   193f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   193f8:	428b      	cmp	r3, r1
   193fa:	f004 0407 	and.w	r4, r4, #7
   193fe:	d107      	bne.n	19410 <onoff_request+0x3e>
	__asm__ volatile(
   19400:	f382 8811 	msr	BASEPRI, r2
   19404:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   19408:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1940c:	4620      	mov	r0, r4
   1940e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   19410:	2c02      	cmp	r4, #2
   19412:	d10c      	bne.n	1942e <onoff_request+0x5c>
		mgr->refs += 1U;
   19414:	3301      	adds	r3, #1
   19416:	836b      	strh	r3, [r5, #26]
   19418:	f382 8811 	msr	BASEPRI, r2
   1941c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   19420:	2300      	movs	r3, #0
   19422:	4622      	mov	r2, r4
   19424:	4631      	mov	r1, r6
   19426:	4628      	mov	r0, r5
   19428:	f7ff ff9c 	bl	19364 <notify_one>
   1942c:	e7ee      	b.n	1940c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1942e:	2c06      	cmp	r4, #6
   19430:	d814      	bhi.n	1945c <onoff_request+0x8a>
   19432:	e8df f004 	tbb	[pc, r4]
   19436:	1304      	.short	0x1304
   19438:	1a041313 	.word	0x1a041313
   1943c:	04          	.byte	0x04
   1943d:	00          	.byte	0x00
	parent->next = child;
   1943e:	2300      	movs	r3, #0
   19440:	6033      	str	r3, [r6, #0]
	return list->tail;
   19442:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   19444:	b93b      	cbnz	r3, 19456 <onoff_request+0x84>
	list->head = node;
   19446:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1944a:	b9ac      	cbnz	r4, 19478 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1944c:	2102      	movs	r1, #2
   1944e:	4628      	mov	r0, r5
   19450:	f7e9 f8dc 	bl	260c <process_event>
   19454:	e7da      	b.n	1940c <onoff_request+0x3a>
	parent->next = child;
   19456:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19458:	606e      	str	r6, [r5, #4]
}
   1945a:	e7f6      	b.n	1944a <onoff_request+0x78>
   1945c:	f382 8811 	msr	BASEPRI, r2
   19460:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   19464:	f06f 0404 	mvn.w	r4, #4
   19468:	e7d0      	b.n	1940c <onoff_request+0x3a>
   1946a:	f382 8811 	msr	BASEPRI, r2
   1946e:	f3bf 8f6f 	isb	sy
   19472:	f06f 0485 	mvn.w	r4, #133	; 0x85
   19476:	e7c9      	b.n	1940c <onoff_request+0x3a>
   19478:	f382 8811 	msr	BASEPRI, r2
   1947c:	f3bf 8f6f 	isb	sy
		if (notify) {
   19480:	e7c4      	b.n	1940c <onoff_request+0x3a>

00019482 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   19482:	b510      	push	{r4, lr}
	__asm__ volatile(
   19484:	f04f 0320 	mov.w	r3, #32
   19488:	f3ef 8211 	mrs	r2, BASEPRI
   1948c:	f383 8812 	msr	BASEPRI_MAX, r3
   19490:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19494:	8b04      	ldrh	r4, [r0, #24]
   19496:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1949a:	2c02      	cmp	r4, #2
   1949c:	d00a      	beq.n	194b4 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1949e:	2c01      	cmp	r4, #1
   194a0:	bf0c      	ite	eq
   194a2:	f06f 0004 	mvneq.w	r0, #4
   194a6:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   194aa:	f382 8811 	msr	BASEPRI, r2
   194ae:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   194b2:	e008      	b.n	194c6 <onoff_release+0x44>
	mgr->refs -= 1U;
   194b4:	8b43      	ldrh	r3, [r0, #26]
   194b6:	3b01      	subs	r3, #1
   194b8:	b29b      	uxth	r3, r3
   194ba:	8343      	strh	r3, [r0, #26]
	if (stop) {
   194bc:	b923      	cbnz	r3, 194c8 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   194be:	4621      	mov	r1, r4
   194c0:	f7e9 f8a4 	bl	260c <process_event>
	int rv = state;
   194c4:	4620      	mov	r0, r4
}
   194c6:	bd10      	pop	{r4, pc}
	int rv = state;
   194c8:	4620      	mov	r0, r4
   194ca:	e7ee      	b.n	194aa <onoff_release+0x28>

000194cc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   194cc:	4603      	mov	r3, r0
   194ce:	b140      	cbz	r0, 194e2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   194d0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   194d2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   194d6:	2a02      	cmp	r2, #2
   194d8:	d006      	beq.n	194e8 <sys_notify_validate+0x1c>
   194da:	2a03      	cmp	r2, #3
   194dc:	d004      	beq.n	194e8 <sys_notify_validate+0x1c>
   194de:	2a01      	cmp	r2, #1
   194e0:	d005      	beq.n	194ee <sys_notify_validate+0x22>
   194e2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   194e6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   194e8:	681a      	ldr	r2, [r3, #0]
   194ea:	2a00      	cmp	r2, #0
   194ec:	d0f9      	beq.n	194e2 <sys_notify_validate+0x16>
		notify->result = 0;
   194ee:	2000      	movs	r0, #0
   194f0:	6098      	str	r0, [r3, #8]
   194f2:	4770      	bx	lr

000194f4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   194f4:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   194f6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   194f8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   194fa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   194fe:	2a02      	cmp	r2, #2
{
   19500:	4603      	mov	r3, r0
	switch (method) {
   19502:	f04f 0400 	mov.w	r4, #0
   19506:	d007      	beq.n	19518 <sys_notify_finalize+0x24>
   19508:	2a03      	cmp	r2, #3
   1950a:	d002      	beq.n	19512 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1950c:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1950e:	2000      	movs	r0, #0
   19510:	e001      	b.n	19516 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   19512:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19514:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19516:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   19518:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1951a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1951c:	2800      	cmp	r0, #0
   1951e:	d0f6      	beq.n	1950e <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   19520:	f7ff fc66 	bl	18df0 <z_impl_k_poll_signal_raise>
   19524:	e7f3      	b.n	1950e <sys_notify_finalize+0x1a>

00019526 <_ldiv5>:
	uint32_t v_lo = *v;
   19526:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1952a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1952c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   19530:	fba2 2403 	umull	r2, r4, r2, r3
   19534:	18d5      	adds	r5, r2, r3
   19536:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1953a:	fba1 1303 	umull	r1, r3, r1, r3
   1953e:	1852      	adds	r2, r2, r1
   19540:	eb44 0403 	adc.w	r4, r4, r3
   19544:	1952      	adds	r2, r2, r5
   19546:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1954a:	1889      	adds	r1, r1, r2
   1954c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   19550:	e9c0 1300 	strd	r1, r3, [r0]
}
   19554:	bd30      	pop	{r4, r5, pc}

00019556 <_get_digit>:
{
   19556:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   19558:	680a      	ldr	r2, [r1, #0]
   1955a:	2a00      	cmp	r2, #0
{
   1955c:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1955e:	dd0f      	ble.n	19580 <_get_digit+0x2a>
		--*digit_count;
   19560:	3a01      	subs	r2, #1
   19562:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   19564:	681a      	ldr	r2, [r3, #0]
   19566:	6844      	ldr	r4, [r0, #4]
   19568:	200a      	movs	r0, #10
   1956a:	fba2 1200 	umull	r1, r2, r2, r0
   1956e:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   19572:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   19574:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   19578:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1957c:	3030      	adds	r0, #48	; 0x30
}
   1957e:	bd10      	pop	{r4, pc}
		rval = '0';
   19580:	2030      	movs	r0, #48	; 0x30
   19582:	e7fc      	b.n	1957e <_get_digit+0x28>

00019584 <encode_uint>:
{
   19584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19588:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   1958a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1958c:	2b6f      	cmp	r3, #111	; 0x6f
{
   1958e:	4680      	mov	r8, r0
   19590:	460f      	mov	r7, r1
   19592:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19594:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19598:	d029      	beq.n	195ee <encode_uint+0x6a>
   1959a:	d824      	bhi.n	195e6 <encode_uint+0x62>
		return 10;
   1959c:	2b58      	cmp	r3, #88	; 0x58
   1959e:	bf0c      	ite	eq
   195a0:	2610      	moveq	r6, #16
   195a2:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   195a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   195a8:	4632      	mov	r2, r6
   195aa:	2300      	movs	r3, #0
   195ac:	4640      	mov	r0, r8
   195ae:	4639      	mov	r1, r7
   195b0:	f7e7 fa04 	bl	9bc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   195b4:	2a09      	cmp	r2, #9
   195b6:	b2d4      	uxtb	r4, r2
   195b8:	d81e      	bhi.n	195f8 <encode_uint+0x74>
   195ba:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   195bc:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   195be:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   195c0:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   195c4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   195c8:	d301      	bcc.n	195ce <encode_uint+0x4a>
   195ca:	45d1      	cmp	r9, sl
   195cc:	d811      	bhi.n	195f2 <encode_uint+0x6e>
	if (conv->flag_hash) {
   195ce:	782b      	ldrb	r3, [r5, #0]
   195d0:	069b      	lsls	r3, r3, #26
   195d2:	d505      	bpl.n	195e0 <encode_uint+0x5c>
		if (radix == 8) {
   195d4:	2e08      	cmp	r6, #8
   195d6:	d115      	bne.n	19604 <encode_uint+0x80>
			conv->altform_0 = true;
   195d8:	78ab      	ldrb	r3, [r5, #2]
   195da:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   195de:	70ab      	strb	r3, [r5, #2]
}
   195e0:	4648      	mov	r0, r9
   195e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   195e6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   195ea:	2b70      	cmp	r3, #112	; 0x70
   195ec:	e7d7      	b.n	1959e <encode_uint+0x1a>
	switch (specifier) {
   195ee:	2608      	movs	r6, #8
   195f0:	e7d8      	b.n	195a4 <encode_uint+0x20>
		value /= radix;
   195f2:	4680      	mov	r8, r0
   195f4:	460f      	mov	r7, r1
   195f6:	e7d7      	b.n	195a8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   195f8:	f1bb 0f19 	cmp.w	fp, #25
   195fc:	bf94      	ite	ls
   195fe:	3437      	addls	r4, #55	; 0x37
   19600:	3457      	addhi	r4, #87	; 0x57
   19602:	e7db      	b.n	195bc <encode_uint+0x38>
		} else if (radix == 16) {
   19604:	2e10      	cmp	r6, #16
   19606:	d1eb      	bne.n	195e0 <encode_uint+0x5c>
			conv->altform_0c = true;
   19608:	78ab      	ldrb	r3, [r5, #2]
   1960a:	f043 0310 	orr.w	r3, r3, #16
   1960e:	e7e6      	b.n	195de <encode_uint+0x5a>

00019610 <outs>:
{
   19610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19614:	4607      	mov	r7, r0
   19616:	4688      	mov	r8, r1
   19618:	4615      	mov	r5, r2
   1961a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1961c:	4614      	mov	r4, r2
   1961e:	42b4      	cmp	r4, r6
   19620:	d305      	bcc.n	1962e <outs+0x1e>
   19622:	b10e      	cbz	r6, 19628 <outs+0x18>
	return (int)count;
   19624:	1b60      	subs	r0, r4, r5
   19626:	e008      	b.n	1963a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19628:	7823      	ldrb	r3, [r4, #0]
   1962a:	2b00      	cmp	r3, #0
   1962c:	d0fa      	beq.n	19624 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1962e:	f814 0b01 	ldrb.w	r0, [r4], #1
   19632:	4641      	mov	r1, r8
   19634:	47b8      	blx	r7
		if (rc < 0) {
   19636:	2800      	cmp	r0, #0
   19638:	daf1      	bge.n	1961e <outs+0xe>
}
   1963a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001963e <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1963e:	b40f      	push	{r0, r1, r2, r3}
   19640:	b507      	push	{r0, r1, r2, lr}
   19642:	a904      	add	r1, sp, #16
   19644:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   19648:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1964a:	f7e8 ffd1 	bl	25f0 <vprintk>

	va_end(ap);
}
   1964e:	b003      	add	sp, #12
   19650:	f85d eb04 	ldr.w	lr, [sp], #4
   19654:	b004      	add	sp, #16
   19656:	4770      	bx	lr

00019658 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19658:	4770      	bx	lr

0001965a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
   1965a:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1965c:	6844      	ldr	r4, [r0, #4]
   1965e:	68c0      	ldr	r0, [r0, #12]
   19660:	46a4      	mov	ip, r4

  return ret;
}
   19662:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   19664:	4760      	bx	ip

00019666 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
   19666:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   19668:	6804      	ldr	r4, [r0, #0]
   1966a:	68c0      	ldr	r0, [r0, #12]
   1966c:	46a4      	mov	ip, r4

  return ret;
}
   1966e:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   19670:	4760      	bx	ip

00019672 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   19672:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   19674:	2301      	movs	r3, #1
{
   19676:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   19678:	aa01      	add	r2, sp, #4
   1967a:	2120      	movs	r1, #32
{
   1967c:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1967e:	f7ff ffec 	bl	1965a <hts221_read_reg>

  if (ret == 0)
   19682:	b958      	cbnz	r0, 1969c <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   19684:	f89d 3004 	ldrb.w	r3, [sp, #4]
   19688:	f365 0301 	bfi	r3, r5, #0, #2
   1968c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   19690:	aa01      	add	r2, sp, #4
   19692:	2301      	movs	r3, #1
   19694:	2120      	movs	r1, #32
   19696:	4620      	mov	r0, r4
   19698:	f7ff ffe5 	bl	19666 <hts221_write_reg>
  }

  return ret;
}
   1969c:	b003      	add	sp, #12
   1969e:	bd30      	pop	{r4, r5, pc}

000196a0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   196a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196a2:	2301      	movs	r3, #1
{
   196a4:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196a6:	aa01      	add	r2, sp, #4
   196a8:	2120      	movs	r1, #32
{
   196aa:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196ac:	f7ff ffd5 	bl	1965a <hts221_read_reg>

  if (ret == 0)
   196b0:	b958      	cbnz	r0, 196ca <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   196b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   196b6:	f365 0382 	bfi	r3, r5, #2, #1
   196ba:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196be:	aa01      	add	r2, sp, #4
   196c0:	2301      	movs	r3, #1
   196c2:	2120      	movs	r1, #32
   196c4:	4620      	mov	r0, r4
   196c6:	f7ff ffce 	bl	19666 <hts221_write_reg>
  }

  return ret;
}
   196ca:	b003      	add	sp, #12
   196cc:	bd30      	pop	{r4, r5, pc}

000196ce <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   196ce:	b508      	push	{r3, lr}
   196d0:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   196d2:	2301      	movs	r3, #1
   196d4:	210f      	movs	r1, #15
   196d6:	f7ff ffc0 	bl	1965a <hts221_read_reg>

  return ret;
}
   196da:	bd08      	pop	{r3, pc}

000196dc <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   196dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196de:	2301      	movs	r3, #1
{
   196e0:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196e2:	aa01      	add	r2, sp, #4
   196e4:	2120      	movs	r1, #32
{
   196e6:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196e8:	f7ff ffb7 	bl	1965a <hts221_read_reg>

  if (ret == 0)
   196ec:	b958      	cbnz	r0, 19706 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   196ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   196f2:	f365 13c7 	bfi	r3, r5, #7, #1
   196f6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   196fa:	aa01      	add	r2, sp, #4
   196fc:	2301      	movs	r3, #1
   196fe:	2120      	movs	r1, #32
   19700:	4620      	mov	r0, r4
   19702:	f7ff ffb0 	bl	19666 <hts221_write_reg>
  }

  return ret;
}
   19706:	b003      	add	sp, #12
   19708:	bd30      	pop	{r4, r5, pc}

0001970a <hts221_drdy_on_int_set>:
  * @param  val     change the values of drdy in reg CTRL_REG3
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_drdy_on_int_set(stmdev_ctx_t *ctx, uint8_t val)
{
   1970a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg3_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   1970c:	2301      	movs	r3, #1
{
   1970e:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   19710:	aa01      	add	r2, sp, #4
   19712:	2122      	movs	r1, #34	; 0x22
{
   19714:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   19716:	f7ff ffa0 	bl	1965a <hts221_read_reg>

  if (ret == 0)
   1971a:	b958      	cbnz	r0, 19734 <hts221_drdy_on_int_set+0x2a>
  {
    reg.drdy = val;
   1971c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   19720:	f365 0382 	bfi	r3, r5, #2, #1
   19724:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
   19728:	aa01      	add	r2, sp, #4
   1972a:	2301      	movs	r3, #1
   1972c:	2122      	movs	r1, #34	; 0x22
   1972e:	4620      	mov	r0, r4
   19730:	f7ff ff99 	bl	19666 <hts221_write_reg>
  }

  return ret;
}
   19734:	b003      	add	sp, #12
   19736:	bd30      	pop	{r4, r5, pc}

00019738 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   19738:	b538      	push	{r3, r4, r5, lr}
   1973a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1973c:	42ab      	cmp	r3, r5
{
   1973e:	4611      	mov	r1, r2
   19740:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   19742:	d804      	bhi.n	1974e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   19744:	461a      	mov	r2, r3
   19746:	f000 fa55 	bl	19bf4 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1974a:	4620      	mov	r0, r4
   1974c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1974e:	2400      	movs	r4, #0
   19750:	e7fb      	b.n	1974a <_copy+0x12>

00019752 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   19752:	f000 ba5a 	b.w	19c0a <memset>

00019756 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   19756:	09c3      	lsrs	r3, r0, #7
   19758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1975c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   19760:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   19764:	b2c0      	uxtb	r0, r0
   19766:	4770      	bx	lr

00019768 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   19768:	78cb      	ldrb	r3, [r1, #3]
   1976a:	7802      	ldrb	r2, [r0, #0]
   1976c:	4053      	eors	r3, r2
   1976e:	7003      	strb	r3, [r0, #0]
   19770:	884b      	ldrh	r3, [r1, #2]
   19772:	7842      	ldrb	r2, [r0, #1]
   19774:	4053      	eors	r3, r2
   19776:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   19778:	680a      	ldr	r2, [r1, #0]
   1977a:	7883      	ldrb	r3, [r0, #2]
   1977c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   19780:	7083      	strb	r3, [r0, #2]
   19782:	680a      	ldr	r2, [r1, #0]
   19784:	78c3      	ldrb	r3, [r0, #3]
   19786:	4053      	eors	r3, r2
   19788:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1978a:	79cb      	ldrb	r3, [r1, #7]
   1978c:	7902      	ldrb	r2, [r0, #4]
   1978e:	4053      	eors	r3, r2
   19790:	7103      	strb	r3, [r0, #4]
   19792:	88cb      	ldrh	r3, [r1, #6]
   19794:	7942      	ldrb	r2, [r0, #5]
   19796:	4053      	eors	r3, r2
   19798:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1979a:	684a      	ldr	r2, [r1, #4]
   1979c:	7983      	ldrb	r3, [r0, #6]
   1979e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   197a2:	7183      	strb	r3, [r0, #6]
   197a4:	684a      	ldr	r2, [r1, #4]
   197a6:	79c3      	ldrb	r3, [r0, #7]
   197a8:	4053      	eors	r3, r2
   197aa:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   197ac:	7acb      	ldrb	r3, [r1, #11]
   197ae:	7a02      	ldrb	r2, [r0, #8]
   197b0:	4053      	eors	r3, r2
   197b2:	7203      	strb	r3, [r0, #8]
   197b4:	7a42      	ldrb	r2, [r0, #9]
   197b6:	894b      	ldrh	r3, [r1, #10]
   197b8:	4053      	eors	r3, r2
   197ba:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   197bc:	688a      	ldr	r2, [r1, #8]
   197be:	7a83      	ldrb	r3, [r0, #10]
   197c0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   197c4:	7283      	strb	r3, [r0, #10]
   197c6:	688a      	ldr	r2, [r1, #8]
   197c8:	7ac3      	ldrb	r3, [r0, #11]
   197ca:	4053      	eors	r3, r2
   197cc:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   197ce:	7bcb      	ldrb	r3, [r1, #15]
   197d0:	7b02      	ldrb	r2, [r0, #12]
   197d2:	4053      	eors	r3, r2
   197d4:	7303      	strb	r3, [r0, #12]
   197d6:	89cb      	ldrh	r3, [r1, #14]
   197d8:	7b42      	ldrb	r2, [r0, #13]
   197da:	4053      	eors	r3, r2
   197dc:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   197de:	68ca      	ldr	r2, [r1, #12]
   197e0:	7b83      	ldrb	r3, [r0, #14]
   197e2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   197e6:	7383      	strb	r3, [r0, #14]
   197e8:	68ca      	ldr	r2, [r1, #12]
   197ea:	7bc3      	ldrb	r3, [r0, #15]
   197ec:	4053      	eors	r3, r2
   197ee:	73c3      	strb	r3, [r0, #15]
}
   197f0:	4770      	bx	lr

000197f2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   197f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   197f4:	7802      	ldrb	r2, [r0, #0]
   197f6:	f88d 2000 	strb.w	r2, [sp]
   197fa:	7942      	ldrb	r2, [r0, #5]
   197fc:	f88d 2001 	strb.w	r2, [sp, #1]
   19800:	7a82      	ldrb	r2, [r0, #10]
   19802:	f88d 2002 	strb.w	r2, [sp, #2]
   19806:	7bc2      	ldrb	r2, [r0, #15]
   19808:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1980c:	7902      	ldrb	r2, [r0, #4]
   1980e:	f88d 2004 	strb.w	r2, [sp, #4]
   19812:	7a42      	ldrb	r2, [r0, #9]
   19814:	f88d 2005 	strb.w	r2, [sp, #5]
   19818:	7b82      	ldrb	r2, [r0, #14]
   1981a:	f88d 2006 	strb.w	r2, [sp, #6]
   1981e:	78c2      	ldrb	r2, [r0, #3]
   19820:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   19824:	7a02      	ldrb	r2, [r0, #8]
   19826:	f88d 2008 	strb.w	r2, [sp, #8]
   1982a:	7b42      	ldrb	r2, [r0, #13]
   1982c:	f88d 2009 	strb.w	r2, [sp, #9]
   19830:	7882      	ldrb	r2, [r0, #2]
   19832:	f88d 200a 	strb.w	r2, [sp, #10]
   19836:	79c2      	ldrb	r2, [r0, #7]
   19838:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1983c:	7b02      	ldrb	r2, [r0, #12]
   1983e:	f88d 200c 	strb.w	r2, [sp, #12]
   19842:	7842      	ldrb	r2, [r0, #1]
   19844:	7ac3      	ldrb	r3, [r0, #11]
   19846:	f88d 200d 	strb.w	r2, [sp, #13]
   1984a:	7982      	ldrb	r2, [r0, #6]
   1984c:	f88d 200e 	strb.w	r2, [sp, #14]
   19850:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19854:	2310      	movs	r3, #16
   19856:	466a      	mov	r2, sp
   19858:	4619      	mov	r1, r3
   1985a:	f7ff ff6d 	bl	19738 <_copy>
}
   1985e:	b005      	add	sp, #20
   19860:	f85d fb04 	ldr.w	pc, [sp], #4

00019864 <mult_row_column>:
{
   19864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19866:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   19868:	7808      	ldrb	r0, [r1, #0]
{
   1986a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1986c:	f7ff ff73 	bl	19756 <_double_byte>
   19870:	4605      	mov	r5, r0
   19872:	7860      	ldrb	r0, [r4, #1]
   19874:	f7ff ff6f 	bl	19756 <_double_byte>
   19878:	78a2      	ldrb	r2, [r4, #2]
   1987a:	7863      	ldrb	r3, [r4, #1]
   1987c:	4053      	eors	r3, r2
   1987e:	78e2      	ldrb	r2, [r4, #3]
   19880:	4053      	eors	r3, r2
   19882:	405d      	eors	r5, r3
   19884:	4068      	eors	r0, r5
   19886:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   19888:	7860      	ldrb	r0, [r4, #1]
   1988a:	7827      	ldrb	r7, [r4, #0]
   1988c:	f7ff ff63 	bl	19756 <_double_byte>
   19890:	4605      	mov	r5, r0
   19892:	78a0      	ldrb	r0, [r4, #2]
   19894:	f7ff ff5f 	bl	19756 <_double_byte>
   19898:	78a3      	ldrb	r3, [r4, #2]
   1989a:	405f      	eors	r7, r3
   1989c:	78e3      	ldrb	r3, [r4, #3]
   1989e:	405f      	eors	r7, r3
   198a0:	407d      	eors	r5, r7
   198a2:	4068      	eors	r0, r5
   198a4:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   198a6:	7863      	ldrb	r3, [r4, #1]
   198a8:	7827      	ldrb	r7, [r4, #0]
   198aa:	78a0      	ldrb	r0, [r4, #2]
   198ac:	405f      	eors	r7, r3
   198ae:	f7ff ff52 	bl	19756 <_double_byte>
   198b2:	4605      	mov	r5, r0
   198b4:	78e0      	ldrb	r0, [r4, #3]
   198b6:	f7ff ff4e 	bl	19756 <_double_byte>
   198ba:	78e3      	ldrb	r3, [r4, #3]
   198bc:	405f      	eors	r7, r3
   198be:	407d      	eors	r5, r7
   198c0:	4068      	eors	r0, r5
   198c2:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   198c4:	7820      	ldrb	r0, [r4, #0]
   198c6:	f7ff ff46 	bl	19756 <_double_byte>
   198ca:	7862      	ldrb	r2, [r4, #1]
   198cc:	7823      	ldrb	r3, [r4, #0]
   198ce:	4053      	eors	r3, r2
   198d0:	78a2      	ldrb	r2, [r4, #2]
   198d2:	4053      	eors	r3, r2
   198d4:	ea80 0503 	eor.w	r5, r0, r3
   198d8:	78e0      	ldrb	r0, [r4, #3]
   198da:	f7ff ff3c 	bl	19756 <_double_byte>
   198de:	b2ed      	uxtb	r5, r5
   198e0:	4045      	eors	r5, r0
   198e2:	70f5      	strb	r5, [r6, #3]
}
   198e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000198e6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   198e6:	b570      	push	{r4, r5, r6, lr}
   198e8:	4614      	mov	r4, r2
   198ea:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   198ec:	4605      	mov	r5, r0
   198ee:	2800      	cmp	r0, #0
   198f0:	d049      	beq.n	19986 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   198f2:	2900      	cmp	r1, #0
   198f4:	d049      	beq.n	1998a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   198f6:	2a00      	cmp	r2, #0
   198f8:	d049      	beq.n	1998e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   198fa:	2310      	movs	r3, #16
   198fc:	460a      	mov	r2, r1
   198fe:	4668      	mov	r0, sp
   19900:	4619      	mov	r1, r3
   19902:	f7ff ff19 	bl	19738 <_copy>
	add_round_key(state, s->words);
   19906:	4621      	mov	r1, r4
   19908:	4668      	mov	r0, sp
   1990a:	f7ff ff2d 	bl	19768 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1990e:	3410      	adds	r4, #16
   19910:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   19914:	4668      	mov	r0, sp
   19916:	f7e9 ff4d 	bl	37b4 <sub_bytes>
		shift_rows(state);
   1991a:	4668      	mov	r0, sp
   1991c:	f7ff ff69 	bl	197f2 <shift_rows>
	mult_row_column(t, s);
   19920:	4669      	mov	r1, sp
   19922:	a804      	add	r0, sp, #16
   19924:	f7ff ff9e 	bl	19864 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   19928:	a901      	add	r1, sp, #4
   1992a:	a805      	add	r0, sp, #20
   1992c:	f7ff ff9a 	bl	19864 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   19930:	a902      	add	r1, sp, #8
   19932:	a806      	add	r0, sp, #24
   19934:	f7ff ff96 	bl	19864 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   19938:	a903      	add	r1, sp, #12
   1993a:	a807      	add	r0, sp, #28
   1993c:	f7ff ff92 	bl	19864 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   19940:	2310      	movs	r3, #16
   19942:	4619      	mov	r1, r3
   19944:	eb0d 0203 	add.w	r2, sp, r3
   19948:	4668      	mov	r0, sp
   1994a:	f7ff fef5 	bl	19738 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1994e:	4621      	mov	r1, r4
   19950:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   19952:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   19954:	f7ff ff08 	bl	19768 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   19958:	42b4      	cmp	r4, r6
   1995a:	d1db      	bne.n	19914 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1995c:	f7e9 ff2a 	bl	37b4 <sub_bytes>
	shift_rows(state);
   19960:	4668      	mov	r0, sp
   19962:	f7ff ff46 	bl	197f2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   19966:	4621      	mov	r1, r4
   19968:	4668      	mov	r0, sp
   1996a:	f7ff fefd 	bl	19768 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1996e:	2310      	movs	r3, #16
   19970:	4619      	mov	r1, r3
   19972:	466a      	mov	r2, sp
   19974:	4628      	mov	r0, r5
   19976:	f7ff fedf 	bl	19738 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1997a:	4668      	mov	r0, sp
   1997c:	2210      	movs	r2, #16
   1997e:	2100      	movs	r1, #0
   19980:	f7ff fee7 	bl	19752 <_set>

	return TC_CRYPTO_SUCCESS;
   19984:	2001      	movs	r0, #1
}
   19986:	b008      	add	sp, #32
   19988:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1998a:	4608      	mov	r0, r1
   1998c:	e7fb      	b.n	19986 <tc_aes_encrypt+0xa0>
   1998e:	4610      	mov	r0, r2
   19990:	e7f9      	b.n	19986 <tc_aes_encrypt+0xa0>

00019992 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   19992:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19994:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   19996:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   19998:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1999c:	2b00      	cmp	r3, #0
   1999e:	bfac      	ite	ge
   199a0:	2300      	movge	r3, #0
   199a2:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   199a4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   199a8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   199ac:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   199ae:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   199b2:	d002      	beq.n	199ba <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   199b4:	7813      	ldrb	r3, [r2, #0]
   199b6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   199b8:	e7f4      	b.n	199a4 <gf_double+0x12>
	}
}
   199ba:	bd10      	pop	{r4, pc}

000199bc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   199bc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   199be:	b120      	cbz	r0, 199ca <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   199c0:	2258      	movs	r2, #88	; 0x58
   199c2:	2100      	movs	r1, #0
   199c4:	f7ff fec5 	bl	19752 <_set>
   199c8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   199ca:	bd08      	pop	{r3, pc}

000199cc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   199cc:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   199ce:	4604      	mov	r4, r0
   199d0:	b188      	cbz	r0, 199f6 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   199d2:	2210      	movs	r2, #16
   199d4:	2100      	movs	r1, #0
   199d6:	f7ff febc 	bl	19752 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   199da:	2210      	movs	r2, #16
   199dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   199e0:	2100      	movs	r1, #0
   199e2:	f7ff feb6 	bl	19752 <_set>
	s->leftover_offset = 0;
   199e6:	2300      	movs	r3, #0
   199e8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   199ea:	2200      	movs	r2, #0
   199ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   199f0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   199f4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   199f6:	bd10      	pop	{r4, pc}

000199f8 <tc_cmac_setup>:
{
   199f8:	b570      	push	{r4, r5, r6, lr}
   199fa:	4604      	mov	r4, r0
   199fc:	460d      	mov	r5, r1
   199fe:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   19a00:	b310      	cbz	r0, 19a48 <tc_cmac_setup+0x50>
   19a02:	b311      	cbz	r1, 19a4a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   19a04:	2258      	movs	r2, #88	; 0x58
   19a06:	2100      	movs	r1, #0
   19a08:	f7ff fea3 	bl	19752 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   19a0c:	4629      	mov	r1, r5
	s->sched = sched;
   19a0e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   19a10:	4630      	mov	r0, r6
   19a12:	f7e9 fedb 	bl	37cc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   19a16:	2210      	movs	r2, #16
   19a18:	2100      	movs	r1, #0
   19a1a:	4620      	mov	r0, r4
   19a1c:	f7ff fe99 	bl	19752 <_set>
	gf_double (s->K1, s->iv);
   19a20:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   19a24:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19a26:	4621      	mov	r1, r4
   19a28:	4620      	mov	r0, r4
   19a2a:	f7ff ff5c 	bl	198e6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   19a2e:	4621      	mov	r1, r4
   19a30:	4628      	mov	r0, r5
   19a32:	f7ff ffae 	bl	19992 <gf_double>
	gf_double (s->K2, s->K1);
   19a36:	4629      	mov	r1, r5
   19a38:	f104 0020 	add.w	r0, r4, #32
   19a3c:	f7ff ffa9 	bl	19992 <gf_double>
	tc_cmac_init(s);
   19a40:	4620      	mov	r0, r4
   19a42:	f7ff ffc3 	bl	199cc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   19a46:	2001      	movs	r0, #1
}
   19a48:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   19a4a:	4608      	mov	r0, r1
   19a4c:	e7fc      	b.n	19a48 <tc_cmac_setup+0x50>

00019a4e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   19a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a52:	460e      	mov	r6, r1
   19a54:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   19a56:	4604      	mov	r4, r0
   19a58:	2800      	cmp	r0, #0
   19a5a:	d060      	beq.n	19b1e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   19a5c:	b1fa      	cbz	r2, 19a9e <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   19a5e:	2900      	cmp	r1, #0
   19a60:	d05d      	beq.n	19b1e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   19a62:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   19a66:	ea53 0102 	orrs.w	r1, r3, r2
   19a6a:	d058      	beq.n	19b1e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   19a6c:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   19a6e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   19a72:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   19a76:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   19a7a:	f1b8 0f00 	cmp.w	r8, #0
   19a7e:	d02c      	beq.n	19ada <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   19a80:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19a84:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   19a88:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19a8a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   19a8c:	d20a      	bcs.n	19aa4 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   19a8e:	462b      	mov	r3, r5
   19a90:	4632      	mov	r2, r6
   19a92:	4629      	mov	r1, r5
   19a94:	f7ff fe50 	bl	19738 <_copy>
			s->leftover_offset += data_length;
   19a98:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19a9a:	442b      	add	r3, r5
   19a9c:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   19a9e:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   19aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   19aa4:	463b      	mov	r3, r7
   19aa6:	4632      	mov	r2, r6
   19aa8:	4639      	mov	r1, r7
   19aaa:	f7ff fe45 	bl	19738 <_copy>
		data_length -= remaining_space;
   19aae:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   19ab0:	2300      	movs	r3, #0
   19ab2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   19ab4:	4445      	add	r5, r8
		data += remaining_space;
   19ab6:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19ab8:	1e63      	subs	r3, r4, #1
   19aba:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   19abe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19ac2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19ac6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   19ac8:	ea82 0200 	eor.w	r2, r2, r0
   19acc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19ace:	d1f6      	bne.n	19abe <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19ad0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19ad2:	4621      	mov	r1, r4
   19ad4:	4620      	mov	r0, r4
   19ad6:	f7ff ff06 	bl	198e6 <tc_aes_encrypt>
   19ada:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   19ade:	2d10      	cmp	r5, #16
   19ae0:	d80a      	bhi.n	19af8 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   19ae2:	2d00      	cmp	r5, #0
   19ae4:	d0db      	beq.n	19a9e <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   19ae6:	462b      	mov	r3, r5
   19ae8:	4632      	mov	r2, r6
   19aea:	4629      	mov	r1, r5
   19aec:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19af0:	f7ff fe22 	bl	19738 <_copy>
		s->leftover_offset = data_length;
   19af4:	6465      	str	r5, [r4, #68]	; 0x44
   19af6:	e7d2      	b.n	19a9e <tc_cmac_update+0x50>
   19af8:	1e63      	subs	r3, r4, #1
   19afa:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   19afc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19b00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19b04:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   19b06:	ea82 0200 	eor.w	r2, r2, r0
   19b0a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19b0c:	d1f6      	bne.n	19afc <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   19b0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19b10:	4621      	mov	r1, r4
   19b12:	4620      	mov	r0, r4
   19b14:	f7ff fee7 	bl	198e6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   19b18:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   19b1a:	3d10      	subs	r5, #16
   19b1c:	e7df      	b.n	19ade <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   19b1e:	2000      	movs	r0, #0
   19b20:	e7be      	b.n	19aa0 <tc_cmac_update+0x52>

00019b22 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   19b22:	b570      	push	{r4, r5, r6, lr}
   19b24:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   19b26:	4605      	mov	r5, r0
   19b28:	b1e8      	cbz	r0, 19b66 <tc_cmac_final+0x44>
   19b2a:	b369      	cbz	r1, 19b88 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   19b2c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   19b2e:	2a10      	cmp	r2, #16
   19b30:	d11a      	bne.n	19b68 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   19b32:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19b34:	1e63      	subs	r3, r4, #1
   19b36:	3901      	subs	r1, #1
   19b38:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   19b3c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19b40:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   19b44:	4072      	eors	r2, r6
   19b46:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19b4a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   19b4c:	ea82 0206 	eor.w	r2, r2, r6
   19b50:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   19b52:	d1f3      	bne.n	19b3c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   19b54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   19b56:	4621      	mov	r1, r4
   19b58:	4628      	mov	r0, r5
   19b5a:	f7ff fec4 	bl	198e6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   19b5e:	4620      	mov	r0, r4
   19b60:	f7ff ff2c 	bl	199bc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   19b64:	2001      	movs	r0, #1
}
   19b66:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   19b68:	f102 0030 	add.w	r0, r2, #48	; 0x30
   19b6c:	2100      	movs	r1, #0
   19b6e:	f1c2 0210 	rsb	r2, r2, #16
   19b72:	4420      	add	r0, r4
   19b74:	f7ff fded 	bl	19752 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   19b78:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19b7a:	4423      	add	r3, r4
   19b7c:	2280      	movs	r2, #128	; 0x80
   19b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   19b82:	f104 0120 	add.w	r1, r4, #32
   19b86:	e7d5      	b.n	19b34 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   19b88:	4608      	mov	r0, r1
   19b8a:	e7ec      	b.n	19b66 <tc_cmac_final+0x44>

00019b8c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   19b8c:	f003 b8db 	b.w	1cd46 <z_fatal_error>

00019b90 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   19b90:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   19b92:	6800      	ldr	r0, [r0, #0]
   19b94:	f003 b8d7 	b.w	1cd46 <z_fatal_error>

00019b98 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   19b98:	2100      	movs	r1, #0
   19b9a:	2001      	movs	r0, #1
   19b9c:	f7ff bff6 	b.w	19b8c <z_arm_fatal_error>

00019ba0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   19ba0:	b508      	push	{r3, lr}
	handler();
   19ba2:	f7e9 fedb 	bl	395c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   19ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   19baa:	f7e9 bfbb 	b.w	3b24 <z_arm_exc_exit>

00019bae <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   19bae:	4603      	mov	r3, r0
	size_t n = 0;
   19bb0:	2000      	movs	r0, #0

	while (*s != '\0') {
   19bb2:	5c1a      	ldrb	r2, [r3, r0]
   19bb4:	b902      	cbnz	r2, 19bb8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   19bb6:	4770      	bx	lr
		n++;
   19bb8:	3001      	adds	r0, #1
   19bba:	e7fa      	b.n	19bb2 <strlen+0x4>

00019bbc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   19bbc:	1e43      	subs	r3, r0, #1
   19bbe:	3901      	subs	r1, #1
   19bc0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   19bc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   19bc8:	4282      	cmp	r2, r0
   19bca:	d101      	bne.n	19bd0 <strcmp+0x14>
   19bcc:	2a00      	cmp	r2, #0
   19bce:	d1f7      	bne.n	19bc0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   19bd0:	1a10      	subs	r0, r2, r0
   19bd2:	4770      	bx	lr

00019bd4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   19bd4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   19bd6:	b15a      	cbz	r2, 19bf0 <memcmp+0x1c>
   19bd8:	3901      	subs	r1, #1
   19bda:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   19bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
   19be0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   19be4:	42a0      	cmp	r0, r4
   19be6:	d001      	beq.n	19bec <memcmp+0x18>
   19be8:	429a      	cmp	r2, r3
   19bea:	d0f7      	beq.n	19bdc <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   19bec:	1ad0      	subs	r0, r2, r3
}
   19bee:	bd10      	pop	{r4, pc}
		return 0;
   19bf0:	4610      	mov	r0, r2
   19bf2:	e7fc      	b.n	19bee <memcmp+0x1a>

00019bf4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   19bf4:	b510      	push	{r4, lr}
   19bf6:	1e43      	subs	r3, r0, #1
   19bf8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   19bfa:	4291      	cmp	r1, r2
   19bfc:	d100      	bne.n	19c00 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   19bfe:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   19c00:	f811 4b01 	ldrb.w	r4, [r1], #1
   19c04:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   19c08:	e7f7      	b.n	19bfa <memcpy+0x6>

00019c0a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   19c0a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   19c0c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   19c0e:	4603      	mov	r3, r0
	while (n > 0) {
   19c10:	4293      	cmp	r3, r2
   19c12:	d100      	bne.n	19c16 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   19c14:	4770      	bx	lr
		*(d_byte++) = c_byte;
   19c16:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   19c1a:	e7f9      	b.n	19c10 <memset+0x6>

00019c1c <_stdout_hook_default>:
}
   19c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c20:	4770      	bx	lr

00019c22 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   19c22:	4603      	mov	r3, r0
	size_t n = 0;
   19c24:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   19c26:	5c1a      	ldrb	r2, [r3, r0]
   19c28:	b10a      	cbz	r2, 19c2e <strnlen+0xc>
   19c2a:	4288      	cmp	r0, r1
   19c2c:	d100      	bne.n	19c30 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   19c2e:	4770      	bx	lr
		n++;
   19c30:	3001      	adds	r0, #1
   19c32:	e7f8      	b.n	19c26 <strnlen+0x4>

00019c34 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   19c34:	2806      	cmp	r0, #6
   19c36:	d108      	bne.n	19c4a <pm_state_set+0x16>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   19c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19c3c:	2201      	movs	r2, #1
   19c3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   19c42:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   19c46:	bf20      	wfe
    while (true)
   19c48:	e7fd      	b.n	19c46 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   19c4a:	4770      	bx	lr

00019c4c <pm_state_exit_post_ops>:
   19c4c:	2300      	movs	r3, #0
   19c4e:	f383 8811 	msr	BASEPRI, r3
   19c52:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   19c56:	4770      	bx	lr

00019c58 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   19c58:	b510      	push	{r4, lr}
   19c5a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   19c5c:	7801      	ldrb	r1, [r0, #0]
   19c5e:	7822      	ldrb	r2, [r4, #0]
   19c60:	428a      	cmp	r2, r1
{
   19c62:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   19c64:	d00f      	beq.n	19c86 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   19c66:	4669      	mov	r1, sp
   19c68:	f7ea fa22 	bl	40b0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   19c6c:	a905      	add	r1, sp, #20
   19c6e:	4620      	mov	r0, r4
   19c70:	f7ea fa1e 	bl	40b0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   19c74:	2210      	movs	r2, #16
   19c76:	f10d 0115 	add.w	r1, sp, #21
   19c7a:	f10d 0001 	add.w	r0, sp, #1
   19c7e:	f7ff ffa9 	bl	19bd4 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   19c82:	b00a      	add	sp, #40	; 0x28
   19c84:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   19c86:	2a01      	cmp	r2, #1
   19c88:	d006      	beq.n	19c98 <bt_uuid_cmp+0x40>
   19c8a:	2a02      	cmp	r2, #2
   19c8c:	d007      	beq.n	19c9e <bt_uuid_cmp+0x46>
   19c8e:	b972      	cbnz	r2, 19cae <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   19c90:	8840      	ldrh	r0, [r0, #2]
   19c92:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   19c94:	1ac0      	subs	r0, r0, r3
   19c96:	e7f4      	b.n	19c82 <bt_uuid_cmp+0x2a>
   19c98:	6840      	ldr	r0, [r0, #4]
   19c9a:	6863      	ldr	r3, [r4, #4]
   19c9c:	e7fa      	b.n	19c94 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   19c9e:	2210      	movs	r2, #16
   19ca0:	1c61      	adds	r1, r4, #1
   19ca2:	3001      	adds	r0, #1
}
   19ca4:	b00a      	add	sp, #40	; 0x28
   19ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   19caa:	f7ff bf93 	b.w	19bd4 <memcmp>
	switch (u1->type) {
   19cae:	f06f 0015 	mvn.w	r0, #21
   19cb2:	e7e6      	b.n	19c82 <bt_uuid_cmp+0x2a>

00019cb4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   19cb4:	2a04      	cmp	r2, #4
{
   19cb6:	b510      	push	{r4, lr}
	switch (data_len) {
   19cb8:	d00a      	beq.n	19cd0 <bt_uuid_create+0x1c>
   19cba:	2a10      	cmp	r2, #16
   19cbc:	d00d      	beq.n	19cda <bt_uuid_create+0x26>
   19cbe:	2a02      	cmp	r2, #2
   19cc0:	f04f 0300 	mov.w	r3, #0
   19cc4:	d10f      	bne.n	19ce6 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   19cc6:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   19cc8:	880b      	ldrh	r3, [r1, #0]
   19cca:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   19ccc:	2001      	movs	r0, #1
}
   19cce:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   19cd0:	2301      	movs	r3, #1
   19cd2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   19cd4:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   19cd6:	6043      	str	r3, [r0, #4]
		break;
   19cd8:	e7f8      	b.n	19ccc <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   19cda:	2302      	movs	r3, #2
   19cdc:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   19ce0:	f7ff ff88 	bl	19bf4 <memcpy>
		break;
   19ce4:	e7f2      	b.n	19ccc <bt_uuid_create+0x18>
	switch (data_len) {
   19ce6:	4618      	mov	r0, r3
   19ce8:	e7f1      	b.n	19cce <bt_uuid_create+0x1a>

00019cea <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   19cea:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   19cec:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   19cee:	2106      	movs	r1, #6
{
   19cf0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   19cf2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   19cf6:	f7f8 f8ef 	bl	11ed8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   19cfa:	b918      	cbnz	r0, 19d04 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   19cfc:	79a3      	ldrb	r3, [r4, #6]
   19cfe:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19d02:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   19d04:	bd10      	pop	{r4, pc}

00019d06 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   19d06:	b510      	push	{r4, lr}
   19d08:	4604      	mov	r4, r0
   19d0a:	2207      	movs	r2, #7
   19d0c:	f7ff ff72 	bl	19bf4 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   19d10:	7823      	ldrb	r3, [r4, #0]
   19d12:	f023 0302 	bic.w	r3, r3, #2
   19d16:	7023      	strb	r3, [r4, #0]
}
   19d18:	bd10      	pop	{r4, pc}

00019d1a <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   19d1a:	7800      	ldrb	r0, [r0, #0]
}
   19d1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19d20:	4770      	bx	lr

00019d22 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   19d22:	280f      	cmp	r0, #15
   19d24:	d807      	bhi.n	19d36 <bt_hci_evt_get_flags+0x14>
   19d26:	280d      	cmp	r0, #13
   19d28:	d80b      	bhi.n	19d42 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   19d2a:	2805      	cmp	r0, #5
   19d2c:	bf08      	it	eq
   19d2e:	2003      	moveq	r0, #3
   19d30:	bf18      	it	ne
   19d32:	2002      	movne	r0, #2
   19d34:	4770      	bx	lr
	switch (evt) {
   19d36:	2813      	cmp	r0, #19
   19d38:	d003      	beq.n	19d42 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   19d3a:	281a      	cmp	r0, #26
   19d3c:	bf08      	it	eq
   19d3e:	2001      	moveq	r0, #1
   19d40:	e7f6      	b.n	19d30 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   19d42:	2001      	movs	r0, #1
	}
}
   19d44:	4770      	bx	lr

00019d46 <hci_data_buf_overflow>:
}
   19d46:	4770      	bx	lr

00019d48 <hci_disconn_complete>:
{
   19d48:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   19d4a:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   19d4c:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19d4e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   19d52:	b976      	cbnz	r6, 19d72 <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_ALL);
   19d54:	210f      	movs	r1, #15
   19d56:	f7ec f83f 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
   19d5a:	4604      	mov	r4, r0
   19d5c:	b148      	cbz	r0, 19d72 <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   19d5e:	78eb      	ldrb	r3, [r5, #3]
   19d60:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19d62:	4631      	mov	r1, r6
   19d64:	f7eb ff76 	bl	5c54 <bt_conn_set_state>
		bt_conn_unref(conn);
   19d68:	4620      	mov	r0, r4
}
   19d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19d6e:	f000 bc8f 	b.w	1a690 <bt_conn_unref>
}
   19d72:	bd70      	pop	{r4, r5, r6, pc}

00019d74 <le_phy_update_complete>:
{
   19d74:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19d76:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_LE);
   19d78:	2101      	movs	r1, #1
   19d7a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   19d7e:	f7ec f82b 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
   19d82:	b118      	cbz	r0, 19d8c <le_phy_update_complete+0x18>
}
   19d84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   19d88:	f000 bc82 	b.w	1a690 <bt_conn_unref>
}
   19d8c:	bd08      	pop	{r3, pc}

00019d8e <le_data_len_change>:
{
   19d8e:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19d90:	68c3      	ldr	r3, [r0, #12]
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_LE);
   19d92:	2101      	movs	r1, #1
   19d94:	8818      	ldrh	r0, [r3, #0]
   19d96:	f7ec f81f 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
   19d9a:	b118      	cbz	r0, 19da4 <le_data_len_change+0x16>
}
   19d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   19da0:	f000 bc76 	b.w	1a690 <bt_conn_unref>
}
   19da4:	bd08      	pop	{r3, pc}

00019da6 <atomic_or>:
{
   19da6:	b510      	push	{r4, lr}
   19da8:	4603      	mov	r3, r0
}
   19daa:	f3bf 8f5b 	dmb	ish
   19dae:	e853 0f00 	ldrex	r0, [r3]
   19db2:	ea40 0201 	orr.w	r2, r0, r1
   19db6:	e843 2400 	strex	r4, r2, [r3]
   19dba:	2c00      	cmp	r4, #0
   19dbc:	d1f7      	bne.n	19dae <atomic_or+0x8>
   19dbe:	f3bf 8f5b 	dmb	ish
   19dc2:	bd10      	pop	{r4, pc}

00019dc4 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   19dc4:	2101      	movs	r1, #1
   19dc6:	300c      	adds	r0, #12
   19dc8:	f001 becc 	b.w	1bb64 <net_buf_simple_pull_mem>

00019dcc <le_remote_feat_complete>:
{
   19dcc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19dce:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_LE);
   19dd0:	2101      	movs	r1, #1
   19dd2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   19dd6:	f7eb ffff 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
   19dda:	4604      	mov	r4, r0
   19ddc:	b180      	cbz	r0, 19e00 <le_remote_feat_complete+0x34>
	if (!evt->status) {
   19dde:	782b      	ldrb	r3, [r5, #0]
   19de0:	b923      	cbnz	r3, 19dec <le_remote_feat_complete+0x20>
		memcpy(conn->le.features, evt->features,
   19de2:	2208      	movs	r2, #8
   19de4:	1ce9      	adds	r1, r5, #3
   19de6:	30ad      	adds	r0, #173	; 0xad
   19de8:	f7ff ff04 	bl	19bf4 <memcpy>
   19dec:	1d20      	adds	r0, r4, #4
   19dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   19df2:	f7ff ffd8 	bl	19da6 <atomic_or>
	bt_conn_unref(conn);
   19df6:	4620      	mov	r0, r4
}
   19df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   19dfc:	f000 bc48 	b.w	1a690 <bt_conn_unref>
}
   19e00:	bd38      	pop	{r3, r4, r5, pc}

00019e02 <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   19e02:	b430      	push	{r4, r5}
   19e04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19e08:	4604      	mov	r4, r0
   19e0a:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   19e0c:	429a      	cmp	r2, r3
   19e0e:	d101      	bne.n	19e14 <handle_event_common.isra.0+0x12>
}
   19e10:	bc30      	pop	{r4, r5}
   19e12:	4770      	bx	lr
		if (handler->event != event) {
   19e14:	4611      	mov	r1, r2
   19e16:	f811 5b08 	ldrb.w	r5, [r1], #8
   19e1a:	42a5      	cmp	r5, r4
   19e1c:	d106      	bne.n	19e2c <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   19e1e:	8a01      	ldrh	r1, [r0, #16]
   19e20:	7853      	ldrb	r3, [r2, #1]
   19e22:	4299      	cmp	r1, r3
   19e24:	d3f4      	bcc.n	19e10 <handle_event_common.isra.0+0xe>
}
   19e26:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   19e28:	6853      	ldr	r3, [r2, #4]
   19e2a:	4718      	bx	r3
   19e2c:	460a      	mov	r2, r1
   19e2e:	e7ed      	b.n	19e0c <handle_event_common.isra.0+0xa>

00019e30 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19e30:	f3bf 8f5b 	dmb	ish
   19e34:	e850 3f00 	ldrex	r3, [r0]
   19e38:	400b      	ands	r3, r1
   19e3a:	e840 3200 	strex	r2, r3, [r0]
   19e3e:	2a00      	cmp	r2, #0
   19e40:	d1f8      	bne.n	19e34 <atomic_and.isra.0+0x4>
   19e42:	f3bf 8f5b 	dmb	ish
}
   19e46:	4770      	bx	lr

00019e48 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   19e48:	4770      	bx	lr

00019e4a <hci_num_completed_packets>:
{
   19e4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   19e4e:	68c7      	ldr	r7, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   19e50:	783a      	ldrb	r2, [r7, #0]
   19e52:	2301      	movs	r3, #1
   19e54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   19e58:	8a02      	ldrh	r2, [r0, #16]
   19e5a:	4293      	cmp	r3, r2
   19e5c:	d95f      	bls.n	19f1e <hci_num_completed_packets+0xd4>
}
   19e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return list->head;
   19e62:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   19e64:	2b00      	cmp	r3, #0
   19e66:	d133      	bne.n	19ed0 <hci_num_completed_packets+0x86>
   19e68:	f382 8811 	msr	BASEPRI, r2
   19e6c:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   19e70:	4620      	mov	r0, r4
   19e72:	f000 fc0d 	bl	1a690 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   19e76:	3501      	adds	r5, #1
   19e78:	783b      	ldrb	r3, [r7, #0]
   19e7a:	429d      	cmp	r5, r3
   19e7c:	daef      	bge.n	19e5e <hci_num_completed_packets+0x14>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   19e7e:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_ALL);
   19e82:	210f      	movs	r1, #15
   19e84:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   19e88:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_ALL);
   19e8c:	f7eb ffa4 	bl	5dd8 <bt_conn_lookup_handle>
		if (!conn) {
   19e90:	4604      	mov	r4, r0
   19e92:	2800      	cmp	r0, #0
   19e94:	d0ef      	beq.n	19e76 <hci_num_completed_packets+0x2c>
			k_work_submit(&conn->tx_complete_work);
   19e96:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   19e9a:	2e00      	cmp	r6, #0
   19e9c:	d0e8      	beq.n	19e70 <hci_num_completed_packets+0x26>
	__asm__ volatile(
   19e9e:	f04f 0320 	mov.w	r3, #32
   19ea2:	f3ef 8211 	mrs	r2, BASEPRI
   19ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   19eaa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   19eae:	69e3      	ldr	r3, [r4, #28]
   19eb0:	2b00      	cmp	r3, #0
   19eb2:	d0d6      	beq.n	19e62 <hci_num_completed_packets+0x18>
				conn->pending_no_cb--;
   19eb4:	3b01      	subs	r3, #1
   19eb6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19eb8:	f382 8811 	msr	BASEPRI, r2
   19ebc:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   19ec0:	4620      	mov	r0, r4
   19ec2:	f7eb fdf3 	bl	5aac <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   19ec6:	3e01      	subs	r6, #1
   19ec8:	f7fd ffa6 	bl	17e18 <z_impl_k_sem_give>
   19ecc:	b2b6      	uxth	r6, r6
   19ece:	e7e4      	b.n	19e9a <hci_num_completed_packets+0x50>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ed0:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   19ed2:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   19ed4:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19ed6:	428b      	cmp	r3, r1
	list->tail = node;
   19ed8:	bf08      	it	eq
   19eda:	61a0      	streq	r0, [r4, #24]
   19edc:	f382 8811 	msr	BASEPRI, r2
   19ee0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19ee4:	f04f 0220 	mov.w	r2, #32
   19ee8:	f3ef 8111 	mrs	r1, BASEPRI
   19eec:	f382 8812 	msr	BASEPRI_MAX, r2
   19ef0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   19ef4:	68da      	ldr	r2, [r3, #12]
   19ef6:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   19ef8:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   19efc:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   19f00:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   19f02:	b94a      	cbnz	r2, 19f18 <hci_num_completed_packets+0xce>
	list->head = node;
   19f04:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   19f08:	f381 8811 	msr	BASEPRI, r1
   19f0c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   19f10:	4648      	mov	r0, r9
   19f12:	f7fe f91f 	bl	18154 <k_work_submit>
   19f16:	e7d3      	b.n	19ec0 <hci_num_completed_packets+0x76>
	parent->next = child;
   19f18:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19f1a:	6263      	str	r3, [r4, #36]	; 0x24
}
   19f1c:	e7f4      	b.n	19f08 <hci_num_completed_packets+0xbe>
	for (i = 0; i < evt->num_handles; i++) {
   19f1e:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   19f20:	46a8      	mov	r8, r5
   19f22:	e7a9      	b.n	19e78 <hci_num_completed_packets+0x2e>

00019f24 <le_conn_update_complete>:
{
   19f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   19f26:	68c5      	ldr	r5, [r0, #12]
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_LE);
   19f28:	2101      	movs	r1, #1
   19f2a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   19f2e:	f7eb ff53 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
   19f32:	4604      	mov	r4, r0
   19f34:	2800      	cmp	r0, #0
   19f36:	d04e      	beq.n	19fd6 <le_conn_update_complete+0xb2>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19f38:	782b      	ldrb	r3, [r5, #0]
   19f3a:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   19f3c:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19f40:	d119      	bne.n	19f76 <le_conn_update_complete+0x52>
   19f42:	78c3      	ldrb	r3, [r0, #3]
   19f44:	2b01      	cmp	r3, #1
   19f46:	d12a      	bne.n	19f9e <le_conn_update_complete+0x7a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19f4c:	4630      	mov	r0, r6
   19f4e:	f7ff ff2a 	bl	19da6 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   19f52:	0542      	lsls	r2, r0, #21
   19f54:	d40f      	bmi.n	19f76 <le_conn_update_complete+0x52>
		param.interval_min = conn->le.interval_min;
   19f56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   19f5a:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   19f5c:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   19f5e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   19f62:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   19f64:	4620      	mov	r0, r4
   19f66:	f7ec fa09 	bl	637c <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   19f6a:	4620      	mov	r0, r4
}
   19f6c:	b002      	add	sp, #8
   19f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19f72:	f000 bb8d 	b.w	1a690 <bt_conn_unref>
		if (!evt->status) {
   19f76:	782b      	ldrb	r3, [r5, #0]
   19f78:	b98b      	cbnz	r3, 19f9e <le_conn_update_complete+0x7a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   19f7a:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   19f7e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   19f82:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   19f86:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19f8a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   19f8e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19f92:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19f96:	4630      	mov	r0, r6
   19f98:	f7ff ff4a 	bl	19e30 <atomic_and.isra.0>
}
   19f9c:	e017      	b.n	19fce <le_conn_update_complete+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19f9e:	f3bf 8f5b 	dmb	ish
   19fa2:	6863      	ldr	r3, [r4, #4]
   19fa4:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   19fa8:	05db      	lsls	r3, r3, #23
   19faa:	d5f2      	bpl.n	19f92 <le_conn_update_complete+0x6e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   19fac:	782b      	ldrb	r3, [r5, #0]
   19fae:	2b20      	cmp	r3, #32
   19fb0:	d1ef      	bne.n	19f92 <le_conn_update_complete+0x6e>
			   conn->le.conn_param_retry_countdown) {
   19fb2:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   19fb6:	2b00      	cmp	r3, #0
   19fb8:	d0eb      	beq.n	19f92 <le_conn_update_complete+0x6e>
			conn->le.conn_param_retry_countdown--;
   19fba:	3b01      	subs	r3, #1
   19fbc:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   19fc0:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19fc4:	2300      	movs	r3, #0
   19fc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19fca:	f7fe f92b 	bl	18224 <k_work_schedule>
		notify_le_param_updated(conn);
   19fce:	4620      	mov	r0, r4
   19fd0:	f7eb ff34 	bl	5e3c <notify_le_param_updated>
   19fd4:	e7c9      	b.n	19f6a <le_conn_update_complete+0x46>
}
   19fd6:	b002      	add	sp, #8
   19fd8:	bd70      	pop	{r4, r5, r6, pc}

00019fda <hci_le_read_max_data_len>:
{
   19fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19fdc:	4606      	mov	r6, r0
   19fde:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   19fe0:	aa01      	add	r2, sp, #4
   19fe2:	2100      	movs	r1, #0
   19fe4:	f242 002f 	movw	r0, #8239	; 0x202f
   19fe8:	f7ea fa12 	bl	4410 <bt_hci_cmd_send_sync>
	if (err) {
   19fec:	4604      	mov	r4, r0
   19fee:	b948      	cbnz	r0, 1a004 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   19ff0:	9801      	ldr	r0, [sp, #4]
   19ff2:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   19ff4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   19ff8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   19ffa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   19ffe:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1a000:	f7fa fcfa 	bl	149f8 <net_buf_unref>
}
   1a004:	4620      	mov	r0, r4
   1a006:	b002      	add	sp, #8
   1a008:	bd70      	pop	{r4, r5, r6, pc}

0001a00a <bt_hci_disconnect>:
{
   1a00a:	b570      	push	{r4, r5, r6, lr}
   1a00c:	4606      	mov	r6, r0
   1a00e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1a010:	f240 4006 	movw	r0, #1030	; 0x406
   1a014:	2103      	movs	r1, #3
   1a016:	f7ea f9c1 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a01a:	4604      	mov	r4, r0
   1a01c:	b168      	cbz	r0, 1a03a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1a01e:	2103      	movs	r1, #3
   1a020:	300c      	adds	r0, #12
   1a022:	f001 fd78 	bl	1bb16 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1a026:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1a028:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a02a:	4621      	mov	r1, r4
   1a02c:	2200      	movs	r2, #0
}
   1a02e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1a032:	f240 4006 	movw	r0, #1030	; 0x406
   1a036:	f7ea b9eb 	b.w	4410 <bt_hci_cmd_send_sync>
}
   1a03a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a03e:	bd70      	pop	{r4, r5, r6, pc}

0001a040 <bt_le_set_data_len>:
{
   1a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a042:	4607      	mov	r7, r0
   1a044:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a046:	f242 0022 	movw	r0, #8226	; 0x2022
   1a04a:	2106      	movs	r1, #6
{
   1a04c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1a04e:	f7ea f9a5 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a052:	4604      	mov	r4, r0
   1a054:	b178      	cbz	r0, 1a076 <bt_le_set_data_len+0x36>
   1a056:	2106      	movs	r1, #6
   1a058:	300c      	adds	r0, #12
   1a05a:	f001 fd5c 	bl	1bb16 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a05e:	883b      	ldrh	r3, [r7, #0]
   1a060:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1a062:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1a064:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a066:	4621      	mov	r1, r4
   1a068:	2200      	movs	r2, #0
}
   1a06a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1a06e:	f242 0022 	movw	r0, #8226	; 0x2022
   1a072:	f7ea b9cd 	b.w	4410 <bt_hci_cmd_send_sync>
}
   1a076:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a07c <bt_le_set_phy>:
{
   1a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a080:	4681      	mov	r9, r0
   1a082:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a084:	f242 0032 	movw	r0, #8242	; 0x2032
   1a088:	2107      	movs	r1, #7
{
   1a08a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1a08e:	4617      	mov	r7, r2
   1a090:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1a092:	f7ea f983 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a096:	4605      	mov	r5, r0
   1a098:	b1a0      	cbz	r0, 1a0c4 <bt_le_set_phy+0x48>
   1a09a:	2107      	movs	r1, #7
   1a09c:	300c      	adds	r0, #12
   1a09e:	f001 fd3a 	bl	1bb16 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a0a2:	f8b9 3000 	ldrh.w	r3, [r9]
   1a0a6:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   1a0a8:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1a0ac:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1a0ae:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1a0b0:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a0b4:	4629      	mov	r1, r5
   1a0b6:	2200      	movs	r2, #0
}
   1a0b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1a0bc:	f242 0032 	movw	r0, #8242	; 0x2032
   1a0c0:	f7ea b9a6 	b.w	4410 <bt_hci_cmd_send_sync>
}
   1a0c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a0cc <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1a0cc:	68c0      	ldr	r0, [r0, #12]
   1a0ce:	f7ea ba37 	b.w	4540 <bt_hci_le_enh_conn_complete>

0001a0d2 <bt_le_conn_params_valid>:
{
   1a0d2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1a0d4:	8803      	ldrh	r3, [r0, #0]
   1a0d6:	8842      	ldrh	r2, [r0, #2]
   1a0d8:	4293      	cmp	r3, r2
   1a0da:	d819      	bhi.n	1a110 <bt_le_conn_params_valid+0x3e>
   1a0dc:	2b05      	cmp	r3, #5
   1a0de:	d917      	bls.n	1a110 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1a0e0:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1a0e4:	d814      	bhi.n	1a110 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1a0e6:	8883      	ldrh	r3, [r0, #4]
   1a0e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a0ec:	d210      	bcs.n	1a110 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a0ee:	88c0      	ldrh	r0, [r0, #6]
   1a0f0:	f1a0 010a 	sub.w	r1, r0, #10
   1a0f4:	b289      	uxth	r1, r1
   1a0f6:	f640 4476 	movw	r4, #3190	; 0xc76
   1a0fa:	42a1      	cmp	r1, r4
   1a0fc:	d808      	bhi.n	1a110 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1a0fe:	3301      	adds	r3, #1
   1a100:	b29b      	uxth	r3, r3
   1a102:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1a104:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1a108:	bf34      	ite	cc
   1a10a:	2001      	movcc	r0, #1
   1a10c:	2000      	movcs	r0, #0
}
   1a10e:	bd10      	pop	{r4, pc}
		return false;
   1a110:	2000      	movs	r0, #0
   1a112:	e7fc      	b.n	1a10e <bt_le_conn_params_valid+0x3c>

0001a114 <le_conn_param_neg_reply>:
{
   1a114:	b570      	push	{r4, r5, r6, lr}
   1a116:	4606      	mov	r6, r0
   1a118:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a11a:	f242 0021 	movw	r0, #8225	; 0x2021
   1a11e:	2103      	movs	r1, #3
   1a120:	f7ea f93c 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a124:	4604      	mov	r4, r0
   1a126:	b160      	cbz	r0, 1a142 <le_conn_param_neg_reply+0x2e>
   1a128:	2103      	movs	r1, #3
   1a12a:	300c      	adds	r0, #12
   1a12c:	f001 fcf3 	bl	1bb16 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a130:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a132:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a134:	4621      	mov	r1, r4
   1a136:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a13a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a13e:	f7ea bb3d 	b.w	47bc <bt_hci_cmd_send>
}
   1a142:	bd70      	pop	{r4, r5, r6, pc}

0001a144 <le_conn_param_req>:
{
   1a144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a146:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a148:	78d9      	ldrb	r1, [r3, #3]
   1a14a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a14c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a14e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a152:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a156:	7959      	ldrb	r1, [r3, #5]
   1a158:	791a      	ldrb	r2, [r3, #4]
   1a15a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a15e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a162:	79d9      	ldrb	r1, [r3, #7]
   1a164:	799a      	ldrb	r2, [r3, #6]
   1a166:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a16a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a16e:	7a1a      	ldrb	r2, [r3, #8]
   1a170:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1a172:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a174:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_LE);
   1a178:	2101      	movs	r1, #1
   1a17a:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a17c:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle, BT_CONN_TYPE_LE);
   1a180:	f7eb fe2a 	bl	5dd8 <bt_conn_lookup_handle>
	if (!conn) {
   1a184:	4606      	mov	r6, r0
   1a186:	b928      	cbnz	r0, 1a194 <le_conn_param_req+0x50>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a188:	2102      	movs	r1, #2
   1a18a:	4620      	mov	r0, r4
   1a18c:	f7ff ffc2 	bl	1a114 <le_conn_param_neg_reply>
}
   1a190:	b003      	add	sp, #12
   1a192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1a194:	4669      	mov	r1, sp
   1a196:	f7eb fe9d 	bl	5ed4 <le_param_req>
   1a19a:	b938      	cbnz	r0, 1a1ac <le_conn_param_req+0x68>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a19c:	211e      	movs	r1, #30
   1a19e:	4620      	mov	r0, r4
   1a1a0:	f7ff ffb8 	bl	1a114 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a1a4:	4630      	mov	r0, r6
   1a1a6:	f000 fa73 	bl	1a690 <bt_conn_unref>
   1a1aa:	e7f1      	b.n	1a190 <le_conn_param_req+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a1ac:	210e      	movs	r1, #14
   1a1ae:	f242 0020 	movw	r0, #8224	; 0x2020
   1a1b2:	f7ea f8f3 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a1b6:	4605      	mov	r5, r0
   1a1b8:	2800      	cmp	r0, #0
   1a1ba:	d0f3      	beq.n	1a1a4 <le_conn_param_req+0x60>
   1a1bc:	210e      	movs	r1, #14
   1a1be:	300c      	adds	r0, #12
   1a1c0:	f001 fca9 	bl	1bb16 <net_buf_simple_add>
   1a1c4:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1a1c6:	220e      	movs	r2, #14
   1a1c8:	2100      	movs	r1, #0
   1a1ca:	f7ff fd1e 	bl	19c0a <memset>
	cp->handle = sys_cpu_to_le16(handle);
   1a1ce:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a1d0:	f8bd 3000 	ldrh.w	r3, [sp]
   1a1d4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a1d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1a1da:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a1dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1a1e0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a1e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a1e6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a1e8:	4629      	mov	r1, r5
   1a1ea:	f242 0020 	movw	r0, #8224	; 0x2020
   1a1ee:	f7ea fae5 	bl	47bc <bt_hci_cmd_send>
   1a1f2:	e7d7      	b.n	1a1a4 <le_conn_param_req+0x60>

0001a1f4 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   1a1f4:	2000      	movs	r0, #0
   1a1f6:	4770      	bx	lr

0001a1f8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1a1f8:	2000      	movs	r0, #0
   1a1fa:	4770      	bx	lr

0001a1fc <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1a1fc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1a202:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a208:	2100      	movs	r1, #0
{
   1a20a:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1a20c:	f7e9 ffb6 	bl	417c <bt_buf_get_evt>
   1a210:	2102      	movs	r1, #2
   1a212:	4604      	mov	r4, r0
   1a214:	300c      	adds	r0, #12
   1a216:	f001 fc7e 	bl	1bb16 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1a21a:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1a21c:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1a21e:	4620      	mov	r0, r4
   1a220:	bd70      	pop	{r4, r5, r6, pc}

0001a222 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a222:	3103      	adds	r1, #3
{
   1a224:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a226:	b2c9      	uxtb	r1, r1
{
   1a228:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1a22a:	200e      	movs	r0, #14
   1a22c:	f7ff ffe6 	bl	1a1fc <bt_hci_evt_create>
   1a230:	2103      	movs	r1, #3
   1a232:	4604      	mov	r4, r0
   1a234:	300c      	adds	r0, #12
   1a236:	f001 fc6e 	bl	1bb16 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1a23a:	2301      	movs	r3, #1
   1a23c:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1a23e:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1a242:	4620      	mov	r0, r4
   1a244:	bd38      	pop	{r3, r4, r5, pc}

0001a246 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1a246:	b570      	push	{r4, r5, r6, lr}
   1a248:	4605      	mov	r5, r0
   1a24a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1a24c:	200f      	movs	r0, #15
   1a24e:	2104      	movs	r1, #4
   1a250:	f7ff ffd4 	bl	1a1fc <bt_hci_evt_create>
   1a254:	2104      	movs	r1, #4
   1a256:	4604      	mov	r4, r0
   1a258:	300c      	adds	r0, #12
   1a25a:	f001 fc5c 	bl	1bb16 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1a25e:	2201      	movs	r2, #1
	cs->status = status;
   1a260:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1a262:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1a264:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1a266:	4620      	mov	r0, r4
   1a268:	bd70      	pop	{r4, r5, r6, pc}

0001a26a <bt_addr_le_eq>:
{
   1a26a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1a26c:	2207      	movs	r2, #7
   1a26e:	f7ff fcb1 	bl	19bd4 <memcmp>
}
   1a272:	fab0 f080 	clz	r0, r0
   1a276:	0940      	lsrs	r0, r0, #5
   1a278:	bd08      	pop	{r3, pc}

0001a27a <bt_lookup_id_addr>:
	return addr;
   1a27a:	2800      	cmp	r0, #0
}
   1a27c:	bf0c      	ite	eq
   1a27e:	4608      	moveq	r0, r1
   1a280:	2000      	movne	r0, #0
   1a282:	4770      	bx	lr

0001a284 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   1a284:	b118      	cbz	r0, 1a28e <bt_id_set_adv_random_addr+0xa>
   1a286:	b111      	cbz	r1, 1a28e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   1a288:	4608      	mov	r0, r1
   1a28a:	f7ea bea7 	b.w	4fdc <set_random_address>
}
   1a28e:	f06f 0015 	mvn.w	r0, #21
   1a292:	4770      	bx	lr

0001a294 <bt_id_set_adv_private_addr>:
{
   1a294:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   1a296:	4604      	mov	r4, r0
   1a298:	b180      	cbz	r0, 1a2bc <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1a29a:	2106      	movs	r1, #6
   1a29c:	4668      	mov	r0, sp
   1a29e:	f7f7 fe1b 	bl	11ed8 <bt_rand>
	if (err) {
   1a2a2:	b948      	cbnz	r0, 1a2b8 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   1a2a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a2a8:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1a2aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a2ae:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   1a2b0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1a2b4:	f7ff ffe6 	bl	1a284 <bt_id_set_adv_random_addr>
}
   1a2b8:	b002      	add	sp, #8
   1a2ba:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1a2bc:	f06f 0015 	mvn.w	r0, #21
   1a2c0:	e7fa      	b.n	1a2b8 <bt_id_set_adv_private_addr+0x24>

0001a2c2 <bt_id_adv_random_addr_check>:
}
   1a2c2:	3800      	subs	r0, #0
   1a2c4:	bf18      	it	ne
   1a2c6:	2001      	movne	r0, #1
   1a2c8:	4770      	bx	lr

0001a2ca <get_adv_channel_map>:
{
   1a2ca:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1a2cc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1a2d0:	bf0c      	ite	eq
   1a2d2:	2007      	moveq	r0, #7
   1a2d4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1a2d6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1a2d8:	bf48      	it	mi
   1a2da:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1a2de:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1a2e0:	bf48      	it	mi
   1a2e2:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1a2e6:	4770      	bx	lr

0001a2e8 <atomic_get>:
   1a2e8:	f3bf 8f5b 	dmb	ish
   1a2ec:	6800      	ldr	r0, [r0, #0]
   1a2ee:	f3bf 8f5b 	dmb	ish
}
   1a2f2:	4770      	bx	lr

0001a2f4 <atomic_and>:
{
   1a2f4:	b510      	push	{r4, lr}
   1a2f6:	4603      	mov	r3, r0
}
   1a2f8:	f3bf 8f5b 	dmb	ish
   1a2fc:	e853 0f00 	ldrex	r0, [r3]
   1a300:	ea00 0201 	and.w	r2, r0, r1
   1a304:	e843 2400 	strex	r4, r2, [r3]
   1a308:	2c00      	cmp	r4, #0
   1a30a:	d1f7      	bne.n	1a2fc <atomic_and+0x8>
   1a30c:	f3bf 8f5b 	dmb	ish
   1a310:	bd10      	pop	{r4, pc}

0001a312 <hci_set_ad>:
{
   1a312:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a316:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a318:	2120      	movs	r1, #32
{
   1a31a:	9000      	str	r0, [sp, #0]
   1a31c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1a31e:	f7ea f83d 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a322:	4605      	mov	r5, r0
   1a324:	2800      	cmp	r0, #0
   1a326:	d050      	beq.n	1a3ca <hci_set_ad+0xb8>
   1a328:	2120      	movs	r1, #32
   1a32a:	300c      	adds	r0, #12
   1a32c:	f001 fbf3 	bl	1bb16 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1a330:	2220      	movs	r2, #32
   1a332:	2100      	movs	r1, #0
   1a334:	4681      	mov	r9, r0
   1a336:	f7ff fc68 	bl	19c0a <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1a33a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1a33e:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   1a342:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1a344:	f8d4 8000 	ldr.w	r8, [r4]
   1a348:	2300      	movs	r3, #0
   1a34a:	6862      	ldr	r2, [r4, #4]
   1a34c:	4293      	cmp	r3, r2
   1a34e:	d30c      	bcc.n	1a36a <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   1a350:	3408      	adds	r4, #8
   1a352:	45a2      	cmp	sl, r4
   1a354:	d1f6      	bne.n	1a344 <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a356:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   1a358:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a35c:	2200      	movs	r2, #0
   1a35e:	4629      	mov	r1, r5
}
   1a360:	b003      	add	sp, #12
   1a362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1a366:	f7ea b853 	b.w	4410 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1a36a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1a36e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1a372:	1cb0      	adds	r0, r6, #2
   1a374:	1811      	adds	r1, r2, r0
   1a376:	291f      	cmp	r1, #31
   1a378:	d908      	bls.n	1a38c <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a37a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1a37e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1a382:	d11a      	bne.n	1a3ba <hci_set_ad+0xa8>
   1a384:	2a00      	cmp	r2, #0
   1a386:	dd18      	ble.n	1a3ba <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   1a388:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1a38c:	b2d7      	uxtb	r7, r2
   1a38e:	1c79      	adds	r1, r7, #1
   1a390:	f80b 1006 	strb.w	r1, [fp, r6]
   1a394:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1a396:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a398:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1a39c:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a3a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1a3a4:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1a3a6:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1a3a8:	f7ff fc24 	bl	19bf4 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1a3ac:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1a3ae:	4437      	add	r7, r6
   1a3b0:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1a3b2:	3301      	adds	r3, #1
   1a3b4:	f108 0808 	add.w	r8, r8, #8
   1a3b8:	e7c7      	b.n	1a34a <hci_set_ad+0x38>
		net_buf_unref(buf);
   1a3ba:	4628      	mov	r0, r5
   1a3bc:	f7fa fb1c 	bl	149f8 <net_buf_unref>
		return err;
   1a3c0:	f06f 0015 	mvn.w	r0, #21
}
   1a3c4:	b003      	add	sp, #12
   1a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   1a3ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a3ce:	e7f9      	b.n	1a3c4 <hci_set_ad+0xb2>

0001a3d0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a3d0:	2301      	movs	r3, #1
{
   1a3d2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a3d4:	fa03 f101 	lsl.w	r1, r3, r1
{
   1a3d8:	4604      	mov	r4, r0
	if (val) {
   1a3da:	b162      	cbz	r2, 1a3f6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a3dc:	f3bf 8f5b 	dmb	ish
   1a3e0:	e854 3f00 	ldrex	r3, [r4]
   1a3e4:	430b      	orrs	r3, r1
   1a3e6:	e844 3200 	strex	r2, r3, [r4]
   1a3ea:	2a00      	cmp	r2, #0
   1a3ec:	d1f8      	bne.n	1a3e0 <atomic_set_bit_to+0x10>
   1a3ee:	f3bf 8f5b 	dmb	ish
	}
}
   1a3f2:	bc10      	pop	{r4}
   1a3f4:	4770      	bx	lr
   1a3f6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a3f8:	43c9      	mvns	r1, r1
   1a3fa:	f7ff bf7b 	b.w	1a2f4 <atomic_and>

0001a3fe <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1a3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a402:	b087      	sub	sp, #28
   1a404:	4605      	mov	r5, r0
   1a406:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1a40a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1a40e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1a412:	460c      	mov	r4, r1
   1a414:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   1a416:	2100      	movs	r1, #0
   1a418:	2210      	movs	r2, #16
   1a41a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1a41c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1a41e:	f7ff fbf4 	bl	19c0a <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1a422:	b9ee      	cbnz	r6, 1a460 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   1a424:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   1a428:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1a42a:	a902      	add	r1, sp, #8
   1a42c:	f242 0008 	movw	r0, #8200	; 0x2008
   1a430:	f7ff ff6f 	bl	1a312 <hci_set_ad>
		if (err) {
   1a434:	4604      	mov	r4, r0
   1a436:	b978      	cbnz	r0, 1a458 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   1a438:	f1ba 0f00 	cmp.w	sl, #0
   1a43c:	d13e      	bne.n	1a4bc <le_adv_update.constprop.0+0xbe>
   1a43e:	3510      	adds	r5, #16
   1a440:	f3bf 8f5b 	dmb	ish
   1a444:	e855 3f00 	ldrex	r3, [r5]
   1a448:	f043 0304 	orr.w	r3, r3, #4
   1a44c:	e845 3200 	strex	r2, r3, [r5]
   1a450:	2a00      	cmp	r2, #0
   1a452:	d1f7      	bne.n	1a444 <le_adv_update.constprop.0+0x46>
   1a454:	f3bf 8f5b 	dmb	ish
}
   1a458:	4620      	mov	r0, r4
   1a45a:	b007      	add	sp, #28
   1a45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1a460:	f7ea fda0 	bl	4fa4 <bt_get_name>
   1a464:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1a466:	b9e4      	cbnz	r4, 1a4a2 <le_adv_update.constprop.0+0xa4>
   1a468:	bb37      	cbnz	r7, 1a4b8 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1a46a:	4658      	mov	r0, fp
   1a46c:	f7ff fb9f 	bl	19bae <strlen>
   1a470:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   1a472:	2e01      	cmp	r6, #1
		d[0].data = ad;
   1a474:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   1a478:	f88d 3000 	strb.w	r3, [sp]
   1a47c:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   1a480:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   1a484:	d1d0      	bne.n	1a428 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   1a486:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1a48a:	9605      	str	r6, [sp, #20]
			d_len = 2;
   1a48c:	2202      	movs	r2, #2
   1a48e:	e7cc      	b.n	1a42a <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a490:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1a494:	3a08      	subs	r2, #8
   1a496:	2a01      	cmp	r2, #1
   1a498:	d925      	bls.n	1a4e6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1a49a:	3301      	adds	r3, #1
   1a49c:	4598      	cmp	r8, r3
   1a49e:	d1f7      	bne.n	1a490 <le_adv_update.constprop.0+0x92>
   1a4a0:	e7e2      	b.n	1a468 <le_adv_update.constprop.0+0x6a>
   1a4a2:	2300      	movs	r3, #0
   1a4a4:	e7fa      	b.n	1a49c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1a4a6:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1a4aa:	3a08      	subs	r2, #8
   1a4ac:	2a01      	cmp	r2, #1
   1a4ae:	d91a      	bls.n	1a4e6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1a4b0:	3301      	adds	r3, #1
   1a4b2:	4599      	cmp	r9, r3
   1a4b4:	d1f7      	bne.n	1a4a6 <le_adv_update.constprop.0+0xa8>
   1a4b6:	e7d8      	b.n	1a46a <le_adv_update.constprop.0+0x6c>
   1a4b8:	2300      	movs	r3, #0
   1a4ba:	e7fa      	b.n	1a4b2 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1a4bc:	2e02      	cmp	r6, #2
   1a4be:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1a4c2:	bf08      	it	eq
   1a4c4:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a4c6:	a902      	add	r1, sp, #8
			d_len = 2;
   1a4c8:	bf08      	it	eq
   1a4ca:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a4cc:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1a4d0:	bf08      	it	eq
   1a4d2:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   1a4d6:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1a4da:	f7ff ff1a 	bl	1a312 <hci_set_ad>
		if (err) {
   1a4de:	2800      	cmp	r0, #0
   1a4e0:	d0ad      	beq.n	1a43e <le_adv_update.constprop.0+0x40>
   1a4e2:	4604      	mov	r4, r0
   1a4e4:	e7b8      	b.n	1a458 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   1a4e6:	f06f 0415 	mvn.w	r4, #21
   1a4ea:	e7b5      	b.n	1a458 <le_adv_update.constprop.0+0x5a>

0001a4ec <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1a4ec:	6843      	ldr	r3, [r0, #4]
   1a4ee:	f013 0008 	ands.w	r0, r3, #8
   1a4f2:	d00a      	beq.n	1a50a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1a4f4:	035a      	lsls	r2, r3, #13
   1a4f6:	d407      	bmi.n	1a508 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1a4f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1a4fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1a500:	bf14      	ite	ne
   1a502:	2002      	movne	r0, #2
   1a504:	2001      	moveq	r0, #1
   1a506:	4770      	bx	lr
   1a508:	2001      	movs	r0, #1
}
   1a50a:	4770      	bx	lr

0001a50c <bt_le_adv_set_enable_legacy>:
{
   1a50c:	b570      	push	{r4, r5, r6, lr}
   1a50e:	4606      	mov	r6, r0
   1a510:	b086      	sub	sp, #24
   1a512:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1a514:	f242 000a 	movw	r0, #8202	; 0x200a
   1a518:	2101      	movs	r1, #1
   1a51a:	f7e9 ff3f 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a51e:	4604      	mov	r4, r0
   1a520:	b1b0      	cbz	r0, 1a550 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1a522:	300c      	adds	r0, #12
	if (enable) {
   1a524:	b195      	cbz	r5, 1a54c <bt_le_adv_set_enable_legacy+0x40>
   1a526:	2101      	movs	r1, #1
   1a528:	f001 fb04 	bl	1bb34 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1a52c:	f106 0210 	add.w	r2, r6, #16
   1a530:	a903      	add	r1, sp, #12
   1a532:	4620      	mov	r0, r4
   1a534:	9500      	str	r5, [sp, #0]
   1a536:	2307      	movs	r3, #7
   1a538:	f7e9 ff1e 	bl	4378 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1a53c:	2200      	movs	r2, #0
   1a53e:	4621      	mov	r1, r4
   1a540:	f242 000a 	movw	r0, #8202	; 0x200a
   1a544:	f7e9 ff64 	bl	4410 <bt_hci_cmd_send_sync>
}
   1a548:	b006      	add	sp, #24
   1a54a:	bd70      	pop	{r4, r5, r6, pc}
   1a54c:	4629      	mov	r1, r5
   1a54e:	e7eb      	b.n	1a528 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1a550:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a554:	e7f8      	b.n	1a548 <bt_le_adv_set_enable_legacy+0x3c>

0001a556 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1a556:	3018      	adds	r0, #24
   1a558:	f002 be68 	b.w	1d22c <k_work_cancel_delayable>

0001a55c <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1a55c:	f7eb b8d8 	b.w	5710 <bt_le_adv_stop>

0001a560 <tx_complete_work>:
	tx_notify(conn);
   1a560:	3828      	subs	r0, #40	; 0x28
   1a562:	f7eb b999 	b.w	5898 <tx_notify>

0001a566 <bt_conn_reset_rx_state>:
{
   1a566:	b510      	push	{r4, lr}
   1a568:	4604      	mov	r4, r0
	if (!conn->rx) {
   1a56a:	6900      	ldr	r0, [r0, #16]
   1a56c:	b118      	cbz	r0, 1a576 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1a56e:	f7fa fa43 	bl	149f8 <net_buf_unref>
	conn->rx = NULL;
   1a572:	2300      	movs	r3, #0
   1a574:	6123      	str	r3, [r4, #16]
}
   1a576:	bd10      	pop	{r4, pc}

0001a578 <conn_cleanup>:
{
   1a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a57c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1a57e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1a580:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1a584:	2300      	movs	r3, #0
   1a586:	2200      	movs	r2, #0
   1a588:	4630      	mov	r0, r6
   1a58a:	f001 fa8a 	bl	1baa2 <net_buf_get>
   1a58e:	4603      	mov	r3, r0
   1a590:	b950      	cbnz	r0, 1a5a8 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1a592:	4620      	mov	r0, r4
   1a594:	f7ff ffe7 	bl	1a566 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a598:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a59c:	2200      	movs	r2, #0
}
   1a59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a5a2:	2300      	movs	r3, #0
   1a5a4:	f7fd be72 	b.w	1828c <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a5a8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1a5aa:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   1a5ac:	f7fa fa24 	bl	149f8 <net_buf_unref>
		if (tx) {
   1a5b0:	2d00      	cmp	r5, #0
   1a5b2:	d0e7      	beq.n	1a584 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1a5b4:	4629      	mov	r1, r5
   1a5b6:	4620      	mov	r0, r4
   1a5b8:	f7eb f99e 	bl	58f8 <conn_tx_destroy>
   1a5bc:	e7e0      	b.n	1a580 <conn_cleanup+0x8>

0001a5be <bt_conn_recv>:
{
   1a5be:	b570      	push	{r4, r5, r6, lr}
   1a5c0:	4616      	mov	r6, r2
   1a5c2:	4604      	mov	r4, r0
   1a5c4:	460d      	mov	r5, r1
	tx_notify(conn);
   1a5c6:	f7eb f967 	bl	5898 <tx_notify>
	switch (flags) {
   1a5ca:	2e01      	cmp	r6, #1
   1a5cc:	d017      	beq.n	1a5fe <bt_conn_recv+0x40>
   1a5ce:	2e02      	cmp	r6, #2
   1a5d0:	d117      	bne.n	1a602 <bt_conn_recv+0x44>
		if (conn->rx) {
   1a5d2:	6923      	ldr	r3, [r4, #16]
   1a5d4:	b113      	cbz	r3, 1a5dc <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1a5d6:	4620      	mov	r0, r4
   1a5d8:	f7ff ffc5 	bl	1a566 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1a5dc:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1a5de:	6921      	ldr	r1, [r4, #16]
   1a5e0:	8a0a      	ldrh	r2, [r1, #16]
   1a5e2:	2a01      	cmp	r2, #1
   1a5e4:	d937      	bls.n	1a656 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1a5e6:	68cb      	ldr	r3, [r1, #12]
   1a5e8:	881b      	ldrh	r3, [r3, #0]
   1a5ea:	3304      	adds	r3, #4
   1a5ec:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1a5ee:	429a      	cmp	r2, r3
   1a5f0:	d331      	bcc.n	1a656 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1a5f2:	d928      	bls.n	1a646 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   1a5f4:	4620      	mov	r0, r4
}
   1a5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1a5fa:	f7ff bfb4 	b.w	1a566 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1a5fe:	6920      	ldr	r0, [r4, #16]
   1a600:	b918      	cbnz	r0, 1a60a <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1a602:	4620      	mov	r0, r4
   1a604:	f7ff ffaf 	bl	1a566 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a608:	e001      	b.n	1a60e <bt_conn_recv+0x50>
		if (!buf->len) {
   1a60a:	8a2e      	ldrh	r6, [r5, #16]
   1a60c:	b926      	cbnz	r6, 1a618 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   1a60e:	4628      	mov	r0, r5
}
   1a610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1a614:	f7fa b9f0 	b.w	149f8 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1a618:	300c      	adds	r0, #12
   1a61a:	f001 fab7 	bl	1bb8c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a61e:	4286      	cmp	r6, r0
   1a620:	d907      	bls.n	1a632 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   1a622:	6921      	ldr	r1, [r4, #16]
   1a624:	2200      	movs	r2, #0
   1a626:	4620      	mov	r0, r4
   1a628:	f000 f967 	bl	1a8fa <bt_l2cap_recv>
			conn->rx = NULL;
   1a62c:	2300      	movs	r3, #0
   1a62e:	6123      	str	r3, [r4, #16]
   1a630:	e7ed      	b.n	1a60e <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a632:	6920      	ldr	r0, [r4, #16]
   1a634:	8a2a      	ldrh	r2, [r5, #16]
   1a636:	68e9      	ldr	r1, [r5, #12]
   1a638:	300c      	adds	r0, #12
   1a63a:	f001 fa72 	bl	1bb22 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1a63e:	4628      	mov	r0, r5
   1a640:	f7fa f9da 	bl	149f8 <net_buf_unref>
		break;
   1a644:	e7cb      	b.n	1a5de <bt_conn_recv+0x20>
	conn->rx = NULL;
   1a646:	2300      	movs	r3, #0
   1a648:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1a64a:	4620      	mov	r0, r4
   1a64c:	2201      	movs	r2, #1
}
   1a64e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1a652:	f000 b952 	b.w	1a8fa <bt_l2cap_recv>
}
   1a656:	bd70      	pop	{r4, r5, r6, pc}

0001a658 <bt_conn_ref>:
{
   1a658:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a65a:	f3bf 8f5b 	dmb	ish
   1a65e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1a662:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   1a666:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   1a66a:	b17b      	cbz	r3, 1a68c <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a66c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1a670:	1c59      	adds	r1, r3, #1
   1a672:	e852 4f00 	ldrex	r4, [r2]
   1a676:	429c      	cmp	r4, r3
   1a678:	d104      	bne.n	1a684 <bt_conn_ref+0x2c>
   1a67a:	e842 1c00 	strex	ip, r1, [r2]
   1a67e:	f1bc 0f00 	cmp.w	ip, #0
   1a682:	d1f6      	bne.n	1a672 <bt_conn_ref+0x1a>
   1a684:	f3bf 8f5b 	dmb	ish
   1a688:	d1e7      	bne.n	1a65a <bt_conn_ref+0x2>
}
   1a68a:	bd10      	pop	{r4, pc}
			return NULL;
   1a68c:	4618      	mov	r0, r3
   1a68e:	e7fc      	b.n	1a68a <bt_conn_ref+0x32>

0001a690 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1a690:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a694:	f3bf 8f5b 	dmb	ish
   1a698:	e853 1f00 	ldrex	r1, [r3]
   1a69c:	3901      	subs	r1, #1
   1a69e:	e843 1200 	strex	r2, r1, [r3]
   1a6a2:	2a00      	cmp	r2, #0
   1a6a4:	d1f8      	bne.n	1a698 <bt_conn_unref+0x8>
   1a6a6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1a6aa:	8842      	ldrh	r2, [r0, #2]
   1a6ac:	f240 1301 	movw	r3, #257	; 0x101
   1a6b0:	429a      	cmp	r2, r3
   1a6b2:	d108      	bne.n	1a6c6 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a6b4:	f3bf 8f5b 	dmb	ish
   1a6b8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1a6bc:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   1a6c0:	b90b      	cbnz	r3, 1a6c6 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   1a6c2:	f7eb b861 	b.w	5788 <bt_le_adv_resume>
}
   1a6c6:	4770      	bx	lr

0001a6c8 <conn_lookup_handle>:
{
   1a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a6cc:	4607      	mov	r7, r0
   1a6ce:	460e      	mov	r6, r1
   1a6d0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1a6d2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1a6d4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1a6d8:	42b4      	cmp	r4, r6
   1a6da:	d103      	bne.n	1a6e4 <conn_lookup_handle+0x1c>
	return NULL;
   1a6dc:	2300      	movs	r3, #0
}
   1a6de:	4618      	mov	r0, r3
   1a6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1a6e4:	fb09 7004 	mla	r0, r9, r4, r7
   1a6e8:	f7ff ffb6 	bl	1a658 <bt_conn_ref>
   1a6ec:	4603      	mov	r3, r0
		if (!conn) {
   1a6ee:	b158      	cbz	r0, 1a708 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1a6f0:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle, enum bt_conn_type type);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1a6f2:	2d01      	cmp	r5, #1
   1a6f4:	d002      	beq.n	1a6fc <conn_lookup_handle+0x34>
   1a6f6:	3d07      	subs	r5, #7
   1a6f8:	2d01      	cmp	r5, #1
   1a6fa:	d803      	bhi.n	1a704 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1a6fc:	881a      	ldrh	r2, [r3, #0]
   1a6fe:	4542      	cmp	r2, r8
   1a700:	d0ed      	beq.n	1a6de <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1a702:	4618      	mov	r0, r3
   1a704:	f7ff ffc4 	bl	1a690 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1a708:	3401      	adds	r4, #1
   1a70a:	e7e5      	b.n	1a6d8 <conn_lookup_handle+0x10>

0001a70c <bt_conn_connected>:
{
   1a70c:	b510      	push	{r4, lr}
   1a70e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1a710:	f7eb fde6 	bl	62e0 <bt_l2cap_connected>
	notify_connected(conn);
   1a714:	4620      	mov	r0, r4
}
   1a716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1a71a:	f7eb b89f 	b.w	585c <notify_connected>

0001a71e <bt_conn_get_security>:
}
   1a71e:	2001      	movs	r0, #1
   1a720:	4770      	bx	lr

0001a722 <bt_conn_is_peer_addr_le>:
{
   1a722:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1a724:	7a03      	ldrb	r3, [r0, #8]
   1a726:	428b      	cmp	r3, r1
{
   1a728:	4604      	mov	r4, r0
   1a72a:	4615      	mov	r5, r2
	if (id != conn->id) {
   1a72c:	d115      	bne.n	1a75a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1a72e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1a732:	2207      	movs	r2, #7
   1a734:	4628      	mov	r0, r5
   1a736:	f7ff fa4d 	bl	19bd4 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1a73a:	b180      	cbz	r0, 1a75e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1a73c:	78e3      	ldrb	r3, [r4, #3]
   1a73e:	2207      	movs	r2, #7
   1a740:	b943      	cbnz	r3, 1a754 <bt_conn_is_peer_addr_le+0x32>
   1a742:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1a746:	4628      	mov	r0, r5
   1a748:	f7ff fa44 	bl	19bd4 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1a74c:	fab0 f080 	clz	r0, r0
   1a750:	0940      	lsrs	r0, r0, #5
}
   1a752:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1a754:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1a758:	e7f5      	b.n	1a746 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1a75a:	2000      	movs	r0, #0
   1a75c:	e7f9      	b.n	1a752 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1a75e:	2001      	movs	r0, #1
   1a760:	e7f7      	b.n	1a752 <bt_conn_is_peer_addr_le+0x30>

0001a762 <bt_conn_exists_le>:
{
   1a762:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1a764:	f7eb fc0a 	bl	5f7c <bt_conn_lookup_addr_le>
	if (conn) {
   1a768:	b110      	cbz	r0, 1a770 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1a76a:	f7ff ff91 	bl	1a690 <bt_conn_unref>
		return true;
   1a76e:	2001      	movs	r0, #1
}
   1a770:	bd08      	pop	{r3, pc}

0001a772 <bt_conn_le_conn_update>:
{
   1a772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a774:	4607      	mov	r7, r0
   1a776:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1a778:	f242 0013 	movw	r0, #8211	; 0x2013
   1a77c:	210e      	movs	r1, #14
   1a77e:	f7e9 fe0d 	bl	439c <bt_hci_cmd_create>
	if (!buf) {
   1a782:	4606      	mov	r6, r0
   1a784:	b1d0      	cbz	r0, 1a7bc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1a786:	210e      	movs	r1, #14
   1a788:	300c      	adds	r0, #12
   1a78a:	f001 f9c4 	bl	1bb16 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1a78e:	220e      	movs	r2, #14
   1a790:	4604      	mov	r4, r0
   1a792:	2100      	movs	r1, #0
   1a794:	f7ff fa39 	bl	19c0a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1a798:	883b      	ldrh	r3, [r7, #0]
   1a79a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1a79c:	882b      	ldrh	r3, [r5, #0]
   1a79e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1a7a0:	886b      	ldrh	r3, [r5, #2]
   1a7a2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1a7a4:	88ab      	ldrh	r3, [r5, #4]
   1a7a6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1a7a8:	88eb      	ldrh	r3, [r5, #6]
   1a7aa:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1a7ac:	4631      	mov	r1, r6
   1a7ae:	2200      	movs	r2, #0
}
   1a7b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1a7b4:	f242 0013 	movw	r0, #8211	; 0x2013
   1a7b8:	f7e9 be2a 	b.w	4410 <bt_hci_cmd_send_sync>
}
   1a7bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a7c2 <l2cap_connected>:
}
   1a7c2:	4770      	bx	lr

0001a7c4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7c6:	4607      	mov	r7, r0
   1a7c8:	460e      	mov	r6, r1
   1a7ca:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1a7cc:	2300      	movs	r3, #0
   1a7ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a7d2:	2104      	movs	r1, #4
   1a7d4:	2000      	movs	r0, #0
   1a7d6:	f7eb fb1f 	bl	5e18 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1a7da:	4604      	mov	r4, r0
   1a7dc:	b130      	cbz	r0, 1a7ec <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1a7de:	2104      	movs	r1, #4
   1a7e0:	300c      	adds	r0, #12
   1a7e2:	f001 f998 	bl	1bb16 <net_buf_simple_add>
	hdr->code = code;
   1a7e6:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1a7e8:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1a7ea:	8045      	strh	r5, [r0, #2]
}
   1a7ec:	4620      	mov	r0, r4
   1a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a7f0 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1a7f0:	4770      	bx	lr

0001a7f2 <bt_l2cap_chan_del>:
{
   1a7f2:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1a7f4:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1a7f8:	4604      	mov	r4, r0
	if (!chan->conn) {
   1a7fa:	b123      	cbz	r3, 1a806 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1a7fc:	686b      	ldr	r3, [r5, #4]
   1a7fe:	b103      	cbz	r3, 1a802 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1a800:	4798      	blx	r3
	chan->conn = NULL;
   1a802:	2300      	movs	r3, #0
   1a804:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1a806:	68e3      	ldr	r3, [r4, #12]
   1a808:	b10b      	cbz	r3, 1a80e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1a80a:	4620      	mov	r0, r4
   1a80c:	4798      	blx	r3
	if (ops->released) {
   1a80e:	6a2b      	ldr	r3, [r5, #32]
   1a810:	b11b      	cbz	r3, 1a81a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1a812:	4620      	mov	r0, r4
}
   1a814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1a818:	4718      	bx	r3
}
   1a81a:	bd70      	pop	{r4, r5, r6, pc}

0001a81c <bt_l2cap_disconnected>:
{
   1a81c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1a81e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a820:	b130      	cbz	r0, 1a830 <bt_l2cap_disconnected+0x14>
	return node->next;
   1a822:	f850 4908 	ldr.w	r4, [r0], #-8
   1a826:	b104      	cbz	r4, 1a82a <bt_l2cap_disconnected+0xe>
   1a828:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1a82a:	f7ff ffe2 	bl	1a7f2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a82e:	b904      	cbnz	r4, 1a832 <bt_l2cap_disconnected+0x16>
}
   1a830:	bd38      	pop	{r3, r4, r5, pc}
   1a832:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a834:	b12d      	cbz	r5, 1a842 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1a836:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a838:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1a83a:	f7ff ffda 	bl	1a7f2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1a83e:	462c      	mov	r4, r5
   1a840:	e7f7      	b.n	1a832 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1a842:	4620      	mov	r0, r4
}
   1a844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1a848:	f7ff bfd3 	b.w	1a7f2 <bt_l2cap_chan_del>

0001a84c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1a84c:	3104      	adds	r1, #4
   1a84e:	f7eb bae3 	b.w	5e18 <bt_conn_create_pdu_timeout>

0001a852 <bt_l2cap_send_cb>:
{
   1a852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a856:	4614      	mov	r4, r2
   1a858:	4605      	mov	r5, r0
   1a85a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1a85c:	f102 000c 	add.w	r0, r2, #12
   1a860:	2104      	movs	r1, #4
   1a862:	461e      	mov	r6, r3
   1a864:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1a868:	f001 f96c 	bl	1bb44 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a86c:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   1a86e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a870:	3a04      	subs	r2, #4
   1a872:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1a874:	4643      	mov	r3, r8
   1a876:	4632      	mov	r2, r6
   1a878:	4621      	mov	r1, r4
   1a87a:	4628      	mov	r0, r5
}
   1a87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1a880:	f7eb b952 	b.w	5b28 <bt_conn_send_cb>

0001a884 <l2cap_recv>:
{
   1a884:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1a886:	8a0b      	ldrh	r3, [r1, #16]
   1a888:	2b03      	cmp	r3, #3
{
   1a88a:	4605      	mov	r5, r0
   1a88c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a88e:	d927      	bls.n	1a8e0 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a890:	2104      	movs	r1, #4
   1a892:	f104 000c 	add.w	r0, r4, #12
   1a896:	f001 f965 	bl	1bb64 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1a89a:	8a23      	ldrh	r3, [r4, #16]
   1a89c:	8842      	ldrh	r2, [r0, #2]
   1a89e:	429a      	cmp	r2, r3
   1a8a0:	d11e      	bne.n	1a8e0 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   1a8a2:	7841      	ldrb	r1, [r0, #1]
   1a8a4:	b1e1      	cbz	r1, 1a8e0 <l2cap_recv+0x5c>
	switch (hdr->code) {
   1a8a6:	7803      	ldrb	r3, [r0, #0]
   1a8a8:	2b01      	cmp	r3, #1
   1a8aa:	d019      	beq.n	1a8e0 <l2cap_recv+0x5c>
   1a8ac:	2b13      	cmp	r3, #19
   1a8ae:	d017      	beq.n	1a8e0 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1a8b0:	2202      	movs	r2, #2
   1a8b2:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1a8b4:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1a8b6:	f7ff ff85 	bl	1a7c4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a8ba:	4604      	mov	r4, r0
   1a8bc:	b180      	cbz	r0, 1a8e0 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1a8be:	2102      	movs	r1, #2
   1a8c0:	300c      	adds	r0, #12
   1a8c2:	f001 f928 	bl	1bb16 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1a8c6:	2300      	movs	r3, #0
   1a8c8:	7003      	strb	r3, [r0, #0]
   1a8ca:	7043      	strb	r3, [r0, #1]
   1a8cc:	4622      	mov	r2, r4
   1a8ce:	9300      	str	r3, [sp, #0]
   1a8d0:	2105      	movs	r1, #5
   1a8d2:	4628      	mov	r0, r5
   1a8d4:	f7ff ffbd 	bl	1a852 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a8d8:	b110      	cbz	r0, 1a8e0 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1a8da:	4620      	mov	r0, r4
   1a8dc:	f7fa f88c 	bl	149f8 <net_buf_unref>
}
   1a8e0:	2000      	movs	r0, #0
   1a8e2:	b003      	add	sp, #12
   1a8e4:	bd30      	pop	{r4, r5, pc}

0001a8e6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1a8e6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a8e8:	b130      	cbz	r0, 1a8f8 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1a8ea:	8983      	ldrh	r3, [r0, #12]
   1a8ec:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1a8ee:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1a8f2:	d001      	beq.n	1a8f8 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   1a8f4:	6880      	ldr	r0, [r0, #8]
   1a8f6:	e7f7      	b.n	1a8e8 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1a8f8:	4770      	bx	lr

0001a8fa <bt_l2cap_recv>:
{
   1a8fa:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1a8fc:	8a0b      	ldrh	r3, [r1, #16]
   1a8fe:	2b03      	cmp	r3, #3
{
   1a900:	4605      	mov	r5, r0
   1a902:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a904:	d804      	bhi.n	1a910 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1a906:	4620      	mov	r0, r4
}
   1a908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1a90c:	f7fa b874 	b.w	149f8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a910:	2104      	movs	r1, #4
   1a912:	f104 000c 	add.w	r0, r4, #12
   1a916:	f001 f925 	bl	1bb64 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a91a:	8841      	ldrh	r1, [r0, #2]
   1a91c:	4628      	mov	r0, r5
   1a91e:	f7ff ffe2 	bl	1a8e6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a922:	2800      	cmp	r0, #0
   1a924:	d0ef      	beq.n	1a906 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1a926:	6843      	ldr	r3, [r0, #4]
   1a928:	4621      	mov	r1, r4
   1a92a:	695b      	ldr	r3, [r3, #20]
   1a92c:	4798      	blx	r3
   1a92e:	e7ea      	b.n	1a906 <bt_l2cap_recv+0xc>

0001a930 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1a930:	4770      	bx	lr

0001a932 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1a932:	4603      	mov	r3, r0
	return list->head;
   1a934:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1a936:	b128      	cbz	r0, 1a944 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a938:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1a93a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1a93c:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a93e:	4288      	cmp	r0, r1
	list->tail = node;
   1a940:	bf08      	it	eq
   1a942:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1a944:	4770      	bx	lr

0001a946 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1a946:	4603      	mov	r3, r0
	size_t bytes = 0;
   1a948:	2000      	movs	r0, #0

	while (buf) {
   1a94a:	b903      	cbnz	r3, 1a94e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1a94c:	4770      	bx	lr
		bytes += buf->len;
   1a94e:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   1a950:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   1a952:	4410      	add	r0, r2
		buf = buf->frags;
   1a954:	e7f9      	b.n	1a94a <net_buf_frags_len+0x4>

0001a956 <attr_read_type_cb>:
{
   1a956:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1a958:	68d4      	ldr	r4, [r2, #12]
   1a95a:	7823      	ldrb	r3, [r4, #0]
   1a95c:	3102      	adds	r1, #2
   1a95e:	b913      	cbnz	r3, 1a966 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1a960:	7021      	strb	r1, [r4, #0]
	return true;
   1a962:	2001      	movs	r0, #1
}
   1a964:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1a966:	428b      	cmp	r3, r1
   1a968:	d0fb      	beq.n	1a962 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1a96a:	8a03      	ldrh	r3, [r0, #16]
   1a96c:	3b02      	subs	r3, #2
   1a96e:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   1a970:	2000      	movs	r0, #0
   1a972:	6110      	str	r0, [r2, #16]
		return false;
   1a974:	e7f6      	b.n	1a964 <attr_read_type_cb+0xe>

0001a976 <att_prepare_write_req>:
}
   1a976:	2006      	movs	r0, #6
   1a978:	4770      	bx	lr

0001a97a <att_get>:
{
   1a97a:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a97c:	7a83      	ldrb	r3, [r0, #10]
   1a97e:	2b07      	cmp	r3, #7
   1a980:	d001      	beq.n	1a986 <att_get+0xc>
		return NULL;
   1a982:	2000      	movs	r0, #0
}
   1a984:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a986:	2104      	movs	r1, #4
   1a988:	f7ff ffad 	bl	1a8e6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a98c:	2800      	cmp	r0, #0
   1a98e:	d0f8      	beq.n	1a982 <att_get+0x8>
   1a990:	f3bf 8f5b 	dmb	ish
   1a994:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1a996:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1a99a:	075b      	lsls	r3, r3, #29
   1a99c:	d5f1      	bpl.n	1a982 <att_get+0x8>
	return att_chan->att;
   1a99e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1a9a2:	e7ef      	b.n	1a984 <att_get+0xa>

0001a9a4 <write_cb>:
{
   1a9a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a9a6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1a9a8:	4601      	mov	r1, r0
{
   1a9aa:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1a9ac:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a9b0:	6820      	ldr	r0, [r4, #0]
   1a9b2:	f000 ff24 	bl	1b7fe <bt_gatt_check_perm>
   1a9b6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a9b8:	bb00      	cbnz	r0, 1a9fc <write_cb+0x58>
	if (!data->req) {
   1a9ba:	7a23      	ldrb	r3, [r4, #8]
   1a9bc:	b1b3      	cbz	r3, 1a9ec <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1a9be:	f1a3 0218 	sub.w	r2, r3, #24
   1a9c2:	4253      	negs	r3, r2
   1a9c4:	4153      	adcs	r3, r2
   1a9c6:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1a9c8:	9301      	str	r3, [sp, #4]
   1a9ca:	8a63      	ldrh	r3, [r4, #18]
   1a9cc:	9300      	str	r3, [sp, #0]
   1a9ce:	68ae      	ldr	r6, [r5, #8]
   1a9d0:	8a23      	ldrh	r3, [r4, #16]
   1a9d2:	68e2      	ldr	r2, [r4, #12]
   1a9d4:	6820      	ldr	r0, [r4, #0]
   1a9d6:	4629      	mov	r1, r5
   1a9d8:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1a9da:	2800      	cmp	r0, #0
   1a9dc:	db08      	blt.n	1a9f0 <write_cb+0x4c>
   1a9de:	8a23      	ldrh	r3, [r4, #16]
   1a9e0:	4298      	cmp	r0, r3
   1a9e2:	d10e      	bne.n	1aa02 <write_cb+0x5e>
	data->err = 0U;
   1a9e4:	2300      	movs	r3, #0
   1a9e6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1a9e8:	2001      	movs	r0, #1
   1a9ea:	e008      	b.n	1a9fe <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1a9ec:	2302      	movs	r3, #2
   1a9ee:	e7eb      	b.n	1a9c8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1a9f0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1a9f4:	d305      	bcc.n	1aa02 <write_cb+0x5e>
		return -err;
   1a9f6:	4240      	negs	r0, r0
   1a9f8:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1a9fa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a9fc:	2000      	movs	r0, #0
}
   1a9fe:	b002      	add	sp, #8
   1aa00:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1aa02:	200e      	movs	r0, #14
   1aa04:	e7f9      	b.n	1a9fa <write_cb+0x56>

0001aa06 <bt_gatt_foreach_attr>:
{
   1aa06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1aa08:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1aa0c:	2300      	movs	r3, #0
   1aa0e:	9300      	str	r3, [sp, #0]
   1aa10:	461a      	mov	r2, r3
   1aa12:	f7ec fd29 	bl	7468 <bt_gatt_foreach_attr_type>
}
   1aa16:	b005      	add	sp, #20
   1aa18:	f85d fb04 	ldr.w	pc, [sp], #4

0001aa1c <find_type_cb>:
{
   1aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa20:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1aa22:	6816      	ldr	r6, [r2, #0]
{
   1aa24:	4680      	mov	r8, r0
   1aa26:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aa28:	2500      	movs	r5, #0
   1aa2a:	f642 0301 	movw	r3, #10241	; 0x2801
   1aa2e:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1aa30:	f8d6 9004 	ldr.w	r9, [r6, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aa34:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aa38:	a90b      	add	r1, sp, #44	; 0x2c
{
   1aa3a:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aa3c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1aa40:	f7ff f90a 	bl	19c58 <bt_uuid_cmp>
   1aa44:	2800      	cmp	r0, #0
   1aa46:	f000 8089 	beq.w	1ab5c <find_type_cb+0x140>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1aa4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aa4e:	f8d8 0000 	ldr.w	r0, [r8]
   1aa52:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aa56:	a90b      	add	r1, sp, #44	; 0x2c
   1aa58:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1aa5c:	f7ff f8fc 	bl	19c58 <bt_uuid_cmp>
   1aa60:	b138      	cbz	r0, 1aa72 <find_type_cb+0x56>
		if (data->group &&
   1aa62:	68a3      	ldr	r3, [r4, #8]
   1aa64:	b11b      	cbz	r3, 1aa6e <find_type_cb+0x52>
   1aa66:	885a      	ldrh	r2, [r3, #2]
   1aa68:	42ba      	cmp	r2, r7
   1aa6a:	d200      	bcs.n	1aa6e <find_type_cb+0x52>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1aa6c:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1aa6e:	2001      	movs	r0, #1
   1aa70:	e00e      	b.n	1aa90 <find_type_cb+0x74>
	if (bt_att_mtu(chan) - net_buf_frags_len(data->buf) <
   1aa72:	6861      	ldr	r1, [r4, #4]
   1aa74:	4608      	mov	r0, r1
   1aa76:	f7ff ff66 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1aa7a:	8b72      	ldrh	r2, [r6, #26]
   1aa7c:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	if (bt_att_mtu(chan) - net_buf_frags_len(data->buf) <
   1aa7e:	429a      	cmp	r2, r3
   1aa80:	bf94      	ite	ls
   1aa82:	ebc0 0002 	rsbls	r0, r0, r2
   1aa86:	ebc0 0003 	rsbhi	r0, r0, r3
   1aa8a:	2803      	cmp	r0, #3
   1aa8c:	d803      	bhi.n	1aa96 <find_type_cb+0x7a>
		return BT_GATT_ITER_STOP;
   1aa8e:	2000      	movs	r0, #0
}
   1aa90:	b011      	add	sp, #68	; 0x44
   1aa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1aa96:	4608      	mov	r0, r1
   1aa98:	f001 f80b 	bl	1bab2 <net_buf_frag_last>
   1aa9c:	4605      	mov	r5, r0
	len = MIN(bt_att_mtu(chan) - net_buf_frags_len(data->buf),
   1aa9e:	6860      	ldr	r0, [r4, #4]
   1aaa0:	f7ff ff51 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1aaa4:	8b72      	ldrh	r2, [r6, #26]
   1aaa6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1aaa8:	f105 0b0c 	add.w	fp, r5, #12
	len = MIN(bt_att_mtu(chan) - net_buf_frags_len(data->buf),
   1aaac:	429a      	cmp	r2, r3
   1aaae:	bf94      	ite	ls
   1aab0:	ebc0 0a02 	rsbls	sl, r0, r2
   1aab4:	ebc0 0a03 	rsbhi	sl, r0, r3
   1aab8:	4658      	mov	r0, fp
   1aaba:	f001 f867 	bl	1bb8c <net_buf_simple_tailroom>
   1aabe:	4582      	cmp	sl, r0
   1aac0:	d244      	bcs.n	1ab4c <find_type_cb+0x130>
   1aac2:	6860      	ldr	r0, [r4, #4]
   1aac4:	f7ff ff3f 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1aac8:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   1aaca:	8b73      	ldrh	r3, [r6, #26]
	len = MIN(bt_att_mtu(chan) - net_buf_frags_len(data->buf),
   1aacc:	429a      	cmp	r2, r3
   1aace:	bf94      	ite	ls
   1aad0:	ebc0 0002 	rsbls	r0, r0, r2
   1aad4:	ebc0 0003 	rsbhi	r0, r0, r3
	if (!len) {
   1aad8:	b970      	cbnz	r0, 1aaf8 <find_type_cb+0xdc>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1aada:	6863      	ldr	r3, [r4, #4]
   1aadc:	7a98      	ldrb	r0, [r3, #10]
   1aade:	f7f9 fedd 	bl	1489c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1aae2:	2200      	movs	r2, #0
   1aae4:	2300      	movs	r3, #0
   1aae6:	f000 ffd7 	bl	1ba98 <net_buf_alloc_fixed>
		if (!frag) {
   1aaea:	4605      	mov	r5, r0
   1aaec:	2800      	cmp	r0, #0
   1aaee:	d0ce      	beq.n	1aa8e <find_type_cb+0x72>
		net_buf_frag_add(data->buf, frag);
   1aaf0:	4601      	mov	r1, r0
   1aaf2:	6860      	ldr	r0, [r4, #4]
   1aaf4:	f000 ffee 	bl	1bad4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1aaf8:	2300      	movs	r3, #0
   1aafa:	9300      	str	r3, [sp, #0]
   1aafc:	f8d8 6004 	ldr.w	r6, [r8, #4]
   1ab00:	2310      	movs	r3, #16
   1ab02:	aa02      	add	r2, sp, #8
   1ab04:	4641      	mov	r1, r8
   1ab06:	4648      	mov	r0, r9
   1ab08:	47b0      	blx	r6
	if (read < 0) {
   1ab0a:	1e06      	subs	r6, r0, #0
   1ab0c:	db26      	blt.n	1ab5c <find_type_cb+0x140>
	if (read != data->value_len) {
   1ab0e:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ab10:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1ab12:	42b2      	cmp	r2, r6
   1ab14:	d01e      	beq.n	1ab54 <find_type_cb+0x138>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ab16:	4601      	mov	r1, r0
   1ab18:	a80b      	add	r0, sp, #44	; 0x2c
   1ab1a:	f7ff f8cb 	bl	19cb4 <bt_uuid_create>
   1ab1e:	b1e8      	cbz	r0, 1ab5c <find_type_cb+0x140>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ab20:	b2f2      	uxtb	r2, r6
   1ab22:	a902      	add	r1, sp, #8
   1ab24:	a806      	add	r0, sp, #24
   1ab26:	f7ff f8c5 	bl	19cb4 <bt_uuid_create>
   1ab2a:	b1b8      	cbz	r0, 1ab5c <find_type_cb+0x140>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ab2c:	a906      	add	r1, sp, #24
   1ab2e:	a80b      	add	r0, sp, #44	; 0x2c
   1ab30:	f7ff f892 	bl	19c58 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ab34:	b990      	cbnz	r0, 1ab5c <find_type_cb+0x140>
	data->err = 0x00;
   1ab36:	2300      	movs	r3, #0
   1ab38:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1ab3a:	2104      	movs	r1, #4
   1ab3c:	f105 000c 	add.w	r0, r5, #12
   1ab40:	f000 ffe9 	bl	1bb16 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ab44:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ab46:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ab48:	68a3      	ldr	r3, [r4, #8]
   1ab4a:	e78f      	b.n	1aa6c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1ab4c:	4658      	mov	r0, fp
   1ab4e:	f001 f81d 	bl	1bb8c <net_buf_simple_tailroom>
   1ab52:	e7c1      	b.n	1aad8 <find_type_cb+0xbc>
	} else if (memcmp(data->value, uuid, read)) {
   1ab54:	a902      	add	r1, sp, #8
   1ab56:	f7ff f83d 	bl	19bd4 <memcmp>
   1ab5a:	e7eb      	b.n	1ab34 <find_type_cb+0x118>
	data->group = NULL;
   1ab5c:	2300      	movs	r3, #0
   1ab5e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1ab60:	e785      	b.n	1aa6e <find_type_cb+0x52>

0001ab62 <find_info_cb>:
{
   1ab62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ab64:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ab66:	6816      	ldr	r6, [r2, #0]
{
   1ab68:	4605      	mov	r5, r0
   1ab6a:	460f      	mov	r7, r1
   1ab6c:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ab6e:	b963      	cbnz	r3, 1ab8a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ab70:	6850      	ldr	r0, [r2, #4]
   1ab72:	2101      	movs	r1, #1
   1ab74:	300c      	adds	r0, #12
   1ab76:	f000 ffce 	bl	1bb16 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ab7a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ab7c:	682b      	ldr	r3, [r5, #0]
   1ab7e:	781b      	ldrb	r3, [r3, #0]
   1ab80:	2b00      	cmp	r3, #0
   1ab82:	bf14      	ite	ne
   1ab84:	2302      	movne	r3, #2
   1ab86:	2301      	moveq	r3, #1
   1ab88:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ab8a:	68a3      	ldr	r3, [r4, #8]
   1ab8c:	781b      	ldrb	r3, [r3, #0]
   1ab8e:	2b01      	cmp	r3, #1
   1ab90:	d003      	beq.n	1ab9a <find_info_cb+0x38>
   1ab92:	2b02      	cmp	r3, #2
   1ab94:	d01f      	beq.n	1abd6 <find_info_cb+0x74>
   1ab96:	2000      	movs	r0, #0
   1ab98:	e01c      	b.n	1abd4 <find_info_cb+0x72>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ab9a:	682b      	ldr	r3, [r5, #0]
   1ab9c:	781b      	ldrb	r3, [r3, #0]
   1ab9e:	2b00      	cmp	r3, #0
   1aba0:	d1f9      	bne.n	1ab96 <find_info_cb+0x34>
   1aba2:	6860      	ldr	r0, [r4, #4]
   1aba4:	2104      	movs	r1, #4
   1aba6:	300c      	adds	r0, #12
   1aba8:	f000 ffb5 	bl	1bb16 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1abac:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1abae:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1abb0:	682a      	ldr	r2, [r5, #0]
   1abb2:	68e3      	ldr	r3, [r4, #12]
   1abb4:	8852      	ldrh	r2, [r2, #2]
   1abb6:	805a      	strh	r2, [r3, #2]
		if (bt_att_mtu(chan) - data->buf->len >
   1abb8:	6861      	ldr	r1, [r4, #4]
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1abba:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   1abbc:	8b73      	ldrh	r3, [r6, #26]
		if (bt_att_mtu(chan) - data->buf->len >
   1abbe:	8a08      	ldrh	r0, [r1, #16]
   1abc0:	429a      	cmp	r2, r3
   1abc2:	bf94      	ite	ls
   1abc4:	ebc0 0002 	rsbls	r0, r0, r2
   1abc8:	ebc0 0003 	rsbhi	r0, r0, r3
   1abcc:	2804      	cmp	r0, #4
		if (bt_att_mtu(chan) - data->buf->len >
   1abce:	bf94      	ite	ls
   1abd0:	2000      	movls	r0, #0
   1abd2:	2001      	movhi	r0, #1
}
   1abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1abd6:	682b      	ldr	r3, [r5, #0]
   1abd8:	781b      	ldrb	r3, [r3, #0]
   1abda:	2b02      	cmp	r3, #2
   1abdc:	d1db      	bne.n	1ab96 <find_info_cb+0x34>
   1abde:	6860      	ldr	r0, [r4, #4]
   1abe0:	2112      	movs	r1, #18
   1abe2:	300c      	adds	r0, #12
   1abe4:	f000 ff97 	bl	1bb16 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1abe8:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1abea:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1abec:	6829      	ldr	r1, [r5, #0]
   1abee:	68e0      	ldr	r0, [r4, #12]
   1abf0:	2210      	movs	r2, #16
   1abf2:	3101      	adds	r1, #1
   1abf4:	3002      	adds	r0, #2
   1abf6:	f7fe fffd 	bl	19bf4 <memcpy>
		if (bt_att_mtu(chan) - data->buf->len >
   1abfa:	6861      	ldr	r1, [r4, #4]
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1abfc:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   1abfe:	8b73      	ldrh	r3, [r6, #26]
		if (bt_att_mtu(chan) - data->buf->len >
   1ac00:	8a08      	ldrh	r0, [r1, #16]
   1ac02:	429a      	cmp	r2, r3
   1ac04:	bf94      	ite	ls
   1ac06:	ebc0 0002 	rsbls	r0, r0, r2
   1ac0a:	ebc0 0003 	rsbhi	r0, r0, r3
   1ac0e:	2812      	cmp	r0, #18
   1ac10:	e7dd      	b.n	1abce <find_info_cb+0x6c>

0001ac12 <att_chan_mtu_updated>:
{
   1ac12:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1ac14:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1ac16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac18:	b352      	cbz	r2, 1ac70 <att_chan_mtu_updated+0x5e>
	return node->next;
   1ac1a:	6813      	ldr	r3, [r2, #0]
   1ac1c:	b103      	cbz	r3, 1ac20 <att_chan_mtu_updated+0xe>
   1ac1e:	3b88      	subs	r3, #136	; 0x88
   1ac20:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   1ac24:	2200      	movs	r2, #0
   1ac26:	4611      	mov	r1, r2
   1ac28:	e000      	b.n	1ac2c <att_chan_mtu_updated+0x1a>
   1ac2a:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   1ac2c:	4284      	cmp	r4, r0
   1ac2e:	d007      	beq.n	1ac40 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ac30:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ac32:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ac34:	42b1      	cmp	r1, r6
   1ac36:	bf38      	it	cc
   1ac38:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ac3a:	42a2      	cmp	r2, r4
   1ac3c:	bf38      	it	cc
   1ac3e:	4622      	movcc	r2, r4
   1ac40:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac42:	b12b      	cbz	r3, 1ac50 <att_chan_mtu_updated+0x3e>
   1ac44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1ac48:	2b00      	cmp	r3, #0
   1ac4a:	d1ee      	bne.n	1ac2a <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1ac4c:	4284      	cmp	r4, r0
   1ac4e:	d1ef      	bne.n	1ac30 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ac50:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1ac52:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ac54:	428b      	cmp	r3, r1
   1ac56:	d801      	bhi.n	1ac5c <att_chan_mtu_updated+0x4a>
   1ac58:	4290      	cmp	r0, r2
   1ac5a:	d90b      	bls.n	1ac74 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ac5c:	4282      	cmp	r2, r0
   1ac5e:	bf38      	it	cc
   1ac60:	4602      	movcc	r2, r0
   1ac62:	4299      	cmp	r1, r3
   1ac64:	6828      	ldr	r0, [r5, #0]
   1ac66:	bf38      	it	cc
   1ac68:	4619      	movcc	r1, r3
}
   1ac6a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ac6c:	f7ec bf66 	b.w	7b3c <bt_gatt_att_max_mtu_changed>
   1ac70:	4611      	mov	r1, r2
   1ac72:	e7ed      	b.n	1ac50 <att_chan_mtu_updated+0x3e>
}
   1ac74:	bc70      	pop	{r4, r5, r6}
   1ac76:	4770      	bx	lr

0001ac78 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ac78:	68d0      	ldr	r0, [r2, #12]
   1ac7a:	7803      	ldrb	r3, [r0, #0]
   1ac7c:	3104      	adds	r1, #4
   1ac7e:	b913      	cbnz	r3, 1ac86 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ac80:	7001      	strb	r1, [r0, #0]
	return true;
   1ac82:	2001      	movs	r0, #1
   1ac84:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ac86:	428b      	cmp	r3, r1
   1ac88:	d0fb      	beq.n	1ac82 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1ac8a:	6891      	ldr	r1, [r2, #8]
   1ac8c:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   1ac8e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1ac90:	3b04      	subs	r3, #4
   1ac92:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   1ac94:	6110      	str	r0, [r2, #16]
}
   1ac96:	4770      	bx	lr

0001ac98 <att_chan_read>:
{
   1ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac9c:	4604      	mov	r4, r0
   1ac9e:	b085      	sub	sp, #20
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   1aca0:	4610      	mov	r0, r2
{
   1aca2:	4690      	mov	r8, r2
   1aca4:	4699      	mov	r9, r3
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   1aca6:	f7ff fe4e 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1acaa:	8b63      	ldrh	r3, [r4, #26]
   1acac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   1acae:	4293      	cmp	r3, r2
   1acb0:	bf28      	it	cs
   1acb2:	4613      	movcs	r3, r2
   1acb4:	4283      	cmp	r3, r0
{
   1acb6:	468b      	mov	fp, r1
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   1acb8:	f240 8093 	bls.w	1ade2 <att_chan_read+0x14a>
	struct bt_conn *conn = chan->chan.chan.conn;
   1acbc:	6863      	ldr	r3, [r4, #4]
   1acbe:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1acc0:	4640      	mov	r0, r8
   1acc2:	f000 fef6 	bl	1bab2 <net_buf_frag_last>
	size_t len, total = 0;
   1acc6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1acca:	4606      	mov	r6, r0
		len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   1accc:	4640      	mov	r0, r8
   1acce:	f7ff fe3a 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1acd2:	8b62      	ldrh	r2, [r4, #26]
   1acd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1acd6:	f106 070c 	add.w	r7, r6, #12
		len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   1acda:	429a      	cmp	r2, r3
   1acdc:	bf94      	ite	ls
   1acde:	ebc0 0502 	rsbls	r5, r0, r2
   1ace2:	ebc0 0503 	rsbhi	r5, r0, r3
   1ace6:	4638      	mov	r0, r7
   1ace8:	f000 ff50 	bl	1bb8c <net_buf_simple_tailroom>
   1acec:	4285      	cmp	r5, r0
   1acee:	d217      	bcs.n	1ad20 <att_chan_read+0x88>
   1acf0:	4640      	mov	r0, r8
   1acf2:	f7ff fe28 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1acf6:	8b62      	ldrh	r2, [r4, #26]
   1acf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   1acfa:	429a      	cmp	r2, r3
   1acfc:	bf94      	ite	ls
   1acfe:	ebc0 0502 	rsbls	r5, r0, r2
   1ad02:	ebc0 0503 	rsbhi	r5, r0, r3
		if (!len) {
   1ad06:	bb8d      	cbnz	r5, 1ad6c <att_chan_read+0xd4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1ad08:	f898 000a 	ldrb.w	r0, [r8, #10]
   1ad0c:	f7f9 fdc6 	bl	1489c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ad10:	2200      	movs	r2, #0
   1ad12:	2300      	movs	r3, #0
   1ad14:	f000 fec0 	bl	1ba98 <net_buf_alloc_fixed>
			if (!frag) {
   1ad18:	4606      	mov	r6, r0
   1ad1a:	b930      	cbnz	r0, 1ad2a <att_chan_read+0x92>
	return total;
   1ad1c:	4657      	mov	r7, sl
   1ad1e:	e036      	b.n	1ad8e <att_chan_read+0xf6>
	return net_buf_simple_tailroom(&buf->b);
   1ad20:	4638      	mov	r0, r7
   1ad22:	f000 ff33 	bl	1bb8c <net_buf_simple_tailroom>
   1ad26:	4605      	mov	r5, r0
   1ad28:	e7ed      	b.n	1ad06 <att_chan_read+0x6e>
			net_buf_frag_add(buf, frag);
   1ad2a:	4601      	mov	r1, r0
   1ad2c:	4640      	mov	r0, r8
   1ad2e:	f000 fed1 	bl	1bad4 <net_buf_frag_add>
			len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   1ad32:	4640      	mov	r0, r8
   1ad34:	f7ff fe07 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1ad38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1ad3a:	8b63      	ldrh	r3, [r4, #26]
   1ad3c:	f106 070c 	add.w	r7, r6, #12
			len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   1ad40:	429a      	cmp	r2, r3
   1ad42:	bf94      	ite	ls
   1ad44:	ebc0 0502 	rsbls	r5, r0, r2
   1ad48:	ebc0 0503 	rsbhi	r5, r0, r3
   1ad4c:	4638      	mov	r0, r7
   1ad4e:	f000 ff1d 	bl	1bb8c <net_buf_simple_tailroom>
   1ad52:	4285      	cmp	r5, r0
   1ad54:	d21f      	bcs.n	1ad96 <att_chan_read+0xfe>
   1ad56:	4640      	mov	r0, r8
   1ad58:	f7ff fdf5 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1ad5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   1ad5e:	8b63      	ldrh	r3, [r4, #26]
			len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   1ad60:	429a      	cmp	r2, r3
   1ad62:	bf94      	ite	ls
   1ad64:	ebc0 0502 	rsbls	r5, r0, r2
   1ad68:	ebc0 0503 	rsbhi	r5, r0, r3
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1ad6c:	68f1      	ldr	r1, [r6, #12]
   1ad6e:	8a32      	ldrh	r2, [r6, #16]
   1ad70:	f8cd 9000 	str.w	r9, [sp]
   1ad74:	f8db 7004 	ldr.w	r7, [fp, #4]
   1ad78:	9803      	ldr	r0, [sp, #12]
   1ad7a:	440a      	add	r2, r1
   1ad7c:	b2ab      	uxth	r3, r5
   1ad7e:	4659      	mov	r1, fp
   1ad80:	47b8      	blx	r7
		if (read < 0) {
   1ad82:	1e07      	subs	r7, r0, #0
   1ad84:	da0c      	bge.n	1ada0 <att_chan_read+0x108>
				return total;
   1ad86:	f1ba 0f00 	cmp.w	sl, #0
   1ad8a:	bf18      	it	ne
   1ad8c:	4657      	movne	r7, sl
}
   1ad8e:	4638      	mov	r0, r7
   1ad90:	b005      	add	sp, #20
   1ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad96:	4638      	mov	r0, r7
   1ad98:	f000 fef8 	bl	1bb8c <net_buf_simple_tailroom>
   1ad9c:	4605      	mov	r5, r0
   1ad9e:	e7e5      	b.n	1ad6c <att_chan_read+0xd4>
		if (cb && !cb(frag, read, user_data)) {
   1ada0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ada2:	b9b3      	cbnz	r3, 1add2 <att_chan_read+0x13a>
	return net_buf_simple_add(&buf->b, len);
   1ada4:	4639      	mov	r1, r7
   1ada6:	f106 000c 	add.w	r0, r6, #12
   1adaa:	f000 feb4 	bl	1bb16 <net_buf_simple_add>
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   1adae:	4640      	mov	r0, r8
   1adb0:	f7ff fdc9 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1adb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1adb6:	8b62      	ldrh	r2, [r4, #26]
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   1adb8:	4293      	cmp	r3, r2
   1adba:	bf28      	it	cs
   1adbc:	4613      	movcs	r3, r2
		offset += read;
   1adbe:	44b9      	add	r9, r7
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   1adc0:	4283      	cmp	r3, r0
		total += read;
   1adc2:	44ba      	add	sl, r7
		offset += read;
   1adc4:	fa1f f989 	uxth.w	r9, r9
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   1adc8:	d9a8      	bls.n	1ad1c <att_chan_read+0x84>
   1adca:	42af      	cmp	r7, r5
   1adcc:	f43f af7e 	beq.w	1accc <att_chan_read+0x34>
   1add0:	e7a4      	b.n	1ad1c <att_chan_read+0x84>
		if (cb && !cb(frag, read, user_data)) {
   1add2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1add4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1add6:	4639      	mov	r1, r7
   1add8:	4630      	mov	r0, r6
   1adda:	4798      	blx	r3
   1addc:	2800      	cmp	r0, #0
   1adde:	d1e1      	bne.n	1ada4 <att_chan_read+0x10c>
   1ade0:	e79c      	b.n	1ad1c <att_chan_read+0x84>
		return 0;
   1ade2:	2700      	movs	r7, #0
   1ade4:	e7d3      	b.n	1ad8e <att_chan_read+0xf6>

0001ade6 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   1ade6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ade8:	2200      	movs	r2, #0
   1adea:	b903      	cbnz	r3, 1adee <sys_slist_find_and_remove.isra.0+0x8>
   1adec:	4770      	bx	lr
   1adee:	428b      	cmp	r3, r1
   1adf0:	d10f      	bne.n	1ae12 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1adf2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1adf4:	b93a      	cbnz	r2, 1ae06 <sys_slist_find_and_remove.isra.0+0x20>
   1adf6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1adf8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1adfa:	4291      	cmp	r1, r2
   1adfc:	d100      	bne.n	1ae00 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1adfe:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1ae00:	2300      	movs	r3, #0
   1ae02:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae04:	4770      	bx	lr
	parent->next = child;
   1ae06:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae08:	6843      	ldr	r3, [r0, #4]
   1ae0a:	4299      	cmp	r1, r3
	list->tail = node;
   1ae0c:	bf08      	it	eq
   1ae0e:	6042      	streq	r2, [r0, #4]
}
   1ae10:	e7f6      	b.n	1ae00 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1ae12:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ae14:	681b      	ldr	r3, [r3, #0]
   1ae16:	e7e8      	b.n	1adea <sys_slist_find_and_remove.isra.0+0x4>

0001ae18 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ae18:	2301      	movs	r3, #1
   1ae1a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ae1c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ae1e:	f3bf 8f5b 	dmb	ish
   1ae22:	e850 2f00 	ldrex	r2, [r0]
   1ae26:	401a      	ands	r2, r3
   1ae28:	e840 2100 	strex	r1, r2, [r0]
   1ae2c:	2900      	cmp	r1, #0
   1ae2e:	d1f8      	bne.n	1ae22 <atomic_clear_bit+0xa>
   1ae30:	f3bf 8f5b 	dmb	ish
}
   1ae34:	4770      	bx	lr

0001ae36 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1ae36:	2006      	movs	r0, #6
   1ae38:	4770      	bx	lr

0001ae3a <atomic_test_and_set_bit>:
{
   1ae3a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ae3c:	2301      	movs	r3, #1
   1ae3e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ae42:	f3bf 8f5b 	dmb	ish
   1ae46:	e850 3f00 	ldrex	r3, [r0]
   1ae4a:	ea43 0201 	orr.w	r2, r3, r1
   1ae4e:	e840 2400 	strex	r4, r2, [r0]
   1ae52:	2c00      	cmp	r4, #0
   1ae54:	d1f7      	bne.n	1ae46 <atomic_test_and_set_bit+0xc>
   1ae56:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1ae5a:	4219      	tst	r1, r3
}
   1ae5c:	bf14      	ite	ne
   1ae5e:	2001      	movne	r0, #1
   1ae60:	2000      	moveq	r0, #0
   1ae62:	bd10      	pop	{r4, pc}

0001ae64 <read_cb>:
{
   1ae64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   1ae66:	6816      	ldr	r6, [r2, #0]
{
   1ae68:	4605      	mov	r5, r0
	data->err = 0x00;
   1ae6a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1ae6c:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   1ae6e:	7313      	strb	r3, [r2, #12]
{
   1ae70:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ae72:	4629      	mov	r1, r5
   1ae74:	2295      	movs	r2, #149	; 0x95
   1ae76:	f000 fcc2 	bl	1b7fe <bt_gatt_check_perm>
   1ae7a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1ae7c:	b980      	cbnz	r0, 1aea0 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ae7e:	e9cd 0000 	strd	r0, r0, [sp]
   1ae82:	4629      	mov	r1, r5
   1ae84:	88a3      	ldrh	r3, [r4, #4]
   1ae86:	68a2      	ldr	r2, [r4, #8]
   1ae88:	4630      	mov	r0, r6
   1ae8a:	f7ff ff05 	bl	1ac98 <att_chan_read>
	if (ret < 0) {
   1ae8e:	2800      	cmp	r0, #0
   1ae90:	da09      	bge.n	1aea6 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1ae92:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1ae96:	bf26      	itte	cs
   1ae98:	4240      	negcs	r0, r0
   1ae9a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1ae9c:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   1ae9e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1aea0:	2000      	movs	r0, #0
}
   1aea2:	b002      	add	sp, #8
   1aea4:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1aea6:	2001      	movs	r0, #1
   1aea8:	e7fb      	b.n	1aea2 <read_cb+0x3e>

0001aeaa <read_vl_cb>:
{
   1aeaa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1aeae:	6816      	ldr	r6, [r2, #0]
{
   1aeb0:	4607      	mov	r7, r0
	data->err = 0x00;
   1aeb2:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1aeb4:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   1aeb6:	7313      	strb	r3, [r2, #12]
{
   1aeb8:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1aeba:	4639      	mov	r1, r7
   1aebc:	2295      	movs	r2, #149	; 0x95
   1aebe:	f000 fc9e 	bl	1b7fe <bt_gatt_check_perm>
   1aec2:	4605      	mov	r5, r0
   1aec4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1aec6:	bb08      	cbnz	r0, 1af0c <read_vl_cb+0x62>
	if (bt_att_mtu(chan) - data->buf->len < 2) {
   1aec8:	68a0      	ldr	r0, [r4, #8]
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1aeca:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   1aecc:	8b72      	ldrh	r2, [r6, #26]
	if (bt_att_mtu(chan) - data->buf->len < 2) {
   1aece:	8a03      	ldrh	r3, [r0, #16]
   1aed0:	4291      	cmp	r1, r2
   1aed2:	bf94      	ite	ls
   1aed4:	ebc3 0301 	rsbls	r3, r3, r1
   1aed8:	ebc3 0302 	rsbhi	r3, r3, r2
   1aedc:	2b01      	cmp	r3, #1
   1aede:	dd15      	ble.n	1af0c <read_vl_cb+0x62>
   1aee0:	2102      	movs	r1, #2
   1aee2:	300c      	adds	r0, #12
   1aee4:	f000 fe17 	bl	1bb16 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1aee8:	e9cd 5500 	strd	r5, r5, [sp]
   1aeec:	4680      	mov	r8, r0
   1aeee:	88a3      	ldrh	r3, [r4, #4]
   1aef0:	68a2      	ldr	r2, [r4, #8]
   1aef2:	4639      	mov	r1, r7
   1aef4:	4630      	mov	r0, r6
   1aef6:	f7ff fecf 	bl	1ac98 <att_chan_read>
	if (read < 0) {
   1aefa:	1e03      	subs	r3, r0, #0
   1aefc:	da0a      	bge.n	1af14 <read_vl_cb+0x6a>
	if (err < 0 && err >= -0xff) {
   1aefe:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1af02:	bf26      	itte	cs
   1af04:	425b      	negcs	r3, r3
   1af06:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1af08:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   1af0a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1af0c:	2000      	movs	r0, #0
}
   1af0e:	b002      	add	sp, #8
   1af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   1af14:	f8a8 3000 	strh.w	r3, [r8]
	return BT_GATT_ITER_CONTINUE;
   1af18:	2001      	movs	r0, #1
   1af1a:	e7f8      	b.n	1af0e <read_vl_cb+0x64>

0001af1c <chan_req_send>:
{
   1af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af1e:	4604      	mov	r4, r0
	if (bt_att_mtu(chan) < net_buf_frags_len(req->buf)) {
   1af20:	6888      	ldr	r0, [r1, #8]
   1af22:	f7ff fd10 	bl	1a946 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1af26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1af28:	8b62      	ldrh	r2, [r4, #26]
	if (bt_att_mtu(chan) < net_buf_frags_len(req->buf)) {
   1af2a:	4293      	cmp	r3, r2
   1af2c:	bf28      	it	cs
   1af2e:	4613      	movcs	r3, r2
   1af30:	4283      	cmp	r3, r0
{
   1af32:	460d      	mov	r5, r1
	if (bt_att_mtu(chan) < net_buf_frags_len(req->buf)) {
   1af34:	d30b      	bcc.n	1af4e <chan_req_send+0x32>
	chan->req = req;
   1af36:	63a1      	str	r1, [r4, #56]	; 0x38
	buf = req->buf;
   1af38:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   1af3a:	2600      	movs	r6, #0
   1af3c:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1af3e:	4620      	mov	r0, r4
   1af40:	4639      	mov	r1, r7
   1af42:	f7eb fc13 	bl	676c <chan_send>
	if (err) {
   1af46:	b108      	cbz	r0, 1af4c <chan_req_send+0x30>
		req->buf = buf;
   1af48:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   1af4a:	63a6      	str	r6, [r4, #56]	; 0x38
}
   1af4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1af4e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1af52:	e7fb      	b.n	1af4c <chan_req_send+0x30>

0001af54 <bt_att_status>:
{
   1af54:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1af56:	f3bf 8f5b 	dmb	ish
   1af5a:	680b      	ldr	r3, [r1, #0]
   1af5c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1af60:	07db      	lsls	r3, r3, #31
{
   1af62:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1af64:	d517      	bpl.n	1af96 <bt_att_status+0x42>
	if (!chan->att) {
   1af66:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1af6a:	b1a0      	cbz	r0, 1af96 <bt_att_status+0x42>
	if (chan->req) {
   1af6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1af6e:	b993      	cbnz	r3, 1af96 <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   1af70:	3004      	adds	r0, #4
   1af72:	f7ff fcde 	bl	1a932 <sys_slist_get>
	if (!node) {
   1af76:	4604      	mov	r4, r0
   1af78:	b168      	cbz	r0, 1af96 <bt_att_status+0x42>
	return chan_req_send(chan, req);
   1af7a:	4601      	mov	r1, r0
   1af7c:	1f28      	subs	r0, r5, #4
   1af7e:	f7ff ffcd 	bl	1af1c <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1af82:	2800      	cmp	r0, #0
   1af84:	da07      	bge.n	1af96 <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   1af86:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1af8a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1af8c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1af8e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1af90:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1af92:	b902      	cbnz	r2, 1af96 <bt_att_status+0x42>
	list->tail = node;
   1af94:	609c      	str	r4, [r3, #8]
}
   1af96:	bd38      	pop	{r3, r4, r5, pc}

0001af98 <att_req_send_process>:
{
   1af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1af9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1af9e:	4607      	mov	r7, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1afa0:	b33c      	cbz	r4, 1aff2 <att_req_send_process+0x5a>
	return node->next;
   1afa2:	f854 6988 	ldr.w	r6, [r4], #-136
   1afa6:	b106      	cbz	r6, 1afaa <att_req_send_process+0x12>
   1afa8:	3e88      	subs	r6, #136	; 0x88
{
   1afaa:	2300      	movs	r3, #0
   1afac:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   1afae:	f107 0804 	add.w	r8, r7, #4
   1afb2:	e001      	b.n	1afb8 <att_req_send_process+0x20>
{
   1afb4:	4634      	mov	r4, r6
   1afb6:	4616      	mov	r6, r2
		if (chan->req) {
   1afb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1afba:	b99a      	cbnz	r2, 1afe4 <att_req_send_process+0x4c>
		if (!req && prev && (bt_att_is_enhanced(chan) == bt_att_is_enhanced(prev))) {
   1afbc:	b905      	cbnz	r5, 1afc0 <att_req_send_process+0x28>
   1afbe:	b98b      	cbnz	r3, 1afe4 <att_req_send_process+0x4c>
	sys_snode_t *node = sys_slist_get(reqs);
   1afc0:	4640      	mov	r0, r8
   1afc2:	f7ff fcb6 	bl	1a932 <sys_slist_get>
	if (node) {
   1afc6:	4605      	mov	r5, r0
   1afc8:	b158      	cbz	r0, 1afe2 <att_req_send_process+0x4a>
	return chan_req_send(chan, req);
   1afca:	4601      	mov	r1, r0
   1afcc:	4620      	mov	r0, r4
   1afce:	f7ff ffa5 	bl	1af1c <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1afd2:	2800      	cmp	r0, #0
   1afd4:	da0d      	bge.n	1aff2 <att_req_send_process+0x5a>
	return list->head;
   1afd6:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   1afd8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1afda:	68bb      	ldr	r3, [r7, #8]
	list->head = node;
   1afdc:	607d      	str	r5, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   1afde:	b903      	cbnz	r3, 1afe2 <att_req_send_process+0x4a>
	list->tail = node;
   1afe0:	60bd      	str	r5, [r7, #8]
   1afe2:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1afe4:	b12e      	cbz	r6, 1aff2 <att_req_send_process+0x5a>
	return node->next;
   1afe6:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   1afea:	2a00      	cmp	r2, #0
   1afec:	d0e2      	beq.n	1afb4 <att_req_send_process+0x1c>
   1afee:	3a88      	subs	r2, #136	; 0x88
   1aff0:	e7e0      	b.n	1afb4 <att_req_send_process+0x1c>
}
   1aff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aff6 <process_queue>:
{
   1aff6:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1aff8:	2200      	movs	r2, #0
{
   1affa:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1affc:	2300      	movs	r3, #0
   1affe:	4608      	mov	r0, r1
{
   1b000:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1b002:	f000 fd4e 	bl	1baa2 <net_buf_get>
	if (buf) {
   1b006:	4605      	mov	r5, r0
   1b008:	b158      	cbz	r0, 1b022 <process_queue+0x2c>
	return chan_send(chan, buf);
   1b00a:	4601      	mov	r1, r0
   1b00c:	4620      	mov	r0, r4
   1b00e:	f7eb fbad 	bl	676c <chan_send>
		if (err) {
   1b012:	4604      	mov	r4, r0
   1b014:	b118      	cbz	r0, 1b01e <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1b016:	4629      	mov	r1, r5
   1b018:	4630      	mov	r0, r6
   1b01a:	f002 f824 	bl	1d066 <k_queue_prepend>
}
   1b01e:	4620      	mov	r0, r4
   1b020:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b022:	f06f 0401 	mvn.w	r4, #1
   1b026:	e7fa      	b.n	1b01e <process_queue+0x28>

0001b028 <bt_att_sent>:
{
   1b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   1b02a:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   1b02e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b030:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   1b032:	2104      	movs	r1, #4
   1b034:	3030      	adds	r0, #48	; 0x30
   1b036:	f7ff feef 	bl	1ae18 <atomic_clear_bit>
	if (!att) {
   1b03a:	b304      	cbz	r4, 1b07e <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b03c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1b03e:	b98b      	cbnz	r3, 1b064 <bt_att_sent+0x3c>
   1b040:	6863      	ldr	r3, [r4, #4]
   1b042:	b17b      	cbz	r3, 1b064 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b044:	1d20      	adds	r0, r4, #4
   1b046:	f7ff fc74 	bl	1a932 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b04a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b04c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b04e:	4638      	mov	r0, r7
   1b050:	f7ff ff64 	bl	1af1c <chan_req_send>
   1b054:	2800      	cmp	r0, #0
   1b056:	da12      	bge.n	1b07e <bt_att_sent+0x56>
	return list->head;
   1b058:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1b05a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b05c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1b05e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b060:	b903      	cbnz	r3, 1b064 <bt_att_sent+0x3c>
	list->tail = node;
   1b062:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b064:	f105 0138 	add.w	r1, r5, #56	; 0x38
   1b068:	4638      	mov	r0, r7
   1b06a:	f7ff ffc4 	bl	1aff6 <process_queue>
	if (!err) {
   1b06e:	b130      	cbz	r0, 1b07e <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   1b070:	f104 010c 	add.w	r1, r4, #12
   1b074:	4638      	mov	r0, r7
}
   1b076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1b07a:	f7ff bfbc 	b.w	1aff6 <process_queue>
}
   1b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b080 <bt_att_chan_send_rsp>:
{
   1b080:	b538      	push	{r3, r4, r5, lr}
   1b082:	4604      	mov	r4, r0
   1b084:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1b086:	f7eb fb71 	bl	676c <chan_send>
	if (err) {
   1b08a:	b130      	cbz	r0, 1b09a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1b08c:	4629      	mov	r1, r5
   1b08e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   1b092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1b096:	f000 bd06 	b.w	1baa6 <net_buf_put>
}
   1b09a:	bd38      	pop	{r3, r4, r5, pc}

0001b09c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0a0:	4604      	mov	r4, r0
   1b0a2:	4688      	mov	r8, r1
   1b0a4:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b0a6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b0a8:	8b40      	ldrh	r0, [r0, #26]
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b0aa:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b0ac:	2201      	movs	r2, #1
   1b0ae:	2304      	movs	r3, #4
   1b0b0:	f7eb fa66 	bl	6580 <bt_att_chan_create_pdu.isra.0>
	if (!buf) {
   1b0b4:	4605      	mov	r5, r0
   1b0b6:	b170      	cbz	r0, 1b0d6 <send_err_rsp.part.0+0x3a>
   1b0b8:	2104      	movs	r1, #4
   1b0ba:	300c      	adds	r0, #12
   1b0bc:	f000 fd2b 	bl	1bb16 <net_buf_simple_add>
	rsp->request = req;
   1b0c0:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1b0c4:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1b0c8:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1b0ca:	4629      	mov	r1, r5
   1b0cc:	4620      	mov	r0, r4
}
   1b0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1b0d2:	f7ff bfd5 	b.w	1b080 <bt_att_chan_send_rsp>
}
   1b0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b0da <att_write_req>:
{
   1b0da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b0dc:	460c      	mov	r4, r1
   1b0de:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b0e0:	f101 000c 	add.w	r0, r1, #12
   1b0e4:	f000 fd46 	bl	1bb74 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b0e8:	8a22      	ldrh	r2, [r4, #16]
   1b0ea:	9201      	str	r2, [sp, #4]
   1b0ec:	68e2      	ldr	r2, [r4, #12]
   1b0ee:	9200      	str	r2, [sp, #0]
   1b0f0:	4603      	mov	r3, r0
   1b0f2:	2213      	movs	r2, #19
   1b0f4:	2112      	movs	r1, #18
   1b0f6:	4628      	mov	r0, r5
   1b0f8:	f7eb fbf6 	bl	68e8 <att_write_rsp.constprop.0>
}
   1b0fc:	b003      	add	sp, #12
   1b0fe:	bd30      	pop	{r4, r5, pc}

0001b100 <att_write_cmd>:
{
   1b100:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b102:	460c      	mov	r4, r1
   1b104:	4605      	mov	r5, r0
   1b106:	f101 000c 	add.w	r0, r1, #12
   1b10a:	f000 fd33 	bl	1bb74 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b10e:	8a22      	ldrh	r2, [r4, #16]
   1b110:	9201      	str	r2, [sp, #4]
   1b112:	68e2      	ldr	r2, [r4, #12]
   1b114:	9200      	str	r2, [sp, #0]
   1b116:	2200      	movs	r2, #0
   1b118:	4603      	mov	r3, r0
   1b11a:	4611      	mov	r1, r2
   1b11c:	4628      	mov	r0, r5
   1b11e:	f7eb fbe3 	bl	68e8 <att_write_rsp.constprop.0>
}
   1b122:	b003      	add	sp, #12
   1b124:	bd30      	pop	{r4, r5, pc}

0001b126 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1b126:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1b128:	6883      	ldr	r3, [r0, #8]
   1b12a:	699b      	ldr	r3, [r3, #24]
   1b12c:	b10b      	cbz	r3, 1b132 <att_sent+0xc>
		chan->ops->sent(chan);
   1b12e:	3004      	adds	r0, #4
   1b130:	4718      	bx	r3
}
   1b132:	4770      	bx	lr

0001b134 <att_unknown>:
{
   1b134:	b510      	push	{r4, lr}
   1b136:	460c      	mov	r4, r1
	if (!err) {
   1b138:	b90a      	cbnz	r2, 1b13e <att_unknown+0xa>
		att_sent(conn, user_data);
   1b13a:	f7ff fff4 	bl	1b126 <att_sent>
	tx_meta_data_free(user_data);
   1b13e:	4620      	mov	r0, r4
}
   1b140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1b144:	f7eb b992 	b.w	646c <tx_meta_data_free>

0001b148 <att_tx_complete>:
{
   1b148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b14c:	4606      	mov	r6, r0
   1b14e:	460d      	mov	r5, r1
	if (!err) {
   1b150:	4614      	mov	r4, r2
   1b152:	b122      	cbz	r2, 1b15e <att_tx_complete+0x16>
}
   1b154:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1b158:	4608      	mov	r0, r1
   1b15a:	f7eb b987 	b.w	646c <tx_meta_data_free>
		att_sent(conn, user_data);
   1b15e:	f7ff ffe2 	bl	1b126 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1b162:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   1b164:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1b168:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1b16c:	4628      	mov	r0, r5
   1b16e:	f7eb f97d 	bl	646c <tx_meta_data_free>
	if (!err && func) {
   1b172:	b92f      	cbnz	r7, 1b180 <att_tx_complete+0x38>
}
   1b174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1b178:	4649      	mov	r1, r9
   1b17a:	4630      	mov	r0, r6
   1b17c:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1b17e:	3401      	adds	r4, #1
   1b180:	b2a3      	uxth	r3, r4
   1b182:	4543      	cmp	r3, r8
   1b184:	d3f8      	bcc.n	1b178 <att_tx_complete+0x30>
   1b186:	e7f5      	b.n	1b174 <att_tx_complete+0x2c>

0001b188 <att_req_sent>:
{
   1b188:	b510      	push	{r4, lr}
   1b18a:	460c      	mov	r4, r1
	if (!err) {
   1b18c:	b90a      	cbnz	r2, 1b192 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1b18e:	f7ff ffca 	bl	1b126 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1b192:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1b194:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1b196:	b12b      	cbz	r3, 1b1a4 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1b198:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b19c:	2300      	movs	r3, #0
   1b19e:	3058      	adds	r0, #88	; 0x58
   1b1a0:	f7fd f874 	bl	1828c <k_work_reschedule>
	tx_meta_data_free(user_data);
   1b1a4:	4620      	mov	r0, r4
}
   1b1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1b1aa:	f7eb b95f 	b.w	646c <tx_meta_data_free>

0001b1ae <att_cfm_sent>:
{
   1b1ae:	b510      	push	{r4, lr}
   1b1b0:	460c      	mov	r4, r1
	if (!err) {
   1b1b2:	b90a      	cbnz	r2, 1b1b8 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1b1b4:	f7ff ffb7 	bl	1b126 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   1b1b8:	6820      	ldr	r0, [r4, #0]
   1b1ba:	2101      	movs	r1, #1
   1b1bc:	3034      	adds	r0, #52	; 0x34
   1b1be:	f7ff fe2b 	bl	1ae18 <atomic_clear_bit>
	tx_meta_data_free(data);
   1b1c2:	4620      	mov	r0, r4
}
   1b1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1b1c8:	f7eb b950 	b.w	646c <tx_meta_data_free>

0001b1cc <att_rsp_sent>:
{
   1b1cc:	b510      	push	{r4, lr}
   1b1ce:	460c      	mov	r4, r1
	if (!err) {
   1b1d0:	b90a      	cbnz	r2, 1b1d6 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1b1d2:	f7ff ffa8 	bl	1b126 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   1b1d6:	6820      	ldr	r0, [r4, #0]
   1b1d8:	2100      	movs	r1, #0
   1b1da:	3034      	adds	r0, #52	; 0x34
   1b1dc:	f7ff fe1c 	bl	1ae18 <atomic_clear_bit>
	tx_meta_data_free(data);
   1b1e0:	4620      	mov	r0, r4
}
   1b1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1b1e6:	f7eb b941 	b.w	646c <tx_meta_data_free>

0001b1ea <bt_att_create_pdu>:
{
   1b1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1ee:	460f      	mov	r7, r1
   1b1f0:	4616      	mov	r6, r2
	att = att_get(conn);
   1b1f2:	f7ff fbc2 	bl	1a97a <att_get>
	if (!att) {
   1b1f6:	b180      	cbz	r0, 1b21a <bt_att_create_pdu+0x30>
	return list->head;
   1b1f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b1fa:	b174      	cbz	r4, 1b21a <bt_att_create_pdu+0x30>
   1b1fc:	4620      	mov	r0, r4
	return node->next;
   1b1fe:	f850 4988 	ldr.w	r4, [r0], #-136
   1b202:	b104      	cbz	r4, 1b206 <bt_att_create_pdu+0x1c>
   1b204:	3c88      	subs	r4, #136	; 0x88
		if (len + sizeof(op) > bt_att_mtu(chan)) {
   1b206:	1c73      	adds	r3, r6, #1
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1b208:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1b20a:	8b40      	ldrh	r0, [r0, #26]
		if (len + sizeof(op) > bt_att_mtu(chan)) {
   1b20c:	4288      	cmp	r0, r1
   1b20e:	4602      	mov	r2, r0
   1b210:	bf28      	it	cs
   1b212:	460a      	movcs	r2, r1
   1b214:	4293      	cmp	r3, r2
   1b216:	d903      	bls.n	1b220 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b218:	b944      	cbnz	r4, 1b22c <bt_att_create_pdu+0x42>
}
   1b21a:	2000      	movs	r0, #0
   1b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1b220:	4633      	mov	r3, r6
   1b222:	463a      	mov	r2, r7
}
   1b224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b228:	f7eb b9aa 	b.w	6580 <bt_att_chan_create_pdu.isra.0>
   1b22c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b230:	b105      	cbz	r5, 1b234 <bt_att_create_pdu+0x4a>
   1b232:	3d88      	subs	r5, #136	; 0x88
{
   1b234:	4620      	mov	r0, r4
   1b236:	462c      	mov	r4, r5
   1b238:	e7e6      	b.n	1b208 <bt_att_create_pdu+0x1e>

0001b23a <att_read_blob_req>:
{
   1b23a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1b23c:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1b23e:	8813      	ldrh	r3, [r2, #0]
   1b240:	8852      	ldrh	r2, [r2, #2]
   1b242:	9200      	str	r2, [sp, #0]
   1b244:	210c      	movs	r1, #12
   1b246:	220d      	movs	r2, #13
   1b248:	f7eb fcda 	bl	6c00 <att_read_rsp>
}
   1b24c:	b003      	add	sp, #12
   1b24e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b252 <att_read_req>:
{
   1b252:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1b254:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1b256:	2200      	movs	r2, #0
   1b258:	881b      	ldrh	r3, [r3, #0]
   1b25a:	9200      	str	r2, [sp, #0]
   1b25c:	210a      	movs	r1, #10
   1b25e:	220b      	movs	r2, #11
   1b260:	f7eb fcce 	bl	6c00 <att_read_rsp>
}
   1b264:	b003      	add	sp, #12
   1b266:	f85d fb04 	ldr.w	pc, [sp], #4

0001b26a <att_mtu_req>:
{
   1b26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b26e:	68cb      	ldr	r3, [r1, #12]
   1b270:	881f      	ldrh	r7, [r3, #0]
   1b272:	b2bb      	uxth	r3, r7
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b274:	2b16      	cmp	r3, #22
{
   1b276:	4604      	mov	r4, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b278:	d91e      	bls.n	1b2b8 <att_mtu_req+0x4e>
	struct bt_conn *conn = chan->att->conn;
   1b27a:	6803      	ldr	r3, [r0, #0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b27c:	2202      	movs	r2, #2
   1b27e:	6818      	ldr	r0, [r3, #0]
   1b280:	2103      	movs	r1, #3
   1b282:	f7ff ffb2 	bl	1b1ea <bt_att_create_pdu>
	if (!pdu) {
   1b286:	4606      	mov	r6, r0
   1b288:	b1c0      	cbz	r0, 1b2bc <att_mtu_req+0x52>
	return net_buf_simple_add(&buf->b, len);
   1b28a:	2102      	movs	r1, #2
   1b28c:	300c      	adds	r0, #12
   1b28e:	f000 fc42 	bl	1bb16 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b292:	2500      	movs	r5, #0
   1b294:	f04f 0817 	mov.w	r8, #23
   1b298:	f880 8000 	strb.w	r8, [r0]
   1b29c:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1b29e:	4631      	mov	r1, r6
   1b2a0:	4620      	mov	r0, r4
   1b2a2:	f7ff feed 	bl	1b080 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1b2a6:	4620      	mov	r0, r4
	chan->chan.rx.mtu = mtu_server;
   1b2a8:	f8a4 801a 	strh.w	r8, [r4, #26]
	chan->chan.tx.mtu = mtu_client;
   1b2ac:	8567      	strh	r7, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1b2ae:	f7ff fcb0 	bl	1ac12 <att_chan_mtu_updated>
	return 0;
   1b2b2:	4628      	mov	r0, r5
}
   1b2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
   1b2b8:	2004      	movs	r0, #4
   1b2ba:	e7fb      	b.n	1b2b4 <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
   1b2bc:	200e      	movs	r0, #14
   1b2be:	e7f9      	b.n	1b2b4 <att_mtu_req+0x4a>

0001b2c0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1b2c0:	8a0a      	ldrh	r2, [r1, #16]
   1b2c2:	68c9      	ldr	r1, [r1, #12]
   1b2c4:	2300      	movs	r3, #0
   1b2c6:	f7eb be47 	b.w	6f58 <att_handle_rsp>

0001b2ca <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1b2ca:	3854      	subs	r0, #84	; 0x54
   1b2cc:	f7eb be7a 	b.w	6fc4 <bt_att_disconnected>

0001b2d0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1b2d0:	b570      	push	{r4, r5, r6, lr}
   1b2d2:	460e      	mov	r6, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1b2d4:	f7ff fb51 	bl	1a97a <att_get>
	if (!att) {
   1b2d8:	4604      	mov	r4, r0
   1b2da:	b940      	cbnz	r0, 1b2ee <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b2dc:	69b0      	ldr	r0, [r6, #24]
   1b2de:	f7eb f8c5 	bl	646c <tx_meta_data_free>
		net_buf_unref(buf);
   1b2e2:	4630      	mov	r0, r6
   1b2e4:	f7f9 fb88 	bl	149f8 <net_buf_unref>
		return -ENOTCONN;
   1b2e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1b2ec:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&att->tx_queue, buf);
   1b2ee:	f100 050c 	add.w	r5, r0, #12
   1b2f2:	4628      	mov	r0, r5
   1b2f4:	4631      	mov	r1, r6
   1b2f6:	f000 fbd6 	bl	1baa6 <net_buf_put>
	return list->head;
   1b2fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b2fc:	b138      	cbz	r0, 1b30e <bt_att_send+0x3e>
	return node->next;
   1b2fe:	f850 4988 	ldr.w	r4, [r0], #-136
   1b302:	b104      	cbz	r4, 1b306 <bt_att_send+0x36>
   1b304:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1b306:	4629      	mov	r1, r5
   1b308:	f7ff fe75 	bl	1aff6 <process_queue>
		if (!err) {
   1b30c:	b920      	cbnz	r0, 1b318 <bt_att_send+0x48>
	return 0;
   1b30e:	2000      	movs	r0, #0
   1b310:	e7ec      	b.n	1b2ec <bt_att_send+0x1c>
{
   1b312:	461c      	mov	r4, r3
   1b314:	f06f 0001 	mvn.w	r0, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b318:	2c00      	cmp	r4, #0
   1b31a:	d0f8      	beq.n	1b30e <bt_att_send+0x3e>
   1b31c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1b320:	b923      	cbnz	r3, 1b32c <bt_att_send+0x5c>
		if (err == -ENOENT && prev &&
   1b322:	3002      	adds	r0, #2
   1b324:	d0f5      	beq.n	1b312 <bt_att_send+0x42>
{
   1b326:	4620      	mov	r0, r4
   1b328:	461c      	mov	r4, r3
   1b32a:	e7ec      	b.n	1b306 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b32c:	3b88      	subs	r3, #136	; 0x88
   1b32e:	e7f8      	b.n	1b322 <bt_att_send+0x52>

0001b330 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1b330:	b510      	push	{r4, lr}
   1b332:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1b334:	f7ff fb21 	bl	1a97a <att_get>
	if (!att) {
   1b338:	b160      	cbz	r0, 1b354 <bt_att_req_send+0x24>
	parent->next = child;
   1b33a:	2300      	movs	r3, #0
   1b33c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b33e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1b340:	b92b      	cbnz	r3, 1b34e <bt_att_req_send+0x1e>
	list->head = node;
   1b342:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1b346:	f7ff fe27 	bl	1af98 <att_req_send_process>

	return 0;
   1b34a:	2000      	movs	r0, #0
}
   1b34c:	bd10      	pop	{r4, pc}
	parent->next = child;
   1b34e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b350:	6084      	str	r4, [r0, #8]
}
   1b352:	e7f8      	b.n	1b346 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1b354:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b358:	e7f8      	b.n	1b34c <bt_att_req_send+0x1c>

0001b35a <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1b35a:	2001      	movs	r0, #1
   1b35c:	4770      	bx	lr

0001b35e <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1b35e:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   1b360:	f7ff fb0b 	bl	1a97a <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1b364:	b150      	cbz	r0, 1b37c <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   1b366:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b368:	b144      	cbz	r4, 1b37c <bt_att_clear_out_of_sync_sent+0x1e>
   1b36a:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   1b36c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b370:	2105      	movs	r1, #5
   1b372:	f7ff fd51 	bl	1ae18 <atomic_clear_bit>
	return node->next;
   1b376:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   1b37a:	e7f5      	b.n	1b368 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   1b37c:	bd10      	pop	{r4, pc}

0001b37e <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1b37e:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b380:	2104      	movs	r1, #4
   1b382:	f7ff fab0 	bl	1a8e6 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1b386:	b130      	cbz	r0, 1b396 <bt_att_out_of_sync_sent_on_fixed+0x18>
   1b388:	f3bf 8f5b 	dmb	ish
   1b38c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   1b38e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b392:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1b396:	bd08      	pop	{r3, pc}

0001b398 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1b398:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   1b39a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1b39e:	2201      	movs	r2, #1
   1b3a0:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   1b3a2:	7403      	strb	r3, [r0, #16]
}
   1b3a4:	4770      	bx	lr

0001b3a6 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1b3a6:	6010      	str	r0, [r2, #0]
}
   1b3a8:	2000      	movs	r0, #0
   1b3aa:	4770      	bx	lr

0001b3ac <gatt_ccc_changed>:
{
   1b3ac:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1b3ae:	8949      	ldrh	r1, [r1, #10]
	if (value != ccc->value) {
   1b3b0:	899a      	ldrh	r2, [r3, #12]
   1b3b2:	428a      	cmp	r2, r1
   1b3b4:	d003      	beq.n	1b3be <gatt_ccc_changed+0x12>
		ccc->value = value;
   1b3b6:	8199      	strh	r1, [r3, #12]
		if (ccc->cfg_changed) {
   1b3b8:	691b      	ldr	r3, [r3, #16]
   1b3ba:	b103      	cbz	r3, 1b3be <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1b3bc:	4718      	bx	r3
}
   1b3be:	4770      	bx	lr

0001b3c0 <gatt_indicate_rsp>:
{
   1b3c0:	b510      	push	{r4, lr}
   1b3c2:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1b3c4:	68a3      	ldr	r3, [r4, #8]
{
   1b3c6:	460a      	mov	r2, r1
	if (params->func) {
   1b3c8:	b10b      	cbz	r3, 1b3ce <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1b3ca:	4621      	mov	r1, r4
   1b3cc:	4798      	blx	r3
	params->_ref--;
   1b3ce:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b3d0:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1b3d2:	3b01      	subs	r3, #1
   1b3d4:	b2db      	uxtb	r3, r3
   1b3d6:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1b3d8:	b122      	cbz	r2, 1b3e4 <gatt_indicate_rsp+0x24>
   1b3da:	b91b      	cbnz	r3, 1b3e4 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1b3dc:	4620      	mov	r0, r4
}
   1b3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1b3e2:	4710      	bx	r2
}
   1b3e4:	bd10      	pop	{r4, pc}

0001b3e6 <match_uuid>:
	data->attr = attr;
   1b3e6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1b3e8:	8091      	strh	r1, [r2, #4]
}
   1b3ea:	2000      	movs	r0, #0
   1b3ec:	4770      	bx	lr

0001b3ee <gen_hash_m>:
{
   1b3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b3f0:	6807      	ldr	r7, [r0, #0]
   1b3f2:	783d      	ldrb	r5, [r7, #0]
{
   1b3f4:	b089      	sub	sp, #36	; 0x24
   1b3f6:	4606      	mov	r6, r0
   1b3f8:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1b3fa:	b9dd      	cbnz	r5, 1b434 <gen_hash_m+0x46>
	switch (u16->val) {
   1b3fc:	887b      	ldrh	r3, [r7, #2]
   1b3fe:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1b402:	d004      	beq.n	1b40e <gen_hash_m+0x20>
   1b404:	d810      	bhi.n	1b428 <gen_hash_m+0x3a>
   1b406:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1b40a:	2b03      	cmp	r3, #3
   1b40c:	d812      	bhi.n	1b434 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1b40e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b412:	2202      	movs	r2, #2
   1b414:	f10d 010a 	add.w	r1, sp, #10
   1b418:	4620      	mov	r0, r4
   1b41a:	f7fe fb18 	bl	19a4e <tc_cmac_update>
   1b41e:	b968      	cbnz	r0, 1b43c <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1b420:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1b424:	65a2      	str	r2, [r4, #88]	; 0x58
   1b426:	e006      	b.n	1b436 <gen_hash_m+0x48>
	switch (u16->val) {
   1b428:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1b42c:	33ff      	adds	r3, #255	; 0xff
   1b42e:	b29b      	uxth	r3, r3
   1b430:	2b04      	cmp	r3, #4
   1b432:	d91e      	bls.n	1b472 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1b434:	2501      	movs	r5, #1
}
   1b436:	4628      	mov	r0, r5
   1b438:	b009      	add	sp, #36	; 0x24
   1b43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1b43c:	887b      	ldrh	r3, [r7, #2]
   1b43e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b442:	2202      	movs	r2, #2
   1b444:	f10d 010a 	add.w	r1, sp, #10
   1b448:	4620      	mov	r0, r4
   1b44a:	f7fe fb00 	bl	19a4e <tc_cmac_update>
   1b44e:	2800      	cmp	r0, #0
   1b450:	d0e6      	beq.n	1b420 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1b452:	2000      	movs	r0, #0
   1b454:	9000      	str	r0, [sp, #0]
   1b456:	aa03      	add	r2, sp, #12
   1b458:	6877      	ldr	r7, [r6, #4]
   1b45a:	2313      	movs	r3, #19
   1b45c:	4631      	mov	r1, r6
   1b45e:	47b8      	blx	r7
		if (len < 0) {
   1b460:	1e02      	subs	r2, r0, #0
   1b462:	dbdf      	blt.n	1b424 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1b464:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b466:	4620      	mov	r0, r4
   1b468:	f7fe faf1 	bl	19a4e <tc_cmac_update>
   1b46c:	2800      	cmp	r0, #0
   1b46e:	d1e1      	bne.n	1b434 <gen_hash_m+0x46>
   1b470:	e7d6      	b.n	1b420 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1b472:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b476:	2202      	movs	r2, #2
   1b478:	f10d 010a 	add.w	r1, sp, #10
   1b47c:	4620      	mov	r0, r4
   1b47e:	f7fe fae6 	bl	19a4e <tc_cmac_update>
   1b482:	2800      	cmp	r0, #0
   1b484:	d0cc      	beq.n	1b420 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1b486:	887b      	ldrh	r3, [r7, #2]
   1b488:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1b48c:	2202      	movs	r2, #2
   1b48e:	f10d 010a 	add.w	r1, sp, #10
   1b492:	e7e8      	b.n	1b466 <gen_hash_m+0x78>

0001b494 <bt_addr_le_eq>:
{
   1b494:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1b496:	2207      	movs	r2, #7
   1b498:	f7fe fb9c 	bl	19bd4 <memcmp>
}
   1b49c:	fab0 f080 	clz	r0, r0
   1b4a0:	0940      	lsrs	r0, r0, #5
   1b4a2:	bd08      	pop	{r3, pc}

0001b4a4 <atomic_or>:
{
   1b4a4:	b510      	push	{r4, lr}
   1b4a6:	4603      	mov	r3, r0
}
   1b4a8:	f3bf 8f5b 	dmb	ish
   1b4ac:	e853 0f00 	ldrex	r0, [r3]
   1b4b0:	ea40 0201 	orr.w	r2, r0, r1
   1b4b4:	e843 2400 	strex	r4, r2, [r3]
   1b4b8:	2c00      	cmp	r4, #0
   1b4ba:	d1f7      	bne.n	1b4ac <atomic_or+0x8>
   1b4bc:	f3bf 8f5b 	dmb	ish
   1b4c0:	bd10      	pop	{r4, pc}

0001b4c2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b4c2:	2207      	movs	r2, #7
   1b4c4:	f7fe bb96 	b.w	19bf4 <memcpy>

0001b4c8 <bt_gatt_ccc_cfg_is_matching_conn>:
{
   1b4c8:	b538      	push	{r3, r4, r5, lr}
   1b4ca:	460c      	mov	r4, r1
   1b4cc:	4605      	mov	r5, r0
	bool conn_encrypted = bt_conn_get_security(conn) >= BT_SECURITY_L2;
   1b4ce:	f7ff f926 	bl	1a71e <bt_conn_get_security>
	if (cfg->link_encrypted && !conn_encrypted) {
   1b4d2:	7a23      	ldrb	r3, [r4, #8]
   1b4d4:	b10b      	cbz	r3, 1b4da <bt_gatt_ccc_cfg_is_matching_conn+0x12>
   1b4d6:	2801      	cmp	r0, #1
   1b4d8:	d907      	bls.n	1b4ea <bt_gatt_ccc_cfg_is_matching_conn+0x22>
	return bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer);
   1b4da:	4622      	mov	r2, r4
   1b4dc:	4628      	mov	r0, r5
   1b4de:	f812 1b01 	ldrb.w	r1, [r2], #1
}
   1b4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer);
   1b4e6:	f7ff b91c 	b.w	1a722 <bt_conn_is_peer_addr_le>
}
   1b4ea:	2000      	movs	r0, #0
   1b4ec:	bd38      	pop	{r3, r4, r5, pc}

0001b4ee <sc_clear>:
{
   1b4ee:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b4f0:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1b4f4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b4f6:	4631      	mov	r1, r6
   1b4f8:	7a00      	ldrb	r0, [r0, #8]
   1b4fa:	f7fe fe7d 	bl	1a1f8 <bt_addr_le_is_bonded>
   1b4fe:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1b500:	4631      	mov	r1, r6
   1b502:	f7eb fddf 	bl	70c4 <find_sc_cfg>
	if (!cfg) {
   1b506:	b128      	cbz	r0, 1b514 <sc_clear+0x26>
}
   1b508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1b50c:	220c      	movs	r2, #12
   1b50e:	2100      	movs	r1, #0
   1b510:	f7fe bb7b 	b.w	19c0a <memset>
}
   1b514:	bd70      	pop	{r4, r5, r6, pc}

0001b516 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1b516:	2a02      	cmp	r2, #2
{
   1b518:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1b51a:	d108      	bne.n	1b52e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1b51c:	2300      	movs	r3, #0
   1b51e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b522:	461a      	mov	r2, r3
   1b524:	7a00      	ldrb	r0, [r0, #8]
   1b526:	f7eb fe67 	bl	71f8 <sc_save>
}
   1b52a:	2002      	movs	r0, #2
   1b52c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1b52e:	f7ff ffde 	bl	1b4ee <sc_clear>
   1b532:	e7fa      	b.n	1b52a <sc_ccc_cfg_write+0x14>

0001b534 <read_appearance>:
{
   1b534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b536:	4615      	mov	r5, r2
   1b538:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1b53c:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1b53e:	f7fe fe59 	bl	1a1f4 <bt_get_appearance>
	if (offset > value_len) {
   1b542:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1b544:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1b548:	d80e      	bhi.n	1b568 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1b54a:	f1c6 0402 	rsb	r4, r6, #2
   1b54e:	42bc      	cmp	r4, r7
   1b550:	bfa8      	it	ge
   1b552:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b554:	f10d 0306 	add.w	r3, sp, #6
   1b558:	4622      	mov	r2, r4
   1b55a:	1999      	adds	r1, r3, r6
   1b55c:	4628      	mov	r0, r5
   1b55e:	f7fe fb49 	bl	19bf4 <memcpy>
}
   1b562:	4620      	mov	r0, r4
   1b564:	b003      	add	sp, #12
   1b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b568:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1b56c:	e7f9      	b.n	1b562 <read_appearance+0x2e>

0001b56e <read_name>:
{
   1b56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b572:	4698      	mov	r8, r3
   1b574:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b578:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1b57a:	f7e9 fd13 	bl	4fa4 <bt_get_name>
   1b57e:	4607      	mov	r7, r0
				 strlen(name));
   1b580:	f7fe fb15 	bl	19bae <strlen>
	if (offset > value_len) {
   1b584:	b283      	uxth	r3, r0
   1b586:	42b3      	cmp	r3, r6
   1b588:	d30c      	bcc.n	1b5a4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1b58a:	1b9c      	subs	r4, r3, r6
   1b58c:	4544      	cmp	r4, r8
   1b58e:	bfa8      	it	ge
   1b590:	4644      	movge	r4, r8
   1b592:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1b594:	4622      	mov	r2, r4
   1b596:	19b9      	adds	r1, r7, r6
   1b598:	4628      	mov	r0, r5
   1b59a:	f7fe fb2b 	bl	19bf4 <memcpy>
}
   1b59e:	4620      	mov	r0, r4
   1b5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b5a4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1b5a8:	e7f9      	b.n	1b59e <read_name+0x30>

0001b5aa <cf_read>:
{
   1b5aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b5ac:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1b5ae:	2300      	movs	r3, #0
{
   1b5b0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1b5b4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1b5b8:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1b5ba:	f7eb fd6b 	bl	7094 <find_cf_cfg>
	if (cfg) {
   1b5be:	b128      	cbz	r0, 1b5cc <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1b5c0:	f100 0108 	add.w	r1, r0, #8
   1b5c4:	2201      	movs	r2, #1
   1b5c6:	a801      	add	r0, sp, #4
   1b5c8:	f7fe fb14 	bl	19bf4 <memcpy>
	if (offset > value_len) {
   1b5cc:	2e01      	cmp	r6, #1
   1b5ce:	d80d      	bhi.n	1b5ec <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1b5d0:	f1c6 0401 	rsb	r4, r6, #1
   1b5d4:	42bc      	cmp	r4, r7
   1b5d6:	bfa8      	it	ge
   1b5d8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b5da:	ab01      	add	r3, sp, #4
   1b5dc:	4622      	mov	r2, r4
   1b5de:	1999      	adds	r1, r3, r6
   1b5e0:	4628      	mov	r0, r5
   1b5e2:	f7fe fb07 	bl	19bf4 <memcpy>
}
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	b003      	add	sp, #12
   1b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b5ec:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1b5f0:	e7f9      	b.n	1b5e6 <cf_read+0x3c>

0001b5f2 <bt_gatt_attr_read_service>:
{
   1b5f2:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1b5f4:	68c9      	ldr	r1, [r1, #12]
{
   1b5f6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1b5f8:	780a      	ldrb	r2, [r1, #0]
{
   1b5fa:	461c      	mov	r4, r3
   1b5fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1b600:	b992      	cbnz	r2, 1b628 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1b602:	884a      	ldrh	r2, [r1, #2]
   1b604:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1b608:	2b02      	cmp	r3, #2
   1b60a:	d818      	bhi.n	1b63e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b60c:	f1c3 0202 	rsb	r2, r3, #2
   1b610:	4294      	cmp	r4, r2
   1b612:	bfa8      	it	ge
   1b614:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b616:	4622      	mov	r2, r4
   1b618:	f10d 0106 	add.w	r1, sp, #6
   1b61c:	4419      	add	r1, r3
   1b61e:	f7fe fae9 	bl	19bf4 <memcpy>
}
   1b622:	4620      	mov	r0, r4
   1b624:	b002      	add	sp, #8
   1b626:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1b628:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1b62a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1b62e:	d806      	bhi.n	1b63e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b630:	f1c3 0210 	rsb	r2, r3, #16
   1b634:	4294      	cmp	r4, r2
   1b636:	bfa8      	it	ge
   1b638:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1b63a:	4622      	mov	r2, r4
   1b63c:	e7ee      	b.n	1b61c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b63e:	f06f 0406 	mvn.w	r4, #6
   1b642:	e7ee      	b.n	1b622 <bt_gatt_attr_read_service+0x30>

0001b644 <bt_gatt_attr_read_ccc>:
{
   1b644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1b646:	68c9      	ldr	r1, [r1, #12]
{
   1b648:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1b64c:	4615      	mov	r5, r2
   1b64e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1b650:	f7eb fd48 	bl	70e4 <find_ccc_cfg>
	if (cfg) {
   1b654:	b100      	cbz	r0, 1b658 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1b656:	8940      	ldrh	r0, [r0, #10]
   1b658:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1b65c:	2e02      	cmp	r6, #2
   1b65e:	d80e      	bhi.n	1b67e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1b660:	f1c6 0402 	rsb	r4, r6, #2
   1b664:	42bc      	cmp	r4, r7
   1b666:	bfa8      	it	ge
   1b668:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b66a:	f10d 0306 	add.w	r3, sp, #6
   1b66e:	4622      	mov	r2, r4
   1b670:	1999      	adds	r1, r3, r6
   1b672:	4628      	mov	r0, r5
   1b674:	f7fe fabe 	bl	19bf4 <memcpy>
}
   1b678:	4620      	mov	r0, r4
   1b67a:	b003      	add	sp, #12
   1b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b67e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1b682:	e7f9      	b.n	1b678 <bt_gatt_attr_read_ccc+0x34>

0001b684 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b684:	2101      	movs	r1, #1
   1b686:	300c      	adds	r0, #12
   1b688:	f7ff bf0c 	b.w	1b4a4 <atomic_or>

0001b68c <cf_write>:
{
   1b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b690:	461f      	mov	r7, r3
   1b692:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1b696:	2b01      	cmp	r3, #1
{
   1b698:	4606      	mov	r6, r0
   1b69a:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1b69c:	d82c      	bhi.n	1b6f8 <cf_write+0x6c>
	if (offset + len > sizeof(cfg->data)) {
   1b69e:	443b      	add	r3, r7
   1b6a0:	2b01      	cmp	r3, #1
   1b6a2:	463d      	mov	r5, r7
   1b6a4:	dc2b      	bgt.n	1b6fe <cf_write+0x72>
	cfg = find_cf_cfg(conn);
   1b6a6:	f7eb fcf5 	bl	7094 <find_cf_cfg>
	if (!cfg) {
   1b6aa:	4604      	mov	r4, r0
   1b6ac:	b918      	cbnz	r0, 1b6b6 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1b6ae:	f7eb fcf1 	bl	7094 <find_cf_cfg>
	if (!cfg) {
   1b6b2:	4604      	mov	r4, r0
   1b6b4:	b330      	cbz	r0, 1b704 <cf_write+0x78>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b6b6:	b197      	cbz	r7, 1b6de <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b6b8:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1b6ba:	f898 2000 	ldrb.w	r2, [r8]
   1b6be:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b6c0:	fa21 f003 	lsr.w	r0, r1, r3
   1b6c4:	07c7      	lsls	r7, r0, #31
   1b6c6:	d503      	bpl.n	1b6d0 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   1b6c8:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b6cc:	07c0      	lsls	r0, r0, #31
   1b6ce:	d51c      	bpl.n	1b70a <cf_write+0x7e>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b6d0:	3301      	adds	r3, #1
   1b6d2:	2b03      	cmp	r3, #3
   1b6d4:	d1f4      	bne.n	1b6c0 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1b6d6:	f002 0207 	and.w	r2, r2, #7
   1b6da:	4311      	orrs	r1, r2
   1b6dc:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b6de:	1c60      	adds	r0, r4, #1
   1b6e0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b6e4:	f7ff feed 	bl	1b4c2 <bt_addr_le_copy>
	cfg->id = conn->id;
   1b6e8:	7a33      	ldrb	r3, [r6, #8]
   1b6ea:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   1b6ec:	4620      	mov	r0, r4
   1b6ee:	f7ff ffc9 	bl	1b684 <set_change_aware_no_store.constprop.0.isra.0>
}
   1b6f2:	4628      	mov	r0, r5
   1b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b6f8:	f06f 0506 	mvn.w	r5, #6
   1b6fc:	e7f9      	b.n	1b6f2 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b6fe:	f06f 050c 	mvn.w	r5, #12
   1b702:	e7f6      	b.n	1b6f2 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b704:	f06f 0510 	mvn.w	r5, #16
   1b708:	e7f3      	b.n	1b6f2 <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b70a:	f06f 0512 	mvn.w	r5, #18
   1b70e:	e7f0      	b.n	1b6f2 <cf_write+0x66>

0001b710 <sc_restore_rsp>:
{
   1b710:	b538      	push	{r3, r4, r5, lr}
   1b712:	4604      	mov	r4, r0
   1b714:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1b716:	f7ff fe20 	bl	1b35a <bt_att_fixed_chan_only>
   1b71a:	b140      	cbz	r0, 1b72e <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   1b71c:	4620      	mov	r0, r4
   1b71e:	f7eb fcb9 	bl	7094 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b722:	b120      	cbz	r0, 1b72e <sc_restore_rsp+0x1e>
   1b724:	7a03      	ldrb	r3, [r0, #8]
   1b726:	07db      	lsls	r3, r3, #31
   1b728:	d501      	bpl.n	1b72e <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   1b72a:	f7ff ffab 	bl	1b684 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1b72e:	b965      	cbnz	r5, 1b74a <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b730:	7a20      	ldrb	r0, [r4, #8]
   1b732:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1b736:	f7eb fcc5 	bl	70c4 <find_sc_cfg>
		if (sc_cfg) {
   1b73a:	b130      	cbz	r0, 1b74a <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1b73c:	4629      	mov	r1, r5
   1b73e:	2204      	movs	r2, #4
}
   1b740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1b744:	3008      	adds	r0, #8
   1b746:	f7fe ba60 	b.w	19c0a <memset>
}
   1b74a:	bd38      	pop	{r3, r4, r5, pc}

0001b74c <bt_gatt_attr_value_handle>:
{
   1b74c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1b74e:	4604      	mov	r4, r0
   1b750:	b910      	cbnz	r0, 1b758 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1b752:	2000      	movs	r0, #0
}
   1b754:	b002      	add	sp, #8
   1b756:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1b758:	2300      	movs	r3, #0
   1b75a:	f88d 3004 	strb.w	r3, [sp, #4]
   1b75e:	6800      	ldr	r0, [r0, #0]
   1b760:	f642 0303 	movw	r3, #10243	; 0x2803
   1b764:	a901      	add	r1, sp, #4
   1b766:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b76a:	f7fe fa75 	bl	19c58 <bt_uuid_cmp>
   1b76e:	2800      	cmp	r0, #0
   1b770:	d1ef      	bne.n	1b752 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1b772:	68e3      	ldr	r3, [r4, #12]
   1b774:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1b776:	2800      	cmp	r0, #0
   1b778:	d1ec      	bne.n	1b754 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1b77a:	4620      	mov	r0, r4
   1b77c:	f7eb fe44 	bl	7408 <bt_gatt_attr_get_handle>
   1b780:	3001      	adds	r0, #1
   1b782:	b280      	uxth	r0, r0
	return handle;
   1b784:	e7e6      	b.n	1b754 <bt_gatt_attr_value_handle+0x8>

0001b786 <bt_gatt_attr_read_chrc>:
{
   1b786:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1b788:	68cc      	ldr	r4, [r1, #12]
{
   1b78a:	b087      	sub	sp, #28
   1b78c:	4608      	mov	r0, r1
   1b78e:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1b790:	79a3      	ldrb	r3, [r4, #6]
   1b792:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1b796:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1b79a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1b79c:	f7ff ffd6 	bl	1b74c <bt_gatt_attr_value_handle>
   1b7a0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1b7a4:	6821      	ldr	r1, [r4, #0]
   1b7a6:	780b      	ldrb	r3, [r1, #0]
   1b7a8:	b99b      	cbnz	r3, 1b7d2 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1b7aa:	884b      	ldrh	r3, [r1, #2]
   1b7ac:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1b7b0:	2405      	movs	r4, #5
	if (offset > value_len) {
   1b7b2:	42b4      	cmp	r4, r6
   1b7b4:	d315      	bcc.n	1b7e2 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1b7b6:	1ba4      	subs	r4, r4, r6
   1b7b8:	42bc      	cmp	r4, r7
   1b7ba:	bfa8      	it	ge
   1b7bc:	463c      	movge	r4, r7
   1b7be:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1b7c0:	ab01      	add	r3, sp, #4
   1b7c2:	4622      	mov	r2, r4
   1b7c4:	1999      	adds	r1, r3, r6
   1b7c6:	4628      	mov	r0, r5
   1b7c8:	f7fe fa14 	bl	19bf4 <memcpy>
}
   1b7cc:	4620      	mov	r0, r4
   1b7ce:	b007      	add	sp, #28
   1b7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1b7d2:	2210      	movs	r2, #16
   1b7d4:	3101      	adds	r1, #1
   1b7d6:	f10d 0007 	add.w	r0, sp, #7
   1b7da:	f7fe fa0b 	bl	19bf4 <memcpy>
		value_len += 16U;
   1b7de:	2413      	movs	r4, #19
   1b7e0:	e7e7      	b.n	1b7b2 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b7e2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1b7e6:	e7f1      	b.n	1b7cc <bt_gatt_attr_read_chrc+0x46>

0001b7e8 <bt_gatt_foreach_attr>:
{
   1b7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b7ea:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b7ee:	2300      	movs	r3, #0
   1b7f0:	9300      	str	r3, [sp, #0]
   1b7f2:	461a      	mov	r2, r3
   1b7f4:	f7eb fe38 	bl	7468 <bt_gatt_foreach_attr_type>
}
   1b7f8:	b005      	add	sp, #20
   1b7fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7fe <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1b7fe:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1b802:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1b804:	d004      	beq.n	1b810 <bt_gatt_check_perm+0x12>
   1b806:	f013 0f95 	tst.w	r3, #149	; 0x95
   1b80a:	d010      	beq.n	1b82e <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1b80c:	6848      	ldr	r0, [r1, #4]
   1b80e:	b170      	cbz	r0, 1b82e <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1b810:	f012 0f02 	tst.w	r2, #2
   1b814:	d004      	beq.n	1b820 <bt_gatt_check_perm+0x22>
   1b816:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1b81a:	d00a      	beq.n	1b832 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1b81c:	6889      	ldr	r1, [r1, #8]
   1b81e:	b141      	cbz	r1, 1b832 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   1b820:	401a      	ands	r2, r3
	return 0;
   1b822:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   1b826:	bf14      	ite	ne
   1b828:	2005      	movne	r0, #5
   1b82a:	2000      	moveq	r0, #0
   1b82c:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1b82e:	2002      	movs	r0, #2
   1b830:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1b832:	2003      	movs	r0, #3
}
   1b834:	4770      	bx	lr

0001b836 <bt_gatt_is_subscribed>:
{
   1b836:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1b83a:	7a83      	ldrb	r3, [r0, #10]
   1b83c:	2b07      	cmp	r3, #7
{
   1b83e:	4605      	mov	r5, r0
   1b840:	460c      	mov	r4, r1
   1b842:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1b844:	d110      	bne.n	1b868 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b846:	2300      	movs	r3, #0
   1b848:	f88d 300c 	strb.w	r3, [sp, #12]
   1b84c:	6820      	ldr	r0, [r4, #0]
   1b84e:	f642 0303 	movw	r3, #10243	; 0x2803
   1b852:	a903      	add	r1, sp, #12
   1b854:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b858:	f7fe f9fe 	bl	19c58 <bt_uuid_cmp>
   1b85c:	b960      	cbnz	r0, 1b878 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   1b85e:	68e3      	ldr	r3, [r4, #12]
   1b860:	799b      	ldrb	r3, [r3, #6]
   1b862:	f013 0f30 	tst.w	r3, #48	; 0x30
   1b866:	d103      	bne.n	1b870 <bt_gatt_is_subscribed+0x3a>
		return false;
   1b868:	2000      	movs	r0, #0
}
   1b86a:	b004      	add	sp, #16
   1b86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1b870:	4620      	mov	r0, r4
   1b872:	f7eb fed5 	bl	7620 <bt_gatt_attr_next>
   1b876:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b878:	2300      	movs	r3, #0
   1b87a:	6820      	ldr	r0, [r4, #0]
   1b87c:	f88d 300c 	strb.w	r3, [sp, #12]
   1b880:	a903      	add	r1, sp, #12
   1b882:	f642 1302 	movw	r3, #10498	; 0x2902
   1b886:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b88a:	f7fe f9e5 	bl	19c58 <bt_uuid_cmp>
   1b88e:	b118      	cbz	r0, 1b898 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   1b890:	4620      	mov	r0, r4
   1b892:	f7eb fec5 	bl	7620 <bt_gatt_attr_next>
   1b896:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b898:	2600      	movs	r6, #0
   1b89a:	f642 1802 	movw	r8, #10498	; 0x2902
   1b89e:	6820      	ldr	r0, [r4, #0]
   1b8a0:	f88d 6000 	strb.w	r6, [sp]
   1b8a4:	4669      	mov	r1, sp
   1b8a6:	f8ad 8002 	strh.w	r8, [sp, #2]
   1b8aa:	f7fe f9d5 	bl	19c58 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b8ae:	b9c8      	cbnz	r0, 1b8e4 <bt_gatt_is_subscribed+0xae>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b8b0:	2300      	movs	r3, #0
   1b8b2:	6820      	ldr	r0, [r4, #0]
   1b8b4:	f88d 300c 	strb.w	r3, [sp, #12]
   1b8b8:	a903      	add	r1, sp, #12
   1b8ba:	f642 1302 	movw	r3, #10498	; 0x2902
   1b8be:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b8c2:	f7fe f9c9 	bl	19c58 <bt_uuid_cmp>
   1b8c6:	2800      	cmp	r0, #0
   1b8c8:	d1ce      	bne.n	1b868 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1b8ca:	68e4      	ldr	r4, [r4, #12]
		if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg) &&
   1b8cc:	4628      	mov	r0, r5
   1b8ce:	4621      	mov	r1, r4
   1b8d0:	f7ff fdfa 	bl	1b4c8 <bt_gatt_ccc_cfg_is_matching_conn>
   1b8d4:	2800      	cmp	r0, #0
   1b8d6:	d0c7      	beq.n	1b868 <bt_gatt_is_subscribed+0x32>
   1b8d8:	8963      	ldrh	r3, [r4, #10]
   1b8da:	421f      	tst	r7, r3
   1b8dc:	bf14      	ite	ne
   1b8de:	2001      	movne	r0, #1
   1b8e0:	2000      	moveq	r0, #0
   1b8e2:	e7c2      	b.n	1b86a <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b8e4:	6820      	ldr	r0, [r4, #0]
   1b8e6:	f88d 6004 	strb.w	r6, [sp, #4]
   1b8ea:	f642 0303 	movw	r3, #10243	; 0x2803
   1b8ee:	a901      	add	r1, sp, #4
   1b8f0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b8f4:	f7fe f9b0 	bl	19c58 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b8f8:	2800      	cmp	r0, #0
   1b8fa:	d0d9      	beq.n	1b8b0 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b8fc:	6820      	ldr	r0, [r4, #0]
   1b8fe:	f88d 6008 	strb.w	r6, [sp, #8]
   1b902:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b906:	a902      	add	r1, sp, #8
   1b908:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b90c:	f7fe f9a4 	bl	19c58 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b910:	2800      	cmp	r0, #0
   1b912:	d0cd      	beq.n	1b8b0 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b914:	6820      	ldr	r0, [r4, #0]
   1b916:	f88d 600c 	strb.w	r6, [sp, #12]
   1b91a:	f642 0301 	movw	r3, #10241	; 0x2801
   1b91e:	a903      	add	r1, sp, #12
   1b920:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b924:	f7fe f998 	bl	19c58 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b928:	2800      	cmp	r0, #0
   1b92a:	d0c1      	beq.n	1b8b0 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   1b92c:	4620      	mov	r0, r4
   1b92e:	f7eb fe77 	bl	7620 <bt_gatt_attr_next>
		if (!attr) {
   1b932:	4604      	mov	r4, r0
   1b934:	2800      	cmp	r0, #0
   1b936:	d1b2      	bne.n	1b89e <bt_gatt_is_subscribed+0x68>
   1b938:	e796      	b.n	1b868 <bt_gatt_is_subscribed+0x32>

0001b93a <gatt_notify>:
{
   1b93a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b93e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b940:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b942:	8a4b      	ldrh	r3, [r1, #18]
   1b944:	f003 0314 	and.w	r3, r3, #20
{
   1b948:	4607      	mov	r7, r0
   1b94a:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b94c:	bb4b      	cbnz	r3, 1b9a2 <gatt_notify+0x68>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1b94e:	2201      	movs	r2, #1
   1b950:	f7ff ff71 	bl	1b836 <bt_gatt_is_subscribed>
   1b954:	b348      	cbz	r0, 1b9aa <gatt_notify+0x70>
				sizeof(*nfy) + params->len);
   1b956:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b958:	211b      	movs	r1, #27
   1b95a:	3202      	adds	r2, #2
   1b95c:	4638      	mov	r0, r7
   1b95e:	f7ff fc44 	bl	1b1ea <bt_att_create_pdu>
	if (!buf) {
   1b962:	4605      	mov	r5, r0
   1b964:	b320      	cbz	r0, 1b9b0 <gatt_notify+0x76>
   1b966:	f100 090c 	add.w	r9, r0, #12
   1b96a:	2102      	movs	r1, #2
   1b96c:	4648      	mov	r0, r9
   1b96e:	f000 f8d2 	bl	1bb16 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b972:	4606      	mov	r6, r0
   1b974:	4648      	mov	r0, r9
   1b976:	f826 8b02 	strh.w	r8, [r6], #2
   1b97a:	89a1      	ldrh	r1, [r4, #12]
   1b97c:	f000 f8cb 	bl	1bb16 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b980:	89a2      	ldrh	r2, [r4, #12]
   1b982:	68a1      	ldr	r1, [r4, #8]
   1b984:	4630      	mov	r0, r6
   1b986:	f7fe f935 	bl	19bf4 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1b98a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1b98e:	4628      	mov	r0, r5
   1b990:	2301      	movs	r3, #1
   1b992:	f7ff fd01 	bl	1b398 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1b996:	4629      	mov	r1, r5
   1b998:	4638      	mov	r0, r7
}
   1b99a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1b99e:	f7ff bc97 	b.w	1b2d0 <bt_att_send>
		return -EPERM;
   1b9a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1b9aa:	f06f 0015 	mvn.w	r0, #21
   1b9ae:	e7fa      	b.n	1b9a6 <gatt_notify+0x6c>
		return -ENOMEM;
   1b9b0:	f06f 000b 	mvn.w	r0, #11
   1b9b4:	e7f7      	b.n	1b9a6 <gatt_notify+0x6c>

0001b9b6 <bt_gatt_change_aware>:
{
   1b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9ba:	4605      	mov	r5, r0
   1b9bc:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1b9be:	f7eb fb69 	bl	7094 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1b9c2:	4604      	mov	r4, r0
   1b9c4:	b308      	cbz	r0, 1ba0a <bt_gatt_change_aware+0x54>
   1b9c6:	7a03      	ldrb	r3, [r0, #8]
   1b9c8:	07da      	lsls	r2, r3, #31
   1b9ca:	d51e      	bpl.n	1ba0a <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b9cc:	f3bf 8f5b 	dmb	ish
   1b9d0:	68c6      	ldr	r6, [r0, #12]
   1b9d2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b9d6:	f016 0601 	ands.w	r6, r6, #1
   1b9da:	f100 080c 	add.w	r8, r0, #12
   1b9de:	d114      	bne.n	1ba0a <bt_gatt_change_aware+0x54>
	if (!req) {
   1b9e0:	b1a7      	cbz	r7, 1ba0c <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b9e2:	f3bf 8f5b 	dmb	ish
   1b9e6:	e858 3f00 	ldrex	r3, [r8]
   1b9ea:	f023 0202 	bic.w	r2, r3, #2
   1b9ee:	e848 2100 	strex	r1, r2, [r8]
   1b9f2:	2900      	cmp	r1, #0
   1b9f4:	d1f7      	bne.n	1b9e6 <bt_gatt_change_aware+0x30>
   1b9f6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1b9fa:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   1b9fc:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1b9fe:	d508      	bpl.n	1ba12 <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   1ba00:	f7ff fcad 	bl	1b35e <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   1ba04:	4620      	mov	r0, r4
   1ba06:	f7ff fe3d 	bl	1b684 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   1ba0a:	2601      	movs	r6, #1
}
   1ba0c:	4630      	mov	r0, r6
   1ba0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1ba12:	f7ff fca2 	bl	1b35a <bt_att_fixed_chan_only>
   1ba16:	2800      	cmp	r0, #0
   1ba18:	d0f8      	beq.n	1ba0c <bt_gatt_change_aware+0x56>
   1ba1a:	4628      	mov	r0, r5
   1ba1c:	f7ff fcaf 	bl	1b37e <bt_att_out_of_sync_sent_on_fixed>
   1ba20:	2800      	cmp	r0, #0
   1ba22:	d0f3      	beq.n	1ba0c <bt_gatt_change_aware+0x56>
   1ba24:	f3bf 8f5b 	dmb	ish
   1ba28:	e858 3f00 	ldrex	r3, [r8]
   1ba2c:	f023 0302 	bic.w	r3, r3, #2
   1ba30:	e848 3200 	strex	r2, r3, [r8]
   1ba34:	2a00      	cmp	r2, #0
   1ba36:	d1f7      	bne.n	1ba28 <bt_gatt_change_aware+0x72>
   1ba38:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   1ba3c:	4628      	mov	r0, r5
   1ba3e:	e7df      	b.n	1ba00 <bt_gatt_change_aware+0x4a>

0001ba40 <bt_smp_recv>:
{
   1ba40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ba42:	2100      	movs	r1, #0
   1ba44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ba48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1ba4c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ba4e:	4608      	mov	r0, r1
   1ba50:	f7fe fefc 	bl	1a84c <bt_l2cap_create_pdu_timeout>
   1ba54:	f100 060c 	add.w	r6, r0, #12
   1ba58:	4604      	mov	r4, r0
   1ba5a:	2101      	movs	r1, #1
   1ba5c:	4630      	mov	r0, r6
   1ba5e:	f000 f85a 	bl	1bb16 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1ba62:	2505      	movs	r5, #5
   1ba64:	7005      	strb	r5, [r0, #0]
   1ba66:	2101      	movs	r1, #1
   1ba68:	4630      	mov	r0, r6
   1ba6a:	f000 f854 	bl	1bb16 <net_buf_simple_add>
   1ba6e:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1ba70:	7005      	strb	r5, [r0, #0]
   1ba72:	4622      	mov	r2, r4
   1ba74:	9300      	str	r3, [sp, #0]
   1ba76:	2106      	movs	r1, #6
   1ba78:	4638      	mov	r0, r7
   1ba7a:	f7fe feea 	bl	1a852 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1ba7e:	b110      	cbz	r0, 1ba86 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1ba80:	4620      	mov	r0, r4
   1ba82:	f7f8 ffb9 	bl	149f8 <net_buf_unref>
}
   1ba86:	2000      	movs	r0, #0
   1ba88:	b003      	add	sp, #12
   1ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ba8c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1ba8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ba90:	4770      	bx	lr

0001ba92 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1ba92:	2000      	movs	r0, #0
   1ba94:	4770      	bx	lr

0001ba96 <fixed_data_unref>:
}
   1ba96:	4770      	bx	lr

0001ba98 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ba98:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ba9a:	6849      	ldr	r1, [r1, #4]
   1ba9c:	6809      	ldr	r1, [r1, #0]
   1ba9e:	f7f8 bf2d 	b.w	148fc <net_buf_alloc_len>

0001baa2 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1baa2:	f7fc b985 	b.w	17db0 <z_impl_k_queue_get>

0001baa6 <net_buf_put>:
	k_fifo_put(fifo, buf);
   1baa6:	f001 bad3 	b.w	1d050 <k_queue_append>

0001baaa <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1baaa:	7a02      	ldrb	r2, [r0, #8]
   1baac:	3201      	adds	r2, #1
   1baae:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1bab0:	4770      	bx	lr

0001bab2 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bab2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1bab4:	4618      	mov	r0, r3
   1bab6:	685b      	ldr	r3, [r3, #4]
   1bab8:	2b00      	cmp	r3, #0
   1baba:	d1fb      	bne.n	1bab4 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1babc:	4770      	bx	lr

0001babe <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1babe:	6842      	ldr	r2, [r0, #4]
{
   1bac0:	b510      	push	{r4, lr}
	if (parent->frags) {
   1bac2:	b12a      	cbz	r2, 1bad0 <net_buf_frag_insert+0x12>
   1bac4:	460b      	mov	r3, r1
	while (buf->frags) {
   1bac6:	461c      	mov	r4, r3
   1bac8:	685b      	ldr	r3, [r3, #4]
   1baca:	2b00      	cmp	r3, #0
   1bacc:	d1fb      	bne.n	1bac6 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1bace:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1bad0:	6041      	str	r1, [r0, #4]
}
   1bad2:	bd10      	pop	{r4, pc}

0001bad4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1bad4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1bad6:	4604      	mov	r4, r0
   1bad8:	b920      	cbnz	r0, 1bae4 <net_buf_frag_add+0x10>
	buf->ref++;
   1bada:	7a0b      	ldrb	r3, [r1, #8]
   1badc:	3301      	adds	r3, #1
   1bade:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   1bae0:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1bae2:	bd10      	pop	{r4, pc}
   1bae4:	4603      	mov	r3, r0
	while (buf->frags) {
   1bae6:	4618      	mov	r0, r3
   1bae8:	685b      	ldr	r3, [r3, #4]
   1baea:	2b00      	cmp	r3, #0
   1baec:	d1fb      	bne.n	1bae6 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1baee:	f7ff ffe6 	bl	1babe <net_buf_frag_insert>
   1baf2:	4620      	mov	r0, r4
   1baf4:	e7f5      	b.n	1bae2 <net_buf_frag_add+0xe>

0001baf6 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1baf6:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1baf8:	b108      	cbz	r0, 1bafe <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1bafa:	684b      	ldr	r3, [r1, #4]
   1bafc:	6043      	str	r3, [r0, #4]
	}

	next_frag = frag->frags;
   1bafe:	684c      	ldr	r4, [r1, #4]

	frag->frags = NULL;
   1bb00:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1bb02:	4608      	mov	r0, r1
	frag->frags = NULL;
   1bb04:	604b      	str	r3, [r1, #4]
	net_buf_unref(frag);
   1bb06:	f7f8 ff77 	bl	149f8 <net_buf_unref>
#endif

	return next_frag;
}
   1bb0a:	4620      	mov	r0, r4
   1bb0c:	bd10      	pop	{r4, pc}

0001bb0e <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1bb0e:	6883      	ldr	r3, [r0, #8]
   1bb10:	440b      	add	r3, r1
   1bb12:	6003      	str	r3, [r0, #0]
}
   1bb14:	4770      	bx	lr

0001bb16 <net_buf_simple_add>:
	return buf->data + buf->len;
   1bb16:	8883      	ldrh	r3, [r0, #4]
   1bb18:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1bb1a:	4419      	add	r1, r3
   1bb1c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1bb1e:	18d0      	adds	r0, r2, r3
   1bb20:	4770      	bx	lr

0001bb22 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1bb22:	b430      	push	{r4, r5}
   1bb24:	8884      	ldrh	r4, [r0, #4]
   1bb26:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1bb28:	18a3      	adds	r3, r4, r2
   1bb2a:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1bb2c:	1928      	adds	r0, r5, r4
}
   1bb2e:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1bb30:	f7fe b860 	b.w	19bf4 <memcpy>

0001bb34 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1bb34:	b510      	push	{r4, lr}
   1bb36:	8883      	ldrh	r3, [r0, #4]
   1bb38:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1bb3a:	1c5c      	adds	r4, r3, #1
   1bb3c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1bb3e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1bb40:	18d0      	adds	r0, r2, r3
   1bb42:	bd10      	pop	{r4, pc}

0001bb44 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1bb44:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1bb46:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1bb48:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1bb4a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1bb4c:	4411      	add	r1, r2
	buf->data -= len;
   1bb4e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1bb50:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1bb52:	4770      	bx	lr

0001bb54 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1bb54:	8882      	ldrh	r2, [r0, #4]
   1bb56:	1a52      	subs	r2, r2, r1
{
   1bb58:	4603      	mov	r3, r0
	buf->len -= len;
   1bb5a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1bb5c:	6800      	ldr	r0, [r0, #0]
   1bb5e:	4408      	add	r0, r1
   1bb60:	6018      	str	r0, [r3, #0]
}
   1bb62:	4770      	bx	lr

0001bb64 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1bb64:	4603      	mov	r3, r0
	void *data = buf->data;
   1bb66:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1bb68:	889a      	ldrh	r2, [r3, #4]
   1bb6a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1bb6c:	4401      	add	r1, r0
	buf->len -= len;
   1bb6e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1bb70:	6019      	str	r1, [r3, #0]

	return data;
}
   1bb72:	4770      	bx	lr

0001bb74 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1bb74:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1bb76:	6803      	ldr	r3, [r0, #0]
   1bb78:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1bb7a:	2102      	movs	r1, #2
   1bb7c:	f7ff ffea 	bl	1bb54 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1bb80:	4620      	mov	r0, r4
   1bb82:	bd10      	pop	{r4, pc}

0001bb84 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bb84:	6802      	ldr	r2, [r0, #0]
   1bb86:	6880      	ldr	r0, [r0, #8]
}
   1bb88:	1a10      	subs	r0, r2, r0
   1bb8a:	4770      	bx	lr

0001bb8c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1bb8c:	8883      	ldrh	r3, [r0, #4]
   1bb8e:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1bb90:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1bb92:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1bb94:	6803      	ldr	r3, [r0, #0]
   1bb96:	1a5b      	subs	r3, r3, r1
}
   1bb98:	1ad0      	subs	r0, r2, r3
   1bb9a:	4770      	bx	lr

0001bb9c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1bb9c:	6903      	ldr	r3, [r0, #16]
   1bb9e:	b2c9      	uxtb	r1, r1
   1bba0:	220c      	movs	r2, #12
   1bba2:	fb01 3302 	mla	r3, r1, r2, r3
   1bba6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1bba8:	f000 0007 	and.w	r0, r0, #7
   1bbac:	4770      	bx	lr

0001bbae <set_on_state>:
	__asm__ volatile(
   1bbae:	f04f 0320 	mov.w	r3, #32
   1bbb2:	f3ef 8211 	mrs	r2, BASEPRI
   1bbb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1bbbe:	6803      	ldr	r3, [r0, #0]
   1bbc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1bbc4:	f043 0302 	orr.w	r3, r3, #2
   1bbc8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1bbca:	f382 8811 	msr	BASEPRI, r2
   1bbce:	f3bf 8f6f 	isb	sy
}
   1bbd2:	4770      	bx	lr

0001bbd4 <stop>:
{
   1bbd4:	b570      	push	{r4, r5, r6, lr}
   1bbd6:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1bbd8:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1bbda:	f04f 0420 	mov.w	r4, #32
   1bbde:	f3ef 8511 	mrs	r5, BASEPRI
   1bbe2:	f384 8812 	msr	BASEPRI_MAX, r4
   1bbe6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1bbea:	260c      	movs	r6, #12
   1bbec:	fb06 3401 	mla	r4, r6, r1, r3
   1bbf0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1bbf2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1bbf6:	d008      	beq.n	1bc0a <stop+0x36>
   1bbf8:	42a2      	cmp	r2, r4
   1bbfa:	d006      	beq.n	1bc0a <stop+0x36>
	__asm__ volatile(
   1bbfc:	f385 8811 	msr	BASEPRI, r5
   1bc00:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1bc04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1bc08:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1bc0a:	fb06 3301 	mla	r3, r6, r1, r3
   1bc0e:	2201      	movs	r2, #1
   1bc10:	641a      	str	r2, [r3, #64]	; 0x40
   1bc12:	f385 8811 	msr	BASEPRI, r5
   1bc16:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1bc1a:	6843      	ldr	r3, [r0, #4]
   1bc1c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1bc20:	685b      	ldr	r3, [r3, #4]
   1bc22:	4798      	blx	r3
	return 0;
   1bc24:	2000      	movs	r0, #0
   1bc26:	e7ef      	b.n	1bc08 <stop+0x34>

0001bc28 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1bc28:	2280      	movs	r2, #128	; 0x80
   1bc2a:	f7ff bfd3 	b.w	1bbd4 <stop>

0001bc2e <async_start>:
{
   1bc2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc30:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1bc32:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1bc34:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1bc36:	f04f 0520 	mov.w	r5, #32
   1bc3a:	f3ef 8611 	mrs	r6, BASEPRI
   1bc3e:	f385 8812 	msr	BASEPRI_MAX, r5
   1bc42:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1bc46:	250c      	movs	r5, #12
   1bc48:	fb05 4401 	mla	r4, r5, r1, r4
   1bc4c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1bc4e:	f005 0c07 	and.w	ip, r5, #7
   1bc52:	f1bc 0f01 	cmp.w	ip, #1
   1bc56:	d10c      	bne.n	1bc72 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1bc58:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   1bc5a:	f386 8811 	msr	BASEPRI, r6
   1bc5e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1bc62:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1bc66:	6843      	ldr	r3, [r0, #4]
   1bc68:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1bc6c:	4798      	blx	r3
	return 0;
   1bc6e:	2000      	movs	r0, #0
}
   1bc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1bc72:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1bc76:	42af      	cmp	r7, r5
   1bc78:	f386 8811 	msr	BASEPRI, r6
   1bc7c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1bc80:	bf0c      	ite	eq
   1bc82:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1bc86:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1bc8a:	e7f1      	b.n	1bc70 <async_start+0x42>

0001bc8c <api_start>:
{
   1bc8c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1bc8e:	2480      	movs	r4, #128	; 0x80
   1bc90:	9400      	str	r4, [sp, #0]
   1bc92:	f7ff ffcc 	bl	1bc2e <async_start>
}
   1bc96:	b002      	add	sp, #8
   1bc98:	bd10      	pop	{r4, pc}

0001bc9a <onoff_started_callback>:
{
   1bc9a:	b410      	push	{r4}
	return &data->mgr[type];
   1bc9c:	6900      	ldr	r0, [r0, #16]
   1bc9e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1bca0:	241c      	movs	r4, #28
   1bca2:	fb03 0004 	mla	r0, r3, r4, r0
   1bca6:	2100      	movs	r1, #0
}
   1bca8:	bc10      	pop	{r4}
	notify(mgr, 0);
   1bcaa:	4710      	bx	r2

0001bcac <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1bcac:	2000      	movs	r0, #0
   1bcae:	f000 bf40 	b.w	1cb32 <nrfx_clock_stop>

0001bcb2 <blocking_start_callback>:
{
   1bcb2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1bcb4:	f7fc b8b0 	b.w	17e18 <z_impl_k_sem_give>

0001bcb8 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   1bcb8:	2000      	movs	r0, #0
   1bcba:	4770      	bx	lr

0001bcbc <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   1bcbc:	b538      	push	{r3, r4, r5, lr}
   1bcbe:	460c      	mov	r4, r1
   1bcc0:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   1bcc2:	f7e9 f963 	bl	4f8c <bt_is_ready>
   1bcc6:	b128      	cbz	r0, 1bcd4 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   1bcc8:	4629      	mov	r1, r5
   1bcca:	4620      	mov	r0, r4
}
   1bccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   1bcd0:	f7e8 bc0a 	b.w	44e8 <bt_hci_le_rand>
}
   1bcd4:	f06f 000a 	mvn.w	r0, #10
   1bcd8:	bd38      	pop	{r3, r4, r5, pc}

0001bcda <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bcda:	6843      	ldr	r3, [r0, #4]
   1bcdc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1bcde:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1bce2:	600b      	str	r3, [r1, #0]
}
   1bce4:	2000      	movs	r0, #0
   1bce6:	4770      	bx	lr

0001bce8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bce8:	6843      	ldr	r3, [r0, #4]
   1bcea:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1bcec:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1bcf0:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1bcf4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1bcf8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1bcfc:	2000      	movs	r0, #0
   1bcfe:	4770      	bx	lr

0001bd00 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bd00:	6843      	ldr	r3, [r0, #4]
   1bd02:	685b      	ldr	r3, [r3, #4]
}
   1bd04:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1bd06:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1bd0a:	4770      	bx	lr

0001bd0c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bd0c:	6843      	ldr	r3, [r0, #4]
   1bd0e:	685b      	ldr	r3, [r3, #4]
}
   1bd10:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1bd12:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1bd16:	4770      	bx	lr

0001bd18 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1bd18:	6843      	ldr	r3, [r0, #4]
   1bd1a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1bd1c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1bd20:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1bd24:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1bd26:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1bd2a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1bd2e:	2000      	movs	r0, #0
   1bd30:	4770      	bx	lr

0001bd32 <gpio_nrfx_manage_callback>:
{
   1bd32:	b510      	push	{r4, lr}
	return port->data;
   1bd34:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1bd36:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1bd38:	b1f8      	cbz	r0, 1bd7a <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd3a:	4288      	cmp	r0, r1
   1bd3c:	d119      	bne.n	1bd72 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1bd3e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1bd40:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1bd42:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bd44:	42a1      	cmp	r1, r4
   1bd46:	d100      	bne.n	1bd4a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1bd48:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1bd4a:	2000      	movs	r0, #0
   1bd4c:	6008      	str	r0, [r1, #0]
	if (set) {
   1bd4e:	b12a      	cbz	r2, 1bd5c <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1bd50:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1bd52:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bd54:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1bd56:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bd58:	b902      	cbnz	r2, 1bd5c <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1bd5a:	6099      	str	r1, [r3, #8]
	return 0;
   1bd5c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1bd5e:	e010      	b.n	1bd82 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd60:	4281      	cmp	r1, r0
   1bd62:	d106      	bne.n	1bd72 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1bd64:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1bd66:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1bd68:	6898      	ldr	r0, [r3, #8]
   1bd6a:	4281      	cmp	r1, r0
   1bd6c:	d1ed      	bne.n	1bd4a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1bd6e:	609c      	str	r4, [r3, #8]
}
   1bd70:	e7eb      	b.n	1bd4a <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1bd72:	4604      	mov	r4, r0
   1bd74:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bd76:	2800      	cmp	r0, #0
   1bd78:	d1f2      	bne.n	1bd60 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1bd7a:	2a00      	cmp	r2, #0
   1bd7c:	d1e8      	bne.n	1bd50 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1bd7e:	f06f 0015 	mvn.w	r0, #21
}
   1bd82:	bd10      	pop	{r4, pc}

0001bd84 <pin_interrupt_configure>:
	rc = i2c_write_dt(&cfg->bus, &irq_buf.reg, sizeof(irq_buf));

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
   1bd84:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
}
   1bd88:	bf14      	ite	ne
   1bd8a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   1bd8e:	2000      	moveq	r0, #0
   1bd90:	4770      	bx	lr

0001bd92 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   1bd92:	f7fc b867 	b.w	17e64 <z_impl_k_sem_take>

0001bd96 <i2c_write>:
{
   1bd96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1bd98:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1bd9c:	2202      	movs	r2, #2
   1bd9e:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1bda2:	6882      	ldr	r2, [r0, #8]
   1bda4:	a901      	add	r1, sp, #4
   1bda6:	6894      	ldr	r4, [r2, #8]
   1bda8:	2201      	movs	r2, #1
   1bdaa:	47a0      	blx	r4
}
   1bdac:	b004      	add	sp, #16
   1bdae:	bd10      	pop	{r4, pc}

0001bdb0 <i2c_write_dt>:
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
   1bdb0:	8883      	ldrh	r3, [r0, #4]
   1bdb2:	6800      	ldr	r0, [r0, #0]
   1bdb4:	f7ff bfef 	b.w	1bd96 <i2c_write>

0001bdb8 <i2c_reg_write_word_be>:
{
   1bdb8:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   1bdba:	0a13      	lsrs	r3, r2, #8
   1bdbc:	f88d 1004 	strb.w	r1, [sp, #4]
   1bdc0:	f88d 2006 	strb.w	r2, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 3);
   1bdc4:	a901      	add	r1, sp, #4
   1bdc6:	2203      	movs	r2, #3
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   1bdc8:	f88d 3005 	strb.w	r3, [sp, #5]
	return i2c_write_dt(bus, tx_buf, 3);
   1bdcc:	f7ff fff0 	bl	1bdb0 <i2c_write_dt>
}
   1bdd0:	b003      	add	sp, #12
   1bdd2:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdd6 <port_write>:
{
   1bdd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bdda:	4606      	mov	r6, r0
   1bddc:	4689      	mov	r9, r1
   1bdde:	4614      	mov	r4, r2
   1bde0:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   1bde2:	f001 f876 	bl	1ced2 <k_is_in_isr>
   1bde6:	bb00      	cbnz	r0, 1be2a <port_write+0x54>
	const struct sx1509b_config *cfg = dev->config;
   1bde8:	6875      	ldr	r5, [r6, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1bdea:	6936      	ldr	r6, [r6, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   1bdec:	f106 071c 	add.w	r7, r6, #28
   1bdf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bdf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bdf8:	4638      	mov	r0, r7
   1bdfa:	f7ff ffca 	bl	1bd92 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   1bdfe:	8ab2      	ldrh	r2, [r6, #20]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   1be00:	4054      	eors	r4, r2
   1be02:	ea04 0409 	and.w	r4, r4, r9
   1be06:	ea82 0208 	eor.w	r2, r2, r8
   1be0a:	4054      	eors	r4, r2
   1be0c:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA, out);
   1be0e:	1d28      	adds	r0, r5, #4
   1be10:	4622      	mov	r2, r4
   1be12:	2110      	movs	r1, #16
   1be14:	f7ff ffd0 	bl	1bdb8 <i2c_reg_write_word_be>
	if (rc == 0) {
   1be18:	4605      	mov	r5, r0
   1be1a:	b900      	cbnz	r0, 1be1e <port_write+0x48>
		*outp = out;
   1be1c:	82b4      	strh	r4, [r6, #20]
	z_impl_k_sem_give(sem);
   1be1e:	4638      	mov	r0, r7
   1be20:	f7fb fffa 	bl	17e18 <z_impl_k_sem_give>
}
   1be24:	4628      	mov	r0, r5
   1be26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   1be2a:	f06f 050a 	mvn.w	r5, #10
   1be2e:	e7f9      	b.n	1be24 <port_write+0x4e>

0001be30 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   1be30:	2200      	movs	r2, #0
{
   1be32:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   1be34:	4611      	mov	r1, r2
   1be36:	f7ff bfce 	b.w	1bdd6 <port_write>

0001be3a <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   1be3a:	2300      	movs	r3, #0
   1be3c:	461a      	mov	r2, r3
   1be3e:	f7ff bfca 	b.w	1bdd6 <port_write>

0001be42 <port_set_bits>:
{
   1be42:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   1be44:	2300      	movs	r3, #0
   1be46:	f7ff bfc6 	b.w	1bdd6 <port_write>

0001be4a <port_set_masked>:
	return port_write(dev, mask, value, 0);
   1be4a:	2300      	movs	r3, #0
   1be4c:	f7ff bfc3 	b.w	1bdd6 <port_write>

0001be50 <write_pin_state.constprop.0>:
static int write_pin_state(const struct sx1509b_config *cfg,
   1be50:	b510      	push	{r4, lr}
   1be52:	b086      	sub	sp, #24
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   1be54:	2300      	movs	r3, #0
   1be56:	f88d 3004 	strb.w	r3, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   1be5a:	880b      	ldrh	r3, [r1, #0]
   1be5c:	ba5b      	rev16	r3, r3
   1be5e:	f8ad 3005 	strh.w	r3, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   1be62:	884b      	ldrh	r3, [r1, #2]
   1be64:	ba5b      	rev16	r3, r3
   1be66:	f8ad 3007 	strh.w	r3, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   1be6a:	888b      	ldrh	r3, [r1, #4]
   1be6c:	ba5b      	rev16	r3, r3
   1be6e:	f8ad 3009 	strh.w	r3, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   1be72:	88cb      	ldrh	r3, [r1, #6]
   1be74:	ba5b      	rev16	r3, r3
   1be76:	f8ad 300b 	strh.w	r3, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   1be7a:	890b      	ldrh	r3, [r1, #8]
   1be7c:	ba5b      	rev16	r3, r3
   1be7e:	f8ad 300d 	strh.w	r3, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   1be82:	894b      	ldrh	r3, [r1, #10]
   1be84:	ba5b      	rev16	r3, r3
   1be86:	f8ad 300f 	strh.w	r3, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   1be8a:	898b      	ldrh	r3, [r1, #12]
   1be8c:	ba5b      	rev16	r3, r3
   1be8e:	f8ad 3011 	strh.w	r3, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1be92:	89cb      	ldrh	r3, [r1, #14]
   1be94:	ba5b      	rev16	r3, r3
   1be96:	f8ad 3013 	strh.w	r3, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   1be9a:	8a0b      	ldrh	r3, [r1, #16]
   1be9c:	ba59      	rev16	r1, r3
   1be9e:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   1bea2:	1d04      	adds	r4, r0, #4
	if (data_first) {
   1bea4:	b162      	cbz	r2, 1bec0 <write_pin_state.constprop.0+0x70>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   1bea6:	461a      	mov	r2, r3
   1bea8:	2110      	movs	r1, #16
   1beaa:	4620      	mov	r0, r4
   1beac:	f7ff ff84 	bl	1bdb8 <i2c_reg_write_word_be>
		if (rc == 0) {
   1beb0:	b920      	cbnz	r0, 1bebc <write_pin_state.constprop.0+0x6c>
			rc = i2c_write_dt(&cfg->bus, &pin_buf.reg,
   1beb2:	2211      	movs	r2, #17
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   1beb4:	a901      	add	r1, sp, #4
   1beb6:	4620      	mov	r0, r4
   1beb8:	f7ff ff7a 	bl	1bdb0 <i2c_write_dt>
}
   1bebc:	b006      	add	sp, #24
   1bebe:	bd10      	pop	{r4, pc}
		rc = i2c_write_dt(&cfg->bus, &pin_buf.reg, sizeof(pin_buf));
   1bec0:	2213      	movs	r2, #19
   1bec2:	e7f7      	b.n	1beb4 <write_pin_state.constprop.0+0x64>

0001bec4 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   1bec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sx1509b_config *cfg = dev->config;
   1bec6:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1bec8:	6905      	ldr	r5, [r0, #16]
	int rc;

	if (!device_is_ready(cfg->bus.bus)) {
   1beca:	6870      	ldr	r0, [r6, #4]
   1becc:	f000 ff24 	bl	1cd18 <z_device_is_ready>
   1bed0:	2800      	cmp	r0, #0
   1bed2:	d055      	beq.n	1bf80 <sx1509b_init+0xbc>
	uint8_t tx_buf[2] = {reg_addr, value};
   1bed4:	f241 227d 	movw	r2, #4733	; 0x127d
 * @return a value from i2c_reg_write_byte()
 */
static inline int i2c_reg_write_byte_dt(const struct i2c_dt_spec *spec,
					uint8_t reg_addr, uint8_t value)
{
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1bed8:	6870      	ldr	r0, [r6, #4]
   1beda:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1bedc:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1bee0:	a901      	add	r1, sp, #4
   1bee2:	2202      	movs	r2, #2
   1bee4:	f7ff ff57 	bl	1bd96 <i2c_write>
	};
#endif

	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
				   SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
   1bee8:	4604      	mov	r4, r0
   1beea:	2800      	cmp	r0, #0
   1beec:	d141      	bne.n	1bf72 <sx1509b_init+0xae>
	uint8_t tx_buf[2] = {reg_addr, value};
   1beee:	f243 427d 	movw	r2, #13437	; 0x347d
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1bef2:	6870      	ldr	r0, [r6, #4]
   1bef4:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1bef6:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1befa:	a901      	add	r1, sp, #4
   1befc:	2202      	movs	r2, #2
   1befe:	f7ff ff4a 	bl	1bd96 <i2c_write>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
				   SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
   1bf02:	4604      	mov	r4, r0
   1bf04:	bba8      	cbnz	r0, 1bf72 <sx1509b_init+0xae>
	return z_impl_k_sleep(timeout);
   1bf06:	2100      	movs	r1, #0
   1bf08:	2063      	movs	r0, #99	; 0x63
   1bf0a:	f7fc fc87 	bl	1881c <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1bf0e:	4621      	mov	r1, r4
   1bf10:	2212      	movs	r2, #18
   1bf12:	1d28      	adds	r0, r5, #4
   1bf14:	f7fd fe79 	bl	19c0a <memset>
   1bf18:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1bf1c:	832c      	strh	r4, [r5, #24]
   1bf1e:	76ac      	strb	r4, [r5, #26]
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1bf20:	82ab      	strh	r3, [r5, #20]
	uint8_t tx_buf[2] = {reg_addr, value};
   1bf22:	f244 021e 	movw	r2, #16414	; 0x401e
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1bf26:	6870      	ldr	r0, [r6, #4]
   1bf28:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1bf2a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1bf2e:	a901      	add	r1, sp, #4
   1bf30:	2202      	movs	r2, #2
   1bf32:	f7ff ff30 	bl	1bd96 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1bf36:	4627      	mov	r7, r4
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_CLOCK,
				   SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
   1bf38:	4604      	mov	r4, r0
   1bf3a:	b9d0      	cbnz	r0, 1bf72 <sx1509b_init+0xae>
	rc = i2c_reg_write_byte_dt(&cfg->bus, SX1509B_REG_RESET,
   1bf3c:	3604      	adds	r6, #4
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DATA,
   1bf3e:	8aaa      	ldrh	r2, [r5, #20]
   1bf40:	2110      	movs	r1, #16
   1bf42:	4630      	mov	r0, r6
   1bf44:	f7ff ff38 	bl	1bdb8 <i2c_reg_write_word_be>
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
   1bf48:	4604      	mov	r4, r0
   1bf4a:	b990      	cbnz	r0, 1bf72 <sx1509b_init+0xae>
		rc = i2c_reg_write_word_be(&cfg->bus, SX1509B_REG_DIR,
   1bf4c:	8a6a      	ldrh	r2, [r5, #18]
   1bf4e:	210e      	movs	r1, #14
   1bf50:	4630      	mov	r0, r6
   1bf52:	f7ff ff31 	bl	1bdb8 <i2c_reg_write_word_be>
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
   1bf56:	4604      	mov	r4, r0
   1bf58:	b958      	cbnz	r0, 1bf72 <sx1509b_init+0xae>
	uint8_t tx_buf[3] = { reg_addr, value };
   1bf5a:	f649 031f 	movw	r3, #38943	; 0x981f
	return i2c_write_dt(bus, tx_buf, 2);
   1bf5e:	2202      	movs	r2, #2
   1bf60:	a901      	add	r1, sp, #4
   1bf62:	4630      	mov	r0, r6
	uint8_t tx_buf[3] = { reg_addr, value };
   1bf64:	f8ad 3004 	strh.w	r3, [sp, #4]
   1bf68:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write_dt(bus, tx_buf, 2);
   1bf6c:	f7ff ff20 	bl	1bdb0 <i2c_write_dt>
   1bf70:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1bf72:	f105 001c 	add.w	r0, r5, #28
   1bf76:	f7fb ff4f 	bl	17e18 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   1bf7a:	4620      	mov	r0, r4
   1bf7c:	b003      	add	sp, #12
   1bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = -ENODEV;
   1bf80:	f06f 0412 	mvn.w	r4, #18
   1bf84:	e7f5      	b.n	1bf72 <sx1509b_init+0xae>

0001bf86 <sx1509b_config>:
{
   1bf86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf8a:	460d      	mov	r5, r1
	const struct sx1509b_config *cfg = dev->config;
   1bf8c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1bf90:	6904      	ldr	r4, [r0, #16]
{
   1bf92:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   1bf94:	f000 ff9d 	bl	1ced2 <k_is_in_isr>
   1bf98:	4682      	mov	sl, r0
   1bf9a:	2800      	cmp	r0, #0
   1bf9c:	f040 8084 	bne.w	1c0a8 <sx1509b_config+0x122>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1bfa0:	f104 081c 	add.w	r8, r4, #28
   1bfa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bfac:	4640      	mov	r0, r8
   1bfae:	f7ff fef0 	bl	1bd92 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   1bfb2:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   1bfb4:	8ae2      	ldrh	r2, [r4, #22]
		drv_data->led_drv_enable &= ~BIT(pin);
   1bfb6:	40ae      	lsls	r6, r5
   1bfb8:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1bfba:	fa22 f505 	lsr.w	r5, r2, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   1bfbe:	ea6f 0b06 	mvn.w	fp, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1bfc2:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   1bfc4:	fa1f fb8b 	uxth.w	fp, fp
	if (drv_data->led_drv_enable & BIT(pin)) {
   1bfc8:	d44c      	bmi.n	1c064 <sx1509b_config+0xde>
	pins->open_drain &= ~BIT(pin);
   1bfca:	89e3      	ldrh	r3, [r4, #14]
   1bfcc:	ea03 020b 	and.w	r2, r3, fp
   1bfd0:	81e2      	strh	r2, [r4, #14]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   1bfd2:	07ba      	lsls	r2, r7, #30
   1bfd4:	d458      	bmi.n	1c088 <sx1509b_config+0x102>
		pins->pull_up |= BIT(pin);
   1bfd6:	8963      	ldrh	r3, [r4, #10]
	if ((flags & GPIO_PULL_UP) != 0) {
   1bfd8:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   1bfda:	bf4c      	ite	mi
   1bfdc:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   1bfde:	ea0b 0303 	andpl.w	r3, fp, r3
   1bfe2:	8163      	strh	r3, [r4, #10]
		pins->pull_down |= BIT(pin);
   1bfe4:	89a3      	ldrh	r3, [r4, #12]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   1bfe6:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   1bfe8:	bf4c      	ite	mi
   1bfea:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   1bfec:	ea0b 0303 	andpl.w	r3, fp, r3
   1bff0:	81a3      	strh	r3, [r4, #12]
		pins->input_disable &= ~BIT(pin);
   1bff2:	88a3      	ldrh	r3, [r4, #4]
	if ((flags & GPIO_INPUT) != 0) {
   1bff4:	03fa      	lsls	r2, r7, #15
		pins->input_disable &= ~BIT(pin);
   1bff6:	bf4c      	ite	mi
   1bff8:	ea0b 0303 	andmi.w	r3, fp, r3
		pins->input_disable |= BIT(pin);
   1bffc:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   1bffe:	03bd      	lsls	r5, r7, #14
   1c000:	80a3      	strh	r3, [r4, #4]
		pins->dir &= ~BIT(pin);
   1c002:	8a63      	ldrh	r3, [r4, #18]
	if ((flags & GPIO_OUTPUT) != 0) {
   1c004:	d54a      	bpl.n	1c09c <sx1509b_config+0x116>
		pins->dir &= ~BIT(pin);
   1c006:	ea0b 0303 	and.w	r3, fp, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1c00a:	0378      	lsls	r0, r7, #13
		pins->dir &= ~BIT(pin);
   1c00c:	8263      	strh	r3, [r4, #18]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1c00e:	d540      	bpl.n	1c092 <sx1509b_config+0x10c>
			pins->data &= ~BIT(pin);
   1c010:	8aa3      	ldrh	r3, [r4, #20]
   1c012:	ea0b 0303 	and.w	r3, fp, r3
			pins->data |= BIT(pin);
   1c016:	82a3      	strh	r3, [r4, #20]
			data_first = true;
   1c018:	f04f 0a01 	mov.w	sl, #1
		debounce->debounce_enable |= BIT(pin);
   1c01c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
	if ((flags & SX1509B_GPIO_DEBOUNCE) != 0) {
   1c020:	05fa      	lsls	r2, r7, #23
		debounce->debounce_enable |= BIT(pin);
   1c022:	bf4c      	ite	mi
   1c024:	4333      	orrmi	r3, r6
		debounce->debounce_enable &= ~BIT(pin);
   1c026:	ea0b 0303 	andpl.w	r3, fp, r3
   1c02a:	f8a4 3019 	strh.w	r3, [r4, #25]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   1c02e:	4652      	mov	r2, sl
   1c030:	1d21      	adds	r1, r4, #4
   1c032:	4648      	mov	r0, r9
   1c034:	f7ff ff0c 	bl	1be50 <write_pin_state.constprop.0>
	if (rc == 0) {
   1c038:	4605      	mov	r5, r0
   1c03a:	b9f0      	cbnz	r0, 1c07a <sx1509b_config+0xf4>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   1c03c:	2322      	movs	r3, #34	; 0x22
   1c03e:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   1c042:	7e23      	ldrb	r3, [r4, #24]
   1c044:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1c048:	f8b4 3019 	ldrh.w	r3, [r4, #25]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   1c04c:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   1c04e:	ba5b      	rev16	r3, r3
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   1c050:	eb0d 0102 	add.w	r1, sp, r2
   1c054:	eb09 0002 	add.w	r0, r9, r2
			= sys_cpu_to_be16(debounce->debounce_enable);
   1c058:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write_dt(&cfg->bus, &debounce_buf.reg,
   1c05c:	f7ff fea8 	bl	1bdb0 <i2c_write_dt>
   1c060:	4605      	mov	r5, r0
   1c062:	e00a      	b.n	1c07a <sx1509b_config+0xf4>
		drv_data->led_drv_enable &= ~BIT(pin);
   1c064:	ea02 020b 	and.w	r2, r2, fp
   1c068:	82e2      	strh	r2, [r4, #22]
		rc = i2c_reg_write_word_be(&cfg->bus,
   1c06a:	2120      	movs	r1, #32
   1c06c:	f109 0004 	add.w	r0, r9, #4
   1c070:	f7ff fea2 	bl	1bdb8 <i2c_reg_write_word_be>
		if (rc) {
   1c074:	4605      	mov	r5, r0
   1c076:	2800      	cmp	r0, #0
   1c078:	d0a7      	beq.n	1bfca <sx1509b_config+0x44>
   1c07a:	4640      	mov	r0, r8
   1c07c:	f7fb fecc 	bl	17e18 <z_impl_k_sem_give>
}
   1c080:	4628      	mov	r0, r5
   1c082:	b003      	add	sp, #12
   1c084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   1c088:	077d      	lsls	r5, r7, #29
   1c08a:	d50a      	bpl.n	1c0a2 <sx1509b_config+0x11c>
			pins->open_drain |= BIT(pin);
   1c08c:	4333      	orrs	r3, r6
   1c08e:	81e3      	strh	r3, [r4, #14]
   1c090:	e7a1      	b.n	1bfd6 <sx1509b_config+0x50>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1c092:	0339      	lsls	r1, r7, #12
   1c094:	d5c2      	bpl.n	1c01c <sx1509b_config+0x96>
			pins->data |= BIT(pin);
   1c096:	8aa3      	ldrh	r3, [r4, #20]
   1c098:	4333      	orrs	r3, r6
			data_first = true;
   1c09a:	e7bc      	b.n	1c016 <sx1509b_config+0x90>
		pins->dir |= BIT(pin);
   1c09c:	4333      	orrs	r3, r6
   1c09e:	8263      	strh	r3, [r4, #18]
   1c0a0:	e7bc      	b.n	1c01c <sx1509b_config+0x96>
			rc = -ENOTSUP;
   1c0a2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1c0a6:	e7e8      	b.n	1c07a <sx1509b_config+0xf4>
		return -EWOULDBLOCK;
   1c0a8:	f06f 050a 	mvn.w	r5, #10
   1c0ac:	e7e8      	b.n	1c080 <sx1509b_config+0xfa>

0001c0ae <port_get>:
{
   1c0ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0b0:	b089      	sub	sp, #36	; 0x24
	const struct sx1509b_config *cfg = dev->config;
   1c0b2:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1c0b4:	6905      	ldr	r5, [r0, #16]
{
   1c0b6:	460e      	mov	r6, r1
	if (k_is_in_isr()) {
   1c0b8:	f000 ff0b 	bl	1ced2 <k_is_in_isr>
   1c0bc:	4604      	mov	r4, r0
   1c0be:	bb60      	cbnz	r0, 1c11a <port_get+0x6c>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1c0c0:	351c      	adds	r5, #28
   1c0c2:	4628      	mov	r0, r5
   1c0c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c0c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c0cc:	f7ff fe61 	bl	1bd92 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   1c0d0:	f10d 0205 	add.w	r2, sp, #5
   1c0d4:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   1c0d6:	2201      	movs	r2, #1
	return i2c_write_read(spec->bus, spec->addr,
   1c0d8:	6878      	ldr	r0, [r7, #4]
	msg[0].len = num_write;
   1c0da:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   1c0dc:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   1c0de:	f10d 0206 	add.w	r2, sp, #6
   1c0e2:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c0e6:	2107      	movs	r1, #7
	return i2c_write_read(spec->bus, spec->addr,
   1c0e8:	893b      	ldrh	r3, [r7, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1c0ea:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1c0ec:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1c0ee:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   1c0f2:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c0f4:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c0f8:	6881      	ldr	r1, [r0, #8]
   1c0fa:	688c      	ldr	r4, [r1, #8]
   1c0fc:	a902      	add	r1, sp, #8
   1c0fe:	47a0      	blx	r4
	if (rc != 0) {
   1c100:	4604      	mov	r4, r0
   1c102:	b920      	cbnz	r0, 1c10e <port_get+0x60>
	*value = sys_be16_to_cpu(pin_data);
   1c104:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c108:	ba5b      	rev16	r3, r3
   1c10a:	b29b      	uxth	r3, r3
   1c10c:	6033      	str	r3, [r6, #0]
   1c10e:	4628      	mov	r0, r5
   1c110:	f7fb fe82 	bl	17e18 <z_impl_k_sem_give>
}
   1c114:	4620      	mov	r0, r4
   1c116:	b009      	add	sp, #36	; 0x24
   1c118:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EWOULDBLOCK;
   1c11a:	f06f 040a 	mvn.w	r4, #10
   1c11e:	e7f9      	b.n	1c114 <port_get+0x66>

0001c120 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & i2c_config) {
   1c120:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   1c122:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & i2c_config) {
   1c124:	d405      	bmi.n	1c132 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(i2c_config)) {
   1c126:	f3c1 0142 	ubfx	r1, r1, #1, #3
   1c12a:	2901      	cmp	r1, #1
   1c12c:	d004      	beq.n	1c138 <i2c_nrfx_twim_configure+0x18>
   1c12e:	2902      	cmp	r1, #2
   1c130:	d009      	beq.n	1c146 <i2c_nrfx_twim_configure+0x26>
   1c132:	f06f 0015 	mvn.w	r0, #21
}
   1c136:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1c138:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1c13a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1c13e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   1c142:	2000      	movs	r0, #0
   1c144:	4770      	bx	lr
		nrf_twim_frequency_set(dev_config->twim.p_twim,
   1c146:	681b      	ldr	r3, [r3, #0]
   1c148:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1c14c:	e7f7      	b.n	1c13e <i2c_nrfx_twim_configure+0x1e>

0001c14e <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(I2C(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_HAS_HW_NRF_TWIM0
I2C_NRFX_TWIM_DEVICE(0);
   1c14e:	2200      	movs	r2, #0
   1c150:	2101      	movs	r1, #1
   1c152:	2003      	movs	r0, #3
   1c154:	f7e7 bbdc 	b.w	3910 <z_arm_irq_priority_set>

0001c158 <irq_connect1>:
#endif

#ifdef CONFIG_HAS_HW_NRF_TWIM1
I2C_NRFX_TWIM_DEVICE(1);
   1c158:	2200      	movs	r2, #0
   1c15a:	2101      	movs	r1, #1
   1c15c:	2004      	movs	r0, #4
   1c15e:	f7e7 bbd7 	b.w	3910 <z_arm_irq_priority_set>

0001c162 <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   1c162:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
   1c164:	2100      	movs	r1, #0
   1c166:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
   1c168:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1c16a:	f000 f80a 	bl	1c182 <pinctrl_lookup_state>
	if (ret < 0) {
   1c16e:	2800      	cmp	r0, #0
   1c170:	db05      	blt.n	1c17e <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
   1c172:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c174:	6822      	ldr	r2, [r4, #0]
   1c176:	7919      	ldrb	r1, [r3, #4]
   1c178:	6818      	ldr	r0, [r3, #0]
   1c17a:	f7f9 f9f9 	bl	15570 <pinctrl_configure_pins>
}
   1c17e:	b002      	add	sp, #8
   1c180:	bd10      	pop	{r4, pc}

0001c182 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1c182:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   1c184:	6843      	ldr	r3, [r0, #4]
   1c186:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   1c188:	7a05      	ldrb	r5, [r0, #8]
   1c18a:	6844      	ldr	r4, [r0, #4]
   1c18c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1c190:	42a3      	cmp	r3, r4
   1c192:	d302      	bcc.n	1c19a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   1c194:	f06f 0001 	mvn.w	r0, #1
}
   1c198:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   1c19a:	795c      	ldrb	r4, [r3, #5]
   1c19c:	428c      	cmp	r4, r1
   1c19e:	d001      	beq.n	1c1a4 <pinctrl_lookup_state+0x22>
		(*state)++;
   1c1a0:	3308      	adds	r3, #8
   1c1a2:	e7f0      	b.n	1c186 <pinctrl_lookup_state+0x4>
			return 0;
   1c1a4:	2000      	movs	r0, #0
   1c1a6:	e7f7      	b.n	1c198 <pinctrl_lookup_state+0x16>

0001c1a8 <regulator_common_data_init>:
 */

#include <zephyr/drivers/regulator.h>

void regulator_common_data_init(const struct device *dev)
{
   1c1a8:	b510      	push	{r4, lr}
	struct regulator_common_data *data = dev->data;
   1c1aa:	6904      	ldr	r4, [r0, #16]
	return z_impl_k_mutex_init(mutex);
   1c1ac:	4620      	mov	r0, r4
   1c1ae:	f000 feaa 	bl	1cf06 <z_impl_k_mutex_init>

#ifdef CONFIG_REGULATOR_THREAD_SAFE_REFCNT
	(void)k_mutex_init(&data->lock);
#endif
	data->refcnt = 0;
   1c1b2:	2300      	movs	r3, #0
   1c1b4:	6163      	str	r3, [r4, #20]
}
   1c1b6:	bd10      	pop	{r4, pc}

0001c1b8 <regulator_set_voltage>:
	return false;
}

int regulator_set_voltage(const struct device *dev, int32_t min_uv,
			  int32_t max_uv)
{
   1c1b8:	b4f0      	push	{r4, r5, r6, r7}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_voltage == NULL) {
   1c1ba:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   1c1be:	691b      	ldr	r3, [r3, #16]
   1c1c0:	b13b      	cbz	r3, 1c1d2 <regulator_set_voltage+0x1a>
		return -ENOSYS;
	}

	/* voltage may not be allowed, even if supported */
	if ((min_uv > config->max_uv) || (max_uv < config->min_uv)) {
   1c1c2:	6877      	ldr	r7, [r6, #4]
   1c1c4:	428f      	cmp	r7, r1
   1c1c6:	db08      	blt.n	1c1da <regulator_set_voltage+0x22>
   1c1c8:	6835      	ldr	r5, [r6, #0]
   1c1ca:	4295      	cmp	r5, r2
   1c1cc:	dc05      	bgt.n	1c1da <regulator_set_voltage+0x22>
		return -EINVAL;
	}

	return api->set_voltage(dev, min_uv, max_uv);
}
   1c1ce:	bcf0      	pop	{r4, r5, r6, r7}
	return api->set_voltage(dev, min_uv, max_uv);
   1c1d0:	4718      	bx	r3
		return -ENOSYS;
   1c1d2:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   1c1d6:	bcf0      	pop	{r4, r5, r6, r7}
   1c1d8:	4770      	bx	lr
		return -EINVAL;
   1c1da:	f06f 0015 	mvn.w	r0, #21
   1c1de:	e7fa      	b.n	1c1d6 <regulator_set_voltage+0x1e>

0001c1e0 <regulator_set_mode>:

	return api->set_current_limit(dev, min_ua, max_ua);
}

int regulator_set_mode(const struct device *dev, regulator_mode_t mode)
{
   1c1e0:	b470      	push	{r4, r5, r6}
	const struct regulator_common_config *config = dev->config;
	const struct regulator_driver_api *api = dev->api;

	if (api->set_mode == NULL) {
   1c1e2:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
   1c1e6:	6a15      	ldr	r5, [r2, #32]
{
   1c1e8:	4603      	mov	r3, r0
   1c1ea:	460c      	mov	r4, r1
	if (api->set_mode == NULL) {
   1c1ec:	b19d      	cbz	r5, 1c216 <regulator_set_mode+0x36>
		return -ENOSYS;
	}

	/* no mode restrictions */
	if (config->allowed_modes_cnt == 0U) {
   1c1ee:	7e32      	ldrb	r2, [r6, #24]
   1c1f0:	b912      	cbnz	r2, 1c1f8 <regulator_set_mode+0x18>
	}

	/* check if mode is allowed, apply if it is */
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
		if (mode == config->allowed_modes[i]) {
			return api->set_mode(dev, mode);
   1c1f2:	462b      	mov	r3, r5
		}
	}

	return -ENOTSUP;
}
   1c1f4:	bc70      	pop	{r4, r5, r6}
			return api->set_mode(dev, mode);
   1c1f6:	4718      	bx	r3
   1c1f8:	6970      	ldr	r0, [r6, #20]
   1c1fa:	4402      	add	r2, r0
		if (mode == config->allowed_modes[i]) {
   1c1fc:	f810 1b01 	ldrb.w	r1, [r0], #1
   1c200:	42a1      	cmp	r1, r4
   1c202:	d102      	bne.n	1c20a <regulator_set_mode+0x2a>
			return api->set_mode(dev, mode);
   1c204:	4621      	mov	r1, r4
   1c206:	4618      	mov	r0, r3
   1c208:	e7f3      	b.n	1c1f2 <regulator_set_mode+0x12>
	for (uint8_t i = 0U; i < config->allowed_modes_cnt; i++) {
   1c20a:	4290      	cmp	r0, r2
   1c20c:	d1f6      	bne.n	1c1fc <regulator_set_mode+0x1c>
	return -ENOTSUP;
   1c20e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1c212:	bc70      	pop	{r4, r5, r6}
   1c214:	4770      	bx	lr
		return -ENOSYS;
   1c216:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1c21a:	e7fa      	b.n	1c212 <regulator_set_mode+0x32>

0001c21c <regulator_common_init>:
{
   1c21c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct regulator_common_config *config = dev->config;
   1c220:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
{
   1c224:	460e      	mov	r6, r1
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   1c226:	f898 1019 	ldrb.w	r1, [r8, #25]
	struct regulator_common_data *data = dev->data;
   1c22a:	6905      	ldr	r5, [r0, #16]
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   1c22c:	29ff      	cmp	r1, #255	; 0xff
{
   1c22e:	4604      	mov	r4, r0
	if (config->initial_mode != REGULATOR_INITIAL_MODE_UNKNOWN) {
   1c230:	d123      	bne.n	1c27a <regulator_common_init+0x5e>
	if (config->init_uv > INT32_MIN) {
   1c232:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1c236:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c23a:	d005      	beq.n	1c248 <regulator_common_init+0x2c>
		ret = regulator_set_voltage(dev, config->init_uv, config->init_uv);
   1c23c:	4611      	mov	r1, r2
   1c23e:	4620      	mov	r0, r4
   1c240:	f7ff ffba 	bl	1c1b8 <regulator_set_voltage>
		if (ret < 0) {
   1c244:	2800      	cmp	r0, #0
   1c246:	db1c      	blt.n	1c282 <regulator_common_init+0x66>
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   1c248:	f8d8 3000 	ldr.w	r3, [r8]
   1c24c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1c250:	d01a      	beq.n	1c288 <regulator_common_init+0x6c>
					int32_t *volt_uv)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)dev->api;

	if (api->get_voltage == NULL) {
   1c252:	68a3      	ldr	r3, [r4, #8]
   1c254:	695b      	ldr	r3, [r3, #20]
   1c256:	b38b      	cbz	r3, 1c2bc <regulator_common_init+0xa0>
		return -ENOSYS;
	}

	return api->get_voltage(dev, volt_uv);
   1c258:	a901      	add	r1, sp, #4
   1c25a:	4620      	mov	r0, r4
   1c25c:	4798      	blx	r3
		if (ret < 0) {
   1c25e:	2800      	cmp	r0, #0
   1c260:	db0f      	blt.n	1c282 <regulator_common_init+0x66>
		if (current_uv < config->min_uv) {
   1c262:	f8d8 2000 	ldr.w	r2, [r8]
   1c266:	9b01      	ldr	r3, [sp, #4]
   1c268:	429a      	cmp	r2, r3
   1c26a:	dd22      	ble.n	1c2b2 <regulator_common_init+0x96>
			ret = regulator_set_voltage(dev, config->max_uv, config->max_uv);
   1c26c:	4611      	mov	r1, r2
   1c26e:	4620      	mov	r0, r4
   1c270:	f7ff ffa2 	bl	1c1b8 <regulator_set_voltage>
			if (ret < 0) {
   1c274:	2800      	cmp	r0, #0
   1c276:	da0d      	bge.n	1c294 <regulator_common_init+0x78>
   1c278:	e003      	b.n	1c282 <regulator_common_init+0x66>
		ret = regulator_set_mode(dev, config->initial_mode);
   1c27a:	f7ff ffb1 	bl	1c1e0 <regulator_set_mode>
		if (ret < 0) {
   1c27e:	2800      	cmp	r0, #0
   1c280:	dad7      	bge.n	1c232 <regulator_common_init+0x16>
}
   1c282:	b002      	add	sp, #8
   1c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((config->min_uv > INT32_MIN) || (config->max_uv < INT32_MAX)) {
   1c288:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c28c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1c290:	429a      	cmp	r2, r3
   1c292:	d1de      	bne.n	1c252 <regulator_common_init+0x36>
	if (is_enabled) {
   1c294:	b946      	cbnz	r6, 1c2a8 <regulator_common_init+0x8c>
	} else if ((config->flags & REGULATOR_INIT_ENABLED) != 0U) {
   1c296:	f898 301a 	ldrb.w	r3, [r8, #26]
   1c29a:	079b      	lsls	r3, r3, #30
   1c29c:	d007      	beq.n	1c2ae <regulator_common_init+0x92>
		ret = api->enable(dev);
   1c29e:	683b      	ldr	r3, [r7, #0]
   1c2a0:	4620      	mov	r0, r4
   1c2a2:	4798      	blx	r3
		if (ret < 0) {
   1c2a4:	2800      	cmp	r0, #0
   1c2a6:	dbec      	blt.n	1c282 <regulator_common_init+0x66>
		data->refcnt++;
   1c2a8:	696b      	ldr	r3, [r5, #20]
   1c2aa:	3301      	adds	r3, #1
   1c2ac:	616b      	str	r3, [r5, #20]
	return 0;
   1c2ae:	2000      	movs	r0, #0
   1c2b0:	e7e7      	b.n	1c282 <regulator_common_init+0x66>
		} else if (current_uv > config->max_uv) {
   1c2b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c2b6:	4293      	cmp	r3, r2
   1c2b8:	ddec      	ble.n	1c294 <regulator_common_init+0x78>
   1c2ba:	e7d7      	b.n	1c26c <regulator_common_init+0x50>
		return -ENOSYS;
   1c2bc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1c2c0:	e7df      	b.n	1c282 <regulator_common_init+0x66>

0001c2c2 <gpio_pin_configure_dt>:
{
   1c2c2:	b4f0      	push	{r4, r5, r6, r7}
   1c2c4:	4603      	mov	r3, r0
   1c2c6:	460a      	mov	r2, r1
				  spec->pin,
   1c2c8:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   1c2ca:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   1c2cc:	6800      	ldr	r0, [r0, #0]
   1c2ce:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1c2d0:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   1c2d2:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c2d4:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c2d6:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c2d8:	bf48      	it	mi
   1c2da:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c2de:	2501      	movs	r5, #1
   1c2e0:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c2e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c2e6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c2e8:	bf4c      	ite	mi
   1c2ea:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c2ec:	43ac      	bicpl	r4, r5
   1c2ee:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1c2f0:	683b      	ldr	r3, [r7, #0]
}
   1c2f2:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   1c2f4:	4718      	bx	r3

0001c2f6 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c2f6:	2301      	movs	r3, #1
   1c2f8:	fa03 f101 	lsl.w	r1, r3, r1
   1c2fc:	6903      	ldr	r3, [r0, #16]
   1c2fe:	681b      	ldr	r3, [r3, #0]
   1c300:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1c302:	bf18      	it	ne
   1c304:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1c308:	b112      	cbz	r2, 1c310 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1c30a:	6883      	ldr	r3, [r0, #8]
   1c30c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1c30e:	4718      	bx	r3
   1c310:	6883      	ldr	r3, [r0, #8]
   1c312:	691b      	ldr	r3, [r3, #16]
   1c314:	e7fb      	b.n	1c30e <gpio_pin_set+0x18>

0001c316 <regulator_fixed_init>:
	.enable = regulator_fixed_enable,
	.disable = regulator_fixed_disable,
};

static int regulator_fixed_init(const struct device *dev)
{
   1c316:	b570      	push	{r4, r5, r6, lr}
	const struct regulator_fixed_config *cfg = dev->config;
   1c318:	6846      	ldr	r6, [r0, #4]
{
   1c31a:	4604      	mov	r4, r0
	bool init_enabled;
	int ret;

	regulator_common_data_init(dev);
   1c31c:	f7ff ff44 	bl	1c1a8 <regulator_common_data_init>

	if (!device_is_ready(cfg->enable.port)) {
   1c320:	6a70      	ldr	r0, [r6, #36]	; 0x24
   1c322:	f000 fcf9 	bl	1cd18 <z_device_is_ready>
   1c326:	b1f0      	cbz	r0, 1c366 <regulator_fixed_init+0x50>
	return (config->flags & REGULATOR_INIT_ENABLED) != 0U;
   1c328:	6863      	ldr	r3, [r4, #4]
   1c32a:	7e99      	ldrb	r1, [r3, #26]
		return -ENODEV;
	}

	init_enabled = regulator_common_is_init_enabled(dev);

	if (init_enabled) {
   1c32c:	f011 0503 	ands.w	r5, r1, #3
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_ACTIVE);
   1c330:	f106 0024 	add.w	r0, r6, #36	; 0x24
	if (init_enabled) {
   1c334:	d010      	beq.n	1c358 <regulator_fixed_init+0x42>
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_ACTIVE);
   1c336:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   1c33a:	f7ff ffc2 	bl	1c2c2 <gpio_pin_configure_dt>
		if (ret < 0) {
   1c33e:	2800      	cmp	r0, #0
   1c340:	db10      	blt.n	1c364 <regulator_fixed_init+0x4e>
			return ret;
		}

		k_busy_wait(cfg->startup_delay_us);
   1c342:	69f0      	ldr	r0, [r6, #28]
	z_impl_k_busy_wait(usec_to_wait);
   1c344:	f000 fce3 	bl	1cd0e <z_impl_k_busy_wait>
		if (ret < 0) {
			return ret;
		}
	}

	return regulator_common_init(dev, init_enabled);
   1c348:	1e29      	subs	r1, r5, #0
   1c34a:	4620      	mov	r0, r4
   1c34c:	bf18      	it	ne
   1c34e:	2101      	movne	r1, #1
}
   1c350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return regulator_common_init(dev, init_enabled);
   1c354:	f7ff bf62 	b.w	1c21c <regulator_common_init>
		ret = gpio_pin_configure_dt(&cfg->enable, GPIO_OUTPUT_INACTIVE);
   1c358:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   1c35c:	f7ff ffb1 	bl	1c2c2 <gpio_pin_configure_dt>
		if (ret < 0) {
   1c360:	2800      	cmp	r0, #0
   1c362:	daf1      	bge.n	1c348 <regulator_fixed_init+0x32>
}
   1c364:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   1c366:	f06f 0012 	mvn.w	r0, #18
   1c36a:	e7fb      	b.n	1c364 <regulator_fixed_init+0x4e>

0001c36c <regulator_fixed_disable>:
	const struct regulator_fixed_config *cfg = dev->config;
   1c36c:	6843      	ldr	r3, [r0, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
   1c36e:	2200      	movs	r2, #0
   1c370:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   1c374:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1c376:	f7ff bfbe 	b.w	1c2f6 <gpio_pin_set>

0001c37a <i2c_write_read_dt.constprop.0>:
static inline int i2c_write_read_dt(const struct i2c_dt_spec *spec,
   1c37a:	b530      	push	{r4, r5, lr}
   1c37c:	b087      	sub	sp, #28
   1c37e:	4604      	mov	r4, r0
   1c380:	461d      	mov	r5, r3
	msg[0].buf = (uint8_t *)write_buf;
   1c382:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   1c384:	2101      	movs	r1, #1
	msg[1].len = num_read;
   1c386:	e9cd 2503 	strd	r2, r5, [sp, #12]
	msg[0].len = num_write;
   1c38a:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c38c:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1c38e:	2100      	movs	r1, #0
	return i2c_write_read(spec->bus, spec->addr,
   1c390:	6800      	ldr	r0, [r0, #0]
   1c392:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1c394:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c398:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c39c:	6882      	ldr	r2, [r0, #8]
   1c39e:	4669      	mov	r1, sp
   1c3a0:	6894      	ldr	r4, [r2, #8]
   1c3a2:	2202      	movs	r2, #2
   1c3a4:	47a0      	blx	r4
}
   1c3a6:	b007      	add	sp, #28
   1c3a8:	bd30      	pop	{r4, r5, pc}

0001c3aa <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   1c3aa:	4601      	mov	r1, r0
   1c3ac:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c3b0:	b508      	push	{r3, lr}
   1c3b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c3b6:	2300      	movs	r3, #0
   1c3b8:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   1c3bc:	1449      	asrs	r1, r1, #17
   1c3be:	f7e4 fafd 	bl	9bc <__aeabi_uldivmod>
}
   1c3c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1c3c6:	f7fc ba29 	b.w	1881c <z_impl_k_sleep>

0001c3ca <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1c3ca:	4603      	mov	r3, r0
   1c3cc:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1c3ce:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c3d0:	7919      	ldrb	r1, [r3, #4]
   1c3d2:	2301      	movs	r3, #1
   1c3d4:	fa03 f101 	lsl.w	r1, r3, r1
   1c3d8:	6903      	ldr	r3, [r0, #16]
   1c3da:	681b      	ldr	r3, [r3, #0]
   1c3dc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1c3de:	bf18      	it	ne
   1c3e0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1c3e4:	b112      	cbz	r2, 1c3ec <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   1c3e6:	6883      	ldr	r3, [r0, #8]
   1c3e8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1c3ea:	4718      	bx	r3
   1c3ec:	6883      	ldr	r3, [r0, #8]
   1c3ee:	691b      	ldr	r3, [r3, #16]
   1c3f0:	e7fb      	b.n	1c3ea <gpio_pin_set_dt.isra.0+0x20>

0001c3f2 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   1c3f2:	b4f0      	push	{r4, r5, r6, r7}
   1c3f4:	4603      	mov	r3, r0
   1c3f6:	460a      	mov	r2, r1
				  spec->pin,
   1c3f8:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   1c3fa:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
   1c3fc:	6800      	ldr	r0, [r0, #0]
   1c3fe:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1c400:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   1c402:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c404:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c406:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c408:	bf48      	it	mi
   1c40a:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c40e:	2501      	movs	r5, #1
   1c410:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c412:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c416:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c418:	bf4c      	ite	mi
   1c41a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c41c:	43ac      	bicpl	r4, r5
   1c41e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   1c420:	683b      	ldr	r3, [r7, #0]
}
   1c422:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   1c424:	4718      	bx	r3

0001c426 <i2c_reg_read_byte_dt>:
{
   1c426:	b510      	push	{r4, lr}
   1c428:	b088      	sub	sp, #32
   1c42a:	4603      	mov	r3, r0
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c42c:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1c430:	f10d 0107 	add.w	r1, sp, #7
   1c434:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1c436:	2101      	movs	r1, #1
	msg[1].len = num_read;
   1c438:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   1c43c:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c43e:	2207      	movs	r2, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c440:	6800      	ldr	r0, [r0, #0]
   1c442:	889b      	ldrh	r3, [r3, #4]
	msg[0].len = num_write;
   1c444:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   1c446:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c44a:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c44e:	6882      	ldr	r2, [r0, #8]
   1c450:	a902      	add	r1, sp, #8
   1c452:	6894      	ldr	r4, [r2, #8]
   1c454:	2202      	movs	r2, #2
   1c456:	47a0      	blx	r4
}
   1c458:	b008      	add	sp, #32
   1c45a:	bd10      	pop	{r4, pc}

0001c45c <fetch_status.isra.0>:
static int fetch_status(const struct device *dev)
   1c45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_STATUS, &status) < 0) {
   1c45e:	2100      	movs	r1, #0
   1c460:	f10d 0206 	add.w	r2, sp, #6
static int fetch_status(const struct device *dev)
   1c464:	4605      	mov	r5, r0
	if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_STATUS, &status) < 0) {
   1c466:	f7ff ffde 	bl	1c426 <i2c_reg_read_byte_dt>
   1c46a:	2800      	cmp	r0, #0
   1c46c:	db0b      	blt.n	1c486 <fetch_status.isra.0+0x2a>
	rv = status;
   1c46e:	f89d 4006 	ldrb.w	r4, [sp, #6]
	if (status & CCS811_STATUS_ERROR) {
   1c472:	07e3      	lsls	r3, r4, #31
   1c474:	d509      	bpl.n	1c48a <fetch_status.isra.0+0x2e>
		if (i2c_reg_read_byte_dt(&config->i2c, CCS811_REG_ERROR_ID, &error_id) < 0) {
   1c476:	f10d 0207 	add.w	r2, sp, #7
   1c47a:	21e0      	movs	r1, #224	; 0xe0
   1c47c:	4628      	mov	r0, r5
   1c47e:	f7ff ffd2 	bl	1c426 <i2c_reg_read_byte_dt>
   1c482:	2800      	cmp	r0, #0
   1c484:	da04      	bge.n	1c490 <fetch_status.isra.0+0x34>
		return -EIO;
   1c486:	f06f 0404 	mvn.w	r4, #4
}
   1c48a:	4620      	mov	r0, r4
   1c48c:	b003      	add	sp, #12
   1c48e:	bd30      	pop	{r4, r5, pc}
		rv |= (error_id << 8);
   1c490:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c494:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   1c498:	e7f7      	b.n	1c48a <fetch_status.isra.0+0x2e>

0001c49a <i2c_write>:
{
   1c49a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1c49c:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c4a0:	2202      	movs	r2, #2
   1c4a2:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c4a6:	6882      	ldr	r2, [r0, #8]
   1c4a8:	a901      	add	r1, sp, #4
   1c4aa:	6894      	ldr	r4, [r2, #8]
   1c4ac:	2201      	movs	r2, #1
   1c4ae:	47a0      	blx	r4
}
   1c4b0:	b004      	add	sp, #16
   1c4b2:	bd10      	pop	{r4, pc}

0001c4b4 <set_wake.isra.0>:
static void set_wake(const struct device *dev, bool enable)
   1c4b4:	b510      	push	{r4, lr}
	gpio_pin_set_dt(&config->wake_gpio, enable);
   1c4b6:	3018      	adds	r0, #24
static void set_wake(const struct device *dev, bool enable)
   1c4b8:	460c      	mov	r4, r1
	gpio_pin_set_dt(&config->wake_gpio, enable);
   1c4ba:	f7ff ff86 	bl	1c3ca <gpio_pin_set_dt.isra.0>
	if (enable) {
   1c4be:	b124      	cbz	r4, 1c4ca <set_wake.isra.0+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   1c4c0:	2032      	movs	r0, #50	; 0x32
}
   1c4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c4c6:	f000 bc22 	b.w	1cd0e <z_impl_k_busy_wait>
   1c4ca:	2014      	movs	r0, #20
   1c4cc:	e7f9      	b.n	1c4c2 <set_wake.isra.0+0xe>

0001c4ce <ccs811_sample_fetch>:
{
   1c4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct ccs811_config *config = dev->config;
   1c4d0:	6846      	ldr	r6, [r0, #4]
	struct ccs811_data *drv_data = dev->data;
   1c4d2:	6904      	ldr	r4, [r0, #16]
{
   1c4d4:	b085      	sub	sp, #20
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1c4d6:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   1c4d8:	2700      	movs	r7, #0
{
   1c4da:	4605      	mov	r5, r0
	set_wake(dev, true);
   1c4dc:	2101      	movs	r1, #1
   1c4de:	4630      	mov	r0, r6
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1c4e0:	f88d 3007 	strb.w	r3, [sp, #7]
	uint16_t buf[4] = { 0 };
   1c4e4:	e9cd 7702 	strd	r7, r7, [sp, #8]
	set_wake(dev, true);
   1c4e8:	f7ff ffe4 	bl	1c4b4 <set_wake.isra.0>
	rc = i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), (uint8_t *)buf, sizeof(buf));
   1c4ec:	2308      	movs	r3, #8
   1c4ee:	eb0d 0203 	add.w	r2, sp, r3
   1c4f2:	f10d 0107 	add.w	r1, sp, #7
   1c4f6:	4630      	mov	r0, r6
   1c4f8:	f7ff ff3f 	bl	1c37a <i2c_write_read_dt.constprop.0>
	set_wake(dev, false);
   1c4fc:	4639      	mov	r1, r7
	rc = i2c_write_read_dt(&config->i2c, &cmd, sizeof(cmd), (uint8_t *)buf, sizeof(buf));
   1c4fe:	4606      	mov	r6, r0
	set_wake(dev, false);
   1c500:	6868      	ldr	r0, [r5, #4]
   1c502:	f7ff ffd7 	bl	1c4b4 <set_wake.isra.0>
	if (rc < 0) {
   1c506:	42be      	cmp	r6, r7
   1c508:	db1c      	blt.n	1c544 <ccs811_sample_fetch+0x76>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1c50a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1c50e:	ba4b      	rev16	r3, r1
   1c510:	8023      	strh	r3, [r4, #0]
	rp->voc = sys_be16_to_cpu(buf[1]);
   1c512:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1c516:	ba5b      	rev16	r3, r3
   1c518:	8063      	strh	r3, [r4, #2]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   1c51a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	rp->status = status;
   1c51e:	80e3      	strh	r3, [r4, #6]
	rp->raw = sys_be16_to_cpu(buf[3]);
   1c520:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1c524:	ba52      	rev16	r2, r2
   1c526:	80a2      	strh	r2, [r4, #4]
	if ((drv_data->app_fw_ver <= 0x11)
   1c528:	7a62      	ldrb	r2, [r4, #9]
   1c52a:	2a11      	cmp	r2, #17
   1c52c:	d802      	bhi.n	1c534 <ccs811_sample_fetch+0x66>
	    && (rp->co2 != 0)) {
   1c52e:	b109      	cbz	r1, 1c534 <ccs811_sample_fetch+0x66>
		status |= CCS811_STATUS_DATA_READY;
   1c530:	f043 0308 	orr.w	r3, r3, #8
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1c534:	f013 0f08 	tst.w	r3, #8
   1c538:	bf0c      	ite	eq
   1c53a:	f06f 000a 	mvneq.w	r0, #10
   1c53e:	2000      	movne	r0, #0
}
   1c540:	b005      	add	sp, #20
   1c542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EIO;
   1c544:	f06f 0004 	mvn.w	r0, #4
   1c548:	e7fa      	b.n	1c540 <ccs811_sample_fetch+0x72>

0001c54a <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1c54a:	b530      	push	{r4, r5, lr}
   1c54c:	b089      	sub	sp, #36	; 0x24
   1c54e:	4604      	mov	r4, r0
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   1c550:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1c554:	f10d 0107 	add.w	r1, sp, #7
{
   1c558:	461d      	mov	r5, r3
   1c55a:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1c55c:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   1c55e:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1c562:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c564:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1c566:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   1c568:	6800      	ldr	r0, [r0, #0]
   1c56a:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1c56c:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c570:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c574:	6882      	ldr	r2, [r0, #8]
   1c576:	a902      	add	r1, sp, #8
   1c578:	6894      	ldr	r4, [r2, #8]
   1c57a:	2202      	movs	r2, #2
   1c57c:	47a0      	blx	r4
}
   1c57e:	b009      	add	sp, #36	; 0x24
   1c580:	bd30      	pop	{r4, r5, pc}

0001c582 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1c582:	b530      	push	{r4, r5, lr}
   1c584:	b089      	sub	sp, #36	; 0x24
   1c586:	4604      	mov	r4, r0
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   1c588:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1c58c:	f10d 0107 	add.w	r1, sp, #7
{
   1c590:	461d      	mov	r5, r3
   1c592:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1c594:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   1c596:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1c59a:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c59c:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1c59e:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   1c5a0:	6800      	ldr	r0, [r0, #0]
   1c5a2:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1c5a4:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c5a8:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c5ac:	6881      	ldr	r1, [r0, #8]
   1c5ae:	688c      	ldr	r4, [r1, #8]
   1c5b0:	a902      	add	r1, sp, #8
   1c5b2:	47a0      	blx	r4
}
   1c5b4:	b009      	add	sp, #36	; 0x24
   1c5b6:	bd30      	pop	{r4, r5, pc}

0001c5b8 <hts221_sample_fetch>:
{
   1c5b8:	b513      	push	{r0, r1, r4, lr}
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1c5ba:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
   1c5bc:	6904      	ldr	r4, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1c5be:	6840      	ldr	r0, [r0, #4]
   1c5c0:	eb0d 0203 	add.w	r2, sp, r3
   1c5c4:	21a8      	movs	r1, #168	; 0xa8
   1c5c6:	f7fd f848 	bl	1965a <hts221_read_reg>
	if (status < 0) {
   1c5ca:	2800      	cmp	r0, #0
   1c5cc:	db06      	blt.n	1c5dc <hts221_sample_fetch+0x24>
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   1c5ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c5d2:	8023      	strh	r3, [r4, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   1c5d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c5d8:	8063      	strh	r3, [r4, #2]
	return 0;
   1c5da:	2000      	movs	r0, #0
}
   1c5dc:	b002      	add	sp, #8
   1c5de:	bd10      	pop	{r4, pc}

0001c5e0 <stmemsc_mdelay>:
#include <zephyr/drivers/i3c.h>
#include <zephyr/drivers/spi.h>


static inline void stmemsc_mdelay(uint32_t millisec)
{
   1c5e0:	b538      	push	{r3, r4, r5, lr}
   1c5e2:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c5e4:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c5e8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1c5ec:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c5f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c5f4:	2300      	movs	r3, #0
   1c5f6:	fbc4 0105 	smlal	r0, r1, r4, r5
   1c5fa:	f7e4 f9df 	bl	9bc <__aeabi_uldivmod>
	k_msleep(millisec);
}
   1c5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   1c602:	f7fc b90b 	b.w	1881c <z_impl_k_sleep>

0001c606 <setup_drdy.isra.0>:
static inline void setup_drdy(const struct device *dev,
   1c606:	b410      	push	{r4}
   1c608:	4603      	mov	r3, r0
   1c60a:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1c60c:	6980      	ldr	r0, [r0, #24]
   1c60e:	7f19      	ldrb	r1, [r3, #28]
		: GPIO_INT_DISABLE;
   1c610:	b192      	cbz	r2, 1c638 <setup_drdy.isra.0+0x32>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1c612:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   1c614:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1c616:	6812      	ldr	r2, [r2, #0]
   1c618:	2301      	movs	r3, #1
   1c61a:	408b      	lsls	r3, r1
   1c61c:	4213      	tst	r3, r2
   1c61e:	bf14      	ite	ne
   1c620:	f04f 7270 	movne.w	r2, #62914560	; 0x3c00000
   1c624:	f04f 62b8 	moveq.w	r2, #96468992	; 0x5c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1c628:	69a4      	ldr	r4, [r4, #24]
   1c62a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1c62e:	46a4      	mov	ip, r4
   1c630:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
   1c634:	bc10      	pop	{r4}
   1c636:	4760      	bx	ip
		: GPIO_INT_DISABLE;
   1c638:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	const struct gpio_driver_api *api =
   1c63c:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1c63e:	e7f3      	b.n	1c628 <setup_drdy.isra.0+0x22>

0001c640 <hts221_drdy_callback>:
{
   1c640:	b510      	push	{r4, lr}
	handle_drdy(data->dev);
   1c642:	f851 3c04 	ldr.w	r3, [r1, #-4]
	struct hts221_data *data = dev->data;
   1c646:	691c      	ldr	r4, [r3, #16]
	setup_drdy(dev, false);
   1c648:	6858      	ldr	r0, [r3, #4]
   1c64a:	2100      	movs	r1, #0
   1c64c:	f7ff ffdb 	bl	1c606 <setup_drdy.isra.0>
	k_work_submit(&data->work);
   1c650:	f104 002c 	add.w	r0, r4, #44	; 0x2c
}
   1c654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->work);
   1c658:	f7fb bd7c 	b.w	18154 <k_work_submit>

0001c65c <hts221_work_cb>:
{
   1c65c:	b538      	push	{r3, r4, r5, lr}
	process_drdy(data->dev);
   1c65e:	f850 4c18 	ldr.w	r4, [r0, #-24]
	struct hts221_data *data = dev->data;
   1c662:	6925      	ldr	r5, [r4, #16]
	if (data->data_ready_handler != NULL) {
   1c664:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c666:	b153      	cbz	r3, 1c67e <hts221_work_cb+0x22>
		data->data_ready_handler(dev, data->data_ready_trigger);
   1c668:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1c66a:	4620      	mov	r0, r4
   1c66c:	4798      	blx	r3
	if (data->data_ready_handler != NULL) {
   1c66e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c670:	b12b      	cbz	r3, 1c67e <hts221_work_cb+0x22>
		setup_drdy(dev, true);
   1c672:	6860      	ldr	r0, [r4, #4]
   1c674:	2101      	movs	r1, #1
}
   1c676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		setup_drdy(dev, true);
   1c67a:	f7ff bfc4 	b.w	1c606 <setup_drdy.isra.0>
}
   1c67e:	bd38      	pop	{r3, r4, r5, pc}

0001c680 <hts221_trigger_set>:
{
   1c680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct hts221_config *cfg = dev->config;
   1c684:	6846      	ldr	r6, [r0, #4]
	struct hts221_data *data = dev->data;
   1c686:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
   1c68a:	4615      	mov	r5, r2
   1c68c:	4604      	mov	r4, r0
   1c68e:	460f      	mov	r7, r1
	setup_drdy(dev, false);
   1c690:	4630      	mov	r0, r6
   1c692:	2100      	movs	r1, #0
   1c694:	f7ff ffb7 	bl	1c606 <setup_drdy.isra.0>
	data->data_ready_handler = handler;
   1c698:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
	if (handler == NULL) {
   1c69c:	b30d      	cbz	r5, 1c6e2 <hts221_trigger_set+0x62>
	data->data_ready_trigger = trig;
   1c69e:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
	setup_drdy(dev, true);
   1c6a2:	6860      	ldr	r0, [r4, #4]
   1c6a4:	2101      	movs	r1, #1
   1c6a6:	f7ff ffae 	bl	1c606 <setup_drdy.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
   1c6aa:	69b0      	ldr	r0, [r6, #24]
   1c6ac:	7f35      	ldrb	r5, [r6, #28]
	const struct gpio_driver_data *const data =
   1c6ae:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
   1c6b0:	6883      	ldr	r3, [r0, #8]
   1c6b2:	a901      	add	r1, sp, #4
   1c6b4:	685b      	ldr	r3, [r3, #4]
   1c6b6:	4798      	blx	r3
	if (ret == 0) {
   1c6b8:	b940      	cbnz	r0, 1c6cc <hts221_trigger_set+0x4c>
		*value ^= data->invert;
   1c6ba:	9b01      	ldr	r3, [sp, #4]
   1c6bc:	6832      	ldr	r2, [r6, #0]
   1c6be:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1c6c0:	2301      	movs	r3, #1
   1c6c2:	40ab      	lsls	r3, r5
   1c6c4:	421a      	tst	r2, r3
   1c6c6:	bf14      	ite	ne
   1c6c8:	2001      	movne	r0, #1
   1c6ca:	2000      	moveq	r0, #0
	if (gpio_pin_get_dt(&cfg->gpio_drdy) > 0) {
   1c6cc:	2800      	cmp	r0, #0
   1c6ce:	dd08      	ble.n	1c6e2 <hts221_trigger_set+0x62>
	struct hts221_data *data = dev->data;
   1c6d0:	6925      	ldr	r5, [r4, #16]
	setup_drdy(dev, false);
   1c6d2:	6860      	ldr	r0, [r4, #4]
   1c6d4:	2100      	movs	r1, #0
   1c6d6:	f7ff ff96 	bl	1c606 <setup_drdy.isra.0>
	k_work_submit(&data->work);
   1c6da:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1c6de:	f7fb fd39 	bl	18154 <k_work_submit>
}
   1c6e2:	2000      	movs	r0, #0
   1c6e4:	b002      	add	sp, #8
   1c6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c6ea <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
   1c6ea:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
   1c6ec:	6904      	ldr	r4, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   1c6ee:	6863      	ldr	r3, [r4, #4]
   1c6f0:	f104 0208 	add.w	r2, r4, #8
   1c6f4:	681d      	ldr	r5, [r3, #0]
   1c6f6:	2127      	movs	r1, #39	; 0x27
   1c6f8:	2307      	movs	r3, #7
   1c6fa:	47a8      	blx	r5
	if (status < 0) {
   1c6fc:	2800      	cmp	r0, #0
   1c6fe:	db04      	blt.n	1c70a <lis2dh_fetch_xyz.constprop.0+0x20>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   1c700:	7a23      	ldrb	r3, [r4, #8]
		status = 0;
   1c702:	f013 0f0f 	tst.w	r3, #15
   1c706:	bf18      	it	ne
   1c708:	2000      	movne	r0, #0
}
   1c70a:	bd38      	pop	{r3, r4, r5, pc}

0001c70c <lis2dh_sample_fetch>:
	if (chan == SENSOR_CHAN_ALL) {
   1c70c:	2939      	cmp	r1, #57	; 0x39
   1c70e:	d101      	bne.n	1c714 <lis2dh_sample_fetch+0x8>
		status = lis2dh_fetch_xyz(dev, chan);
   1c710:	f7ff bfeb 	b.w	1c6ea <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
   1c714:	2903      	cmp	r1, #3
   1c716:	d0fb      	beq.n	1c710 <lis2dh_sample_fetch+0x4>
	int status = -ENODATA;
   1c718:	290c      	cmp	r1, #12
}
   1c71a:	bf0c      	ite	eq
   1c71c:	f06f 0085 	mvneq.w	r0, #133	; 0x85
   1c720:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
   1c724:	4770      	bx	lr

0001c726 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   1c726:	b410      	push	{r4}
   1c728:	6884      	ldr	r4, [r0, #8]
   1c72a:	68a4      	ldr	r4, [r4, #8]
   1c72c:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   1c72e:	bc10      	pop	{r4}
   1c730:	4760      	bx	ip

0001c732 <lis2dh_i2c_write_data>:
{
   1c732:	b530      	push	{r4, r5, lr}
   1c734:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   1c736:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
   1c73a:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   1c73c:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1c740:	f10d 0107 	add.w	r1, sp, #7
   1c744:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1c746:	2101      	movs	r1, #1
	return i2c_burst_write(spec->bus, spec->addr,
   1c748:	6860      	ldr	r0, [r4, #4]
	msg[0].len = 1U;
   1c74a:	9103      	str	r1, [sp, #12]
{
   1c74c:	461d      	mov	r5, r3
	msg[0].flags = I2C_MSG_WRITE;
   1c74e:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   1c750:	8923      	ldrh	r3, [r4, #8]
	msg[0].flags = I2C_MSG_WRITE;
   1c752:	f88d 1010 	strb.w	r1, [sp, #16]
	return i2c_burst_write_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   1c756:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
   1c75a:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c75c:	2202      	movs	r2, #2
   1c75e:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   1c762:	f7ff ffe0 	bl	1c726 <i2c_transfer>
}
   1c766:	b009      	add	sp, #36	; 0x24
   1c768:	bd30      	pop	{r4, r5, pc}

0001c76a <lis2dh_i2c_read_data>:
{
   1c76a:	b530      	push	{r4, r5, lr}
   1c76c:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   1c76e:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct lis2dh_config *cfg = dev->config;
   1c772:	6844      	ldr	r4, [r0, #4]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   1c774:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1c778:	f10d 0107 	add.w	r1, sp, #7
{
   1c77c:	461d      	mov	r5, r3
   1c77e:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1c780:	2101      	movs	r1, #1
	return i2c_burst_read(spec->bus, spec->addr,
   1c782:	6860      	ldr	r0, [r4, #4]
   1c784:	8923      	ldrh	r3, [r4, #8]
	msg[0].len = num_write;
   1c786:	9103      	str	r1, [sp, #12]
	return i2c_burst_read_dt(&cfg->bus_cfg.i2c, reg_addr | LIS2DH_AUTOINCREMENT_ADDR, value,
   1c788:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   1c78c:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c78e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1c790:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c794:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   1c798:	a902      	add	r1, sp, #8
   1c79a:	2202      	movs	r2, #2
   1c79c:	f7ff ffc3 	bl	1c726 <i2c_transfer>
}
   1c7a0:	b009      	add	sp, #36	; 0x24
   1c7a2:	bd30      	pop	{r4, r5, pc}

0001c7a4 <lis2dh_i2c_write_reg>:
{
   1c7a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct lis2dh_config *cfg = dev->config;
   1c7a6:	6843      	ldr	r3, [r0, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   1c7a8:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   1c7ac:	2202      	movs	r2, #2
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1c7ae:	6858      	ldr	r0, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   1c7b0:	f88d 1000 	strb.w	r1, [sp]
	return i2c_reg_write_byte(spec->bus, spec->addr, reg_addr, value);
   1c7b4:	891b      	ldrh	r3, [r3, #8]
	msg.len = num_bytes;
   1c7b6:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c7b8:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   1c7bc:	a901      	add	r1, sp, #4
   1c7be:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   1c7c0:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   1c7c4:	f7ff ffaf 	bl	1c726 <i2c_transfer>
}
   1c7c8:	b005      	add	sp, #20
   1c7ca:	f85d fb04 	ldr.w	pc, [sp], #4

0001c7ce <lis2dh_i2c_read_reg>:
{
   1c7ce:	b510      	push	{r4, lr}
   1c7d0:	b088      	sub	sp, #32
	const struct lis2dh_config *cfg = dev->config;
   1c7d2:	6843      	ldr	r3, [r0, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c7d4:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1c7d8:	f10d 0107 	add.w	r1, sp, #7
   1c7dc:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1c7de:	2101      	movs	r1, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c7e0:	6858      	ldr	r0, [r3, #4]
   1c7e2:	891b      	ldrh	r3, [r3, #8]
	msg[0].len = num_write;
   1c7e4:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
   1c7e6:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c7ea:	2207      	movs	r2, #7
   1c7ec:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   1c7f0:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   1c7f2:	2202      	movs	r2, #2
   1c7f4:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
   1c7f6:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   1c7fa:	f7ff ff94 	bl	1c726 <i2c_transfer>
}
   1c7fe:	b008      	add	sp, #32
   1c800:	bd10      	pop	{r4, pc}

0001c802 <lis2dh_i2c_update_reg>:
{
   1c802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c806:	4698      	mov	r8, r3
	const struct lis2dh_config *cfg = dev->config;
   1c808:	6843      	ldr	r3, [r0, #4]
{
   1c80a:	b088      	sub	sp, #32
 */
static inline int i2c_reg_update_byte_dt(const struct i2c_dt_spec *spec,
					 uint8_t reg_addr, uint8_t mask,
					 uint8_t value)
{
	return i2c_reg_update_byte(spec->bus, spec->addr,
   1c80c:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1c810:	f893 a008 	ldrb.w	sl, [r3, #8]
   1c814:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1c818:	2300      	movs	r3, #0
	msg[0].len = num_write;
   1c81a:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   1c81c:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1c820:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   1c824:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c828:	2307      	movs	r3, #7
   1c82a:	460e      	mov	r6, r1
   1c82c:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
   1c82e:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c830:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   1c834:	2202      	movs	r2, #2
   1c836:	4653      	mov	r3, sl
   1c838:	a902      	add	r1, sp, #8
   1c83a:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
   1c83c:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   1c83e:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   1c840:	f7ff ff71 	bl	1c726 <i2c_transfer>
	if (rc != 0) {
   1c844:	b9b8      	cbnz	r0, 1c876 <lis2dh_i2c_update_reg+0x74>
	new_value = (old_value & ~mask) | (value & mask);
   1c846:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1c84a:	ea22 0304 	bic.w	r3, r2, r4
   1c84e:	ea04 0408 	and.w	r4, r4, r8
   1c852:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   1c854:	42a2      	cmp	r2, r4
   1c856:	d00e      	beq.n	1c876 <lis2dh_i2c_update_reg+0x74>
	msg.len = num_bytes;
   1c858:	2302      	movs	r3, #2
   1c85a:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c85c:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   1c860:	463a      	mov	r2, r7
   1c862:	4653      	mov	r3, sl
   1c864:	a902      	add	r1, sp, #8
   1c866:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
   1c868:	f88d 6004 	strb.w	r6, [sp, #4]
   1c86c:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1c870:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   1c872:	f7ff ff58 	bl	1c726 <i2c_transfer>
}
   1c876:	b008      	add	sp, #32
   1c878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c87c <z_impl_i2c_transfer>:
{
   1c87c:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c87e:	6884      	ldr	r4, [r0, #8]
   1c880:	68a4      	ldr	r4, [r4, #8]
   1c882:	46a4      	mov	ip, r4
}
   1c884:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1c886:	4760      	bx	ip

0001c888 <lps22hb_sample_fetch>:
{
   1c888:	b530      	push	{r4, r5, lr}
   1c88a:	b08b      	sub	sp, #44	; 0x2c
	const struct lps22hb_config *config = dev->config;
   1c88c:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
   1c88e:	6905      	ldr	r5, [r0, #16]
	return i2c_burst_read(spec->bus, spec->addr,
   1c890:	6818      	ldr	r0, [r3, #0]
   1c892:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
   1c894:	2228      	movs	r2, #40	; 0x28
   1c896:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1c89a:	f10d 0207 	add.w	r2, sp, #7
   1c89e:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
   1c8a0:	2201      	movs	r2, #1
   1c8a2:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
   1c8a4:	aa02      	add	r2, sp, #8
   1c8a6:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   1c8a8:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
   1c8aa:	2400      	movs	r4, #0
	msg[1].len = num_read;
   1c8ac:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c8ae:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1c8b0:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c8b4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   1c8b8:	2202      	movs	r2, #2
   1c8ba:	a904      	add	r1, sp, #16
   1c8bc:	f7ff ffde 	bl	1c87c <z_impl_i2c_transfer>
	if (i2c_burst_read_dt(&config->i2c, LPS22HB_REG_PRESS_OUT_XL,
   1c8c0:	42a0      	cmp	r0, r4
   1c8c2:	db10      	blt.n	1c8e6 <lps22hb_sample_fetch+0x5e>
				     ((uint32_t)(out[2]) << 16));
   1c8c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
   1c8c8:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
   1c8cc:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
   1c8ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   1c8d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
   1c8d6:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   1c8d8:	602b      	str	r3, [r5, #0]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
   1c8da:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   1c8de:	80ab      	strh	r3, [r5, #4]
	return 0;
   1c8e0:	4620      	mov	r0, r4
}
   1c8e2:	b00b      	add	sp, #44	; 0x2c
   1c8e4:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   1c8e6:	f06f 0004 	mvn.w	r0, #4
   1c8ea:	e7fa      	b.n	1c8e2 <lps22hb_sample_fetch+0x5a>

0001c8ec <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
   1c8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8f0:	b088      	sub	sp, #32
   1c8f2:	4699      	mov	r9, r3
	msg[0].flags = I2C_MSG_WRITE;
   1c8f4:	2300      	movs	r3, #0
	msg[0].len = num_write;
   1c8f6:	f04f 0801 	mov.w	r8, #1
	msg[0].flags = I2C_MSG_WRITE;
   1c8fa:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   1c8fe:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   1c902:	e9cd 3805 	strd	r3, r8, [sp, #20]
   1c906:	f04f 0a10 	mov.w	sl, #16
	msg[0].buf = (uint8_t *)write_buf;
   1c90a:	ae01      	add	r6, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c90c:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
   1c90e:	4607      	mov	r7, r0
   1c910:	460d      	mov	r5, r1
   1c912:	4614      	mov	r4, r2
   1c914:	f88d a004 	strb.w	sl, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   1c918:	9602      	str	r6, [sp, #8]
	msg[0].len = num_write;
   1c91a:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c91e:	f88d 301c 	strb.w	r3, [sp, #28]
   1c922:	2202      	movs	r2, #2
   1c924:	460b      	mov	r3, r1
   1c926:	a902      	add	r1, sp, #8
   1c928:	f7ff ffa8 	bl	1c87c <z_impl_i2c_transfer>
	if (rc != 0) {
   1c92c:	b9b8      	cbnz	r0, 1c95e <i2c_reg_update_byte.constprop.0+0x72>
	new_value = (old_value & ~mask) | (value & mask);
   1c92e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1c932:	ea22 0304 	bic.w	r3, r2, r4
   1c936:	ea04 0409 	and.w	r4, r4, r9
   1c93a:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   1c93c:	42a2      	cmp	r2, r4
   1c93e:	d00e      	beq.n	1c95e <i2c_reg_update_byte.constprop.0+0x72>
	msg.len = num_bytes;
   1c940:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1c942:	f88d a004 	strb.w	sl, [sp, #4]
   1c946:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   1c94a:	9602      	str	r6, [sp, #8]
	msg.len = num_bytes;
   1c94c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1c94e:	f88d 3010 	strb.w	r3, [sp, #16]
   1c952:	462b      	mov	r3, r5
   1c954:	4642      	mov	r2, r8
   1c956:	a902      	add	r1, sp, #8
   1c958:	4638      	mov	r0, r7
   1c95a:	f7ff ff8f 	bl	1c87c <z_impl_i2c_transfer>
}
   1c95e:	b008      	add	sp, #32
   1c960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c964 <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
   1c964:	b570      	push	{r4, r5, r6, lr}
	const struct lps22hb_config * const config = dev->config;

	if (!device_is_ready(config->i2c.bus)) {
   1c966:	6843      	ldr	r3, [r0, #4]
{
   1c968:	b088      	sub	sp, #32
   1c96a:	4605      	mov	r5, r0
	if (!device_is_ready(config->i2c.bus)) {
   1c96c:	6818      	ldr	r0, [r3, #0]
   1c96e:	f000 f9d3 	bl	1cd18 <z_device_is_ready>
   1c972:	2800      	cmp	r0, #0
   1c974:	d035      	beq.n	1c9e2 <lps22hb_init+0x7e>
	const struct lps22hb_config *config = dev->config;
   1c976:	686e      	ldr	r6, [r5, #4]
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c978:	220f      	movs	r2, #15
   1c97a:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1c97e:	f10d 0207 	add.w	r2, sp, #7
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c982:	6830      	ldr	r0, [r6, #0]
	msg[0].buf = (uint8_t *)write_buf;
   1c984:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1c986:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
   1c98a:	2201      	movs	r2, #1
	return i2c_reg_read_byte(spec->bus, spec->addr, reg_addr, value);
   1c98c:	88b3      	ldrh	r3, [r6, #4]
	msg[0].len = num_write;
   1c98e:	9203      	str	r2, [sp, #12]
	msg[1].len = num_read;
   1c990:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   1c994:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c996:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1c998:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1c99c:	f88d 201c 	strb.w	r2, [sp, #28]
   1c9a0:	2202      	movs	r2, #2
   1c9a2:	a902      	add	r1, sp, #8
   1c9a4:	f7ff ff6a 	bl	1c87c <z_impl_i2c_transfer>
	if (i2c_reg_read_byte_dt(&config->i2c, LPS22HB_REG_WHO_AM_I,
   1c9a8:	42a0      	cmp	r0, r4
   1c9aa:	db03      	blt.n	1c9b4 <lps22hb_init+0x50>
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
   1c9ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1c9b0:	2bb1      	cmp	r3, #177	; 0xb1
   1c9b2:	d003      	beq.n	1c9bc <lps22hb_init+0x58>
		return -ENODEV;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
   1c9b4:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   1c9b8:	b008      	add	sp, #32
   1c9ba:	bd70      	pop	{r4, r5, r6, pc}
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
   1c9bc:	6868      	ldr	r0, [r5, #4]
	return i2c_reg_update_byte(spec->bus, spec->addr,
   1c9be:	2330      	movs	r3, #48	; 0x30
   1c9c0:	7901      	ldrb	r1, [r0, #4]
   1c9c2:	6800      	ldr	r0, [r0, #0]
   1c9c4:	2270      	movs	r2, #112	; 0x70
   1c9c6:	f7ff ff91 	bl	1c8ec <i2c_reg_update_byte.constprop.0>
   1c9ca:	2800      	cmp	r0, #0
   1c9cc:	dbf2      	blt.n	1c9b4 <lps22hb_init+0x50>
   1c9ce:	2302      	movs	r3, #2
   1c9d0:	7931      	ldrb	r1, [r6, #4]
   1c9d2:	6830      	ldr	r0, [r6, #0]
   1c9d4:	461a      	mov	r2, r3
   1c9d6:	f7ff ff89 	bl	1c8ec <i2c_reg_update_byte.constprop.0>
	if (i2c_reg_update_byte_dt(&config->i2c, LPS22HB_REG_CTRL_REG1,
   1c9da:	2800      	cmp	r0, #0
   1c9dc:	dbea      	blt.n	1c9b4 <lps22hb_init+0x50>
	return 0;
   1c9de:	4620      	mov	r0, r4
   1c9e0:	e7ea      	b.n	1c9b8 <lps22hb_init+0x54>
		return -ENODEV;
   1c9e2:	f06f 0012 	mvn.w	r0, #18
   1c9e6:	e7e7      	b.n	1c9b8 <lps22hb_init+0x54>

0001c9e8 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   1c9e8:	6902      	ldr	r2, [r0, #16]
{
   1c9ea:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1c9ec:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c9f0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c9f4:	2000      	movs	r0, #0
   1c9f6:	4770      	bx	lr

0001c9f8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c9f8:	6843      	ldr	r3, [r0, #4]
   1c9fa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c9fc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ca00:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ca04:	4770      	bx	lr

0001ca06 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1ca06:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1ca08:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1ca0a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca0c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ca10:	b150      	cbz	r0, 1ca28 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   1ca12:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca14:	2000      	movs	r0, #0
   1ca16:	7812      	ldrb	r2, [r2, #0]
   1ca18:	700a      	strb	r2, [r1, #0]
   1ca1a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1ca1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca22:	2201      	movs	r2, #1
   1ca24:	601a      	str	r2, [r3, #0]
	return 0;
   1ca26:	4770      	bx	lr
		return -1;
   1ca28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1ca2c:	4770      	bx	lr

0001ca2e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1ca2e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1ca30:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca32:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ca36:	b940      	cbnz	r0, 1ca4a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1ca38:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ca3a:	079b      	lsls	r3, r3, #30
   1ca3c:	d406      	bmi.n	1ca4c <is_tx_ready.isra.0+0x1e>
   1ca3e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1ca42:	3800      	subs	r0, #0
   1ca44:	bf18      	it	ne
   1ca46:	2001      	movne	r0, #1
   1ca48:	4770      	bx	lr
   1ca4a:	2001      	movs	r0, #1
}
   1ca4c:	4770      	bx	lr

0001ca4e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1ca4e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1ca50:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1ca52:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1ca56:	05c9      	lsls	r1, r1, #23
   1ca58:	d518      	bpl.n	1ca8c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ca5a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1ca5e:	b1a9      	cbz	r1, 1ca8c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1ca60:	f04f 0020 	mov.w	r0, #32
   1ca64:	f3ef 8111 	mrs	r1, BASEPRI
   1ca68:	f380 8812 	msr	BASEPRI_MAX, r0
   1ca6c:	f3bf 8f6f 	isb	sy
   1ca70:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1ca74:	b130      	cbz	r0, 1ca84 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca76:	2000      	movs	r0, #0
   1ca78:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1ca7c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca80:	2001      	movs	r0, #1
   1ca82:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1ca84:	f381 8811 	msr	BASEPRI, r1
   1ca88:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ca8c:	6852      	ldr	r2, [r2, #4]
   1ca8e:	06d2      	lsls	r2, r2, #27
   1ca90:	d515      	bpl.n	1cabe <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1ca92:	f04f 0120 	mov.w	r1, #32
   1ca96:	f3ef 8211 	mrs	r2, BASEPRI
   1ca9a:	f381 8812 	msr	BASEPRI_MAX, r1
   1ca9e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1caa2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1caa6:	b111      	cbz	r1, 1caae <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1caa8:	2100      	movs	r1, #0
   1caaa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1caae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1cab2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1cab6:	f382 8811 	msr	BASEPRI, r2
   1caba:	f3bf 8f6f 	isb	sy
}
   1cabe:	4770      	bx	lr

0001cac0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1cac0:	4770      	bx	lr

0001cac2 <event_clear>:
	nrf_rtc_event_clear(RTC, NRF_RTC_CHANNEL_EVENT_ADDR(chan));
   1cac2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1cac6:	009b      	lsls	r3, r3, #2
   1cac8:	b29b      	uxth	r3, r3
   1caca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cace:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1cad2:	2200      	movs	r2, #0
   1cad4:	601a      	str	r2, [r3, #0]
   1cad6:	681b      	ldr	r3, [r3, #0]
}
   1cad8:	4770      	bx	lr

0001cada <sys_clock_cycle_get_32>:
{
   1cada:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1cadc:	f7f9 fb14 	bl	16108 <z_nrf_rtc_timer_read>
}
   1cae0:	bd08      	pop	{r3, pc}

0001cae2 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1cae2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cae6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1caea:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1caec:	bf04      	itt	eq
   1caee:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1caf2:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1caf6:	1f83      	subs	r3, r0, #6
   1caf8:	4258      	negs	r0, r3
   1cafa:	4158      	adcs	r0, r3
   1cafc:	4770      	bx	lr

0001cafe <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1cafe:	4700      	bx	r0

0001cb00 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1cb00:	f000 b905 	b.w	1cd0e <z_impl_k_busy_wait>

0001cb04 <nrfx_gppi_channel_endpoints_setup>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cb04:	00c0      	lsls	r0, r0, #3
   1cb06:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1cb0a:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   1cb0e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cb12:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
}

void nrfx_gppi_channel_endpoints_setup(uint8_t  channel, uint32_t eep, uint32_t tep)
{
    nrf_ppi_channel_endpoint_setup(NRF_PPI, (nrf_ppi_channel_t)channel, eep, tep);
}
   1cb16:	4770      	bx	lr

0001cb18 <nrfx_clock_enable>:
{
   1cb18:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1cb1a:	2000      	movs	r0, #0
   1cb1c:	f7e6 feea 	bl	38f4 <arch_irq_is_enabled>
   1cb20:	b908      	cbnz	r0, 1cb26 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1cb22:	f7e6 fec5 	bl	38b0 <arch_irq_enable>
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   1cb26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cb2a:	2200      	movs	r2, #0
   1cb2c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1cb30:	bd08      	pop	{r3, pc}

0001cb32 <nrfx_clock_stop>:
    clock_stop(domain);
   1cb32:	f7f9 be35 	b.w	167a0 <clock_stop>

0001cb36 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1cb36:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1cb38:	f003 021f 	and.w	r2, r3, #31
    NRF_GPIO_Type * p_port = NULL;
   1cb3c:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1cb3e:	6002      	str	r2, [r0, #0]
}
   1cb40:	bf0c      	ite	eq
   1cb42:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
   1cb46:	2000      	movne	r0, #0
   1cb48:	4770      	bx	lr

0001cb4a <nrf_gpio_reconfigure>:
{
   1cb4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb4c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cb4e:	a801      	add	r0, sp, #4
{
   1cb50:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   1cb54:	4616      	mov	r6, r2
   1cb56:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cb58:	f7ff ffed 	bl	1cb36 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1cb5c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   1cb5e:	f1b6 0c00 	subs.w	ip, r6, #0
   1cb62:	bf18      	it	ne
   1cb64:	f04f 0c01 	movne.w	ip, #1
   1cb68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   1cb6c:	1e0b      	subs	r3, r1, #0
   1cb6e:	bf18      	it	ne
   1cb70:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   1cb72:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   1cb74:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   1cb78:	bf14      	ite	ne
   1cb7a:	f04f 0c0c 	movne.w	ip, #12
   1cb7e:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   1cb82:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   1cb84:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   1cb88:	bf14      	ite	ne
   1cb8a:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   1cb8e:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   1cb92:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   1cb94:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1cb98:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   1cb9c:	bf14      	ite	ne
   1cb9e:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1cba2:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   1cba6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   1cbaa:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   1cbae:	b101      	cbz	r1, 1cbb2 <nrf_gpio_reconfigure+0x68>
   1cbb0:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
   1cbb2:	b10e      	cbz	r6, 1cbb8 <nrf_gpio_reconfigure+0x6e>
   1cbb4:	7836      	ldrb	r6, [r6, #0]
   1cbb6:	0076      	lsls	r6, r6, #1
   1cbb8:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
   1cbba:	b10d      	cbz	r5, 1cbc0 <nrf_gpio_reconfigure+0x76>
   1cbbc:	782d      	ldrb	r5, [r5, #0]
   1cbbe:	00ad      	lsls	r5, r5, #2
   1cbc0:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   1cbc2:	b10c      	cbz	r4, 1cbc8 <nrf_gpio_reconfigure+0x7e>
   1cbc4:	7824      	ldrb	r4, [r4, #0]
   1cbc6:	0224      	lsls	r4, r4, #8
   1cbc8:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   1cbca:	b10f      	cbz	r7, 1cbd0 <nrf_gpio_reconfigure+0x86>
   1cbcc:	783f      	ldrb	r7, [r7, #0]
   1cbce:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   1cbd0:	430c      	orrs	r4, r1
   1cbd2:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1cbd4:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   1cbd8:	b003      	add	sp, #12
   1cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cbdc <nrf_gpio_cfg_sense_set>:
{
   1cbdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1cbde:	f10d 030f 	add.w	r3, sp, #15
   1cbe2:	9301      	str	r3, [sp, #4]
   1cbe4:	2300      	movs	r3, #0
{
   1cbe6:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   1cbea:	9300      	str	r3, [sp, #0]
   1cbec:	461a      	mov	r2, r3
   1cbee:	4619      	mov	r1, r3
   1cbf0:	f7ff ffab 	bl	1cb4a <nrf_gpio_reconfigure>
}
   1cbf4:	b005      	add	sp, #20
   1cbf6:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbfa <xfer_completeness_check>:
    switch (p_cb->xfer_type)
   1cbfa:	f891 2020 	ldrb.w	r2, [r1, #32]
{
   1cbfe:	4603      	mov	r3, r0
    switch (p_cb->xfer_type)
   1cc00:	2a03      	cmp	r2, #3
   1cc02:	d829      	bhi.n	1cc58 <xfer_completeness_check+0x5e>
   1cc04:	e8df f002 	tbb	[pc, r2]
   1cc08:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1cc0c:	688a      	ldr	r2, [r1, #8]
   1cc0e:	0350      	lsls	r0, r2, #13
   1cc10:	d504      	bpl.n	1cc1c <xfer_completeness_check+0x22>
    return p_reg->TXD.AMOUNT;
   1cc12:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1cc16:	6908      	ldr	r0, [r1, #16]
   1cc18:	4290      	cmp	r0, r2
   1cc1a:	d107      	bne.n	1cc2c <xfer_completeness_check+0x32>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1cc1c:	688a      	ldr	r2, [r1, #8]
                 (nrfy_twim_txd_amount_get(p_twim) != p_cb->xfer_desc_primary.length)) ||
   1cc1e:	0352      	lsls	r2, r2, #13
   1cc20:	d41a      	bmi.n	1cc58 <xfer_completeness_check+0x5e>
   1cc22:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrfy_twim_txd_amount_get(p_twim) != p_cb->xfer_desc_primary.length) ||
   1cc26:	6989      	ldr	r1, [r1, #24]
            if (nrfy_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc_primary.length)
   1cc28:	4291      	cmp	r1, r2
   1cc2a:	d015      	beq.n	1cc58 <xfer_completeness_check+0x5e>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1cc2c:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1cc2e:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1cc30:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1cc34:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
/** @refhal{nrf_twim_enable} */
NRFY_STATIC_INLINE void nrfy_twim_enable(NRF_TWIM_Type * p_reg)
{
    nrf_twim_enable(p_reg);
    nrf_barrier_w();
}
   1cc38:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1cc3a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrfy_twim_txd_amount_get(p_twim) != p_cb->xfer_desc_primary.length) ||
   1cc3e:	6908      	ldr	r0, [r1, #16]
   1cc40:	4290      	cmp	r0, r2
   1cc42:	d1f3      	bne.n	1cc2c <xfer_completeness_check+0x32>
    return p_reg->RXD.AMOUNT;
   1cc44:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1cc48:	e7ed      	b.n	1cc26 <xfer_completeness_check+0x2c>
    return p_reg->TXD.AMOUNT;
   1cc4a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrfy_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc_primary.length)
   1cc4e:	6909      	ldr	r1, [r1, #16]
   1cc50:	e7ea      	b.n	1cc28 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   1cc52:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1cc56:	e7fa      	b.n	1cc4e <xfer_completeness_check+0x54>
    bool transfer_complete = true;
   1cc58:	2001      	movs	r0, #1
}
   1cc5a:	4770      	bx	lr

0001cc5c <__nrfy_internal_twim_event_handle.isra.0>:
    {
        nrf_twim_event_clear(p_reg, event);
    }
}

NRFY_STATIC_INLINE bool __nrfy_internal_twim_event_handle(NRF_TWIM_Type *  p_reg,
   1cc5c:	b530      	push	{r4, r5, lr}
                                                          uint32_t         mask,
                                                          nrf_twim_event_t event,
                                                          uint32_t *       p_evt_mask)
{
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_twim_event_check(p_reg, event))
   1cc5e:	f5a2 7580 	sub.w	r5, r2, #256	; 0x100
   1cc62:	08ad      	lsrs	r5, r5, #2
   1cc64:	2401      	movs	r4, #1
   1cc66:	40ac      	lsls	r4, r5
   1cc68:	420c      	tst	r4, r1
   1cc6a:	d007      	beq.n	1cc7c <__nrfy_internal_twim_event_handle.isra.0+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cc6c:	5881      	ldr	r1, [r0, r2]
   1cc6e:	b129      	cbz	r1, 1cc7c <__nrfy_internal_twim_event_handle.isra.0+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cc70:	2100      	movs	r1, #0
   1cc72:	5081      	str	r1, [r0, r2]
   1cc74:	5882      	ldr	r2, [r0, r2]
    {
        nrf_twim_event_clear(p_reg, event);
        if (p_evt_mask)
        {
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   1cc76:	681a      	ldr	r2, [r3, #0]
   1cc78:	4322      	orrs	r2, r4
   1cc7a:	601a      	str	r2, [r3, #0]
        }
        return true;
    }
    return false;
}
   1cc7c:	bd30      	pop	{r4, r5, pc}

0001cc7e <__nrfy_internal_twim_events_process.constprop.0>:

NRFY_STATIC_INLINE
uint32_t __nrfy_internal_twim_events_process(NRF_TWIM_Type *               p_reg,
   1cc7e:	b513      	push	{r0, r1, r4, lr}
                                             uint32_t                      mask,
                                             nrfy_twim_xfer_desc_t const * p_xfer)
{
    uint32_t evt_mask = 0;
   1cc80:	2300      	movs	r3, #0
uint32_t __nrfy_internal_twim_events_process(NRF_TWIM_Type *               p_reg,
   1cc82:	460c      	mov	r4, r1
    uint32_t evt_mask = 0;
   1cc84:	9301      	str	r3, [sp, #4]

    nrf_barrier_r();
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_SUSPENDED, &evt_mask);
   1cc86:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1cc8a:	ab01      	add	r3, sp, #4
   1cc8c:	f7ff ffe6 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_STOPPED, &evt_mask);
   1cc90:	4621      	mov	r1, r4
   1cc92:	f44f 7282 	mov.w	r2, #260	; 0x104
   1cc96:	f7ff ffe1 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_ERROR, &evt_mask);
   1cc9a:	4621      	mov	r1, r4
   1cc9c:	f44f 7292 	mov.w	r2, #292	; 0x124
   1cca0:	f7ff ffdc 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_TXSTARTED, &evt_mask);
   1cca4:	4621      	mov	r1, r4
   1cca6:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1ccaa:	f7ff ffd7 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_RXSTARTED, &evt_mask);
   1ccae:	4621      	mov	r1, r4
   1ccb0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
   1ccb4:	f7ff ffd2 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_LASTTX, &evt_mask);
   1ccb8:	4621      	mov	r1, r4
   1ccba:	f44f 72b0 	mov.w	r2, #352	; 0x160
   1ccbe:	f7ff ffcd 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    (void)__nrfy_internal_twim_event_handle(p_reg, mask, NRF_TWIM_EVENT_LASTRX, &evt_mask);
   1ccc2:	f44f 72ae 	mov.w	r2, #348	; 0x15c
   1ccc6:	4621      	mov	r1, r4
   1ccc8:	f7ff ffc8 	bl	1cc5c <__nrfy_internal_twim_event_handle.isra.0>
    {
        NRFY_CACHE_INV(p_xfer->p_buffer, p_xfer->length);
    }
    nrf_barrier_w();
    return evt_mask;
}
   1cccc:	9801      	ldr	r0, [sp, #4]
   1ccce:	b002      	add	sp, #8
   1ccd0:	bd10      	pop	{r4, pc}

0001ccd2 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1ccd2:	6803      	ldr	r3, [r0, #0]
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1ccd4:	f003 021f 	and.w	r2, r3, #31
    NRF_GPIO_Type * p_port = NULL;
   1ccd8:	095b      	lsrs	r3, r3, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1ccda:	6002      	str	r2, [r0, #0]
}
   1ccdc:	bf0c      	ite	eq
   1ccde:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
   1cce2:	2000      	movne	r0, #0
   1cce4:	4770      	bx	lr

0001cce6 <nrf_gpio_pin_set>:
{
   1cce6:	b507      	push	{r0, r1, r2, lr}
   1cce8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ccea:	a801      	add	r0, sp, #4
   1ccec:	f7ff fff1 	bl	1ccd2 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ccf0:	9a01      	ldr	r2, [sp, #4]
   1ccf2:	2301      	movs	r3, #1
   1ccf4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ccf6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1ccfa:	b003      	add	sp, #12
   1ccfc:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd00 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1cd00:	f7fa bd46 	b.w	17790 <_DoInit>

0001cd04 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   1cd04:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   1cd06:	f7ff fffb 	bl	1cd00 <SEGGER_RTT_Init>

	return 0;
}
   1cd0a:	2000      	movs	r0, #0
   1cd0c:	bd08      	pop	{r3, pc}

0001cd0e <z_impl_k_busy_wait>:
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1cd0e:	b108      	cbz	r0, 1cd14 <z_impl_k_busy_wait+0x6>
		SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
		return;
	}

#if defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	arch_busy_wait(usec_to_wait);
   1cd10:	f7e7 b976 	b.w	4000 <arch_busy_wait>
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1cd14:	4770      	bx	lr

0001cd16 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
   1cd16:	4770      	bx	lr

0001cd18 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1cd18:	b140      	cbz	r0, 1cd2c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1cd1a:	68c3      	ldr	r3, [r0, #12]
   1cd1c:	7858      	ldrb	r0, [r3, #1]
   1cd1e:	f010 0001 	ands.w	r0, r0, #1
   1cd22:	bf1e      	ittt	ne
   1cd24:	7818      	ldrbne	r0, [r3, #0]
   1cd26:	fab0 f080 	clzne	r0, r0
   1cd2a:	0940      	lsrne	r0, r0, #5
}
   1cd2c:	4770      	bx	lr

0001cd2e <arch_system_halt>:
	__asm__ volatile(
   1cd2e:	f04f 0220 	mov.w	r2, #32
   1cd32:	f3ef 8311 	mrs	r3, BASEPRI
   1cd36:	f382 8812 	msr	BASEPRI_MAX, r2
   1cd3a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1cd3e:	e7fe      	b.n	1cd3e <arch_system_halt+0x10>

0001cd40 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1cd40:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1cd42:	f7ff fff4 	bl	1cd2e <arch_system_halt>

0001cd46 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1cd46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd48:	4605      	mov	r5, r0
   1cd4a:	460e      	mov	r6, r1
   1cd4c:	f04f 0320 	mov.w	r3, #32
   1cd50:	f3ef 8711 	mrs	r7, BASEPRI
   1cd54:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd58:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1cd5c:	f7fb fd78 	bl	18850 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1cd60:	4631      	mov	r1, r6
   1cd62:	4604      	mov	r4, r0
   1cd64:	4628      	mov	r0, r5
   1cd66:	f7ff ffeb 	bl	1cd40 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1cd6a:	f387 8811 	msr	BASEPRI, r7
   1cd6e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1cd72:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1cd74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1cd78:	f7e7 b856 	b.w	3e28 <z_impl_k_thread_abort>

0001cd7c <z_early_memset>:
	(void) memset(dst, c, n);
   1cd7c:	f7fc bf45 	b.w	19c0a <memset>

0001cd80 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   1cd80:	f7fc bf38 	b.w	19bf4 <memcpy>

0001cd84 <k_heap_init>:
{
   1cd84:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1cd86:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1cd8a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1cd8e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1cd90:	f7fc ba84 	b.w	1929c <sys_heap_init>

0001cd94 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd98:	b087      	sub	sp, #28
   1cd9a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   1cd9e:	4605      	mov	r5, r0
	k_timepoint_t end = sys_timepoint_calc(timeout);
   1cda0:	463b      	mov	r3, r7
{
   1cda2:	4691      	mov	r9, r2
	k_timepoint_t end = sys_timepoint_calc(timeout);
   1cda4:	a804      	add	r0, sp, #16
   1cda6:	4632      	mov	r2, r6
{
   1cda8:	4688      	mov	r8, r1
	k_timepoint_t end = sys_timepoint_calc(timeout);
   1cdaa:	f000 fbb8 	bl	1d51e <sys_timepoint_calc>
   1cdae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
	void *ret = NULL;

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1cdb2:	f105 0a14 	add.w	sl, r5, #20
	k_timepoint_t end = sys_timepoint_calc(timeout);
   1cdb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
	__asm__ volatile(
   1cdba:	f04f 0320 	mov.w	r3, #32
   1cdbe:	f3ef 8411 	mrs	r4, BASEPRI
   1cdc2:	f383 8812 	msr	BASEPRI_MAX, r3
   1cdc6:	f3bf 8f6f 	isb	sy
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		timeout = sys_timepoint_timeout(end);
		(void) z_pend_curr(&h->lock, key, &h->wait_q, timeout);
   1cdca:	f105 0b0c 	add.w	fp, r5, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1cdce:	464a      	mov	r2, r9
   1cdd0:	4641      	mov	r1, r8
   1cdd2:	4628      	mov	r0, r5
   1cdd4:	f7fc f9fa 	bl	191cc <sys_heap_aligned_alloc>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1cdd8:	b130      	cbz	r0, 1cde8 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1cdda:	f384 8811 	msr	BASEPRI, r4
   1cdde:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1cde2:	b007      	add	sp, #28
   1cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cde8:	433e      	orrs	r6, r7
   1cdea:	d0f6      	beq.n	1cdda <k_heap_aligned_alloc+0x46>
		timeout = sys_timepoint_timeout(end);
   1cdec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cdf0:	a804      	add	r0, sp, #16
   1cdf2:	f000 fbb8 	bl	1d566 <sys_timepoint_timeout>
   1cdf6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
		(void) z_pend_curr(&h->lock, key, &h->wait_q, timeout);
   1cdfa:	465a      	mov	r2, fp
   1cdfc:	e9cd 6700 	strd	r6, r7, [sp]
   1ce00:	4621      	mov	r1, r4
   1ce02:	4650      	mov	r0, sl
   1ce04:	f7fb fb8a 	bl	1851c <z_pend_curr>
	__asm__ volatile(
   1ce08:	f04f 0320 	mov.w	r3, #32
   1ce0c:	f3ef 8411 	mrs	r4, BASEPRI
   1ce10:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce14:	f3bf 8f6f 	isb	sy
	return k;
   1ce18:	e7d9      	b.n	1cdce <k_heap_aligned_alloc+0x3a>

0001ce1a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1ce1a:	b538      	push	{r3, r4, r5, lr}
   1ce1c:	4604      	mov	r4, r0
   1ce1e:	f04f 0320 	mov.w	r3, #32
   1ce22:	f3ef 8511 	mrs	r5, BASEPRI
   1ce26:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1ce2e:	f7fc f995 	bl	1915c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1ce32:	f104 000c 	add.w	r0, r4, #12
   1ce36:	f000 fb13 	bl	1d460 <z_unpend_all>
   1ce3a:	b130      	cbz	r0, 1ce4a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1ce3c:	4629      	mov	r1, r5
   1ce3e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1ce42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1ce46:	f7fb bbcd 	b.w	185e4 <z_reschedule>
	__asm__ volatile(
   1ce4a:	f385 8811 	msr	BASEPRI, r5
   1ce4e:	f3bf 8f6f 	isb	sy
}
   1ce52:	bd38      	pop	{r3, r4, r5, pc}

0001ce54 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ce54:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   1ce58:	4313      	orrs	r3, r2
   1ce5a:	f013 0303 	ands.w	r3, r3, #3
   1ce5e:	d10c      	bne.n	1ce7a <create_free_list+0x26>
	slab->free_list = NULL;
   1ce60:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ce62:	6881      	ldr	r1, [r0, #8]
   1ce64:	4299      	cmp	r1, r3
   1ce66:	d801      	bhi.n	1ce6c <create_free_list+0x18>
	return 0;
   1ce68:	2000      	movs	r0, #0
   1ce6a:	4770      	bx	lr
		*(char **)p = slab->free_list;
   1ce6c:	6941      	ldr	r1, [r0, #20]
   1ce6e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1ce70:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1ce72:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ce74:	3301      	adds	r3, #1
		p += slab->block_size;
   1ce76:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1ce78:	e7f3      	b.n	1ce62 <create_free_list+0xe>
		return -EINVAL;
   1ce7a:	f06f 0015 	mvn.w	r0, #21
}
   1ce7e:	4770      	bx	lr

0001ce80 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ce82:	4604      	mov	r4, r0
   1ce84:	460d      	mov	r5, r1
	__asm__ volatile(
   1ce86:	f04f 0320 	mov.w	r3, #32
   1ce8a:	f3ef 8611 	mrs	r6, BASEPRI
   1ce8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce92:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1ce96:	6947      	ldr	r7, [r0, #20]
   1ce98:	b977      	cbnz	r7, 1ceb8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1ce9a:	f000 fa97 	bl	1d3cc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1ce9e:	b158      	cbz	r0, 1ceb8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1cea0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1cea2:	6142      	str	r2, [r0, #20]
   1cea4:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1cea6:	f000 fa49 	bl	1d33c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1ceaa:	4631      	mov	r1, r6
   1ceac:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1ceb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1ceb4:	f7fb bb96 	b.w	185e4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1ceb8:	682b      	ldr	r3, [r5, #0]
   1ceba:	6962      	ldr	r2, [r4, #20]
   1cebc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1cebe:	682b      	ldr	r3, [r5, #0]
   1cec0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1cec2:	69a3      	ldr	r3, [r4, #24]
   1cec4:	3b01      	subs	r3, #1
   1cec6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1cec8:	f386 8811 	msr	BASEPRI, r6
   1cecc:	f3bf 8f6f 	isb	sy
}
   1ced0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ced2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ced2:	f3ef 8005 	mrs	r0, IPSR
}
   1ced6:	3800      	subs	r0, #0
   1ced8:	bf18      	it	ne
   1ceda:	2001      	movne	r0, #1
   1cedc:	4770      	bx	lr

0001cede <z_impl_k_thread_name_set>:
}
   1cede:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1cee2:	4770      	bx	lr

0001cee4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1cee4:	f7fb bb90 	b.w	18608 <z_sched_start>

0001cee8 <z_pm_save_idle_exit>:
{
   1cee8:	b508      	push	{r3, lr}
	pm_system_resume();
   1ceea:	f7e6 fb39 	bl	3560 <pm_system_resume>
}
   1ceee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1cef2:	f7ff bde5 	b.w	1cac0 <sys_clock_idle_exit>

0001cef6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1cef6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1cefa:	428b      	cmp	r3, r1
   1cefc:	d001      	beq.n	1cf02 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1cefe:	f7fb bb2b 	b.w	18558 <z_set_prio>
}
   1cf02:	2000      	movs	r0, #0
   1cf04:	4770      	bx	lr

0001cf06 <z_impl_k_mutex_init>:
{
   1cf06:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1cf08:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1cf0a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1cf0e:	e9c3 3300 	strd	r3, r3, [r3]
}
   1cf12:	4770      	bx	lr

0001cf14 <queue_insert>:
{
   1cf14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cf18:	4699      	mov	r9, r3
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1cf20:	460d      	mov	r5, r1
   1cf22:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1cf24:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1cf28:	f04f 0220 	mov.w	r2, #32
   1cf2c:	f3ef 8711 	mrs	r7, BASEPRI
   1cf30:	f382 8812 	msr	BASEPRI_MAX, r2
   1cf34:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1cf38:	b103      	cbz	r3, 1cf3c <queue_insert+0x28>
	return list->tail;
   1cf3a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1cf3c:	4630      	mov	r0, r6
   1cf3e:	f000 fa45 	bl	1d3cc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1cf42:	b158      	cbz	r0, 1cf5c <queue_insert+0x48>
   1cf44:	2300      	movs	r3, #0
   1cf46:	67c3      	str	r3, [r0, #124]	; 0x7c
   1cf48:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1cf4c:	f000 f9f6 	bl	1d33c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1cf50:	4630      	mov	r0, r6
   1cf52:	4639      	mov	r1, r7
   1cf54:	f7fb fb46 	bl	185e4 <z_reschedule>
		return 0;
   1cf58:	2000      	movs	r0, #0
   1cf5a:	e00c      	b.n	1cf76 <queue_insert+0x62>
	if (alloc) {
   1cf5c:	f1b9 0f00 	cmp.w	r9, #0
   1cf60:	d01b      	beq.n	1cf9a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1cf62:	2108      	movs	r1, #8
   1cf64:	f7fb ff6c 	bl	18e40 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1cf68:	b938      	cbnz	r0, 1cf7a <queue_insert+0x66>
	__asm__ volatile(
   1cf6a:	f387 8811 	msr	BASEPRI, r7
   1cf6e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1cf72:	f06f 000b 	mvn.w	r0, #11
}
   1cf76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1cf7a:	2201      	movs	r2, #1
		anode->data = data;
   1cf7c:	f8c0 8004 	str.w	r8, [r0, #4]
   1cf80:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cf82:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf84:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1cf88:	b95d      	cbnz	r5, 1cfa2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cf8a:	6822      	ldr	r2, [r4, #0]
   1cf8c:	430a      	orrs	r2, r1
   1cf8e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cf90:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1cf92:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1cf94:	b96a      	cbnz	r2, 1cfb2 <queue_insert+0x9e>
	list->tail = node;
   1cf96:	6060      	str	r0, [r4, #4]
}
   1cf98:	e00b      	b.n	1cfb2 <queue_insert+0x9e>
	node->next_and_flags = flags;
   1cf9a:	f8c8 9000 	str.w	r9, [r8]
}
   1cf9e:	4640      	mov	r0, r8
   1cfa0:	e7ef      	b.n	1cf82 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cfa2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1cfa4:	2a03      	cmp	r2, #3
   1cfa6:	d810      	bhi.n	1cfca <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfa8:	6001      	str	r1, [r0, #0]
	return list->tail;
   1cfaa:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1cfac:	b939      	cbnz	r1, 1cfbe <queue_insert+0xaa>
	list->head = node;
   1cfae:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1cfb2:	2104      	movs	r1, #4
   1cfb4:	f104 0010 	add.w	r0, r4, #16
   1cfb8:	f000 fc36 	bl	1d828 <z_handle_obj_poll_events>
   1cfbc:	e7c8      	b.n	1cf50 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cfbe:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfc0:	f002 0203 	and.w	r2, r2, #3
   1cfc4:	4302      	orrs	r2, r0
   1cfc6:	600a      	str	r2, [r1, #0]
   1cfc8:	e7e5      	b.n	1cf96 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1cfca:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfce:	430a      	orrs	r2, r1
   1cfd0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cfd2:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1cfd4:	f002 0203 	and.w	r2, r2, #3
   1cfd8:	ea40 0302 	orr.w	r3, r0, r2
   1cfdc:	602b      	str	r3, [r5, #0]
}
   1cfde:	e7e8      	b.n	1cfb2 <queue_insert+0x9e>

0001cfe0 <z_queue_node_peek>:
{
   1cfe0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1cfe2:	4604      	mov	r4, r0
   1cfe4:	b130      	cbz	r0, 1cff4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1cfe6:	6802      	ldr	r2, [r0, #0]
   1cfe8:	0793      	lsls	r3, r2, #30
   1cfea:	d003      	beq.n	1cff4 <z_queue_node_peek+0x14>
		ret = anode->data;
   1cfec:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1cfee:	b109      	cbz	r1, 1cff4 <z_queue_node_peek+0x14>
			k_free(anode);
   1cff0:	f000 fc2d 	bl	1d84e <k_free>
}
   1cff4:	4620      	mov	r0, r4
   1cff6:	bd10      	pop	{r4, pc}

0001cff8 <z_impl_k_queue_init>:
	list->head = NULL;
   1cff8:	2300      	movs	r3, #0
	list->tail = NULL;
   1cffa:	e9c0 3300 	strd	r3, r3, [r0]
   1cffe:	f100 0308 	add.w	r3, r0, #8
   1d002:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1d006:	f100 0310 	add.w	r3, r0, #16
   1d00a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1d00e:	4770      	bx	lr

0001d010 <z_impl_k_queue_cancel_wait>:
{
   1d010:	b570      	push	{r4, r5, r6, lr}
   1d012:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1d014:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1d018:	f04f 0320 	mov.w	r3, #32
   1d01c:	f3ef 8611 	mrs	r6, BASEPRI
   1d020:	f383 8812 	msr	BASEPRI_MAX, r3
   1d024:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1d028:	4628      	mov	r0, r5
   1d02a:	f000 f9cf 	bl	1d3cc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1d02e:	b120      	cbz	r0, 1d03a <z_impl_k_queue_cancel_wait+0x2a>
   1d030:	2200      	movs	r2, #0
   1d032:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   1d034:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   1d036:	f000 f981 	bl	1d33c <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1d03a:	f104 0010 	add.w	r0, r4, #16
   1d03e:	2108      	movs	r1, #8
   1d040:	f000 fbf2 	bl	1d828 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1d044:	4631      	mov	r1, r6
   1d046:	4628      	mov	r0, r5
}
   1d048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   1d04c:	f7fb baca 	b.w	185e4 <z_reschedule>

0001d050 <k_queue_append>:
{
   1d050:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1d052:	2301      	movs	r3, #1
   1d054:	9300      	str	r3, [sp, #0]
   1d056:	2300      	movs	r3, #0
{
   1d058:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1d05a:	4619      	mov	r1, r3
   1d05c:	f7ff ff5a 	bl	1cf14 <queue_insert>
}
   1d060:	b003      	add	sp, #12
   1d062:	f85d fb04 	ldr.w	pc, [sp], #4

0001d066 <k_queue_prepend>:
{
   1d066:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1d068:	2300      	movs	r3, #0
{
   1d06a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1d06c:	9300      	str	r3, [sp, #0]
   1d06e:	4619      	mov	r1, r3
   1d070:	f7ff ff50 	bl	1cf14 <queue_insert>
}
   1d074:	b003      	add	sp, #12
   1d076:	f85d fb04 	ldr.w	pc, [sp], #4

0001d07a <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   1d07a:	6800      	ldr	r0, [r0, #0]
   1d07c:	2100      	movs	r1, #0
   1d07e:	f7ff bfaf 	b.w	1cfe0 <z_queue_node_peek>

0001d082 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1d082:	b15a      	cbz	r2, 1d09c <z_impl_k_sem_init+0x1a>
   1d084:	428a      	cmp	r2, r1
   1d086:	d309      	bcc.n	1d09c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d088:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d08c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1d090:	e9c0 0000 	strd	r0, r0, [r0]
   1d094:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d098:	2000      	movs	r0, #0
   1d09a:	4770      	bx	lr
		return -EINVAL;
   1d09c:	f06f 0015 	mvn.w	r0, #21
}
   1d0a0:	4770      	bx	lr

0001d0a2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1d0a2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1d0a4:	2301      	movs	r3, #1
   1d0a6:	408b      	lsls	r3, r1
   1d0a8:	ea22 0303 	bic.w	r3, r2, r3
   1d0ac:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1d0ae:	fa22 f001 	lsr.w	r0, r2, r1
}
   1d0b2:	f000 0001 	and.w	r0, r0, #1
   1d0b6:	4770      	bx	lr

0001d0b8 <unschedule_locked>:
{
   1d0b8:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1d0ba:	2103      	movs	r1, #3
{
   1d0bc:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1d0be:	300c      	adds	r0, #12
   1d0c0:	f7ff ffef 	bl	1d0a2 <flag_test_and_clear>
   1d0c4:	b130      	cbz	r0, 1d0d4 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   1d0c6:	f104 0010 	add.w	r0, r4, #16
   1d0ca:	f000 f9fc 	bl	1d4c6 <z_abort_timeout>
   1d0ce:	fab0 f080 	clz	r0, r0
   1d0d2:	0940      	lsrs	r0, r0, #5
}
   1d0d4:	bd10      	pop	{r4, pc}

0001d0d6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1d0d6:	b120      	cbz	r0, 1d0e2 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1d0d8:	2200      	movs	r2, #0
   1d0da:	4611      	mov	r1, r2
   1d0dc:	3088      	adds	r0, #136	; 0x88
   1d0de:	f000 b9cf 	b.w	1d480 <z_sched_wake>
}
   1d0e2:	4770      	bx	lr

0001d0e4 <cancel_async_locked>:
{
   1d0e4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d0e6:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d0e8:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1d0ec:	079b      	lsls	r3, r3, #30
{
   1d0ee:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d0f0:	d416      	bmi.n	1d120 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1d0f2:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1d0f4:	2102      	movs	r1, #2
   1d0f6:	300c      	adds	r0, #12
   1d0f8:	f7ff ffd3 	bl	1d0a2 <flag_test_and_clear>
   1d0fc:	b180      	cbz	r0, 1d120 <cancel_async_locked+0x3c>
	return list->head;
   1d0fe:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d102:	b16a      	cbz	r2, 1d120 <cancel_async_locked+0x3c>
   1d104:	4294      	cmp	r4, r2
   1d106:	d11d      	bne.n	1d144 <cancel_async_locked+0x60>
	return node->next;
   1d108:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d10a:	b99e      	cbnz	r6, 1d134 <cancel_async_locked+0x50>
   1d10c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   1d110:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1d114:	429c      	cmp	r4, r3
   1d116:	d101      	bne.n	1d11c <cancel_async_locked+0x38>
	list->tail = node;
   1d118:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   1d11c:	2300      	movs	r3, #0
   1d11e:	6023      	str	r3, [r4, #0]
	return *flagp;
   1d120:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1d122:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1d126:	bf1e      	ittt	ne
   1d128:	f043 0302 	orrne.w	r3, r3, #2
   1d12c:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1d12e:	f040 0002 	orrne.w	r0, r0, #2
}
   1d132:	bd70      	pop	{r4, r5, r6, pc}
   1d134:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d136:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   1d13a:	4294      	cmp	r4, r2
	list->tail = node;
   1d13c:	bf08      	it	eq
   1d13e:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   1d142:	e7eb      	b.n	1d11c <cancel_async_locked+0x38>
	return node->next;
   1d144:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d146:	6812      	ldr	r2, [r2, #0]
   1d148:	e7db      	b.n	1d102 <cancel_async_locked+0x1e>

0001d14a <work_timeout>:
{
   1d14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d14c:	4604      	mov	r4, r0
   1d14e:	f04f 0320 	mov.w	r3, #32
   1d152:	f3ef 8511 	mrs	r5, BASEPRI
   1d156:	f383 8812 	msr	BASEPRI_MAX, r3
   1d15a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1d15e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1d160:	f1a0 0610 	sub.w	r6, r0, #16
   1d164:	2103      	movs	r1, #3
   1d166:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1d168:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1d16a:	f7ff ff9a 	bl	1d0a2 <flag_test_and_clear>
   1d16e:	b128      	cbz	r0, 1d17c <work_timeout+0x32>
		queue = dw->queue;
   1d170:	69a3      	ldr	r3, [r4, #24]
   1d172:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1d174:	a901      	add	r1, sp, #4
   1d176:	4630      	mov	r0, r6
   1d178:	f7fa ff92 	bl	180a0 <submit_to_queue_locked>
	__asm__ volatile(
   1d17c:	f385 8811 	msr	BASEPRI, r5
   1d180:	f3bf 8f6f 	isb	sy
}
   1d184:	b002      	add	sp, #8
   1d186:	bd70      	pop	{r4, r5, r6, pc}

0001d188 <k_work_init>:
{
   1d188:	b538      	push	{r3, r4, r5, lr}
   1d18a:	4604      	mov	r4, r0
   1d18c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d18e:	2210      	movs	r2, #16
   1d190:	2100      	movs	r1, #0
   1d192:	f7fc fd3a 	bl	19c0a <memset>
   1d196:	6065      	str	r5, [r4, #4]
}
   1d198:	bd38      	pop	{r3, r4, r5, pc}

0001d19a <k_work_busy_get>:
	__asm__ volatile(
   1d19a:	f04f 0220 	mov.w	r2, #32
   1d19e:	f3ef 8311 	mrs	r3, BASEPRI
   1d1a2:	f382 8812 	msr	BASEPRI_MAX, r2
   1d1a6:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1d1aa:	68c0      	ldr	r0, [r0, #12]
   1d1ac:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   1d1b0:	f383 8811 	msr	BASEPRI, r3
   1d1b4:	f3bf 8f6f 	isb	sy
}
   1d1b8:	4770      	bx	lr

0001d1ba <z_work_submit_to_queue>:
{
   1d1ba:	b513      	push	{r0, r1, r4, lr}
   1d1bc:	9001      	str	r0, [sp, #4]
   1d1be:	4608      	mov	r0, r1
	__asm__ volatile(
   1d1c0:	f04f 0320 	mov.w	r3, #32
   1d1c4:	f3ef 8411 	mrs	r4, BASEPRI
   1d1c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1cc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1d1d0:	a901      	add	r1, sp, #4
   1d1d2:	f7fa ff65 	bl	180a0 <submit_to_queue_locked>
	__asm__ volatile(
   1d1d6:	f384 8811 	msr	BASEPRI, r4
   1d1da:	f3bf 8f6f 	isb	sy
}
   1d1de:	b002      	add	sp, #8
   1d1e0:	bd10      	pop	{r4, pc}

0001d1e2 <k_work_submit_to_queue>:
{
   1d1e2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1d1e4:	f7ff ffe9 	bl	1d1ba <z_work_submit_to_queue>
	if (ret > 0) {
   1d1e8:	1e04      	subs	r4, r0, #0
   1d1ea:	dd09      	ble.n	1d200 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   1d1ec:	f04f 0320 	mov.w	r3, #32
   1d1f0:	f3ef 8011 	mrs	r0, BASEPRI
   1d1f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1f8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d1fc:	f000 f91a 	bl	1d434 <z_reschedule_irqlock>
}
   1d200:	4620      	mov	r0, r4
   1d202:	bd10      	pop	{r4, pc}

0001d204 <k_work_queue_init>:
{
   1d204:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   1d206:	22a0      	movs	r2, #160	; 0xa0
   1d208:	2100      	movs	r1, #0
   1d20a:	f7fc fcfe 	bl	19c0a <memset>
}
   1d20e:	bd08      	pop	{r3, pc}

0001d210 <k_work_init_delayable>:
{
   1d210:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1d212:	2230      	movs	r2, #48	; 0x30
{
   1d214:	4604      	mov	r4, r0
   1d216:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1d218:	2100      	movs	r1, #0
   1d21a:	f7fc fcf6 	bl	19c0a <memset>
   1d21e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d222:	6065      	str	r5, [r4, #4]
   1d224:	60e3      	str	r3, [r4, #12]
}
   1d226:	bd38      	pop	{r3, r4, r5, pc}

0001d228 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   1d228:	f7ff bfb7 	b.w	1d19a <k_work_busy_get>

0001d22c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1d22c:	b538      	push	{r3, r4, r5, lr}
   1d22e:	4604      	mov	r4, r0
   1d230:	f04f 0320 	mov.w	r3, #32
   1d234:	f3ef 8511 	mrs	r5, BASEPRI
   1d238:	f383 8812 	msr	BASEPRI_MAX, r3
   1d23c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1d240:	f7ff ff3a 	bl	1d0b8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1d244:	4620      	mov	r0, r4
   1d246:	f7ff ff4d 	bl	1d0e4 <cancel_async_locked>
	__asm__ volatile(
   1d24a:	f385 8811 	msr	BASEPRI, r5
   1d24e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1d252:	bd38      	pop	{r3, r4, r5, pc}

0001d254 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d256:	4604      	mov	r4, r0
   1d258:	460d      	mov	r5, r1
	__asm__ volatile(
   1d25a:	f04f 0320 	mov.w	r3, #32
   1d25e:	f3ef 8611 	mrs	r6, BASEPRI
   1d262:	f383 8812 	msr	BASEPRI_MAX, r3
   1d266:	f3bf 8f6f 	isb	sy
	return *flagp;
   1d26a:	68c3      	ldr	r3, [r0, #12]
   1d26c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1d270:	2b00      	cmp	r3, #0
   1d272:	bf14      	ite	ne
   1d274:	2701      	movne	r7, #1
   1d276:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1d278:	d105      	bne.n	1d286 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   1d27a:	f386 8811 	msr	BASEPRI, r6
   1d27e:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1d282:	4638      	mov	r0, r7
   1d284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   1d286:	f7ff ff17 	bl	1d0b8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1d28a:	4620      	mov	r0, r4
   1d28c:	f7ff ff2a 	bl	1d0e4 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1d290:	4629      	mov	r1, r5
   1d292:	4620      	mov	r0, r4
   1d294:	f7fa fee6 	bl	18064 <cancel_sync_locked>
   1d298:	f386 8811 	msr	BASEPRI, r6
   1d29c:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   1d2a0:	2800      	cmp	r0, #0
   1d2a2:	d0ee      	beq.n	1d282 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   1d2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d2ac:	f105 0008 	add.w	r0, r5, #8
   1d2b0:	f7fa fdd8 	bl	17e64 <z_impl_k_sem_take>
   1d2b4:	e7e5      	b.n	1d282 <k_work_cancel_delayable_sync+0x2e>

0001d2b6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1d2b6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d2ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d2bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d2be:	2300      	movs	r3, #0
	node->prev = NULL;
   1d2c0:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d2c4:	4770      	bx	lr

0001d2c6 <unpend_thread_no_timeout>:
{
   1d2c6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d2c8:	f7ff fff5 	bl	1d2b6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d2cc:	7b43      	ldrb	r3, [r0, #13]
   1d2ce:	f023 0302 	bic.w	r3, r3, #2
   1d2d2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1d2d4:	2300      	movs	r3, #0
   1d2d6:	6083      	str	r3, [r0, #8]
}
   1d2d8:	bd08      	pop	{r3, pc}

0001d2da <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1d2da:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1d2de:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1d2e2:	4283      	cmp	r3, r0
		return b2 - b1;
   1d2e4:	bf14      	ite	ne
   1d2e6:	1ac0      	subne	r0, r0, r3
	return 0;
   1d2e8:	2000      	moveq	r0, #0
}
   1d2ea:	4770      	bx	lr

0001d2ec <add_to_waitq_locked>:
{
   1d2ec:	b538      	push	{r3, r4, r5, lr}
   1d2ee:	4604      	mov	r4, r0
   1d2f0:	460d      	mov	r5, r1
	unready_thread(thread);
   1d2f2:	f7fb f8b3 	bl	1845c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1d2f6:	7b63      	ldrb	r3, [r4, #13]
   1d2f8:	f043 0302 	orr.w	r3, r3, #2
   1d2fc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1d2fe:	b1e5      	cbz	r5, 1d33a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   1d300:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   1d302:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d304:	429d      	cmp	r5, r3
   1d306:	d109      	bne.n	1d31c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1d308:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1d30a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1d30e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d310:	606c      	str	r4, [r5, #4]
}
   1d312:	e012      	b.n	1d33a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1d314:	686a      	ldr	r2, [r5, #4]
   1d316:	4293      	cmp	r3, r2
   1d318:	d0f6      	beq.n	1d308 <add_to_waitq_locked+0x1c>
   1d31a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d31c:	2b00      	cmp	r3, #0
   1d31e:	d0f3      	beq.n	1d308 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   1d320:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1d324:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1d328:	428a      	cmp	r2, r1
   1d32a:	d0f3      	beq.n	1d314 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d32c:	4291      	cmp	r1, r2
   1d32e:	ddf1      	ble.n	1d314 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   1d330:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d332:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1d336:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d338:	605c      	str	r4, [r3, #4]
}
   1d33a:	bd38      	pop	{r3, r4, r5, pc}

0001d33c <z_ready_thread>:
{
   1d33c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d33e:	f04f 0320 	mov.w	r3, #32
   1d342:	f3ef 8411 	mrs	r4, BASEPRI
   1d346:	f383 8812 	msr	BASEPRI_MAX, r3
   1d34a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1d34e:	f7fb f851 	bl	183f4 <ready_thread>
	__asm__ volatile(
   1d352:	f384 8811 	msr	BASEPRI, r4
   1d356:	f3bf 8f6f 	isb	sy
}
   1d35a:	bd10      	pop	{r4, pc}

0001d35c <z_unpend_thread_no_timeout>:
{
   1d35c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d35e:	f04f 0220 	mov.w	r2, #32
   1d362:	f3ef 8111 	mrs	r1, BASEPRI
   1d366:	f382 8812 	msr	BASEPRI_MAX, r2
   1d36a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1d36e:	6883      	ldr	r3, [r0, #8]
   1d370:	b10b      	cbz	r3, 1d376 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   1d372:	f7ff ffa8 	bl	1d2c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d376:	f381 8811 	msr	BASEPRI, r1
   1d37a:	f3bf 8f6f 	isb	sy
}
   1d37e:	bd08      	pop	{r3, pc}

0001d380 <z_sched_wake_thread>:
{
   1d380:	b538      	push	{r3, r4, r5, lr}
   1d382:	4604      	mov	r4, r0
	__asm__ volatile(
   1d384:	f04f 0320 	mov.w	r3, #32
   1d388:	f3ef 8511 	mrs	r5, BASEPRI
   1d38c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d390:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1d394:	7b43      	ldrb	r3, [r0, #13]
   1d396:	f013 0f28 	tst.w	r3, #40	; 0x28
   1d39a:	d10b      	bne.n	1d3b4 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   1d39c:	6883      	ldr	r3, [r0, #8]
   1d39e:	b10b      	cbz	r3, 1d3a4 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   1d3a0:	f7ff ff91 	bl	1d2c6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d3a4:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   1d3a6:	b951      	cbnz	r1, 1d3be <z_sched_wake_thread+0x3e>
   1d3a8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1d3ac:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   1d3ae:	4620      	mov	r0, r4
   1d3b0:	f7fb f820 	bl	183f4 <ready_thread>
	__asm__ volatile(
   1d3b4:	f385 8811 	msr	BASEPRI, r5
   1d3b8:	f3bf 8f6f 	isb	sy
}
   1d3bc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d3be:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   1d3c2:	e7f3      	b.n	1d3ac <z_sched_wake_thread+0x2c>

0001d3c4 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   1d3c4:	2101      	movs	r1, #1
   1d3c6:	3818      	subs	r0, #24
   1d3c8:	f7ff bfda 	b.w	1d380 <z_sched_wake_thread>

0001d3cc <z_unpend_first_thread>:
{
   1d3cc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d3ce:	f04f 0320 	mov.w	r3, #32
   1d3d2:	f3ef 8511 	mrs	r5, BASEPRI
   1d3d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3da:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1d3de:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d3e0:	42a0      	cmp	r0, r4
   1d3e2:	d00d      	beq.n	1d400 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   1d3e4:	b134      	cbz	r4, 1d3f4 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   1d3e6:	4620      	mov	r0, r4
   1d3e8:	f7ff ff6d 	bl	1d2c6 <unpend_thread_no_timeout>
   1d3ec:	f104 0018 	add.w	r0, r4, #24
   1d3f0:	f000 f869 	bl	1d4c6 <z_abort_timeout>
	__asm__ volatile(
   1d3f4:	f385 8811 	msr	BASEPRI, r5
   1d3f8:	f3bf 8f6f 	isb	sy
}
   1d3fc:	4620      	mov	r0, r4
   1d3fe:	bd38      	pop	{r3, r4, r5, pc}
   1d400:	2400      	movs	r4, #0
   1d402:	e7f7      	b.n	1d3f4 <z_unpend_first_thread+0x28>

0001d404 <z_unpend_thread>:
{
   1d404:	b510      	push	{r4, lr}
   1d406:	4601      	mov	r1, r0
	__asm__ volatile(
   1d408:	f04f 0320 	mov.w	r3, #32
   1d40c:	f3ef 8411 	mrs	r4, BASEPRI
   1d410:	f383 8812 	msr	BASEPRI_MAX, r3
   1d414:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1d418:	6883      	ldr	r3, [r0, #8]
   1d41a:	b10b      	cbz	r3, 1d420 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1d41c:	f7ff ff53 	bl	1d2c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d420:	f384 8811 	msr	BASEPRI, r4
   1d424:	f3bf 8f6f 	isb	sy
}
   1d428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d42c:	f101 0018 	add.w	r0, r1, #24
   1d430:	f000 b849 	b.w	1d4c6 <z_abort_timeout>

0001d434 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d434:	4603      	mov	r3, r0
   1d436:	b920      	cbnz	r0, 1d442 <z_reschedule_irqlock+0xe>
   1d438:	f3ef 8205 	mrs	r2, IPSR
   1d43c:	b90a      	cbnz	r2, 1d442 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1d43e:	f7e6 bab5 	b.w	39ac <arch_swap>
   1d442:	f383 8811 	msr	BASEPRI, r3
   1d446:	f3bf 8f6f 	isb	sy
}
   1d44a:	4770      	bx	lr

0001d44c <z_reschedule_unlocked>:
	__asm__ volatile(
   1d44c:	f04f 0320 	mov.w	r3, #32
   1d450:	f3ef 8011 	mrs	r0, BASEPRI
   1d454:	f383 8812 	msr	BASEPRI_MAX, r3
   1d458:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d45c:	f7ff bfea 	b.w	1d434 <z_reschedule_irqlock>

0001d460 <z_unpend_all>:
{
   1d460:	b538      	push	{r3, r4, r5, lr}
   1d462:	4605      	mov	r5, r0
	int need_sched = 0;
   1d464:	2000      	movs	r0, #0
	return list->head == list;
   1d466:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d468:	42a5      	cmp	r5, r4
   1d46a:	d000      	beq.n	1d46e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d46c:	b904      	cbnz	r4, 1d470 <z_unpend_all+0x10>
}
   1d46e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1d470:	4620      	mov	r0, r4
   1d472:	f7ff ffc7 	bl	1d404 <z_unpend_thread>
		z_ready_thread(thread);
   1d476:	4620      	mov	r0, r4
   1d478:	f7ff ff60 	bl	1d33c <z_ready_thread>
		need_sched = 1;
   1d47c:	2001      	movs	r0, #1
   1d47e:	e7f2      	b.n	1d466 <z_unpend_all+0x6>

0001d480 <z_sched_wake>:
{
   1d480:	b538      	push	{r3, r4, r5, lr}
   1d482:	f04f 0320 	mov.w	r3, #32
   1d486:	f3ef 8511 	mrs	r5, BASEPRI
   1d48a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d48e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1d492:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d494:	42a0      	cmp	r0, r4
   1d496:	d012      	beq.n	1d4be <z_sched_wake+0x3e>
		if (thread != NULL) {
   1d498:	b19c      	cbz	r4, 1d4c2 <z_sched_wake+0x42>
   1d49a:	67e1      	str	r1, [r4, #124]	; 0x7c
   1d49c:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   1d49e:	4620      	mov	r0, r4
   1d4a0:	f7ff ff11 	bl	1d2c6 <unpend_thread_no_timeout>
   1d4a4:	f104 0018 	add.w	r0, r4, #24
   1d4a8:	f000 f80d 	bl	1d4c6 <z_abort_timeout>
			ready_thread(thread);
   1d4ac:	4620      	mov	r0, r4
   1d4ae:	f7fa ffa1 	bl	183f4 <ready_thread>
			ret = true;
   1d4b2:	2001      	movs	r0, #1
	__asm__ volatile(
   1d4b4:	f385 8811 	msr	BASEPRI, r5
   1d4b8:	f3bf 8f6f 	isb	sy
}
   1d4bc:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   1d4be:	2000      	movs	r0, #0
   1d4c0:	e7f8      	b.n	1d4b4 <z_sched_wake+0x34>
   1d4c2:	4620      	mov	r0, r4
   1d4c4:	e7f6      	b.n	1d4b4 <z_sched_wake+0x34>

0001d4c6 <z_abort_timeout>:
{
   1d4c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d4c8:	f04f 0220 	mov.w	r2, #32
   1d4cc:	f3ef 8411 	mrs	r4, BASEPRI
   1d4d0:	f382 8812 	msr	BASEPRI_MAX, r2
   1d4d4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1d4d8:	6803      	ldr	r3, [r0, #0]
   1d4da:	b13b      	cbz	r3, 1d4ec <z_abort_timeout+0x26>
			remove_timeout(to);
   1d4dc:	f7fb fa74 	bl	189c8 <remove_timeout>
			ret = 0;
   1d4e0:	2000      	movs	r0, #0
	__asm__ volatile(
   1d4e2:	f384 8811 	msr	BASEPRI, r4
   1d4e6:	f3bf 8f6f 	isb	sy
}
   1d4ea:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1d4ec:	f06f 0015 	mvn.w	r0, #21
   1d4f0:	e7f7      	b.n	1d4e2 <z_abort_timeout+0x1c>

0001d4f2 <z_get_next_timeout_expiry>:
{
   1d4f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d4f4:	f04f 0320 	mov.w	r3, #32
   1d4f8:	f3ef 8411 	mrs	r4, BASEPRI
   1d4fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d500:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1d504:	f7fb fa40 	bl	18988 <next_timeout>
	__asm__ volatile(
   1d508:	f384 8811 	msr	BASEPRI, r4
   1d50c:	f3bf 8f6f 	isb	sy
}
   1d510:	bd10      	pop	{r4, pc}

0001d512 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1d512:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1d514:	f7fb fb54 	bl	18bc0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d518:	bd08      	pop	{r3, pc}

0001d51a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1d51a:	f7fb bb51 	b.w	18bc0 <sys_clock_tick_get>

0001d51e <sys_timepoint_calc>:

k_timepoint_t sys_timepoint_calc(k_timeout_t timeout)
{
	k_timepoint_t timepoint;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d51e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d522:	bf08      	it	eq
   1d524:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1d528:	b570      	push	{r4, r5, r6, lr}
   1d52a:	4604      	mov	r4, r0
   1d52c:	461d      	mov	r5, r3
   1d52e:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d530:	d013      	beq.n	1d55a <sys_timepoint_calc+0x3c>
		timepoint.tick = UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d532:	431a      	orrs	r2, r3
   1d534:	d015      	beq.n	1d562 <sys_timepoint_calc+0x44>
		timepoint.tick = 0;
	} else {
		k_ticks_t dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d536:	f06f 0201 	mvn.w	r2, #1
   1d53a:	1b92      	subs	r2, r2, r6
   1d53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d540:	eb63 0105 	sbc.w	r1, r3, r5
   1d544:	2900      	cmp	r1, #0
   1d546:	da04      	bge.n	1d552 <sys_timepoint_calc+0x34>
			timepoint.tick = Z_TICK_ABS(dt);
		} else {
			timepoint.tick = sys_clock_tick_get() + MAX(1, dt);
   1d548:	f7fb fb3a 	bl	18bc0 <sys_clock_tick_get>
   1d54c:	1982      	adds	r2, r0, r6
   1d54e:	eb41 0105 	adc.w	r1, r1, r5
		}
	}

	return timepoint;
   1d552:	e9c4 2100 	strd	r2, r1, [r4]
}
   1d556:	4620      	mov	r0, r4
   1d558:	bd70      	pop	{r4, r5, r6, pc}
		timepoint.tick = UINT64_MAX;
   1d55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		timepoint.tick = 0;
   1d55e:	4611      	mov	r1, r2
   1d560:	e7f7      	b.n	1d552 <sys_timepoint_calc+0x34>
   1d562:	2200      	movs	r2, #0
   1d564:	e7fb      	b.n	1d55e <sys_timepoint_calc+0x40>

0001d566 <sys_timepoint_timeout>:

k_timeout_t sys_timepoint_timeout(k_timepoint_t timepoint)
{
	uint64_t now, remaining;

	if (timepoint.tick == UINT64_MAX) {
   1d566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d56a:	bf08      	it	eq
   1d56c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d572:	4607      	mov	r7, r0
   1d574:	4616      	mov	r6, r2
   1d576:	461c      	mov	r4, r3
	if (timepoint.tick == UINT64_MAX) {
   1d578:	d010      	beq.n	1d59c <sys_timepoint_timeout+0x36>
		return K_FOREVER;
	}
	if (timepoint.tick == 0) {
   1d57a:	ea54 0302 	orrs.w	r3, r4, r2
   1d57e:	d011      	beq.n	1d5a4 <sys_timepoint_timeout+0x3e>
		return K_NO_WAIT;
	}

	now = sys_clock_tick_get();
   1d580:	f7fb fb1e 	bl	18bc0 <sys_clock_tick_get>
	remaining = (timepoint.tick > now) ? (timepoint.tick - now) : 0;
   1d584:	42b0      	cmp	r0, r6
	now = sys_clock_tick_get();
   1d586:	460a      	mov	r2, r1
	remaining = (timepoint.tick > now) ? (timepoint.tick - now) : 0;
   1d588:	41a1      	sbcs	r1, r4
	now = sys_clock_tick_get();
   1d58a:	4603      	mov	r3, r0
	remaining = (timepoint.tick > now) ? (timepoint.tick - now) : 0;
   1d58c:	d20a      	bcs.n	1d5a4 <sys_timepoint_timeout+0x3e>
   1d58e:	1af3      	subs	r3, r6, r3
   1d590:	eb64 0402 	sbc.w	r4, r4, r2
		return K_FOREVER;
   1d594:	e9c7 3400 	strd	r3, r4, [r7]
	return K_TICKS(remaining);
}
   1d598:	4638      	mov	r0, r7
   1d59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5a0:	461c      	mov	r4, r3
   1d5a2:	e7f7      	b.n	1d594 <sys_timepoint_timeout+0x2e>
   1d5a4:	2300      	movs	r3, #0
   1d5a6:	e7fb      	b.n	1d5a0 <sys_timepoint_timeout+0x3a>

0001d5a8 <add_event>:
{
   1d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5aa:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d5ac:	e9d0 1300 	ldrd	r1, r3, [r0]
   1d5b0:	4288      	cmp	r0, r1
   1d5b2:	4604      	mov	r4, r0
   1d5b4:	d105      	bne.n	1d5c2 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1d5b6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1d5b8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1d5bc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d5be:	6065      	str	r5, [r4, #4]
   1d5c0:	e01d      	b.n	1d5fe <add_event+0x56>
	if ((pending == NULL) ||
   1d5c2:	2b00      	cmp	r3, #0
   1d5c4:	d0f7      	beq.n	1d5b6 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d5c6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d5c8:	b100      	cbz	r0, 1d5cc <add_event+0x24>
   1d5ca:	3860      	subs	r0, #96	; 0x60
   1d5cc:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d5d0:	4639      	mov	r1, r7
   1d5d2:	f7ff fe82 	bl	1d2da <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1d5d6:	2800      	cmp	r0, #0
   1d5d8:	dced      	bgt.n	1d5b6 <add_event+0xe>
	return list->head == list;
   1d5da:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d5dc:	42b4      	cmp	r4, r6
   1d5de:	d0ea      	beq.n	1d5b6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d5e0:	2e00      	cmp	r6, #0
   1d5e2:	d0e8      	beq.n	1d5b6 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1d5e4:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d5e6:	b101      	cbz	r1, 1d5ea <add_event+0x42>
   1d5e8:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1d5ea:	4638      	mov	r0, r7
   1d5ec:	f7ff fe75 	bl	1d2da <z_sched_prio_cmp>
   1d5f0:	2800      	cmp	r0, #0
   1d5f2:	dd05      	ble.n	1d600 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1d5f4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d5f6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1d5fa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d5fc:	6075      	str	r5, [r6, #4]
}
   1d5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1d600:	6863      	ldr	r3, [r4, #4]
   1d602:	429e      	cmp	r6, r3
   1d604:	d0d7      	beq.n	1d5b6 <add_event+0xe>
   1d606:	6836      	ldr	r6, [r6, #0]
   1d608:	e7ea      	b.n	1d5e0 <add_event+0x38>

0001d60a <register_events>:
{
   1d60a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1d60e:	2500      	movs	r5, #0
{
   1d610:	468b      	mov	fp, r1
   1d612:	4614      	mov	r4, r2
   1d614:	461f      	mov	r7, r3
   1d616:	4682      	mov	sl, r0
	int events_registered = 0;
   1d618:	462e      	mov	r6, r5
	event->poller = NULL;
   1d61a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1d61c:	455d      	cmp	r5, fp
   1d61e:	db02      	blt.n	1d626 <register_events+0x1c>
}
   1d620:	4630      	mov	r0, r6
   1d622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1d626:	f04f 0320 	mov.w	r3, #32
   1d62a:	f3ef 8911 	mrs	r9, BASEPRI
   1d62e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d632:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1d636:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1d63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d63e:	3b01      	subs	r3, #1
   1d640:	2b07      	cmp	r3, #7
   1d642:	d80f      	bhi.n	1d664 <register_events+0x5a>
   1d644:	e8df f003 	tbb	[pc, r3]
   1d648:	0a0e041e 	.word	0x0a0e041e
   1d64c:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1d650:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d654:	689b      	ldr	r3, [r3, #8]
   1d656:	b12b      	cbz	r3, 1d664 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1d658:	2302      	movs	r3, #2
   1d65a:	e020      	b.n	1d69e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1d65c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d660:	681b      	ldr	r3, [r3, #0]
   1d662:	bb8b      	cbnz	r3, 1d6c8 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1d664:	bb47      	cbnz	r7, 1d6b8 <register_events+0xae>
   1d666:	7823      	ldrb	r3, [r4, #0]
   1d668:	b333      	cbz	r3, 1d6b8 <register_events+0xae>
	switch (event->type) {
   1d66a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1d66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d672:	3b01      	subs	r3, #1
   1d674:	2b07      	cmp	r3, #7
   1d676:	d830      	bhi.n	1d6da <register_events+0xd0>
   1d678:	e8df f003 	tbb	[pc, r3]
   1d67c:	282f2833 	.word	0x282f2833
   1d680:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1d684:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d688:	689b      	ldr	r3, [r3, #8]
   1d68a:	2b00      	cmp	r3, #0
   1d68c:	d0ea      	beq.n	1d664 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1d68e:	2301      	movs	r3, #1
   1d690:	e005      	b.n	1d69e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1d692:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d696:	6a1b      	ldr	r3, [r3, #32]
   1d698:	2b00      	cmp	r3, #0
   1d69a:	d0e3      	beq.n	1d664 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1d69c:	2310      	movs	r3, #16
	event->state |= state;
   1d69e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1d6a2:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1d6a6:	f3c2 3186 	ubfx	r1, r2, #14, #7
   1d6aa:	430b      	orrs	r3, r1
   1d6ac:	f363 3294 	bfi	r2, r3, #14, #7
   1d6b0:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1d6b4:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1d6b8:	f389 8811 	msr	BASEPRI, r9
   1d6bc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1d6c0:	3501      	adds	r5, #1
   1d6c2:	f10a 0a14 	add.w	sl, sl, #20
   1d6c6:	e7a9      	b.n	1d61c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1d6c8:	2304      	movs	r3, #4
   1d6ca:	e7e8      	b.n	1d69e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1d6cc:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d6d0:	4622      	mov	r2, r4
   1d6d2:	4651      	mov	r1, sl
   1d6d4:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1d6d6:	f7ff ff67 	bl	1d5a8 <add_event>
	event->poller = poller;
   1d6da:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1d6de:	3601      	adds	r6, #1
   1d6e0:	e7ea      	b.n	1d6b8 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1d6e2:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d6e6:	4622      	mov	r2, r4
   1d6e8:	4651      	mov	r1, sl
   1d6ea:	e7f4      	b.n	1d6d6 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1d6ec:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d6f0:	4622      	mov	r2, r4
   1d6f2:	4651      	mov	r1, sl
   1d6f4:	3024      	adds	r0, #36	; 0x24
   1d6f6:	e7ee      	b.n	1d6d6 <register_events+0xcc>

0001d6f8 <signal_poll_event>:
{
   1d6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1d6fc:	6884      	ldr	r4, [r0, #8]
{
   1d6fe:	4605      	mov	r5, r0
   1d700:	460e      	mov	r6, r1
	if (poller != NULL) {
   1d702:	b144      	cbz	r4, 1d716 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1d704:	7863      	ldrb	r3, [r4, #1]
   1d706:	2b01      	cmp	r3, #1
   1d708:	d12e      	bne.n	1d768 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   1d70a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d70e:	f013 0302 	ands.w	r3, r3, #2
   1d712:	d10a      	bne.n	1d72a <signal_poll_event+0x32>
		poller->is_polling = false;
   1d714:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1d716:	68eb      	ldr	r3, [r5, #12]
   1d718:	f3c3 3286 	ubfx	r2, r3, #14, #7
   1d71c:	4316      	orrs	r6, r2
	event->poller = NULL;
   1d71e:	2000      	movs	r0, #0
	event->state |= state;
   1d720:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   1d724:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1d726:	60eb      	str	r3, [r5, #12]
	return retcode;
   1d728:	e03e      	b.n	1d7a8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   1d72a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1d72e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d732:	bf08      	it	eq
   1d734:	f112 0f02 	cmneq.w	r2, #2
   1d738:	d032      	beq.n	1d7a0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d73a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1d73e:	4640      	mov	r0, r8
   1d740:	f7ff fe60 	bl	1d404 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1d744:	2e08      	cmp	r6, #8
   1d746:	bf0c      	ite	eq
   1d748:	f06f 0303 	mvneq.w	r3, #3
   1d74c:	2300      	movne	r3, #0
   1d74e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d750:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d754:	06db      	lsls	r3, r3, #27
   1d756:	d109      	bne.n	1d76c <signal_poll_event+0x74>
   1d758:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1d75c:	b937      	cbnz	r7, 1d76c <signal_poll_event+0x74>
	z_ready_thread(thread);
   1d75e:	4640      	mov	r0, r8
   1d760:	f7ff fdec 	bl	1d33c <z_ready_thread>
		poller->is_polling = false;
   1d764:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1d766:	e7d6      	b.n	1d716 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1d768:	2b02      	cmp	r3, #2
   1d76a:	d001      	beq.n	1d770 <signal_poll_event+0x78>
		poller->is_polling = false;
   1d76c:	2300      	movs	r3, #0
   1d76e:	e7d1      	b.n	1d714 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1d770:	7823      	ldrb	r3, [r4, #0]
   1d772:	2b00      	cmp	r3, #0
   1d774:	d0cf      	beq.n	1d716 <signal_poll_event+0x1e>
   1d776:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1d77a:	2f00      	cmp	r7, #0
   1d77c:	d0f2      	beq.n	1d764 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1d77e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1d782:	f1a4 0914 	sub.w	r9, r4, #20
   1d786:	f104 0014 	add.w	r0, r4, #20
   1d78a:	f7ff fe9c 	bl	1d4c6 <z_abort_timeout>
		twork->poll_result = 0;
   1d78e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   1d792:	4649      	mov	r1, r9
   1d794:	4638      	mov	r0, r7
   1d796:	f7ff fd10 	bl	1d1ba <z_work_submit_to_queue>
		poller->is_polling = false;
   1d79a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1d79e:	e7ba      	b.n	1d716 <signal_poll_event+0x1e>
		poller->is_polling = false;
   1d7a0:	2300      	movs	r3, #0
   1d7a2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1d7a4:	f06f 000a 	mvn.w	r0, #10
}
   1d7a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d7ac <clear_event_registrations>:
	while (num_events--) {
   1d7ac:	2314      	movs	r3, #20
{
   1d7ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7b0:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1d7b4:	2400      	movs	r4, #0
	switch (event->type) {
   1d7b6:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   1d7ba:	b901      	cbnz	r1, 1d7be <clear_event_registrations+0x12>
}
   1d7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1d7be:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1d7c2:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1d7c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1d7ca:	2b08      	cmp	r3, #8
   1d7cc:	f1a0 0714 	sub.w	r7, r0, #20
   1d7d0:	d80c      	bhi.n	1d7ec <clear_event_registrations+0x40>
   1d7d2:	fa26 f303 	lsr.w	r3, r6, r3
   1d7d6:	07db      	lsls	r3, r3, #31
   1d7d8:	d508      	bpl.n	1d7ec <clear_event_registrations+0x40>
	return node->next != NULL;
   1d7da:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d7de:	b12b      	cbz	r3, 1d7ec <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1d7e0:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1d7e4:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1d7e6:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1d7e8:	e940 4405 	strd	r4, r4, [r0, #-20]
   1d7ec:	f382 8811 	msr	BASEPRI, r2
   1d7f0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d7f4:	f04f 0320 	mov.w	r3, #32
   1d7f8:	f3ef 8211 	mrs	r2, BASEPRI
   1d7fc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d800:	f3bf 8f6f 	isb	sy
   1d804:	3901      	subs	r1, #1
   1d806:	4638      	mov	r0, r7
   1d808:	e7d7      	b.n	1d7ba <clear_event_registrations+0xe>

0001d80a <k_poll_event_init>:
{
   1d80a:	b510      	push	{r4, lr}
	event->type = type;
   1d80c:	0552      	lsls	r2, r2, #21
   1d80e:	0209      	lsls	r1, r1, #8
   1d810:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   1d814:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   1d818:	430a      	orrs	r2, r1
   1d81a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1d81c:	2400      	movs	r4, #0
	event->type = type;
   1d81e:	430a      	orrs	r2, r1
	event->obj = obj;
   1d820:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1d824:	6084      	str	r4, [r0, #8]
}
   1d826:	bd10      	pop	{r4, pc}

0001d828 <z_handle_obj_poll_events>:
{
   1d828:	4603      	mov	r3, r0
	return list->head == list;
   1d82a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d82c:	4283      	cmp	r3, r0
   1d82e:	d008      	beq.n	1d842 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1d830:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d834:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d836:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d838:	2300      	movs	r3, #0
	node->prev = NULL;
   1d83a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d83e:	f7ff bf5b 	b.w	1d6f8 <signal_poll_event>
}
   1d842:	4770      	bx	lr

0001d844 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   1d844:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1d846:	e9c0 0000 	strd	r0, r0, [r0]
   1d84a:	6083      	str	r3, [r0, #8]
}
   1d84c:	4770      	bx	lr

0001d84e <k_free>:
	if (ptr != NULL) {
   1d84e:	b120      	cbz	r0, 1d85a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1d850:	1f01      	subs	r1, r0, #4
   1d852:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1d856:	f7ff bae0 	b.w	1ce1a <k_heap_free>
}
   1d85a:	4770      	bx	lr
